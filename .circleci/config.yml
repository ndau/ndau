version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: 578681496768.dkr.ecr.us-east-1.amazonaws.com/circle-ci:0.0.7
    environment:
      shell: /bin/bash
      # Used for ECR
      AWS_DEFAULT_REGION: us-east-1
      # ECR's
      ECR_ENDPOINT: 578681496768.dkr.ecr.us-east-1.amazonaws.com
      # Bump these versions, and commit to master to upload a new version to ECR
      NOMS_CONTAINER_VERSION: 0.0.1
      STARTING_PORT: "30050"
      ELB_SUBDOMAIN: api.ndau.tech # nodes will be accessible from mario.api.ndau.tech
      # These node names are removed first before new ones are installed.
      # If these names change, the old names will have to be removed manually.
      NODE_NAMES: "devnet-0 devnet-1"
      RELEASE_NAME: "devnet"
      # Number of nodes to deploy
      NODE_NUM: "2"
      KUBECONFIG: /root/kubeconfig
    steps:
      - add_ssh_keys:
          fingerprints:
            - "97:67:2b:f6:0c:ea:af:56:dd:04:1d:c1:28:54:ba:37"
      - run:
          name: Transfer environment variables to files
          command: |
            # install helm certs
            mkdir -p /root/.helm
            echo -e "$helm_ca_pem" > /root/.helm/ca.pem
            echo -e "$helm_cert_pem" > /root/.helm/cert.pem
            echo -e "$helm_key_pem" > /root/.helm/key.pem

            # install kube config certs from environment variables
            echo -e "$kube_config" > /root/kubeconfig
      - run:
          name: Checkout code
          command: |
            # depth=1 makes the clone a lot faster
            git clone $CIRCLE_REPOSITORY_URL -b $CIRCLE_BRANCH /app --depth=1
            echo -e "$gomu" > /app/github_chaos_deploy
      - run:
          name: Save computed environment variables
          command: |
            cd /app
            echo "export VERSION=$(git describe --long --tags)" >> $BASH_ENV
            echo "export SHA=$(git rev-parse --short $CIRCLE_SHA1)" >> $BASH_ENV
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: AWS ECR Login
          command: eval $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})
      - run:
          name: Build and push Tendermint
          command: |
            # Only run on master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # grab TM version from Docker file
              git clone git@github.com:oneiro-ndev/chaos.git /root/chaos

              TM_CONTAINER_VERSION=$(grep -e 'TM_VERSION_TAG' /root/chaos/tm-docker/Dockerfile -m 1 | cut -f3 -d ' ')
              version_check=$(aws ecr describe-images --repository-name tendermint | jq ".imageDetails[].imageTags[]? | select (. == \"${TM_CONTAINER_VERSION}\")")
              # only push if we have a different version.
              if [ ! -z "$version_check" ]; then
                echo "Tendermint container version ${TM_CONTAINER_VERSION} already exists. Will not push." >&2
              else
                docker build -t "${ECR_ENDPOINT}/tendermint:${TM_CONTAINER_VERSION}" /root/chaos/tm-docker
                docker push "${ECR_ENDPOINT}/tendermint:${TM_CONTAINER_VERSION}"
                echo "Pushed Tendermint container version ${TM_CONTAINER_VERSION}." >&2
              fi
            fi
      - run:
          name: Build and push Noms
          command: |
            # Only run on master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              version_check=$(aws ecr describe-images --repository-name noms | jq ".imageDetails[].imageTags[]? | select (. == \"${NOMS_CONTAINER_VERSION}\")")
              # only push if we have a different version.
              if [ ! -z "$version_check" ]; then
                echo "Noms container version ${NOMS_CONTAINER_VERSION} already exists. Will not push." >&2
              else
                docker build -t "${ECR_ENDPOINT}/noms:${NOMS_CONTAINER_VERSION}" /root/chaos/noms-docker
                docker push "${ECR_ENDPOINT}/noms:${NOMS_CONTAINER_VERSION}"
                echo "Pushed Noms container version ${NOMS_CONTAINER_VERSION}." >&2
              fi
            fi
      - run:
          name: Redeploy nodegroup testnet
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # get current container versions
              TM_CONTAINER_VERSION=$(grep -e 'TM_VERSION_TAG' /root/chaos/tm-docker/Dockerfile -m 1 | cut -f3 -d ' ')
              NDAU_CONTAINER_VERSION=$(git rev-parse --short "$CIRCLE_SHA1")
              CHAOS_CONTAINER_VERSION=$(git rev-parse --short `git ls-remote git@github.com:oneiro-ndev/chaos.git master | cut -f1`)

              # Clone the automation repo master branch
              git clone git@github.com:oneiro-ndev/automation.git -b jsg-pre-s3 /root/automation

              # Remove old test net
              KUBECONFIG=/root/kubeconfig \
                helm del --purge $NODE_NAMES --tls ||\
                  echo "Releases: $NODE_NAMES could not be deleted" >&2

              cd /root/automation/testnet

              # create new multinode test net
              KUBECONFIG=/root/kubeconfig \
              CHAOS_NOMS_TAG=$NOMS_CONTAINER_VERSION \
              CHAOS_TM_TAG=$TM_CONTAINER_VERSION \
              CHAOSNODE_TAG=$CHAOS_CONTAINER_VERSION \
              NDAU_NOMS_TAG=$NOMS_CONTAINER_VERSION \
              NDAU_TM_TAG=$TM_CONTAINER_VERSION \
              NDAUNODE_TAG=$NDAU_CONTAINER_VERSION \
              RELEASE=$RELEASE_NAME ELB_SUBDOMAIN=$ELB_SUBDOMAIN \
                ./gen_node_groups.py $NODE_NUM $STARTING_PORT

            fi
      - run:
          name: Run integration tests
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # get address and port of devnet0 RPC
              NODE_IP_ADDRESS=$(kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}' | cut -d " " -f1)
              NODE_PORT0=$(kubectl get service --namespace default -o jsonpath='{.spec.ports[?(@.name=="rpc")].nodePort}' devnet-0-nodegroup-ndau-tendermint-service)
              # get address and port of devnet1 RPC
              NODE_PORT1=$(kubectl get service --namespace default -o jsonpath='{.spec.ports[?(@.name=="rpc")].nodePort}' devnet-1-nodegroup-ndau-tendermint-service)
              echo $NODE_IP_ADDRESS:$NODE_PORT0
              # loop and curl until devnet0 RPC is up and running, or 50 times
              for i in {1..50}; do  if curl -v http://$NODE_IP_ADDRESS:$NODE_PORT0/status --connect-timeout 5; then break; fi; echo $i; if [ "$i" == "50" ]; then exit 1; fi; sleep 5; done
              # loop and curl until devnet1 RPC is up and running, or 50 times
              for i in {1..50}; do  if curl -v http://$NODE_IP_ADDRESS:$NODE_PORT1/status --connect-timeout 5; then break; fi; echo $i; if [ "$i" == "50" ]; then exit 1; fi; sleep 5; done
              mkdir -p $GOPATH/src/github.com/oneiro-ndev
              cd $GOPATH/src/github.com/oneiro-ndev
              echo -e "$gomu" > ~/.ssh/id_rsa
              chmod 600 ~/.ssh/id_rsa
              git clone git@github.com:oneiro-ndev/chaos-integration-tests.git -b jsg-unified-nodes-update
              cd chaos-integration-tests
              pipenv sync
              pipenv run pytest -v --run_kub src/meta_test_ndau.py src/single_validator_test_ndau.py
            fi

