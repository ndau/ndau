package routes

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/oneiro-ndev/ndau/pkg/ndauapi/cfg"
	"github.com/oneiro-ndev/ndau/pkg/ndauapi/reqres"
	"github.com/oneiro-ndev/ndau/pkg/ndauapi/ws"
	"github.com/oneiro-ndev/ndau/pkg/tool"
)

// VersionResult is returned from the /version request; it retrieves
// information from both the ndau and chaos chains
type VersionResult struct {
	ChaosVersion string
	ChaosSha     string
	NdauVersion  string
	NdauSha      string
	Network      string
}

// HandleVersion is an http handler for version info
func HandleVersion(cf cfg.Cfg) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// first find a node to talk to
		node, err := ws.Node(cf.NodeAddress)
		if err != nil {
			reqres.RespondJSON(w, reqres.NewFromErr("error retrieving node", err, http.StatusInternalServerError))
			return
		}

		version, _, err := tool.Version(node)

		// chnode, err := ws.Node(cf.ChaosAddress)

		if err != nil {
			reqres.RespondJSON(w, reqres.NewFromErr("error retrieving version info", err, http.StatusInternalServerError))
			return
		}

		result := VersionResult{
			NdauVersion: version,
			Network:     "notwork",
		}

		// our default version format is generated by "git describe --long --tags"
		// which looks like "v0.7.8-23-g7c8eac5", where the 3 parts separated by dashes
		// are the version tag, the number of commits since then, and the current commit hash.
		// we don't care about the number of commits.
		// If the format doesn't match that, we will just return the version string unmodified.
		spv := strings.Split(version, "-")
		fmt.Println(spv, len(spv))
		if len(spv) == 3 {
			result.NdauVersion = spv[0]
			result.NdauSha = spv[2]
		}

		reqres.RespondJSON(w, reqres.Response{Bd: result, Sts: http.StatusOK})
	}
}
