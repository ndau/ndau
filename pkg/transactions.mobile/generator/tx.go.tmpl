package mobile

import (
	"encoding/base64"

	"github.com/oneiro-ndev/metanode/pkg/meta/transaction"
	"github.com/oneiro-ndev/ndau/pkg/ndau"
	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/b32"
	"github.com/oneiro-ndev/ndaumath/pkg/keyaddr"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	math "github.com/oneiro-ndev/ndaumath/pkg/types"
	"github.com/pkg/errors"
)

// This package provides an interface to the Ndau {{.Name | Lower}} transaction
// for use in React and in particular react-native.
//
// It is built using the gomobile tool, so the API is constrained to particular
// types of parameters:
//
// * string
// * signed integer and floating point types
// * []byte
// * functions with specific restrictions
// * structs and interfaces consisting of only these types
//
// Unfortunately, react-native puts additional requirements that makes `[]byte`
// particularly challenging to use. To the degree possible, we take advantage
// of types' `(Un)MarshalText` implementations to generate and parse strings.
// Where that's impossible, we use the standard base64 encoding of the binary
// representation of the type.
//
// This package, therefore, consists mainly of wrappers so that we don't have
// to modify our idiomatic Go code to conform to these requirements.

// {{.Comment}}
type {{.Name}} struct {
	tx ndau.{{.Name}}
}

// New{{.Name}} constructs a new unsigned {{.Name}} transaction
func New{{.Name}}({{range .Fields}}{{if not .ConstructorExcluded}}
	{{.Name | Lower}} {{.MobileType}},{{end}}{{end}}
) (*{{.Name}}, error) {
	{{range .Fields -}}
	{{- if .MobileType | IsPointer -}}
	if {{.Name | Lower}} == nil {
		return nil, errors.New("{{.Name | Lower}} must not be nil")
	}
	{{end}}
	{{- if .FallibleNativeConversion -}}
	{{.NameNative}}{{.AssignmentStmt}}{{.ConvertToNative}}
	{{.AssignmentErrHandler}}
	{{end}}
	{{- end}}
	return &{{.Name}}{
		tx: ndau.{{.Name}}{
			{{range .Fields}}{{if not .ConstructorExcluded}}
			{{.Name}}: {{if .FallibleNativeConversion}}{{.NameNative}}{{else}}{{.ConvertToNative}}{{end}},
			{{- end}}{{end}}
		},
	}, nil
}

// Parse{{.Name}} parses a string into a {{.Name}}, if possible
func Parse{{.Name}}(s string) (*{{.Name}}, error) {
	bytes, err := base64.StdEncoding.DecodeString(s)
	if err != nil {
		return nil, errors.Wrap(err, "Parse{{.Name}}: b64-decode")
	}
	tx, err := metatx.Unmarshal(bytes, ndau.TxIDs)
	if err != nil {
		return nil, errors.Wrap(err, "Parse{{.Name}}: unmarshal")
	}
	trp, isTr := tx.(*ndau.{{.Name}})
	if !isTr {
		return nil, errors.New("Parse{{.Name}}: transactable was not {{.Name}}")
	}

	return &{{.Name}}{tx: *trp}, nil
}

// ToString produces the b64 encoding of the bytes of the transaction
func (tx *{{.Name}}) ToString() (string, error) {
	if tx == nil {
		return "", errors.New("nil {{.Name | Lower}}")
	}
	bytes, err := metatx.Marshal(&tx.tx, ndau.TxIDs)
	if err != nil {
		return "", errors.Wrap(err, "{{.Name | Lower}}: marshalling bytes")
	}
	return base64.StdEncoding.EncodeToString(bytes), nil
}

{{range  $field := .Fields}}
{{if .IsSlice -}}
// GetNum{{$field.Name}} gets the number of {{$field.Name | Lower}} of the {{$.Name}}
//
// If tx == nil, returns -1
func (tx *{{$.Name}}) GetNum{{.Name}}() int {
	if tx == nil {
		return -1
	}
	return len(tx.tx.{{.Name}})
}

// Get{{$field.Name | Singular}} gets a particular {{ $field.Name | Lower | Singular}} from this {{$.Name}}
func (tx *{{$.Name}}) Get{{.Name | Singular}}(idx int) ({{.MobileType | Unslice}}, error) {
	if tx == nil {
		return {{.MobileType | Unslice | Zero}}, errors.New("nil {{$.Name | Lower}}")
	}
	if idx < 0 || idx >= len(tx.tx.{{.Name}}) {
		return {{.MobileType | Unslice | Zero}}, errors.New("invalid index")
	}
	bytes, err := tx.tx.{{.Name}}[idx].Marshal()
	if err != nil {
		return {{.MobileType | Unslice | Zero}}, errors.Wrap(err, "marshalling signature")
	}

	return base64.StdEncoding.EncodeToString(bytes), nil
}
{{else}}
// Get{{$field.Name}} gets the {{$field.Name | Lower}} of the {{$.Name}}
func (tx *{{$.Name}}) Get{{$field.Name}}() {{if not (.MobileType | IsPointer)}}*{{end}}{{ .MobileType }} {
	if tx == nil {
		return nil
	}
	{{.Name | Lower}} := {{.ConvertToMobile}}
	return &{{.Name | Lower}}
}
{{- end}}
{{- end}}

// SignableBytes returns the b64 encoding of the signable bytes of this {{.Name | Lower}}
func (tx *{{.Name}}) SignableBytes() (string, error) {
	if tx == nil {
		return "", errors.New("nil {{.Name | Lower}}")
	}
	return base64.StdEncoding.EncodeToString(tx.tx.SignableBytes()), nil
}

// AppendSignature appends a signature to this {{.Name | Lower}}
func (tx *{{.Name}}) AppendSignature(sig *keyaddr.Signature) error {
	if sig == nil {
		return errors.New("sig must not be nil")
	}
	sigB, err := b32.Decode(sig.Signature)
	if err != nil {
		return errors.Wrap(err, "decoding signature bytes")
	}
	sigS := new(signature.Signature)
	err = sigS.Unmarshal(sigB)
	if err != nil {
		return errors.Wrap(err, "unmarshalling signature")
	}
	tx.tx.Signatures = append(tx.tx.Signatures, *sigS)
	return nil
}

// Hash computes the hash of this {{.Name | Lower}}
func (tx *{{.Name}}) Hash() string {
	if tx == nil {
		return ""
	}
	return metatx.Hash(&tx.tx)
}

// Name returns the name of this transactable
func (tx *{{.Name}}) Name() string {
	if tx == nil {
		return ""
	}
	return "{{.Name}}"
}

// TxID returns the transaction id of this transactable
func (tx *{{.Name}}) TxID() int {
	if tx == nil {
		return 0
	}
	id, err := metatx.TxIDOf(&tx.tx, ndau.TxIDs)
	if err != nil {
		return -1
	}
	return int(id)
}
