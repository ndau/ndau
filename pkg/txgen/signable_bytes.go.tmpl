package ndau

import (
	"encoding/binary"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
)

func intbytes(i uint64) []byte {
	ib := make([]byte, 8)
	binary.BigEndian.PutUint64(ib, i)
	return ib
}

{{range .Transactions -}}
// SignableBytes partially implements metatx.Transactable for {{.Name}}
func (tx *{{.Name}}) SignableBytes() []byte {
	blen := 0{{range .Fields}}+{{.Length}}{{end}}
	bytes := make([]byte, 0, blen)

    {{range .Fields -}}
    {{if .IsSlice -}}
    for _, v := range tx.{{.Name}} {
        bytes = append(bytes, {{.Bytes}}...)
    }
    {{else -}}
    bytes = append(bytes, {{.Bytes}}...)
    {{end}}
    {{- end}}

	return bytes
}

{{end}}
