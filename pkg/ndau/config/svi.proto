syntax="proto3";
// SVI means System Variable Indirect
package config;


// NamespacedKey contains a namespace and key which together uniquely identify
// a value on the chaos chain.
message SVINamespacedKey {
    bytes namespace = 1;
    bytes key = 2;
}

// SVIDeferredChange is used to plan a coordinated update as of a specific block.
//
// It contains the current value, the future value, and the block on which
// to perform the update. `future` must be used _on and after_ block
// `update_block`.
message SVIDeferredChange {
    SVINamespacedKey current = 1;
    SVINamespacedKey future = 2;
    uint64 update_block = 3;
}

// SVIIndirectValue allows either simple values or deferred changes to be used as
// values in the indirection map.
message SVIIndirectValue {
    oneof value {
        SVINamespacedKey simple = 1;
        SVIDeferredChange deferred = 2;
    }
}

// SVIMap is a map of string keys to either simple or deferred namespaced keys.
//
// The purpose is to allow arbitrary indirection of system variables. Every
// system variable must have a unique name, and it must exist somewhere
// within the chaos chain, but there is only one critical namespaced key
// which must be configured and coordinated between all nodes: the location
// of this map. For everything else, nodes simply load this map and pick the
// appropriate string key. If the value is a simple value, it directly
// indicates the location from which to load the variable's value. If the value
// is a deferred value, by comparing the current block number to the update
// block indicated in the deferred change message, the correct namespaced key
// can be picked. From there, one more lookup to the chain produces the
// desired system variable value.
//
// Why have such a complex system? It allows for permission changes: as
// circumstances change and the system grows, values which once required
// unanimous BPC consent may be reduced to requiring 6/9 of them; values which
// were previously allowed to be defined by any individual BPC member may be
// switched to populist SystemVariables, etc. Naturally, any of these changes
// may also be applied in reverse.
message SVIMap {
    map<string, SVIIndirectValue> map = 1;
}