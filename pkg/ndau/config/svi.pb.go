// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svi.proto

/*
	Package config is a generated protocol buffer package.

	SVI means System Variable Indirect

	It is generated from these files:
		svi.proto

	It has these top-level messages:
		SVINamespacedKey
		SVIDeferredChange
		SVIIndirectValue
		SVIMap
*/
package config

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// NamespacedKey contains a namespace and key which together uniquely identify
// a value on the chaos chain.
type SVINamespacedKey struct {
	Namespace []byte `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Key       []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *SVINamespacedKey) Reset()                    { *m = SVINamespacedKey{} }
func (*SVINamespacedKey) ProtoMessage()               {}
func (*SVINamespacedKey) Descriptor() ([]byte, []int) { return fileDescriptorSvi, []int{0} }

func (m *SVINamespacedKey) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *SVINamespacedKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

// SVIDeferredChange is used to plan a coordinated update as of a specific block.
//
// It contains the current value, the future value, and the block on which
// to perform the update. `future` must be used _on and after_ block
// `update_block`.
type SVIDeferredChange struct {
	Current     *SVINamespacedKey `protobuf:"bytes,1,opt,name=current" json:"current,omitempty"`
	Future      *SVINamespacedKey `protobuf:"bytes,2,opt,name=future" json:"future,omitempty"`
	UpdateBlock uint64            `protobuf:"varint,3,opt,name=update_block,json=updateBlock,proto3" json:"update_block,omitempty"`
}

func (m *SVIDeferredChange) Reset()                    { *m = SVIDeferredChange{} }
func (*SVIDeferredChange) ProtoMessage()               {}
func (*SVIDeferredChange) Descriptor() ([]byte, []int) { return fileDescriptorSvi, []int{1} }

func (m *SVIDeferredChange) GetCurrent() *SVINamespacedKey {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *SVIDeferredChange) GetFuture() *SVINamespacedKey {
	if m != nil {
		return m.Future
	}
	return nil
}

func (m *SVIDeferredChange) GetUpdateBlock() uint64 {
	if m != nil {
		return m.UpdateBlock
	}
	return 0
}

// SVIIndirectValue allows either simple values or deferred changes to be used as
// values in the indirection map.
type SVIIndirectValue struct {
	// Types that are valid to be assigned to Value:
	//	*SVIIndirectValue_Simple
	//	*SVIIndirectValue_Deferred
	Value isSVIIndirectValue_Value `protobuf_oneof:"value"`
}

func (m *SVIIndirectValue) Reset()                    { *m = SVIIndirectValue{} }
func (*SVIIndirectValue) ProtoMessage()               {}
func (*SVIIndirectValue) Descriptor() ([]byte, []int) { return fileDescriptorSvi, []int{2} }

type isSVIIndirectValue_Value interface {
	isSVIIndirectValue_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SVIIndirectValue_Simple struct {
	Simple *SVINamespacedKey `protobuf:"bytes,1,opt,name=simple,oneof"`
}
type SVIIndirectValue_Deferred struct {
	Deferred *SVIDeferredChange `protobuf:"bytes,2,opt,name=deferred,oneof"`
}

func (*SVIIndirectValue_Simple) isSVIIndirectValue_Value()   {}
func (*SVIIndirectValue_Deferred) isSVIIndirectValue_Value() {}

func (m *SVIIndirectValue) GetValue() isSVIIndirectValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SVIIndirectValue) GetSimple() *SVINamespacedKey {
	if x, ok := m.GetValue().(*SVIIndirectValue_Simple); ok {
		return x.Simple
	}
	return nil
}

func (m *SVIIndirectValue) GetDeferred() *SVIDeferredChange {
	if x, ok := m.GetValue().(*SVIIndirectValue_Deferred); ok {
		return x.Deferred
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SVIIndirectValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SVIIndirectValue_OneofMarshaler, _SVIIndirectValue_OneofUnmarshaler, _SVIIndirectValue_OneofSizer, []interface{}{
		(*SVIIndirectValue_Simple)(nil),
		(*SVIIndirectValue_Deferred)(nil),
	}
}

func _SVIIndirectValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SVIIndirectValue)
	// value
	switch x := m.Value.(type) {
	case *SVIIndirectValue_Simple:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Simple); err != nil {
			return err
		}
	case *SVIIndirectValue_Deferred:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Deferred); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SVIIndirectValue.Value has unexpected type %T", x)
	}
	return nil
}

func _SVIIndirectValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SVIIndirectValue)
	switch tag {
	case 1: // value.simple
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SVINamespacedKey)
		err := b.DecodeMessage(msg)
		m.Value = &SVIIndirectValue_Simple{msg}
		return true, err
	case 2: // value.deferred
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SVIDeferredChange)
		err := b.DecodeMessage(msg)
		m.Value = &SVIIndirectValue_Deferred{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SVIIndirectValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SVIIndirectValue)
	// value
	switch x := m.Value.(type) {
	case *SVIIndirectValue_Simple:
		s := proto.Size(x.Simple)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SVIIndirectValue_Deferred:
		s := proto.Size(x.Deferred)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SVIMap is a map of string keys to either simple or deferred namespaced keys.
//
// The purpose is to allow arbitrary indirection of system variables. Every
// system variable must have a unique name, and it must exist somewhere
// within the chaos chain, but there is only one critical namespaced key
// which must be configured and coordinated between all nodes: the location
// of this map. For everything else, nodes simply load this map and pick the
// appropriate string key. If the value is a simple value, it directly
// indicates the location from which to load the variable's value. If the value
// is a deferred value, by comparing the current block number to the update
// block indicated in the deferred change message, the correct namespaced key
// can be picked. From there, one more lookup to the chain produces the
// desired system variable value.
//
// Why have such a complex system? It allows for permission changes: as
// circumstances change and the system grows, values which once required
// unanimous BPC consent may be reduced to requiring 6/9 of them; values which
// were previously allowed to be defined by any individual BPC member may be
// switched to populist SystemVariables, etc. Naturally, any of these changes
// may also be applied in reverse.
type SVIMap struct {
	Map map[string]*SVIIndirectValue `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SVIMap) Reset()                    { *m = SVIMap{} }
func (*SVIMap) ProtoMessage()               {}
func (*SVIMap) Descriptor() ([]byte, []int) { return fileDescriptorSvi, []int{3} }

func (m *SVIMap) GetMap() map[string]*SVIIndirectValue {
	if m != nil {
		return m.Map
	}
	return nil
}

func init() {
	proto.RegisterType((*SVINamespacedKey)(nil), "config.SVINamespacedKey")
	proto.RegisterType((*SVIDeferredChange)(nil), "config.SVIDeferredChange")
	proto.RegisterType((*SVIIndirectValue)(nil), "config.SVIIndirectValue")
	proto.RegisterType((*SVIMap)(nil), "config.SVIMap")
}
func (this *SVINamespacedKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SVINamespacedKey)
	if !ok {
		that2, ok := that.(SVINamespacedKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Namespace, that1.Namespace) {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *SVIDeferredChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SVIDeferredChange)
	if !ok {
		that2, ok := that.(SVIDeferredChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Current.Equal(that1.Current) {
		return false
	}
	if !this.Future.Equal(that1.Future) {
		return false
	}
	if this.UpdateBlock != that1.UpdateBlock {
		return false
	}
	return true
}
func (this *SVIIndirectValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SVIIndirectValue)
	if !ok {
		that2, ok := that.(SVIIndirectValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *SVIIndirectValue_Simple) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SVIIndirectValue_Simple)
	if !ok {
		that2, ok := that.(SVIIndirectValue_Simple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Simple.Equal(that1.Simple) {
		return false
	}
	return true
}
func (this *SVIIndirectValue_Deferred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SVIIndirectValue_Deferred)
	if !ok {
		that2, ok := that.(SVIIndirectValue_Deferred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Deferred.Equal(that1.Deferred) {
		return false
	}
	return true
}
func (this *SVIMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SVIMap)
	if !ok {
		that2, ok := that.(SVIMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Map) != len(that1.Map) {
		return false
	}
	for i := range this.Map {
		if !this.Map[i].Equal(that1.Map[i]) {
			return false
		}
	}
	return true
}
func (this *SVINamespacedKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&config.SVINamespacedKey{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SVIDeferredChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&config.SVIDeferredChange{")
	if this.Current != nil {
		s = append(s, "Current: "+fmt.Sprintf("%#v", this.Current)+",\n")
	}
	if this.Future != nil {
		s = append(s, "Future: "+fmt.Sprintf("%#v", this.Future)+",\n")
	}
	s = append(s, "UpdateBlock: "+fmt.Sprintf("%#v", this.UpdateBlock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SVIIndirectValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&config.SVIIndirectValue{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SVIIndirectValue_Simple) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&config.SVIIndirectValue_Simple{` +
		`Simple:` + fmt.Sprintf("%#v", this.Simple) + `}`}, ", ")
	return s
}
func (this *SVIIndirectValue_Deferred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&config.SVIIndirectValue_Deferred{` +
		`Deferred:` + fmt.Sprintf("%#v", this.Deferred) + `}`}, ", ")
	return s
}
func (this *SVIMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&config.SVIMap{")
	keysForMap := make([]string, 0, len(this.Map))
	for k, _ := range this.Map {
		keysForMap = append(keysForMap, k)
	}
	sortkeys.Strings(keysForMap)
	mapStringForMap := "map[string]*SVIIndirectValue{"
	for _, k := range keysForMap {
		mapStringForMap += fmt.Sprintf("%#v: %#v,", k, this.Map[k])
	}
	mapStringForMap += "}"
	if this.Map != nil {
		s = append(s, "Map: "+mapStringForMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SVINamespacedKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVINamespacedKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvi(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *SVIDeferredChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVIDeferredChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Current != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvi(dAtA, i, uint64(m.Current.Size()))
		n1, err := m.Current.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Future != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvi(dAtA, i, uint64(m.Future.Size()))
		n2, err := m.Future.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.UpdateBlock != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSvi(dAtA, i, uint64(m.UpdateBlock))
	}
	return i, nil
}

func (m *SVIIndirectValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVIIndirectValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn3, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *SVIIndirectValue_Simple) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Simple != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvi(dAtA, i, uint64(m.Simple.Size()))
		n4, err := m.Simple.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *SVIIndirectValue_Deferred) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Deferred != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvi(dAtA, i, uint64(m.Deferred.Size()))
		n5, err := m.Deferred.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *SVIMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVIMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, _ := range m.Map {
			dAtA[i] = 0xa
			i++
			v := m.Map[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovSvi(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovSvi(uint64(len(k))) + msgSize
			i = encodeVarintSvi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintSvi(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func encodeVarintSvi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SVINamespacedKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSvi(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSvi(uint64(l))
	}
	return n
}

func (m *SVIDeferredChange) Size() (n int) {
	var l int
	_ = l
	if m.Current != nil {
		l = m.Current.Size()
		n += 1 + l + sovSvi(uint64(l))
	}
	if m.Future != nil {
		l = m.Future.Size()
		n += 1 + l + sovSvi(uint64(l))
	}
	if m.UpdateBlock != 0 {
		n += 1 + sovSvi(uint64(m.UpdateBlock))
	}
	return n
}

func (m *SVIIndirectValue) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *SVIIndirectValue_Simple) Size() (n int) {
	var l int
	_ = l
	if m.Simple != nil {
		l = m.Simple.Size()
		n += 1 + l + sovSvi(uint64(l))
	}
	return n
}
func (m *SVIIndirectValue_Deferred) Size() (n int) {
	var l int
	_ = l
	if m.Deferred != nil {
		l = m.Deferred.Size()
		n += 1 + l + sovSvi(uint64(l))
	}
	return n
}
func (m *SVIMap) Size() (n int) {
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSvi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSvi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSvi(uint64(mapEntrySize))
		}
	}
	return n
}

func sovSvi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvi(x uint64) (n int) {
	return sovSvi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SVINamespacedKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SVINamespacedKey{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SVIDeferredChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SVIDeferredChange{`,
		`Current:` + strings.Replace(fmt.Sprintf("%v", this.Current), "SVINamespacedKey", "SVINamespacedKey", 1) + `,`,
		`Future:` + strings.Replace(fmt.Sprintf("%v", this.Future), "SVINamespacedKey", "SVINamespacedKey", 1) + `,`,
		`UpdateBlock:` + fmt.Sprintf("%v", this.UpdateBlock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SVIIndirectValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SVIIndirectValue{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SVIIndirectValue_Simple) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SVIIndirectValue_Simple{`,
		`Simple:` + strings.Replace(fmt.Sprintf("%v", this.Simple), "SVINamespacedKey", "SVINamespacedKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SVIIndirectValue_Deferred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SVIIndirectValue_Deferred{`,
		`Deferred:` + strings.Replace(fmt.Sprintf("%v", this.Deferred), "SVIDeferredChange", "SVIDeferredChange", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SVIMap) String() string {
	if this == nil {
		return "nil"
	}
	keysForMap := make([]string, 0, len(this.Map))
	for k, _ := range this.Map {
		keysForMap = append(keysForMap, k)
	}
	sortkeys.Strings(keysForMap)
	mapStringForMap := "map[string]*SVIIndirectValue{"
	for _, k := range keysForMap {
		mapStringForMap += fmt.Sprintf("%v: %v,", k, this.Map[k])
	}
	mapStringForMap += "}"
	s := strings.Join([]string{`&SVIMap{`,
		`Map:` + mapStringForMap + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SVINamespacedKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVINamespacedKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVINamespacedKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = append(m.Namespace[:0], dAtA[iNdEx:postIndex]...)
			if m.Namespace == nil {
				m.Namespace = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVIDeferredChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVIDeferredChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVIDeferredChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Current == nil {
				m.Current = &SVINamespacedKey{}
			}
			if err := m.Current.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Future", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Future == nil {
				m.Future = &SVINamespacedKey{}
			}
			if err := m.Future.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateBlock", wireType)
			}
			m.UpdateBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateBlock |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVIIndirectValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVIIndirectValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVIIndirectValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Simple", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SVINamespacedKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &SVIIndirectValue_Simple{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deferred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SVIDeferredChange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &SVIIndirectValue_Deferred{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVIMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVIMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVIMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = make(map[string]*SVIIndirectValue)
			}
			var mapkey string
			var mapvalue *SVIIndirectValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSvi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSvi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSvi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSvi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthSvi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SVIIndirectValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSvi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSvi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Map[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svi.proto", fileDescriptorSvi) }

var fileDescriptorSvi = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x31, 0x4b, 0xfb, 0x40,
	0x18, 0xc6, 0xf3, 0x36, 0xff, 0x7f, 0xda, 0x5e, 0x3b, 0xd4, 0x5b, 0x8c, 0x22, 0x47, 0xcd, 0x54,
	0x41, 0x82, 0xd4, 0x41, 0x71, 0x8c, 0x0a, 0x0d, 0x52, 0x91, 0x14, 0xb2, 0xca, 0x35, 0xb9, 0xd6,
	0xd0, 0x36, 0x39, 0xae, 0x49, 0xa1, 0x9b, 0x8b, 0xe0, 0xe8, 0x07, 0xf0, 0x03, 0xf8, 0x51, 0x1c,
	0x3b, 0x3a, 0xda, 0xb8, 0x38, 0xf6, 0x23, 0x48, 0xd2, 0x44, 0x5b, 0x11, 0xdd, 0x8e, 0x87, 0xdf,
	0xfb, 0xbc, 0xcf, 0xf3, 0x72, 0xa8, 0x3c, 0x9e, 0x78, 0x3a, 0x17, 0x41, 0x18, 0x60, 0xc5, 0x09,
	0xfc, 0x9e, 0xd7, 0xd7, 0x0c, 0x54, 0xeb, 0xd8, 0xe6, 0x25, 0x1d, 0xb1, 0x31, 0xa7, 0x0e, 0x73,
	0x2f, 0xd8, 0x14, 0xef, 0xa0, 0xb2, 0x9f, 0x0b, 0x2a, 0xd4, 0xa1, 0x51, 0xb5, 0xbe, 0x04, 0x5c,
	0x43, 0xf2, 0x80, 0x4d, 0xd5, 0x42, 0xaa, 0x27, 0x4f, 0xed, 0x11, 0xd0, 0x46, 0xc7, 0x36, 0xcf,
	0x58, 0x8f, 0x09, 0xc1, 0xdc, 0xd3, 0x1b, 0xea, 0xf7, 0x19, 0x6e, 0xa2, 0xa2, 0x13, 0x09, 0xc1,
	0xfc, 0x30, 0xf5, 0xa8, 0x34, 0x55, 0x7d, 0xb9, 0x53, 0xff, 0xbe, 0xd0, 0xca, 0x41, 0x7c, 0x80,
	0x94, 0x5e, 0x14, 0x46, 0x82, 0xa5, 0xf6, 0xbf, 0x8d, 0x64, 0x1c, 0xde, 0x45, 0xd5, 0x88, 0xbb,
	0x34, 0x64, 0xd7, 0xdd, 0x61, 0xe0, 0x0c, 0x54, 0xb9, 0x0e, 0x8d, 0x7f, 0x56, 0x65, 0xa9, 0x19,
	0x89, 0xa4, 0xdd, 0x43, 0xda, 0xd1, 0xf4, 0x5d, 0x4f, 0x30, 0x27, 0xb4, 0xe9, 0x30, 0x4a, 0xd2,
	0x29, 0x63, 0x6f, 0xc4, 0x87, 0xec, 0xaf, 0x70, 0x2d, 0xc9, 0xca, 0x48, 0x7c, 0x84, 0x4a, 0x6e,
	0xd6, 0x31, 0xcb, 0xb7, 0xb5, 0x32, 0xb5, 0x5e, 0xbf, 0x25, 0x59, 0x9f, 0xb0, 0x51, 0x44, 0xff,
	0x27, 0xc9, 0x56, 0xed, 0x0e, 0x90, 0xd2, 0xb1, 0xcd, 0x36, 0xe5, 0x78, 0x0f, 0xc9, 0x23, 0xca,
	0x55, 0xa8, 0xcb, 0x8d, 0x4a, 0x73, 0x73, 0xc5, 0xa7, 0x4d, 0xb9, 0xde, 0xa6, 0xfc, 0xdc, 0x0f,
	0xc5, 0xd4, 0x4a, 0x98, 0xed, 0x2b, 0x54, 0xca, 0x85, 0xfc, 0xfa, 0x49, 0xe8, 0x72, 0x7a, 0x7d,
	0xac, 0x67, 0xe6, 0x3f, 0x9c, 0x6c, 0xad, 0xb2, 0xb5, 0xc4, 0x4e, 0x0a, 0xc7, 0x60, 0xec, 0xcf,
	0xe6, 0x44, 0x7a, 0x99, 0x13, 0x69, 0x31, 0x27, 0x70, 0x1b, 0x13, 0x78, 0x8a, 0x09, 0x3c, 0xc7,
	0x04, 0x66, 0x31, 0x81, 0xd7, 0x98, 0xc0, 0x7b, 0x4c, 0xa4, 0x45, 0x4c, 0xe0, 0xe1, 0x8d, 0x48,
	0x5d, 0x25, 0xfd, 0x32, 0x87, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x47, 0x6e, 0x1c, 0x3b, 0x3f,
	0x02, 0x00, 0x00,
}
