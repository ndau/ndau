package search

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AccountHistoryParams) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Address":
			z.Address, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "AfterHeight":
			z.AfterHeight, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "AfterHeight")
				return
			}
		case "Limit":
			z.Limit, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AccountHistoryParams) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Address"
	err = en.Append(0x83, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "AfterHeight"
	err = en.Append(0xab, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.AfterHeight)
	if err != nil {
		err = msgp.WrapError(err, "AfterHeight")
		return
	}
	// write "Limit"
	err = en.Append(0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Limit)
	if err != nil {
		err = msgp.WrapError(err, "Limit")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AccountHistoryParams) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Address"
	o = append(o, 0x83, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.Address)
	// string "AfterHeight"
	o = append(o, 0xab, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.AfterHeight)
	// string "Limit"
	o = append(o, 0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	o = msgp.AppendInt(o, z.Limit)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AccountHistoryParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Address":
			z.Address, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "AfterHeight":
			z.AfterHeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AfterHeight")
				return
			}
		case "Limit":
			z.Limit, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AccountHistoryParams) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.Address) + 12 + msgp.Uint64Size + 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AccountHistoryResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Txs")
				return
			}
			if cap(z.Txs) >= int(zb0002) {
				z.Txs = (z.Txs)[:zb0002]
			} else {
				z.Txs = make([]AccountTxValueData, zb0002)
			}
			for za0001 := range z.Txs {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Txs", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Txs", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "h":
						z.Txs[za0001].BlockHeight, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "Txs", za0001, "BlockHeight")
							return
						}
					case "o":
						z.Txs[za0001].TxOffset, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Txs", za0001, "TxOffset")
							return
						}
					case "b":
						err = z.Txs[za0001].Balance.DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "Txs", za0001, "Balance")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Txs", za0001)
							return
						}
					}
				}
			}
		case "m":
			z.More, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "More")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AccountHistoryResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "t"
	err = en.Append(0x82, 0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Txs)))
	if err != nil {
		err = msgp.WrapError(err, "Txs")
		return
	}
	for za0001 := range z.Txs {
		// map header, size 3
		// write "h"
		err = en.Append(0x83, 0xa1, 0x68)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Txs[za0001].BlockHeight)
		if err != nil {
			err = msgp.WrapError(err, "Txs", za0001, "BlockHeight")
			return
		}
		// write "o"
		err = en.Append(0xa1, 0x6f)
		if err != nil {
			return
		}
		err = en.WriteInt(z.Txs[za0001].TxOffset)
		if err != nil {
			err = msgp.WrapError(err, "Txs", za0001, "TxOffset")
			return
		}
		// write "b"
		err = en.Append(0xa1, 0x62)
		if err != nil {
			return
		}
		err = z.Txs[za0001].Balance.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Txs", za0001, "Balance")
			return
		}
	}
	// write "m"
	err = en.Append(0xa1, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteBool(z.More)
	if err != nil {
		err = msgp.WrapError(err, "More")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AccountHistoryResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "t"
	o = append(o, 0x82, 0xa1, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Txs)))
	for za0001 := range z.Txs {
		// map header, size 3
		// string "h"
		o = append(o, 0x83, 0xa1, 0x68)
		o = msgp.AppendUint64(o, z.Txs[za0001].BlockHeight)
		// string "o"
		o = append(o, 0xa1, 0x6f)
		o = msgp.AppendInt(o, z.Txs[za0001].TxOffset)
		// string "b"
		o = append(o, 0xa1, 0x62)
		o, err = z.Txs[za0001].Balance.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Txs", za0001, "Balance")
			return
		}
	}
	// string "m"
	o = append(o, 0xa1, 0x6d)
	o = msgp.AppendBool(o, z.More)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AccountHistoryResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Txs")
				return
			}
			if cap(z.Txs) >= int(zb0002) {
				z.Txs = (z.Txs)[:zb0002]
			} else {
				z.Txs = make([]AccountTxValueData, zb0002)
			}
			for za0001 := range z.Txs {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Txs", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Txs", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "h":
						z.Txs[za0001].BlockHeight, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Txs", za0001, "BlockHeight")
							return
						}
					case "o":
						z.Txs[za0001].TxOffset, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Txs", za0001, "TxOffset")
							return
						}
					case "b":
						bts, err = z.Txs[za0001].Balance.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Txs", za0001, "Balance")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Txs", za0001)
							return
						}
					}
				}
			}
		case "m":
			z.More, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "More")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AccountHistoryResponse) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Txs {
		s += 1 + 2 + msgp.Uint64Size + 2 + msgp.IntSize + 2 + z.Txs[za0001].Balance.Msgsize()
	}
	s += 2 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AccountListParams) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Address":
			z.Address, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "After":
			z.After, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "After")
				return
			}
		case "Limit":
			z.Limit, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AccountListParams) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Address"
	err = en.Append(0x83, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "After"
	err = en.Append(0xa5, 0x41, 0x66, 0x74, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.After)
	if err != nil {
		err = msgp.WrapError(err, "After")
		return
	}
	// write "Limit"
	err = en.Append(0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Limit)
	if err != nil {
		err = msgp.WrapError(err, "Limit")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AccountListParams) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Address"
	o = append(o, 0x83, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.Address)
	// string "After"
	o = append(o, 0xa5, 0x41, 0x66, 0x74, 0x65, 0x72)
	o = msgp.AppendString(o, z.After)
	// string "Limit"
	o = append(o, 0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	o = msgp.AppendInt(o, z.Limit)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AccountListParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Address":
			z.Address, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "After":
			z.After, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "After")
				return
			}
		case "Limit":
			z.Limit, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AccountListParams) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.Address) + 6 + msgp.StringPrefixSize + len(z.After) + 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AccountTxValueData) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			z.BlockHeight, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "BlockHeight")
				return
			}
		case "o":
			z.TxOffset, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "TxOffset")
				return
			}
		case "b":
			err = z.Balance.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Balance")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AccountTxValueData) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "h"
	err = en.Append(0x83, 0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.BlockHeight)
	if err != nil {
		err = msgp.WrapError(err, "BlockHeight")
		return
	}
	// write "o"
	err = en.Append(0xa1, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteInt(z.TxOffset)
	if err != nil {
		err = msgp.WrapError(err, "TxOffset")
		return
	}
	// write "b"
	err = en.Append(0xa1, 0x62)
	if err != nil {
		return
	}
	err = z.Balance.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Balance")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AccountTxValueData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "h"
	o = append(o, 0x83, 0xa1, 0x68)
	o = msgp.AppendUint64(o, z.BlockHeight)
	// string "o"
	o = append(o, 0xa1, 0x6f)
	o = msgp.AppendInt(o, z.TxOffset)
	// string "b"
	o = append(o, 0xa1, 0x62)
	o, err = z.Balance.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Balance")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AccountTxValueData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			z.BlockHeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockHeight")
				return
			}
		case "o":
			z.TxOffset, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxOffset")
				return
			}
		case "b":
			bts, err = z.Balance.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Balance")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AccountTxValueData) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + msgp.IntSize + 2 + z.Balance.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PriceQueryParams) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "After":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "After")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "After")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Height":
					z.After.Height, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "After", "Height")
						return
					}
				case "Timestamp":
					err = z.After.Timestamp.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "After", "Timestamp")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "After")
						return
					}
				}
			}
		case "Before":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Before")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Before")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Height":
					z.Before.Height, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "Before", "Height")
						return
					}
				case "Timestamp":
					err = z.Before.Timestamp.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Before", "Timestamp")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Before")
						return
					}
				}
			}
		case "Limit":
			z.Limit, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PriceQueryParams) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "After"
	// map header, size 2
	// write "Height"
	err = en.Append(0x83, 0xa5, 0x41, 0x66, 0x74, 0x65, 0x72, 0x82, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.After.Height)
	if err != nil {
		err = msgp.WrapError(err, "After", "Height")
		return
	}
	// write "Timestamp"
	err = en.Append(0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = z.After.Timestamp.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "After", "Timestamp")
		return
	}
	// write "Before"
	// map header, size 2
	// write "Height"
	err = en.Append(0xa6, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x82, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Before.Height)
	if err != nil {
		err = msgp.WrapError(err, "Before", "Height")
		return
	}
	// write "Timestamp"
	err = en.Append(0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = z.Before.Timestamp.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Before", "Timestamp")
		return
	}
	// write "Limit"
	err = en.Append(0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint(z.Limit)
	if err != nil {
		err = msgp.WrapError(err, "Limit")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PriceQueryParams) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "After"
	// map header, size 2
	// string "Height"
	o = append(o, 0x83, 0xa5, 0x41, 0x66, 0x74, 0x65, 0x72, 0x82, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.After.Height)
	// string "Timestamp"
	o = append(o, 0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o, err = z.After.Timestamp.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "After", "Timestamp")
		return
	}
	// string "Before"
	// map header, size 2
	// string "Height"
	o = append(o, 0xa6, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x82, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.Before.Height)
	// string "Timestamp"
	o = append(o, 0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o, err = z.Before.Timestamp.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Before", "Timestamp")
		return
	}
	// string "Limit"
	o = append(o, 0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	o = msgp.AppendUint(o, z.Limit)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PriceQueryParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "After":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "After")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "After")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Height":
					z.After.Height, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "After", "Height")
						return
					}
				case "Timestamp":
					bts, err = z.After.Timestamp.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "After", "Timestamp")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "After")
						return
					}
				}
			}
		case "Before":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Before")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Before")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Height":
					z.Before.Height, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Before", "Height")
						return
					}
				case "Timestamp":
					bts, err = z.Before.Timestamp.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Before", "Timestamp")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Before")
						return
					}
				}
			}
		case "Limit":
			z.Limit, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PriceQueryParams) Msgsize() (s int) {
	s = 1 + 6 + 1 + 7 + msgp.Uint64Size + 10 + z.After.Timestamp.Msgsize() + 7 + 1 + 7 + msgp.Uint64Size + 10 + z.Before.Timestamp.Msgsize() + 6 + msgp.UintSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PriceQueryResult) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Price":
			err = z.Price.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "PriceS":
			z.PriceS, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PriceS")
				return
			}
		case "Height":
			z.Height, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "Timestamp":
			err = z.Timestamp.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PriceQueryResult) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Price"
	err = en.Append(0x84, 0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = z.Price.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	// write "PriceS"
	err = en.Append(0xa6, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53)
	if err != nil {
		return
	}
	err = en.WriteString(z.PriceS)
	if err != nil {
		err = msgp.WrapError(err, "PriceS")
		return
	}
	// write "Height"
	err = en.Append(0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	// write "Timestamp"
	err = en.Append(0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = z.Timestamp.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PriceQueryResult) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Price"
	o = append(o, 0x84, 0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
	o, err = z.Price.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	// string "PriceS"
	o = append(o, 0xa6, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53)
	o = msgp.AppendString(o, z.PriceS)
	// string "Height"
	o = append(o, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.Height)
	// string "Timestamp"
	o = append(o, 0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o, err = z.Timestamp.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PriceQueryResult) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Price":
			bts, err = z.Price.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "PriceS":
			z.PriceS, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PriceS")
				return
			}
		case "Height":
			z.Height, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "Timestamp":
			bts, err = z.Timestamp.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PriceQueryResult) Msgsize() (s int) {
	s = 1 + 6 + z.Price.Msgsize() + 7 + msgp.StringPrefixSize + len(z.PriceS) + 7 + msgp.Uint64Size + 10 + z.Timestamp.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PriceQueryResults) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Items":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Items")
				return
			}
			if cap(z.Items) >= int(zb0002) {
				z.Items = (z.Items)[:zb0002]
			} else {
				z.Items = make([]PriceQueryResult, zb0002)
			}
			for za0001 := range z.Items {
				err = z.Items[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Items", za0001)
					return
				}
			}
		case "More":
			z.More, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "More")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PriceQueryResults) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Items"
	err = en.Append(0x82, 0xa5, 0x49, 0x74, 0x65, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Items)))
	if err != nil {
		err = msgp.WrapError(err, "Items")
		return
	}
	for za0001 := range z.Items {
		err = z.Items[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Items", za0001)
			return
		}
	}
	// write "More"
	err = en.Append(0xa4, 0x4d, 0x6f, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.More)
	if err != nil {
		err = msgp.WrapError(err, "More")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PriceQueryResults) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Items"
	o = append(o, 0x82, 0xa5, 0x49, 0x74, 0x65, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Items)))
	for za0001 := range z.Items {
		o, err = z.Items[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Items", za0001)
			return
		}
	}
	// string "More"
	o = append(o, 0xa4, 0x4d, 0x6f, 0x72, 0x65)
	o = msgp.AppendBool(o, z.More)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PriceQueryResults) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Items":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Items")
				return
			}
			if cap(z.Items) >= int(zb0002) {
				z.Items = (z.Items)[:zb0002]
			} else {
				z.Items = make([]PriceQueryResult, zb0002)
			}
			for za0001 := range z.Items {
				bts, err = z.Items[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Items", za0001)
					return
				}
			}
		case "More":
			z.More, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "More")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PriceQueryResults) Msgsize() (s int) {
	s = 1 + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Items {
		s += z.Items[za0001].Msgsize()
	}
	s += 5 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QueryParams) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Command":
			z.Command, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Command")
				return
			}
		case "Hash":
			z.Hash, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "Types":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Types")
				return
			}
			if cap(z.Types) >= int(zb0002) {
				z.Types = (z.Types)[:zb0002]
			} else {
				z.Types = make([]string, zb0002)
			}
			for za0001 := range z.Types {
				z.Types[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Types", za0001)
					return
				}
			}
		case "Limit":
			z.Limit, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *QueryParams) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Command"
	err = en.Append(0x84, 0xa7, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Command)
	if err != nil {
		err = msgp.WrapError(err, "Command")
		return
	}
	// write "Hash"
	err = en.Append(0xa4, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// write "Types"
	err = en.Append(0xa5, 0x54, 0x79, 0x70, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Types)))
	if err != nil {
		err = msgp.WrapError(err, "Types")
		return
	}
	for za0001 := range z.Types {
		err = en.WriteString(z.Types[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Types", za0001)
			return
		}
	}
	// write "Limit"
	err = en.Append(0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Limit)
	if err != nil {
		err = msgp.WrapError(err, "Limit")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *QueryParams) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Command"
	o = append(o, 0x84, 0xa7, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64)
	o = msgp.AppendString(o, z.Command)
	// string "Hash"
	o = append(o, 0xa4, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.Hash)
	// string "Types"
	o = append(o, 0xa5, 0x54, 0x79, 0x70, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Types)))
	for za0001 := range z.Types {
		o = msgp.AppendString(o, z.Types[za0001])
	}
	// string "Limit"
	o = append(o, 0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	o = msgp.AppendInt(o, z.Limit)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueryParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Command":
			z.Command, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Command")
				return
			}
		case "Hash":
			z.Hash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "Types":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Types")
				return
			}
			if cap(z.Types) >= int(zb0002) {
				z.Types = (z.Types)[:zb0002]
			} else {
				z.Types = make([]string, zb0002)
			}
			for za0001 := range z.Types {
				z.Types[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Types", za0001)
					return
				}
			}
		case "Limit":
			z.Limit, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QueryParams) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.Command) + 5 + msgp.StringPrefixSize + len(z.Hash) + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Types {
		s += msgp.StringPrefixSize + len(z.Types[za0001])
	}
	s += 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RangeEndpoint) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Height":
			z.Height, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "Timestamp":
			err = z.Timestamp.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RangeEndpoint) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Height"
	err = en.Append(0x82, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	// write "Timestamp"
	err = en.Append(0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = z.Timestamp.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RangeEndpoint) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Height"
	o = append(o, 0x82, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.Height)
	// string "Timestamp"
	o = append(o, 0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o, err = z.Timestamp.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RangeEndpoint) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Height":
			z.Height, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "Timestamp":
			bts, err = z.Timestamp.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RangeEndpoint) Msgsize() (s int) {
	s = 1 + 7 + msgp.Uint64Size + 10 + z.Timestamp.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SysvarHistoryParams) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "AfterHeight":
			z.AfterHeight, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "AfterHeight")
				return
			}
		case "Limit":
			z.Limit, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SysvarHistoryParams) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Name"
	err = en.Append(0x83, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "AfterHeight"
	err = en.Append(0xab, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.AfterHeight)
	if err != nil {
		err = msgp.WrapError(err, "AfterHeight")
		return
	}
	// write "Limit"
	err = en.Append(0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Limit)
	if err != nil {
		err = msgp.WrapError(err, "Limit")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SysvarHistoryParams) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Name"
	o = append(o, 0x83, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "AfterHeight"
	o = append(o, 0xab, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.AfterHeight)
	// string "Limit"
	o = append(o, 0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	o = msgp.AppendInt(o, z.Limit)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SysvarHistoryParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "AfterHeight":
			z.AfterHeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AfterHeight")
				return
			}
		case "Limit":
			z.Limit, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SysvarHistoryParams) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 12 + msgp.Uint64Size + 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TxListValueData) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Txs")
				return
			}
			if cap(z.Txs) >= int(zb0002) {
				z.Txs = (z.Txs)[:zb0002]
			} else {
				z.Txs = make([]TxValueData, zb0002)
			}
			for za0001 := range z.Txs {
				err = z.Txs[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Txs", za0001)
					return
				}
			}
		case "n":
			z.NextTxHash, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "NextTxHash")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TxListValueData) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "t"
	err = en.Append(0x82, 0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Txs)))
	if err != nil {
		err = msgp.WrapError(err, "Txs")
		return
	}
	for za0001 := range z.Txs {
		err = z.Txs[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Txs", za0001)
			return
		}
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.NextTxHash)
	if err != nil {
		err = msgp.WrapError(err, "NextTxHash")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TxListValueData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "t"
	o = append(o, 0x82, 0xa1, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Txs)))
	for za0001 := range z.Txs {
		o, err = z.Txs[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Txs", za0001)
			return
		}
	}
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendString(o, z.NextTxHash)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxListValueData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Txs")
				return
			}
			if cap(z.Txs) >= int(zb0002) {
				z.Txs = (z.Txs)[:zb0002]
			} else {
				z.Txs = make([]TxValueData, zb0002)
			}
			for za0001 := range z.Txs {
				bts, err = z.Txs[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Txs", za0001)
					return
				}
			}
		case "n":
			z.NextTxHash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NextTxHash")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TxListValueData) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Txs {
		s += z.Txs[za0001].Msgsize()
	}
	s += 2 + msgp.StringPrefixSize + len(z.NextTxHash)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TxValueData) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			z.BlockHeight, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "BlockHeight")
				return
			}
		case "o":
			z.TxOffset, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "TxOffset")
				return
			}
		case "f":
			z.Fee, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Fee")
				return
			}
		case "s":
			z.SIB, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "SIB")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TxValueData) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "h"
	err = en.Append(0x84, 0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.BlockHeight)
	if err != nil {
		err = msgp.WrapError(err, "BlockHeight")
		return
	}
	// write "o"
	err = en.Append(0xa1, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteInt(z.TxOffset)
	if err != nil {
		err = msgp.WrapError(err, "TxOffset")
		return
	}
	// write "f"
	err = en.Append(0xa1, 0x66)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Fee)
	if err != nil {
		err = msgp.WrapError(err, "Fee")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.SIB)
	if err != nil {
		err = msgp.WrapError(err, "SIB")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TxValueData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "h"
	o = append(o, 0x84, 0xa1, 0x68)
	o = msgp.AppendUint64(o, z.BlockHeight)
	// string "o"
	o = append(o, 0xa1, 0x6f)
	o = msgp.AppendInt(o, z.TxOffset)
	// string "f"
	o = append(o, 0xa1, 0x66)
	o = msgp.AppendUint64(o, z.Fee)
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendUint64(o, z.SIB)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxValueData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			z.BlockHeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockHeight")
				return
			}
		case "o":
			z.TxOffset, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxOffset")
				return
			}
		case "f":
			z.Fee, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Fee")
				return
			}
		case "s":
			z.SIB, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SIB")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TxValueData) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + msgp.IntSize + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ValueData) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			z.Height, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "v":
			z.ValueBase64, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ValueBase64")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ValueData) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "h"
	err = en.Append(0x82, 0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	// write "v"
	err = en.Append(0xa1, 0x76)
	if err != nil {
		return
	}
	err = en.WriteString(z.ValueBase64)
	if err != nil {
		err = msgp.WrapError(err, "ValueBase64")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ValueData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "h"
	o = append(o, 0x82, 0xa1, 0x68)
	o = msgp.AppendUint64(o, z.Height)
	// string "v"
	o = append(o, 0xa1, 0x76)
	o = msgp.AppendString(o, z.ValueBase64)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ValueData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			z.Height, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "v":
			z.ValueBase64, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ValueBase64")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ValueData) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + msgp.StringPrefixSize + len(z.ValueBase64)
	return
}
