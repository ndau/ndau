package backing

import (
	"fmt"
	"reflect"

	"github.com/attic-labs/noms/go/marshal"
	nt "github.com/attic-labs/noms/go/types"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/pkg/errors"
)

// this code generated by github.com/oneiro-ndev/generator/cmd/nomsify
// DO NOT EDIT

// Adding new fields to a nomsify-able struct:
//
// Managed vars are useful for adding new fields that are marshaled to noms only after they're
// first set, so that app hashes aren't affected until the new fields are actually needed.
//
// A managed vars map is a hash map whose keys are managed variable names.
// The `managedVars map[string]struct{}` field must be manually declared in the struct.
//
// Declare new fields using the "managedVar" prefix.  e.g. `managedVarSomething SomeType`.
// GetSomething() and SetSomething() are generated for public access to the new field.
//
// Once SetSomething() is called for the first time, typically as a result of processing a new
// transaction that uses it, the managed vars map will contain "Something" as a key and the
// value of managedVarSomething will be stored in noms on the next call to MarshalNoms().
// Until then, all new managedVar fields will retain their "zero" values.

var nodeStructTemplate nt.StructTemplate

func init() {
	nodeStructTemplate = nt.MakeStructTemplate("Node", []string{
		"Active",
		"DistributionScript",
		"Key",
		"TMAddress",
	})
}

// MarshalNoms implements noms/go/marshal.Marshaler
func (x Node) MarshalNoms(vrw nt.ValueReadWriter) (nodeValue nt.Value, err error) {
	// x.Active (bool->*ast.Ident) is primitive: true

	// x.DistributionScript ([]byte->*ast.ArrayType) is primitive: true

	// x.TMAddress (string->*ast.Ident) is primitive: true

	// x.Key (signature.PublicKey->*ast.SelectorExpr) is primitive: false
	// template decompose: x.Key (signature.PublicKey->*ast.SelectorExpr)
	// template textmarshaler: x.Key
	keyString, err := x.Key.MarshalText()
	if err != nil {
		return nil, errors.Wrap(err, "Node.MarshalNoms->Key.MarshalText")
	}

	values := []nt.Value{
		// x.Active (bool)
		nt.Bool(x.Active),
		// x.DistributionScript ([]byte)
		nt.String(x.DistributionScript),
		// x.Key (signature.PublicKey)
		nt.String(keyString),
		// x.TMAddress (string)
		nt.String(x.TMAddress),
	}

	return nodeStructTemplate.NewStruct(values), nil
}

var _ marshal.Marshaler = (*Node)(nil)

// UnmarshalNoms implements noms/go/marshal.Unmarshaler
//
// This method makes no attempt to zeroize the provided struct; it simply
// overwrites fields as they are found.
func (x *Node) UnmarshalNoms(value nt.Value) (err error) {
	vs, ok := value.(nt.Struct)
	if !ok {
		return fmt.Errorf(
			"Node.UnmarshalNoms expected a nt.Value; found %s",
			reflect.TypeOf(value),
		)
	}

	// noms Struct.MaybeGet isn't efficient: it iterates over all fields of
	// the struct until it finds one whose name happens to match the one sought.
	// It's better to iterate once over the struct and set the fields of the
	// target struct in arbitrary order.
	vs.IterFields(func(name string, value nt.Value) {
		if err == nil {
			switch name {
			// x.Active (bool->*ast.Ident) is primitive: true
			case "Active":
				// template u_decompose: x.Active (bool->*ast.Ident)
				// template u_primitive: x.Active
				activeValue, ok := value.(nt.Bool)
				if !ok {
					err = fmt.Errorf(
						"Node.UnmarshalNoms expected value to be a nt.Bool; found %s",
						reflect.TypeOf(value),
					)
				}
				activeTyped := bool(activeValue)

				x.Active = activeTyped
			// x.DistributionScript ([]byte->*ast.ArrayType) is primitive: true
			case "DistributionScript":
				// template u_decompose: x.DistributionScript ([]byte->*ast.ArrayType)
				// template u_primitive: x.DistributionScript
				distributionScriptValue, ok := value.(nt.String)
				if !ok {
					err = fmt.Errorf(
						"Node.UnmarshalNoms expected value to be a nt.String; found %s",
						reflect.TypeOf(value),
					)
				}
				distributionScriptTyped := []byte(distributionScriptValue)

				x.DistributionScript = distributionScriptTyped
			// x.TMAddress (string->*ast.Ident) is primitive: true
			case "TMAddress":
				// template u_decompose: x.TMAddress (string->*ast.Ident)
				// template u_primitive: x.TMAddress
				tMAddressValue, ok := value.(nt.String)
				if !ok {
					err = fmt.Errorf(
						"Node.UnmarshalNoms expected value to be a nt.String; found %s",
						reflect.TypeOf(value),
					)
				}
				tMAddressTyped := string(tMAddressValue)

				x.TMAddress = tMAddressTyped
			// x.Key (signature.PublicKey->*ast.SelectorExpr) is primitive: false
			case "Key":
				// template u_decompose: x.Key (signature.PublicKey->*ast.SelectorExpr)
				// template u_textmarshaler: x.Key
				var keyValue signature.PublicKey
				if keyString, ok := value.(nt.String); ok {
					err = keyValue.UnmarshalText([]byte(keyString))
				} else {
					err = fmt.Errorf(
						"Node.UnmarshalNoms expected value to be a nt.String; found %s",
						reflect.ValueOf(value).Type(),
					)
				}

				x.Key = keyValue
			}
		}
	})
	return
}

var _ marshal.Unmarshaler = (*Node)(nil)
