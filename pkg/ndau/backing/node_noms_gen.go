package backing

import (
	"fmt"
	"reflect"

	"github.com/attic-labs/noms/go/marshal"
	nt "github.com/attic-labs/noms/go/types"
)

// this code generated by github.com/oneiro-ndev/generator/cmd/nomsify
// DO NOT EDIT

var nodeStructTemplate nt.StructTemplate

func init() {
	nodeStructTemplate = nt.MakeStructTemplate("Node", []string{
		"Active",
		"DistributionScript",
		"RPCAddress",
	})
}

// MarshalNoms implements noms/go/marshal.Marshaler
func (x Node) MarshalNoms(vrw nt.ValueReadWriter) (nodeValue nt.Value, err error) {
	// x.Active (bool->*ast.Ident) is primitive: true

	// x.DistributionScript ([]byte->*ast.ArrayType) is primitive: true

	// x.RPCAddress (string->*ast.Ident) is primitive: true

	return nodeStructTemplate.NewStruct([]nt.Value{
		// x.Active (bool)

		nt.Bool(x.Active),
		// x.DistributionScript ([]byte)

		nt.String(x.DistributionScript),
		// x.RPCAddress (string)

		nt.String(x.RPCAddress),
	}), nil
}

var _ marshal.Marshaler = (*Node)(nil)

// UnmarshalNoms implements noms/go/marshal.Unmarshaler
//
// This method makes no attempt to zeroize the provided struct; it simply
// overwrites fields as they are found.
func (x *Node) UnmarshalNoms(value nt.Value) (err error) {
	vs, ok := value.(nt.Struct)
	if !ok {
		return fmt.Errorf(
			"Node.UnmarshalNoms expected a nt.Value; found %s",
			reflect.TypeOf(value),
		)
	}

	// noms Struct.MaybeGet isn't efficient: it iterates over all fields of
	// the struct until it finds one whose name happens to match the one sought.
	// It's better to iterate once over the struct and set the fields of the
	// target struct in arbitrary order.
	vs.IterFields(func(name string, value nt.Value) {
		if err == nil {
			switch name {
			// x.Active (bool->*ast.Ident) is primitive: true
			case "Active":
				// template u_decompose: x.Active (bool->*ast.Ident)
				// template u_primitive: x.Active
				activeValue, ok := value.(nt.Bool)
				if !ok {
					err = fmt.Errorf(
						"Node.UnmarshalNoms expected value to be a nt.Bool; found %s",
						reflect.TypeOf(value),
					)
				}
				activeTyped := bool(activeValue)

				x.Active = activeTyped
			// x.DistributionScript ([]byte->*ast.ArrayType) is primitive: true
			case "DistributionScript":
				// template u_decompose: x.DistributionScript ([]byte->*ast.ArrayType)
				// template u_primitive: x.DistributionScript
				distributionScriptValue, ok := value.(nt.String)
				if !ok {
					err = fmt.Errorf(
						"Node.UnmarshalNoms expected value to be a nt.String; found %s",
						reflect.TypeOf(value),
					)
				}
				distributionScriptTyped := []byte(distributionScriptValue)

				x.DistributionScript = distributionScriptTyped
			// x.RPCAddress (string->*ast.Ident) is primitive: true
			case "RPCAddress":
				// template u_decompose: x.RPCAddress (string->*ast.Ident)
				// template u_primitive: x.RPCAddress
				rPCAddressValue, ok := value.(nt.String)
				if !ok {
					err = fmt.Errorf(
						"Node.UnmarshalNoms expected value to be a nt.String; found %s",
						reflect.TypeOf(value),
					)
				}
				rPCAddressTyped := string(rPCAddressValue)

				x.RPCAddress = rPCAddressTyped
			}
		}
	})
	return
}

var _ marshal.Unmarshaler = (*Node)(nil)
