package backing

import (
	"fmt"
	"reflect"

	"github.com/attic-labs/noms/go/marshal"
	nt "github.com/attic-labs/noms/go/types"
)

// this code generated by github.com/oneiro-ndev/generator/cmd/nomsify
// DO NOT EDIT

var managedVarsMapStructTemplate nt.StructTemplate

func init() {
	managedVarsMapStructTemplate = nt.MakeStructTemplate("ManagedVarsMap", []string{})
}

// MarshalNoms implements noms/go/marshal.Marshaler
func (x ManagedVarsMap) MarshalNoms(vrw nt.ValueReadWriter) (managedVarsMapValue nt.Value, err error) {
	values := []nt.Value{}

	return managedVarsMapStructTemplate.NewStruct(values), nil
}

var _ marshal.Marshaler = (*ManagedVarsMap)(nil)

// UnmarshalNoms implements noms/go/marshal.Unmarshaler
//
// This method makes no attempt to zeroize the provided struct; it simply
// overwrites fields as they are found.
func (x *ManagedVarsMap) UnmarshalNoms(value nt.Value) (err error) {
	vs, ok := value.(nt.Struct)
	if !ok {
		return fmt.Errorf(
			"ManagedVarsMap.UnmarshalNoms expected a nt.Value; found %s",
			reflect.TypeOf(value),
		)
	}

	// noms Struct.MaybeGet isn't efficient: it iterates over all fields of
	// the struct until it finds one whose name happens to match the one sought.
	// It's better to iterate once over the struct and set the fields of the
	// target struct in arbitrary order.
	vs.IterFields(func(name string, value nt.Value) {
		if err == nil {
			switch name {
			}
		}
	})
	return
}

var _ marshal.Unmarshaler = (*ManagedVarsMap)(nil)
