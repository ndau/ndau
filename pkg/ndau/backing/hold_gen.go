package backing

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	math "github.com/oneiro-ndev/ndaumath/pkg/types"
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *Hold) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Qty"
	o = append(o, 0x84, 0xa3, 0x51, 0x74, 0x79)
	o, err = z.Qty.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Qty")
		return
	}
	// string "Expiry"
	o = append(o, 0xa6, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79)
	if z.Expiry == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Expiry.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Expiry")
			return
		}
	}
	// string "Txhash"
	o = append(o, 0xa6, 0x54, 0x78, 0x68, 0x61, 0x73, 0x68)
	if z.Txhash == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.Txhash)
	}
	// string "Stake"
	o = append(o, 0xa5, 0x53, 0x74, 0x61, 0x6b, 0x65)
	if z.Stake == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Stake.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Stake")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Hold) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Qty":
			bts, err = z.Qty.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Qty")
				return
			}
		case "Expiry":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Expiry = nil
			} else {
				if z.Expiry == nil {
					z.Expiry = new(math.Timestamp)
				}
				bts, err = z.Expiry.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Expiry")
					return
				}
			}
		case "Txhash":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Txhash = nil
			} else {
				if z.Txhash == nil {
					z.Txhash = new(string)
				}
				*z.Txhash, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Txhash")
					return
				}
			}
		case "Stake":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Stake = nil
			} else {
				if z.Stake == nil {
					z.Stake = new(StakeData)
				}
				bts, err = z.Stake.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Stake")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Hold) Msgsize() (s int) {
	s = 1 + 4 + z.Qty.Msgsize() + 7
	if z.Expiry == nil {
		s += msgp.NilSize
	} else {
		s += z.Expiry.Msgsize()
	}
	s += 7
	if z.Txhash == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Txhash)
	}
	s += 6
	if z.Stake == nil {
		s += msgp.NilSize
	} else {
		s += z.Stake.Msgsize()
	}
	return
}
