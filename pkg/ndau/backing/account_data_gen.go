package backing

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/ndau/ndaumath/pkg/address"
	"github.com/ndau/ndaumath/pkg/signature"
	math "github.com/ndau/ndaumath/pkg/types"
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *AccountData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 18
	// string "Balance"
	o = append(o, 0xde, 0x0, 0x12, 0xa7, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65)
	o, err = z.Balance.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Balance")
		return
	}
	// string "ValidationKeys"
	o = append(o, 0xae, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ValidationKeys)))
	for za0001 := range z.ValidationKeys {
		o, err = z.ValidationKeys[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ValidationKeys", za0001)
			return
		}
	}
	// string "ValidationScript"
	o = append(o, 0xb0, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74)
	o = msgp.AppendBytes(o, z.ValidationScript)
	// string "RewardsTarget"
	o = append(o, 0xad, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74)
	if z.RewardsTarget == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.RewardsTarget.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "RewardsTarget")
			return
		}
	}
	// string "IncomingRewardsFrom"
	o = append(o, 0xb3, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d)
	o = msgp.AppendArrayHeader(o, uint32(len(z.IncomingRewardsFrom)))
	for za0002 := range z.IncomingRewardsFrom {
		o, err = z.IncomingRewardsFrom[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "IncomingRewardsFrom", za0002)
			return
		}
	}
	// string "DelegationNode"
	o = append(o, 0xae, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65)
	if z.DelegationNode == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.DelegationNode.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "DelegationNode")
			return
		}
	}
	// string "Lock"
	o = append(o, 0xa4, 0x4c, 0x6f, 0x63, 0x6b)
	if z.Lock == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Lock.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Lock")
			return
		}
	}
	// string "LastEAIUpdate"
	o = append(o, 0xad, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x41, 0x49, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65)
	o, err = z.LastEAIUpdate.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "LastEAIUpdate")
		return
	}
	// string "LastWAAUpdate"
	o = append(o, 0xad, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x41, 0x41, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65)
	o, err = z.LastWAAUpdate.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "LastWAAUpdate")
		return
	}
	// string "WeightedAverageAge"
	o = append(o, 0xb2, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x67, 0x65)
	o, err = z.WeightedAverageAge.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "WeightedAverageAge")
		return
	}
	// string "Sequence"
	o = append(o, 0xa8, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.Sequence)
	// string "StakeRules"
	o = append(o, 0xaa, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73)
	if z.StakeRules == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.StakeRules.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "StakeRules")
			return
		}
	}
	// string "Costakers"
	o = append(o, 0xa9, 0x43, 0x6f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Costakers)))
	for za0003, za0004 := range z.Costakers {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendMapHeader(o, uint32(len(za0004)))
		for za0005, za0006 := range za0004 {
			o = msgp.AppendString(o, za0005)
			o = msgp.AppendUint64(o, za0006)
		}
	}
	// string "Holds"
	o = append(o, 0xa5, 0x48, 0x6f, 0x6c, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Holds)))
	for za0007 := range z.Holds {
		o, err = z.Holds[za0007].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Holds", za0007)
			return
		}
	}
	// string "RecourseSettings"
	o = append(o, 0xb0, 0x52, 0x65, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73)
	o, err = z.RecourseSettings.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "RecourseSettings")
		return
	}
	// string "CurrencySeatDate"
	o = append(o, 0xb0, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x65)
	if z.CurrencySeatDate == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.CurrencySeatDate.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "CurrencySeatDate")
			return
		}
	}
	// string "Parent"
	o = append(o, 0xa6, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74)
	if z.Parent == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Parent.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Parent")
			return
		}
	}
	// string "Progenitor"
	o = append(o, 0xaa, 0x50, 0x72, 0x6f, 0x67, 0x65, 0x6e, 0x69, 0x74, 0x6f, 0x72)
	if z.Progenitor == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Progenitor.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Progenitor")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AccountData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Balance":
			bts, err = z.Balance.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Balance")
				return
			}
		case "ValidationKeys":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ValidationKeys")
				return
			}
			if cap(z.ValidationKeys) >= int(zb0002) {
				z.ValidationKeys = (z.ValidationKeys)[:zb0002]
			} else {
				z.ValidationKeys = make([]signature.PublicKey, zb0002)
			}
			for za0001 := range z.ValidationKeys {
				bts, err = z.ValidationKeys[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ValidationKeys", za0001)
					return
				}
			}
		case "ValidationScript":
			z.ValidationScript, bts, err = msgp.ReadBytesBytes(bts, z.ValidationScript)
			if err != nil {
				err = msgp.WrapError(err, "ValidationScript")
				return
			}
		case "RewardsTarget":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RewardsTarget = nil
			} else {
				if z.RewardsTarget == nil {
					z.RewardsTarget = new(address.Address)
				}
				bts, err = z.RewardsTarget.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RewardsTarget")
					return
				}
			}
		case "IncomingRewardsFrom":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IncomingRewardsFrom")
				return
			}
			if cap(z.IncomingRewardsFrom) >= int(zb0003) {
				z.IncomingRewardsFrom = (z.IncomingRewardsFrom)[:zb0003]
			} else {
				z.IncomingRewardsFrom = make([]address.Address, zb0003)
			}
			for za0002 := range z.IncomingRewardsFrom {
				bts, err = z.IncomingRewardsFrom[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "IncomingRewardsFrom", za0002)
					return
				}
			}
		case "DelegationNode":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DelegationNode = nil
			} else {
				if z.DelegationNode == nil {
					z.DelegationNode = new(address.Address)
				}
				bts, err = z.DelegationNode.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "DelegationNode")
					return
				}
			}
		case "Lock":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Lock = nil
			} else {
				if z.Lock == nil {
					z.Lock = new(Lock)
				}
				bts, err = z.Lock.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Lock")
					return
				}
			}
		case "LastEAIUpdate":
			bts, err = z.LastEAIUpdate.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastEAIUpdate")
				return
			}
		case "LastWAAUpdate":
			bts, err = z.LastWAAUpdate.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastWAAUpdate")
				return
			}
		case "WeightedAverageAge":
			bts, err = z.WeightedAverageAge.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "WeightedAverageAge")
				return
			}
		case "Sequence":
			z.Sequence, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sequence")
				return
			}
		case "StakeRules":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.StakeRules = nil
			} else {
				if z.StakeRules == nil {
					z.StakeRules = new(StakeRules)
				}
				bts, err = z.StakeRules.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "StakeRules")
					return
				}
			}
		case "Costakers":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Costakers")
				return
			}
			if z.Costakers == nil {
				z.Costakers = make(map[string]map[string]uint64, zb0004)
			} else if len(z.Costakers) > 0 {
				for key := range z.Costakers {
					delete(z.Costakers, key)
				}
			}
			for zb0004 > 0 {
				var za0003 string
				var za0004 map[string]uint64
				zb0004--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Costakers")
					return
				}
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Costakers", za0003)
					return
				}
				if za0004 == nil {
					za0004 = make(map[string]uint64, zb0005)
				} else if len(za0004) > 0 {
					for key := range za0004 {
						delete(za0004, key)
					}
				}
				for zb0005 > 0 {
					var za0005 string
					var za0006 uint64
					zb0005--
					za0005, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Costakers", za0003)
						return
					}
					za0006, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Costakers", za0003, za0005)
						return
					}
					za0004[za0005] = za0006
				}
				z.Costakers[za0003] = za0004
			}
		case "Holds":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Holds")
				return
			}
			if cap(z.Holds) >= int(zb0006) {
				z.Holds = (z.Holds)[:zb0006]
			} else {
				z.Holds = make([]Hold, zb0006)
			}
			for za0007 := range z.Holds {
				bts, err = z.Holds[za0007].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Holds", za0007)
					return
				}
			}
		case "RecourseSettings":
			bts, err = z.RecourseSettings.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "RecourseSettings")
				return
			}
		case "CurrencySeatDate":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.CurrencySeatDate = nil
			} else {
				if z.CurrencySeatDate == nil {
					z.CurrencySeatDate = new(math.Timestamp)
				}
				bts, err = z.CurrencySeatDate.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "CurrencySeatDate")
					return
				}
			}
		case "Parent":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Parent = nil
			} else {
				if z.Parent == nil {
					z.Parent = new(address.Address)
				}
				bts, err = z.Parent.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Parent")
					return
				}
			}
		case "Progenitor":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Progenitor = nil
			} else {
				if z.Progenitor == nil {
					z.Progenitor = new(address.Address)
				}
				bts, err = z.Progenitor.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Progenitor")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AccountData) Msgsize() (s int) {
	s = 3 + 8 + z.Balance.Msgsize() + 15 + msgp.ArrayHeaderSize
	for za0001 := range z.ValidationKeys {
		s += z.ValidationKeys[za0001].Msgsize()
	}
	s += 17 + msgp.BytesPrefixSize + len(z.ValidationScript) + 14
	if z.RewardsTarget == nil {
		s += msgp.NilSize
	} else {
		s += z.RewardsTarget.Msgsize()
	}
	s += 20 + msgp.ArrayHeaderSize
	for za0002 := range z.IncomingRewardsFrom {
		s += z.IncomingRewardsFrom[za0002].Msgsize()
	}
	s += 15
	if z.DelegationNode == nil {
		s += msgp.NilSize
	} else {
		s += z.DelegationNode.Msgsize()
	}
	s += 5
	if z.Lock == nil {
		s += msgp.NilSize
	} else {
		s += z.Lock.Msgsize()
	}
	s += 14 + z.LastEAIUpdate.Msgsize() + 14 + z.LastWAAUpdate.Msgsize() + 19 + z.WeightedAverageAge.Msgsize() + 9 + msgp.Uint64Size + 11
	if z.StakeRules == nil {
		s += msgp.NilSize
	} else {
		s += z.StakeRules.Msgsize()
	}
	s += 10 + msgp.MapHeaderSize
	if z.Costakers != nil {
		for za0003, za0004 := range z.Costakers {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.MapHeaderSize
			if za0004 != nil {
				for za0005, za0006 := range za0004 {
					_ = za0006
					s += msgp.StringPrefixSize + len(za0005) + msgp.Uint64Size
				}
			}
		}
	}
	s += 6 + msgp.ArrayHeaderSize
	for za0007 := range z.Holds {
		s += z.Holds[za0007].Msgsize()
	}
	s += 17 + z.RecourseSettings.Msgsize() + 17
	if z.CurrencySeatDate == nil {
		s += msgp.NilSize
	} else {
		s += z.CurrencySeatDate.Msgsize()
	}
	s += 7
	if z.Parent == nil {
		s += msgp.NilSize
	} else {
		s += z.Parent.Msgsize()
	}
	s += 11
	if z.Progenitor == nil {
		s += msgp.NilSize
	} else {
		s += z.Progenitor.Msgsize()
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RecourseSettings) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Period"
	o = append(o, 0x83, 0xa6, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64)
	o, err = z.Period.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Period")
		return
	}
	// string "ChangesAt"
	o = append(o, 0xa9, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x41, 0x74)
	if z.ChangesAt == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.ChangesAt.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ChangesAt")
			return
		}
	}
	// string "Next"
	o = append(o, 0xa4, 0x4e, 0x65, 0x78, 0x74)
	if z.Next == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Next.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Next")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RecourseSettings) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Period":
			bts, err = z.Period.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Period")
				return
			}
		case "ChangesAt":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ChangesAt = nil
			} else {
				if z.ChangesAt == nil {
					z.ChangesAt = new(math.Timestamp)
				}
				bts, err = z.ChangesAt.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ChangesAt")
					return
				}
			}
		case "Next":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Next = nil
			} else {
				if z.Next == nil {
					z.Next = new(math.Duration)
				}
				bts, err = z.Next.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Next")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RecourseSettings) Msgsize() (s int) {
	s = 1 + 7 + z.Period.Msgsize() + 10
	if z.ChangesAt == nil {
		s += msgp.NilSize
	} else {
		s += z.ChangesAt.Msgsize()
	}
	s += 5
	if z.Next == nil {
		s += msgp.NilSize
	} else {
		s += z.Next.Msgsize()
	}
	return
}
