// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transaction.proto

/*
	Package ndau is a generated protocol buffer package.

	It is generated from these files:
		transaction.proto

	It has these top-level messages:
		Transaction
		GTValidatorChange
*/
package ndau

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// A Transaction is an atomic operation on the ndau chain.
//
// There are several types of transaction defined, with various
// effects. See documentation for each type for details.
type Transaction struct {
	// Types that are valid to be assigned to Tx:
	//	*Transaction_GtValidatorChange
	Tx isTransaction_Tx `protobuf_oneof:"tx"`
	// In order to prevent consensus errors stemming from repeated transactions
	// which are otherwise identical, Transactions support an arbitrary nonce.
	// This is NOT a cryptographic nonce; it is simply an arbitrary
	// number of high entropy. It has no semantic meaning.
	//
	// UUID1 produces good values suitable for this.
	Nonce []byte `protobuf:"bytes,15,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorTransaction, []int{0} }

type isTransaction_Tx interface {
	isTransaction_Tx()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Transaction_GtValidatorChange struct {
	GtValidatorChange *GTValidatorChange `protobuf:"bytes,999,opt,name=gt_validator_change,json=gtValidatorChange,oneof"`
}

func (*Transaction_GtValidatorChange) isTransaction_Tx() {}

func (m *Transaction) GetTx() isTransaction_Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *Transaction) GetGtValidatorChange() *GTValidatorChange {
	if x, ok := m.GetTx().(*Transaction_GtValidatorChange); ok {
		return x.GtValidatorChange
	}
	return nil
}

func (m *Transaction) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Transaction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Transaction_OneofMarshaler, _Transaction_OneofUnmarshaler, _Transaction_OneofSizer, []interface{}{
		(*Transaction_GtValidatorChange)(nil),
	}
}

func _Transaction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Transaction)
	// tx
	switch x := m.Tx.(type) {
	case *Transaction_GtValidatorChange:
		_ = b.EncodeVarint(999<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GtValidatorChange); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Transaction.Tx has unexpected type %T", x)
	}
	return nil
}

func _Transaction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Transaction)
	switch tag {
	case 999: // tx.gt_validator_change
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GTValidatorChange)
		err := b.DecodeMessage(msg)
		m.Tx = &Transaction_GtValidatorChange{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Transaction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Transaction)
	// tx
	switch x := m.Tx.(type) {
	case *Transaction_GtValidatorChange:
		s := proto.Size(x.GtValidatorChange)
		n += proto.SizeVarint(999<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A GTValidatorChange is a Globally Trusted Validator Change.
//
// No attempt is made to validate the validator change;
// nobody watches the watchmen.
//
// THIS IS DANGEROUS AND MUST BE DISABLED PRIOR TO RELEASE
type GTValidatorChange struct {
	// No information about the public key format is
	// currently available.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Power is an arbitrary integer with no intrinsic
	// meaning; during the Global Trust period, it
	// can be literally whatever. Setting it to 0
	// removes the validator.
	Power int64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *GTValidatorChange) Reset()                    { *m = GTValidatorChange{} }
func (*GTValidatorChange) ProtoMessage()               {}
func (*GTValidatorChange) Descriptor() ([]byte, []int) { return fileDescriptorTransaction, []int{1} }

func (m *GTValidatorChange) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *GTValidatorChange) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func init() {
	proto.RegisterType((*Transaction)(nil), "ndau.Transaction")
	proto.RegisterType((*GTValidatorChange)(nil), "ndau.GTValidatorChange")
}
func (this *Transaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Transaction)
	if !ok {
		that2, ok := that.(Transaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Tx == nil {
		if this.Tx != nil {
			return false
		}
	} else if this.Tx == nil {
		return false
	} else if !this.Tx.Equal(that1.Tx) {
		return false
	}
	if !bytes.Equal(this.Nonce, that1.Nonce) {
		return false
	}
	return true
}
func (this *Transaction_GtValidatorChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Transaction_GtValidatorChange)
	if !ok {
		that2, ok := that.(Transaction_GtValidatorChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GtValidatorChange.Equal(that1.GtValidatorChange) {
		return false
	}
	return true
}
func (this *GTValidatorChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GTValidatorChange)
	if !ok {
		that2, ok := that.(GTValidatorChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	return true
}
func (this *Transaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ndau.Transaction{")
	if this.Tx != nil {
		s = append(s, "Tx: "+fmt.Sprintf("%#v", this.Tx)+",\n")
	}
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Transaction_GtValidatorChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ndau.Transaction_GtValidatorChange{` +
		`GtValidatorChange:` + fmt.Sprintf("%#v", this.GtValidatorChange) + `}`}, ", ")
	return s
}
func (this *GTValidatorChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ndau.GTValidatorChange{")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "Power: "+fmt.Sprintf("%#v", this.Power)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTransaction(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if m.Tx != nil {
		nn1, err := m.Tx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Transaction_GtValidatorChange) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GtValidatorChange != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.GtValidatorChange.Size()))
		n2, err := m.GtValidatorChange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *GTValidatorChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GTValidatorChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if m.Power != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Power))
	}
	return i, nil
}

func encodeVarintTransaction(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Transaction) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Tx != nil {
		n += m.Tx.Size()
	}
	return n
}

func (m *Transaction_GtValidatorChange) Size() (n int) {
	var l int
	_ = l
	if m.GtValidatorChange != nil {
		l = m.GtValidatorChange.Size()
		n += 2 + l + sovTransaction(uint64(l))
	}
	return n
}
func (m *GTValidatorChange) Size() (n int) {
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovTransaction(uint64(m.Power))
	}
	return n
}

func sovTransaction(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTransaction(x uint64) (n int) {
	return sovTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Transaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Transaction{`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Tx:` + fmt.Sprintf("%v", this.Tx) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Transaction_GtValidatorChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Transaction_GtValidatorChange{`,
		`GtValidatorChange:` + strings.Replace(fmt.Sprintf("%v", this.GtValidatorChange), "GTValidatorChange", "GTValidatorChange", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GTValidatorChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GTValidatorChange{`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`Power:` + fmt.Sprintf("%v", this.Power) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTransaction(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 999:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GtValidatorChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GTValidatorChange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Tx = &Transaction_GtValidatorChange{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GTValidatorChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GTValidatorChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GTValidatorChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTransaction
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransaction
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransaction(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransaction = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransaction   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("transaction.proto", fileDescriptorTransaction) }

var fileDescriptorTransaction = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x29, 0x4a, 0xcc,
	0x2b, 0x4e, 0x4c, 0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9,
	0x4b, 0x49, 0x2c, 0x55, 0x2a, 0xe5, 0xe2, 0x0e, 0x41, 0x48, 0x09, 0x89, 0x70, 0xb1, 0xe6, 0xe5,
	0xe7, 0x25, 0xa7, 0x4a, 0xf0, 0x2b, 0x30, 0x6a, 0xf0, 0x04, 0x41, 0x38, 0x42, 0x5e, 0x5c, 0xc2,
	0xe9, 0x25, 0xf1, 0x65, 0x89, 0x39, 0x99, 0x29, 0x89, 0x25, 0xf9, 0x45, 0xf1, 0xc9, 0x19, 0x89,
	0x79, 0xe9, 0xa9, 0x12, 0xcf, 0xd9, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0xc4, 0xf5, 0x40, 0x26, 0xe9,
	0xb9, 0x87, 0x84, 0xc1, 0x14, 0x38, 0x83, 0xe5, 0x3d, 0x18, 0x82, 0x04, 0xd3, 0x4b, 0xd0, 0x04,
	0x9d, 0x58, 0xb8, 0x98, 0x4a, 0x2a, 0x94, 0x3c, 0xb8, 0x04, 0x31, 0xd4, 0x0b, 0xc9, 0x72, 0x71,
	0x15, 0x94, 0x26, 0xe5, 0x64, 0x26, 0xc7, 0x67, 0xa7, 0x56, 0x4a, 0x30, 0x82, 0x5d, 0xc0, 0x09,
	0x11, 0xf1, 0x4e, 0xad, 0x04, 0xb9, 0xad, 0x20, 0xbf, 0x3c, 0xb5, 0x48, 0x82, 0x49, 0x81, 0x51,
	0x83, 0x39, 0x08, 0xc2, 0x71, 0xd2, 0xb9, 0xf0, 0x50, 0x8e, 0xe1, 0xc6, 0x43, 0x39, 0x86, 0x0f,
	0x0f, 0xe5, 0x18, 0x1b, 0x1e, 0xc9, 0x31, 0xae, 0x78, 0x24, 0xc7, 0x78, 0xe2, 0x91, 0x1c, 0xe3,
	0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0, 0xe1, 0x91, 0x1c,
	0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0x60, 0xbf, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x7c, 0x09, 0x98, 0x19, 0x10, 0x01, 0x00, 0x00,
}
