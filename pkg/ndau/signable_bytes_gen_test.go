package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndamw42abjyir3hsmmwpycrs6575pct4gsnfmvsqm26vzvfi")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndaasaq56hw7n3tnhga9syh83fwqt5zrj5sdjqcza5qw5zrj")
	require.NoError(t, err)

	// bmRhYXNhcTU2aHc3bjN0bmhnYTlzeWg4M2Z3cXQ1enJqNXNkanFjemE1cXc1enJqAAWCIQf8/70AApoPXz8aEm5kYW13NDJhYmp5aXIzaHNtbXdweWNyczY1NzVwY3Q0Z3NuZm12c3FtMjZ2enZmaQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x73, 0x61, 0x71, 0x35, 0x36, 0x68, 0x77, 0x37, 0x6e, 0x33, 0x74, 0x6e, 0x68, 0x67, 0x61, 0x39, 0x73, 0x79, 0x68, 0x38, 0x33, 0x66, 0x77, 0x71, 0x74, 0x35, 0x7a, 0x72, 0x6a, 0x35, 0x73, 0x64, 0x6a, 0x71, 0x63, 0x7a, 0x61, 0x35, 0x71, 0x77, 0x35, 0x7a, 0x72, 0x6a, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x6d, 0x77, 0x34, 0x32, 0x61, 0x62, 0x6a, 0x79, 0x69, 0x72, 0x33, 0x68, 0x73, 0x6d, 0x6d, 0x77, 0x70, 0x79, 0x63, 0x72, 0x73, 0x36, 0x35, 0x37, 0x35, 0x70, 0x63, 0x74, 0x34, 0x67, 0x73, 0x6e, 0x66, 0x6d, 0x76, 0x73, 0x71, 0x6d, 0x32, 0x36, 0x76, 0x7a, 0x76, 0x66, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndaksx5zdmfgmgka7fmy8e69if4bv9bcyvspssgqi3ihp8z8")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xcd, 0x90, 0xd8, 0xfe, 0xfc, 0xe2, 0xec, 0xfb, 0xfa, 0x3e, 0xe8, 0xea, 0xe4, 0x7a, 0x1d, 0x15, 0xed, 0x85, 0xdc, 0xdd, 0x46, 0xb5, 0xa0, 0x1e, 0x4c, 0x11, 0x2a, 0xf2, 0x30, 0x72, 0xeb, 0x3c}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWRnM2J5aDg5dnRxMzg5NGg1d3F4M2Q0ZHdrODVicTY1eGRtbWlhOGpzaXV4NnRzcW14djJtN2lmY21ydnkyNQAQTcdmlXTFbmRha3N4NXpkbWZnbWdrYTdmbXk4ZTY5aWY0YnY5YmN5dnNwc3NncWkzaWhwOHo4Y28rVEFoWGliTWwySk1vZg==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x67, 0x33, 0x62, 0x79, 0x68, 0x38, 0x39, 0x76, 0x74, 0x71, 0x33, 0x38, 0x39, 0x34, 0x68, 0x35, 0x77, 0x71, 0x78, 0x33, 0x64, 0x34, 0x64, 0x77, 0x6b, 0x38, 0x35, 0x62, 0x71, 0x36, 0x35, 0x78, 0x64, 0x6d, 0x6d, 0x69, 0x61, 0x38, 0x6a, 0x73, 0x69, 0x75, 0x78, 0x36, 0x74, 0x73, 0x71, 0x6d, 0x78, 0x76, 0x32, 0x6d, 0x37, 0x69, 0x66, 0x63, 0x6d, 0x72, 0x76, 0x79, 0x32, 0x35, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x6b, 0x73, 0x78, 0x35, 0x7a, 0x64, 0x6d, 0x66, 0x67, 0x6d, 0x67, 0x6b, 0x61, 0x37, 0x66, 0x6d, 0x79, 0x38, 0x65, 0x36, 0x39, 0x69, 0x66, 0x34, 0x62, 0x76, 0x39, 0x62, 0x63, 0x79, 0x76, 0x73, 0x70, 0x73, 0x73, 0x67, 0x71, 0x69, 0x33, 0x69, 0x68, 0x70, 0x38, 0x7a, 0x38, 0x63, 0x6f, 0x2b, 0x54, 0x41, 0x68, 0x58, 0x69, 0x62, 0x4d, 0x6c, 0x32, 0x4a, 0x4d, 0x6f, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: co+TAhXibMl2JMof
				[]byte{0x72, 0x8f, 0x93, 0x02, 0x15, 0xe2, 0x6c, 0xc9, 0x76, 0x24, 0xca, 0x1f},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: co+TAhXibMl2JMof
				[]byte{0x72, 0x8f, 0x93, 0x02, 0x15, 0xe2, 0x6c, 0xc9, 0x76, 0x24, 0xca, 0x1f},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndabveybmudjfayyhzv6ymgzmudm9miyewkri8wdcwsefjss")
	require.NoError(t, err)

	// bmRhYnZleWJtdWRqZmF5eWh6djZ5bWd6bXVkbTltaXlld2tyaTh3ZGN3c2VmanNzAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x62, 0x76, 0x65, 0x79, 0x62, 0x6d, 0x75, 0x64, 0x6a, 0x66, 0x61, 0x79, 0x79, 0x68, 0x7a, 0x76, 0x36, 0x79, 0x6d, 0x67, 0x7a, 0x6d, 0x75, 0x64, 0x6d, 0x39, 0x6d, 0x69, 0x79, 0x65, 0x77, 0x6b, 0x72, 0x69, 0x38, 0x77, 0x64, 0x63, 0x77, 0x73, 0x65, 0x66, 0x6a, 0x73, 0x73, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndaqgp2t8zxtjrmuikpq8g9fwcfmuru589hkj47j4smq683c")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFxZ3AydDh6eHRqcm11aWtwcThnOWZ3Y2ZtdXJ1NTg5aGtqNDdqNHNtcTY4M2M=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x71, 0x67, 0x70, 0x32, 0x74, 0x38, 0x7a, 0x78, 0x74, 0x6a, 0x72, 0x6d, 0x75, 0x69, 0x6b, 0x70, 0x71, 0x38, 0x67, 0x39, 0x66, 0x77, 0x63, 0x66, 0x6d, 0x75, 0x72, 0x75, 0x35, 0x38, 0x39, 0x68, 0x6b, 0x6a, 0x34, 0x37, 0x6a, 0x34, 0x73, 0x6d, 0x71, 0x36, 0x38, 0x33, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndamz4kys5rwi6uqz3jt32cbpjssa75e663kcvmmeb2hrf7v")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaqqfxakrfwrn2fva542ydnwjrak9qthkcutumcbehc2j9q")
	require.NoError(t, err)

	// bmRhcXFmeGFrcmZ3cm4yZnZhNTQyeWRud2pyYWs5cXRoa2N1dHVtY2JlaGMyajlxAAjSrCLE0zRuZGFtejRreXM1cndpNnVxejNqdDMyY2JwanNzYTc1ZTY2M2tjdm1tZWIyaHJmN3Y=
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x71, 0x66, 0x78, 0x61, 0x6b, 0x72, 0x66, 0x77, 0x72, 0x6e, 0x32, 0x66, 0x76, 0x61, 0x35, 0x34, 0x32, 0x79, 0x64, 0x6e, 0x77, 0x6a, 0x72, 0x61, 0x6b, 0x39, 0x71, 0x74, 0x68, 0x6b, 0x63, 0x75, 0x74, 0x75, 0x6d, 0x63, 0x62, 0x65, 0x68, 0x63, 0x32, 0x6a, 0x39, 0x71, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x6d, 0x7a, 0x34, 0x6b, 0x79, 0x73, 0x35, 0x72, 0x77, 0x69, 0x36, 0x75, 0x71, 0x7a, 0x33, 0x6a, 0x74, 0x33, 0x32, 0x63, 0x62, 0x70, 0x6a, 0x73, 0x73, 0x61, 0x37, 0x35, 0x65, 0x36, 0x36, 0x33, 0x6b, 0x63, 0x76, 0x6d, 0x6d, 0x65, 0x62, 0x32, 0x68, 0x72, 0x66, 0x37, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndad7gbf9p2iq3ykpg64a9kz9d6cmjsm4ddhet3q72dfxnqf")
	require.NoError(t, err)

	// bmRhZDdnYmY5cDJpcTN5a3BnNjRhOWt6OWQ2Y21qc200ZGRoZXQzcTcyZGZ4bnFmAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x37, 0x67, 0x62, 0x66, 0x39, 0x70, 0x32, 0x69, 0x71, 0x33, 0x79, 0x6b, 0x70, 0x67, 0x36, 0x34, 0x61, 0x39, 0x6b, 0x7a, 0x39, 0x64, 0x36, 0x63, 0x6d, 0x6a, 0x73, 0x6d, 0x34, 0x64, 0x64, 0x68, 0x65, 0x74, 0x33, 0x71, 0x37, 0x32, 0x64, 0x66, 0x78, 0x6e, 0x71, 0x66, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndamuniuf6vjtt4k72hu4ce2zujrxcd2pvytybrbvchzsp3b")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhbXVuaXVmNnZqdHQ0azcyaHU0Y2UyenVqcnhjZDJwdnl0eWJyYnZjaHpzcDNi
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x6d, 0x75, 0x6e, 0x69, 0x75, 0x66, 0x36, 0x76, 0x6a, 0x74, 0x74, 0x34, 0x6b, 0x37, 0x32, 0x68, 0x75, 0x34, 0x63, 0x65, 0x32, 0x7a, 0x75, 0x6a, 0x72, 0x78, 0x63, 0x64, 0x32, 0x70, 0x76, 0x79, 0x74, 0x79, 0x62, 0x72, 0x62, 0x76, 0x63, 0x68, 0x7a, 0x73, 0x70, 0x33, 0x62}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndabc4djeubbhtu8xhka764wq6ew4gx2u45cwzrucpnr7v5q")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFiYzRkamV1YmJodHU4eGhrYTc2NHdxNmV3NGd4MnU0NWN3enJ1Y3Bucjd2NXE=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x62, 0x63, 0x34, 0x64, 0x6a, 0x65, 0x75, 0x62, 0x62, 0x68, 0x74, 0x75, 0x38, 0x78, 0x68, 0x6b, 0x61, 0x37, 0x36, 0x34, 0x77, 0x71, 0x36, 0x65, 0x77, 0x34, 0x67, 0x78, 0x32, 0x75, 0x34, 0x35, 0x63, 0x77, 0x7a, 0x72, 0x75, 0x63, 0x70, 0x6e, 0x72, 0x37, 0x76, 0x35, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndaeh7x7tr8viu9a2cmrc9qzcbd3mn28mfnrx8bw4cdc7ds5")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndanpdypkjqj47faw7euk9ryjij74ej9cxtdds5cbi523k5y")
	require.NoError(t, err)

	// bmRhbnBkeXBranFqNDdmYXc3ZXVrOXJ5amlqNzRlajljeHRkZHM1Y2JpNTIzazV5AAz/orpRehFuZGFlaDd4N3RyOHZpdTlhMmNtcmM5cXpjYmQzbW4yOG1mbnJ4OGJ3NGNkYzdkczU=
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x70, 0x64, 0x79, 0x70, 0x6b, 0x6a, 0x71, 0x6a, 0x34, 0x37, 0x66, 0x61, 0x77, 0x37, 0x65, 0x75, 0x6b, 0x39, 0x72, 0x79, 0x6a, 0x69, 0x6a, 0x37, 0x34, 0x65, 0x6a, 0x39, 0x63, 0x78, 0x74, 0x64, 0x64, 0x73, 0x35, 0x63, 0x62, 0x69, 0x35, 0x32, 0x33, 0x6b, 0x35, 0x79, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x65, 0x68, 0x37, 0x78, 0x37, 0x74, 0x72, 0x38, 0x76, 0x69, 0x75, 0x39, 0x61, 0x32, 0x63, 0x6d, 0x72, 0x63, 0x39, 0x71, 0x7a, 0x63, 0x62, 0x64, 0x33, 0x6d, 0x6e, 0x32, 0x38, 0x6d, 0x66, 0x6e, 0x72, 0x78, 0x38, 0x62, 0x77, 0x34, 0x63, 0x64, 0x63, 0x37, 0x64, 0x73, 0x35}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndaenrcrzqkm8n9w7rbmx7jmvfj3hvgrjhdqyzejh9shg2kp")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xfe, 0xfb, 0x11, 0xee, 0x7f, 0xc7, 0x1f, 0x8a, 0x43, 0xac, 0x76, 0xc8, 0xa5, 0x03, 0x9d, 0x6c, 0x6b, 0x82, 0x34, 0xcf, 0x04, 0xd8, 0x42, 0x0a, 0x56, 0x72, 0x4d, 0x51, 0x8e, 0x8c, 0x4b, 0xeb}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xfa, 0x26, 0xa2, 0xcd, 0xdf, 0x09, 0xca, 0xc1, 0x9b, 0xf9, 0x19, 0x43, 0xff, 0x39, 0xeb, 0x85, 0x6d, 0xc0, 0x9f, 0xd1, 0x87, 0x75, 0x3f, 0x6b, 0xf1, 0x9f, 0x23, 0x66, 0xaf, 0xd3, 0x8b, 0x9a}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWQ5cnllcnFyOWR0OWN1ZHh0NW50amlkdnh5Z3phdHczNmNwc3Nza2szM2U0d25xdHRmOHpqNXZjaGp2c2NoegAZX/GDxHNZbmRhZW5yY3J6cWttOG45dzdyYm14N2ptdmZqM2h2Z3JqaGRxeXplamg5c2hnMmtwbnB1YmE4amFkdGJiZWQ3Y3BpeXA1NmU2eHNuNTllbndoOTMzN3FjeTVzZTk0Z2R6a3I1bThncnVnM3hyNHFmM3c3NW11Nm5mbmlpbTRxblBtbnAwT0VxczdtWmc=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x39, 0x72, 0x79, 0x65, 0x72, 0x71, 0x72, 0x39, 0x64, 0x74, 0x39, 0x63, 0x75, 0x64, 0x78, 0x74, 0x35, 0x6e, 0x74, 0x6a, 0x69, 0x64, 0x76, 0x78, 0x79, 0x67, 0x7a, 0x61, 0x74, 0x77, 0x33, 0x36, 0x63, 0x70, 0x73, 0x73, 0x73, 0x6b, 0x6b, 0x33, 0x33, 0x65, 0x34, 0x77, 0x6e, 0x71, 0x74, 0x74, 0x66, 0x38, 0x7a, 0x6a, 0x35, 0x76, 0x63, 0x68, 0x6a, 0x76, 0x73, 0x63, 0x68, 0x7a, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x65, 0x6e, 0x72, 0x63, 0x72, 0x7a, 0x71, 0x6b, 0x6d, 0x38, 0x6e, 0x39, 0x77, 0x37, 0x72, 0x62, 0x6d, 0x78, 0x37, 0x6a, 0x6d, 0x76, 0x66, 0x6a, 0x33, 0x68, 0x76, 0x67, 0x72, 0x6a, 0x68, 0x64, 0x71, 0x79, 0x7a, 0x65, 0x6a, 0x68, 0x39, 0x73, 0x68, 0x67, 0x32, 0x6b, 0x70, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x37, 0x63, 0x70, 0x69, 0x79, 0x70, 0x35, 0x36, 0x65, 0x36, 0x78, 0x73, 0x6e, 0x35, 0x39, 0x65, 0x6e, 0x77, 0x68, 0x39, 0x33, 0x33, 0x37, 0x71, 0x63, 0x79, 0x35, 0x73, 0x65, 0x39, 0x34, 0x67, 0x64, 0x7a, 0x6b, 0x72, 0x35, 0x6d, 0x38, 0x67, 0x72, 0x75, 0x67, 0x33, 0x78, 0x72, 0x34, 0x71, 0x66, 0x33, 0x77, 0x37, 0x35, 0x6d, 0x75, 0x36, 0x6e, 0x66, 0x6e, 0x69, 0x69, 0x6d, 0x34, 0x71, 0x6e, 0x50, 0x6d, 0x6e, 0x70, 0x30, 0x4f, 0x45, 0x71, 0x73, 0x37, 0x6d, 0x5a, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: 4qnPmnp0OEqs7mZg
				[]byte{0xe2, 0xa9, 0xcf, 0x9a, 0x7a, 0x74, 0x38, 0x4a, 0xac, 0xee, 0x66, 0x60},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: 4qnPmnp0OEqs7mZg
				[]byte{0xe2, 0xa9, 0xcf, 0x9a, 0x7a, 0x74, 0x38, 0x4a, 0xac, 0xee, 0x66, 0x60},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndahf7n5e3fkfh53rry327hcudgukfsxnv4v3apujpnt8ryj")
	require.NoError(t, err)
	stakeRules, err := address.Validate("ndab8kets4edruqyw6pps9vjgem5n7vtk5awhmdb57rxckb8")
	require.NoError(t, err)
	stakeStakeTo, err := address.Validate("ndaree85gkia2e7g78kw2swb3k95gi6aihwhh93bajhg7i9z")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFiOGtldHM0ZWRydXF5dzZwcHM5dmpnZW01bjd2dGs1YXdobWRiNTdyeGNrYjgABJUapCZXuW5kYXJlZTg1Z2tpYTJlN2c3OGt3MnN3YjNrOTVnaTZhaWh3aGg5M2JhamhnN2k5em5kYWhmN241ZTNma2ZoNTNycnkzMjdoY3VkZ3VrZnN4bnY0djNhcHVqcG50OHJ5ag==
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x62, 0x38, 0x6b, 0x65, 0x74, 0x73, 0x34, 0x65, 0x64, 0x72, 0x75, 0x71, 0x79, 0x77, 0x36, 0x70, 0x70, 0x73, 0x39, 0x76, 0x6a, 0x67, 0x65, 0x6d, 0x35, 0x6e, 0x37, 0x76, 0x74, 0x6b, 0x35, 0x61, 0x77, 0x68, 0x6d, 0x64, 0x62, 0x35, 0x37, 0x72, 0x78, 0x63, 0x6b, 0x62, 0x38, 0x00, 0x04, 0x95, 0x1a, 0xa4, 0x26, 0x57, 0xb9, 0x6e, 0x64, 0x61, 0x72, 0x65, 0x65, 0x38, 0x35, 0x67, 0x6b, 0x69, 0x61, 0x32, 0x65, 0x37, 0x67, 0x37, 0x38, 0x6b, 0x77, 0x32, 0x73, 0x77, 0x62, 0x33, 0x6b, 0x39, 0x35, 0x67, 0x69, 0x36, 0x61, 0x69, 0x68, 0x77, 0x68, 0x68, 0x39, 0x33, 0x62, 0x61, 0x6a, 0x68, 0x67, 0x37, 0x69, 0x39, 0x7a, 0x6e, 0x64, 0x61, 0x68, 0x66, 0x37, 0x6e, 0x35, 0x65, 0x33, 0x66, 0x6b, 0x66, 0x68, 0x35, 0x33, 0x72, 0x72, 0x79, 0x33, 0x32, 0x37, 0x68, 0x63, 0x75, 0x64, 0x67, 0x75, 0x6b, 0x66, 0x73, 0x78, 0x6e, 0x76, 0x34, 0x76, 0x33, 0x61, 0x70, 0x75, 0x6a, 0x70, 0x6e, 0x74, 0x38, 0x72, 0x79, 0x6a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndag4k6ntmasxexxjibiw3tvqa3rd5mcebfhfwv78uxiuf5b")
	require.NoError(t, err)

	// c0xhQ3ZwV3ppWUQ2a090RG5kYWc0azZudG1hc3hleHhqaWJpdzN0dnFhM3JkNW1jZWJmaGZ3djc4dXhpdWY1YnN0cmluZzogaGN0Y3VhIGh4a3FmZGFmIAAaew+dodpY
	expect := []byte{0x73, 0x4c, 0x61, 0x43, 0x76, 0x70, 0x57, 0x7a, 0x69, 0x59, 0x44, 0x36, 0x6b, 0x4f, 0x74, 0x44, 0x6e, 0x64, 0x61, 0x67, 0x34, 0x6b, 0x36, 0x6e, 0x74, 0x6d, 0x61, 0x73, 0x78, 0x65, 0x78, 0x78, 0x6a, 0x69, 0x62, 0x69, 0x77, 0x33, 0x74, 0x76, 0x71, 0x61, 0x33, 0x72, 0x64, 0x35, 0x6d, 0x63, 0x65, 0x62, 0x66, 0x68, 0x66, 0x77, 0x76, 0x37, 0x38, 0x75, 0x78, 0x69, 0x75, 0x66, 0x35, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x68, 0x63, 0x74, 0x63, 0x75, 0x61, 0x20, 0x68, 0x78, 0x6b, 0x71, 0x66, 0x64, 0x61, 0x66, 0x20, 0x00, 0x1a, 0x7b, 0x0f, 0x9d, 0xa1, 0xda, 0x58}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: sLaCvpWziYD6kOtD
				[]byte{0xb0, 0xb6, 0x82, 0xbe, 0x95, 0xb3, 0x89, 0x80, 0xfa, 0x90, 0xeb, 0x43},
				"string: hctcua hxkqfdaf ",
				7453656393833048,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: sLaCvpWziYD6kOtD
				[]byte{0xb0, 0xb6, 0x82, 0xbe, 0x95, 0xb3, 0x89, 0x80, 0xfa, 0x90, 0xeb, 0x43},
				"string: hctcua hxkqfdaf ",
				7453656393833048,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABS3pVol5LEAC4lM+EDsnA==
	expect := []byte{0x00, 0x14, 0xb7, 0xa5, 0x5a, 0x25, 0xe4, 0xb1, 0x00, 0x0b, 0x89, 0x4c, 0xf8, 0x40, 0xec, 0x9c}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				5831420344132785,
				3247188419341468,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				5831420344132785,
				3247188419341468,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndapmt2f65rhpkud95crxc7fw4vx4b6ajfpddcupzsqcznr6")
	require.NoError(t, err)

	// bmRhcG10MmY2NXJocGt1ZDk1Y3J4YzdmdzR2eDRiNmFqZnBkZGN1cHpzcWN6bnI2AAKwKTbVAfw=
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x6d, 0x74, 0x32, 0x66, 0x36, 0x35, 0x72, 0x68, 0x70, 0x6b, 0x75, 0x64, 0x39, 0x35, 0x63, 0x72, 0x78, 0x63, 0x37, 0x66, 0x77, 0x34, 0x76, 0x78, 0x34, 0x62, 0x36, 0x61, 0x6a, 0x66, 0x70, 0x64, 0x64, 0x63, 0x75, 0x70, 0x7a, 0x73, 0x71, 0x63, 0x7a, 0x6e, 0x72, 0x36, 0x00, 0x02, 0xb0, 0x29, 0x36, 0xd5, 0x01, 0xfc}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				756641013498364,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				756641013498364,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndajepuizu4grtd677pnf2qetx4iu9rpzqp9dkgfdvnv47jv")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndagaexy4dcunvtnu7h7hkm9huzz42hipvm9bvbcmp3izu63")
	require.NoError(t, err)

	// bmRhZ2FleHk0ZGN1bnZ0bnU3aDdoa205aHV6ejQyaGlwdm05YnZiY21wM2l6dTYzMnkzbTdkdDE1aDE2bTQ4czY1ODkzMnVzABFD9/Sl7ncAGEuS9nQEOG5kYWplcHVpenU0Z3J0ZDY3N3BuZjJxZXR4NGl1OXJwenFwOWRrZ2Zkdm52NDdqdg==
	expect := []byte{0x6e, 0x64, 0x61, 0x67, 0x61, 0x65, 0x78, 0x79, 0x34, 0x64, 0x63, 0x75, 0x6e, 0x76, 0x74, 0x6e, 0x75, 0x37, 0x68, 0x37, 0x68, 0x6b, 0x6d, 0x39, 0x68, 0x75, 0x7a, 0x7a, 0x34, 0x32, 0x68, 0x69, 0x70, 0x76, 0x6d, 0x39, 0x62, 0x76, 0x62, 0x63, 0x6d, 0x70, 0x33, 0x69, 0x7a, 0x75, 0x36, 0x33, 0x32, 0x79, 0x33, 0x6d, 0x37, 0x64, 0x74, 0x31, 0x35, 0x68, 0x31, 0x36, 0x6d, 0x34, 0x38, 0x73, 0x36, 0x35, 0x38, 0x39, 0x33, 0x32, 0x75, 0x73, 0x00, 0x11, 0x43, 0xf7, 0xf4, 0xa5, 0xee, 0x77, 0x00, 0x18, 0x4b, 0x92, 0xf6, 0x74, 0x04, 0x38, 0x6e, 0x64, 0x61, 0x6a, 0x65, 0x70, 0x75, 0x69, 0x7a, 0x75, 0x34, 0x67, 0x72, 0x74, 0x64, 0x36, 0x37, 0x37, 0x70, 0x6e, 0x66, 0x32, 0x71, 0x65, 0x74, 0x78, 0x34, 0x69, 0x75, 0x39, 0x72, 0x70, 0x7a, 0x71, 0x70, 0x39, 0x64, 0x6b, 0x67, 0x66, 0x64, 0x76, 0x6e, 0x76, 0x34, 0x37, 0x6a, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				4859806844579447,
				71507808658932,
				6838494013162552,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				4859806844579447,
				71507808658932,
				6838494013162552,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA2WjT9x+XxvNWdRcHZDR000MWxaUDlrAALCkpEBj6Y=
	expect := []byte{0x00, 0x0d, 0x96, 0x8d, 0x3f, 0x71, 0xf9, 0x7c, 0x6f, 0x35, 0x67, 0x51, 0x70, 0x76, 0x43, 0x47, 0x4d, 0x34, 0x31, 0x6c, 0x5a, 0x50, 0x39, 0x6b, 0x00, 0x02, 0xc2, 0x92, 0x91, 0x01, 0x8f, 0xa6}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: o5gQpvCGM41lZP9k
				[]byte{0xa3, 0x98, 0x10, 0xa6, 0xf0, 0x86, 0x33, 0x8d, 0x65, 0x64, 0xff, 0x64},
				3824708096227708,
				776884707233702,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: o5gQpvCGM41lZP9k
				[]byte{0xa3, 0x98, 0x10, 0xa6, 0xf0, 0x86, 0x33, 0x8d, 0x65, 0x64, 0xff, 0x64},
				3824708096227708,
				776884707233702,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndac8vn4vq6tssg2nqa58kgquh55uudsasr7mjcud5mtqtcw")
	require.NoError(t, err)

	// bmRhYzh2bjR2cTZ0c3NnMm5xYTU4a2dxdWg1NXV1ZHNhc3I3bWpjdWQ1bXRxdGN3AAbjyvzK5FE=
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x38, 0x76, 0x6e, 0x34, 0x76, 0x71, 0x36, 0x74, 0x73, 0x73, 0x67, 0x32, 0x6e, 0x71, 0x61, 0x35, 0x38, 0x6b, 0x67, 0x71, 0x75, 0x68, 0x35, 0x35, 0x75, 0x75, 0x64, 0x73, 0x61, 0x73, 0x72, 0x37, 0x6d, 0x6a, 0x63, 0x75, 0x64, 0x35, 0x6d, 0x74, 0x71, 0x74, 0x63, 0x77, 0x00, 0x06, 0xe3, 0xca, 0xfc, 0xca, 0xe4, 0x51}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				1939310824318033,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				1939310824318033,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndadafx6wiibcxjqd454w5fiskbbui5en6z2wpkmyiyfyzrh")
	require.NoError(t, err)

	// AAYjQ7GGtjxuZGFkYWZ4NndpaWJjeGpxZDQ1NHc1Zmlza2JidWk1ZW42ejJ3cGtteWl5Znl6cmg=
	expect := []byte{0x00, 0x06, 0x23, 0x43, 0xb1, 0x86, 0xb6, 0x3c, 0x6e, 0x64, 0x61, 0x64, 0x61, 0x66, 0x78, 0x36, 0x77, 0x69, 0x69, 0x62, 0x63, 0x78, 0x6a, 0x71, 0x64, 0x34, 0x35, 0x34, 0x77, 0x35, 0x66, 0x69, 0x73, 0x6b, 0x62, 0x62, 0x75, 0x69, 0x35, 0x65, 0x6e, 0x36, 0x7a, 0x32, 0x77, 0x70, 0x6b, 0x6d, 0x79, 0x69, 0x79, 0x66, 0x79, 0x7a, 0x72, 0x68}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				1727623508440636,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				1727623508440636,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAnZ8X2ekW0ACjuTk/lBUg==
	expect := []byte{0x00, 0x09, 0xd9, 0xf1, 0x7d, 0x9e, 0x91, 0x6d, 0x00, 0x0a, 0x3b, 0x93, 0x93, 0xf9, 0x41, 0x52}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2772906008285549,
				2880254795923794,
			),
		},
		{
			"with signature",
			NewIssue(
				2772906008285549,
				2880254795923794,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndapspknsuyvriy2367btuq42dpzt3mx6n5t3t44db87qhve")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndaiyehks86wzj8gpzxnrjae2wctggftnkd9c85evdkjmqwz")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xc9, 0x29, 0x0e, 0x3d, 0x3a, 0x51, 0x4f, 0xce, 0x18, 0x24, 0xc7, 0xee, 0x43, 0x1b, 0x12, 0x8f, 0xfb, 0xba, 0xd3, 0x51, 0x42, 0xbc, 0x24, 0xed, 0xb5, 0xa3, 0xa5, 0x02, 0xa1, 0xb8, 0xa6, 0x2f}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x0f, 0xbb, 0x1b, 0x2c, 0x77, 0xd0, 0x82, 0xdf, 0xd1, 0xe9, 0x8b, 0x1c, 0x36, 0xcc, 0xb8, 0xb7, 0x18, 0xa2, 0xa0, 0xcc, 0xe8, 0x22, 0xdd, 0x83, 0x3f, 0x21, 0x5b, 0x4f, 0xb6, 0x01, 0x24, 0x92, 0xe3, 0xc9, 0x13, 0x6f, 0xe2, 0x12, 0xda, 0x0c, 0xf3, 0x8e, 0xc0, 0xde, 0xf0, 0x70, 0x76, 0x10, 0x1e, 0x07, 0x67, 0x7b, 0x63, 0xdc, 0x99, 0x70, 0xc4, 0x0a, 0x8a, 0x12, 0x87, 0x1e, 0xee, 0x9f})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x41, 0x10, 0x4f, 0x48, 0x43, 0x21, 0xc7, 0xe5, 0x5e, 0x75, 0x8f, 0x14, 0xc3, 0x0e, 0xaf, 0xe4, 0xae, 0xc1, 0xc1, 0x3e, 0xdc, 0x06, 0xf2, 0x43, 0xb1, 0xe8, 0xe9, 0x39, 0x77, 0x39, 0xc5, 0x96}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndajd223bqs8fyk658tgbhxhjguzbegr8skud9jmrnbbv95x")
	require.NoError(t, err)

	// bmRhaXllaGtzODZ3emo4Z3B6eG5yamFlMndjdGdnZnRua2Q5Yzg1ZXZka2ptcXd6bmRhamQyMjNicXM4ZnlrNjU4dGdiaHhoamd1emJlZ3I4c2t1ZDlqbXJuYmJ2OTV4bnB1YmE4amFkdGJiZWRldXVkdDdoaml3OXZzMmV2ZDg2czI1Y2toOXpxeXZrZmJtMmpocHl5dDRrYXhiemN2Yzl1aWFzamNmeHIydTN5M20xOGR0NmgzMW03NzI3MTl1c2E0amFkdGNhYjg3dHltZHo0Y2JwOXdyanRucWRwdmYyeTZua2ZpZ243YXRwNWEzOWVmcHc5cHNiZXVqcWh1aXZwOXRiZnlzbjhxaG5ienpzcWI1YmFoc2huNzd5aHplM3FkY2F4Y3N1czZycTdoNzl6Z3ZodXl1d25wdWJhOGphZHRiYmViYXRhdjRpaW5zNnIzazhxeWh0anMycXg5dWs3c3FiaDVxYXA2dWR5aHdxdXFtemhoYzNucHJyeWtnbnU4NGg5TmVVSWJza1Z3V29jQ1BnABs65BlHbVZuZGFwc3BrbnN1eXZyaXkyMzY3YnR1cTQyZHB6dDNteDZuNXQzdDQ0ZGI4N3FodmU=
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x79, 0x65, 0x68, 0x6b, 0x73, 0x38, 0x36, 0x77, 0x7a, 0x6a, 0x38, 0x67, 0x70, 0x7a, 0x78, 0x6e, 0x72, 0x6a, 0x61, 0x65, 0x32, 0x77, 0x63, 0x74, 0x67, 0x67, 0x66, 0x74, 0x6e, 0x6b, 0x64, 0x39, 0x63, 0x38, 0x35, 0x65, 0x76, 0x64, 0x6b, 0x6a, 0x6d, 0x71, 0x77, 0x7a, 0x6e, 0x64, 0x61, 0x6a, 0x64, 0x32, 0x32, 0x33, 0x62, 0x71, 0x73, 0x38, 0x66, 0x79, 0x6b, 0x36, 0x35, 0x38, 0x74, 0x67, 0x62, 0x68, 0x78, 0x68, 0x6a, 0x67, 0x75, 0x7a, 0x62, 0x65, 0x67, 0x72, 0x38, 0x73, 0x6b, 0x75, 0x64, 0x39, 0x6a, 0x6d, 0x72, 0x6e, 0x62, 0x62, 0x76, 0x39, 0x35, 0x78, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x65, 0x75, 0x75, 0x64, 0x74, 0x37, 0x68, 0x6a, 0x69, 0x77, 0x39, 0x76, 0x73, 0x32, 0x65, 0x76, 0x64, 0x38, 0x36, 0x73, 0x32, 0x35, 0x63, 0x6b, 0x68, 0x39, 0x7a, 0x71, 0x79, 0x76, 0x6b, 0x66, 0x62, 0x6d, 0x32, 0x6a, 0x68, 0x70, 0x79, 0x79, 0x74, 0x34, 0x6b, 0x61, 0x78, 0x62, 0x7a, 0x63, 0x76, 0x63, 0x39, 0x75, 0x69, 0x61, 0x73, 0x6a, 0x63, 0x66, 0x78, 0x72, 0x32, 0x75, 0x33, 0x79, 0x33, 0x6d, 0x31, 0x38, 0x64, 0x74, 0x36, 0x68, 0x33, 0x31, 0x6d, 0x37, 0x37, 0x32, 0x37, 0x31, 0x39, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x62, 0x38, 0x37, 0x74, 0x79, 0x6d, 0x64, 0x7a, 0x34, 0x63, 0x62, 0x70, 0x39, 0x77, 0x72, 0x6a, 0x74, 0x6e, 0x71, 0x64, 0x70, 0x76, 0x66, 0x32, 0x79, 0x36, 0x6e, 0x6b, 0x66, 0x69, 0x67, 0x6e, 0x37, 0x61, 0x74, 0x70, 0x35, 0x61, 0x33, 0x39, 0x65, 0x66, 0x70, 0x77, 0x39, 0x70, 0x73, 0x62, 0x65, 0x75, 0x6a, 0x71, 0x68, 0x75, 0x69, 0x76, 0x70, 0x39, 0x74, 0x62, 0x66, 0x79, 0x73, 0x6e, 0x38, 0x71, 0x68, 0x6e, 0x62, 0x7a, 0x7a, 0x73, 0x71, 0x62, 0x35, 0x62, 0x61, 0x68, 0x73, 0x68, 0x6e, 0x37, 0x37, 0x79, 0x68, 0x7a, 0x65, 0x33, 0x71, 0x64, 0x63, 0x61, 0x78, 0x63, 0x73, 0x75, 0x73, 0x36, 0x72, 0x71, 0x37, 0x68, 0x37, 0x39, 0x7a, 0x67, 0x76, 0x68, 0x75, 0x79, 0x75, 0x77, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x61, 0x74, 0x61, 0x76, 0x34, 0x69, 0x69, 0x6e, 0x73, 0x36, 0x72, 0x33, 0x6b, 0x38, 0x71, 0x79, 0x68, 0x74, 0x6a, 0x73, 0x32, 0x71, 0x78, 0x39, 0x75, 0x6b, 0x37, 0x73, 0x71, 0x62, 0x68, 0x35, 0x71, 0x61, 0x70, 0x36, 0x75, 0x64, 0x79, 0x68, 0x77, 0x71, 0x75, 0x71, 0x6d, 0x7a, 0x68, 0x68, 0x63, 0x33, 0x6e, 0x70, 0x72, 0x72, 0x79, 0x6b, 0x67, 0x6e, 0x75, 0x38, 0x34, 0x68, 0x39, 0x4e, 0x65, 0x55, 0x49, 0x62, 0x73, 0x6b, 0x56, 0x77, 0x57, 0x6f, 0x63, 0x43, 0x50, 0x67, 0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x6e, 0x64, 0x61, 0x70, 0x73, 0x70, 0x6b, 0x6e, 0x73, 0x75, 0x79, 0x76, 0x72, 0x69, 0x79, 0x32, 0x33, 0x36, 0x37, 0x62, 0x74, 0x75, 0x71, 0x34, 0x32, 0x64, 0x70, 0x7a, 0x74, 0x33, 0x6d, 0x78, 0x36, 0x6e, 0x35, 0x74, 0x33, 0x74, 0x34, 0x34, 0x64, 0x62, 0x38, 0x37, 0x71, 0x68, 0x76, 0x65}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				103962660772719,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: 9NeUIbskVwWocCPg
				[]byte{0xf4, 0xd7, 0x94, 0x21, 0xbb, 0x24, 0x57, 0x05, 0xa8, 0x70, 0x23, 0xe0},
				createchildaccountChildDelegationNode,
				7664575722253654,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				103962660772719,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: 9NeUIbskVwWocCPg
				[]byte{0xf4, 0xd7, 0x94, 0x21, 0xbb, 0x24, 0x57, 0x05, 0xa8, 0x70, 0x23, 0xe0},
				createchildaccountChildDelegationNode,
				7664575722253654,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABEBf7yJgC0AD6RZFph1Zw==
	expect := []byte{0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				4786722739683373,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				4786722739683373,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBuaiBiIHMgdmxndGVtYXAgenFsIHEgaHl6cnl3aiBwaiAAG1OJQhZblGp2WitDWGFMRkdrUlZvdWk=
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x6e, 0x6a, 0x20, 0x62, 0x20, 0x73, 0x20, 0x76, 0x6c, 0x67, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x20, 0x7a, 0x71, 0x6c, 0x20, 0x71, 0x20, 0x68, 0x79, 0x7a, 0x72, 0x79, 0x77, 0x6a, 0x20, 0x70, 0x6a, 0x20, 0x00, 0x1b, 0x53, 0x89, 0x42, 0x16, 0x5b, 0x94, 0x6a, 0x76, 0x5a, 0x2b, 0x43, 0x58, 0x61, 0x4c, 0x46, 0x47, 0x6b, 0x52, 0x56, 0x6f, 0x75, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: nj b s vlgtemap zql q hyzrywj pj ",
				// Value as b64: jvZ+CXaLFGkRVoui
				[]byte{0x8e, 0xf6, 0x7e, 0x09, 0x76, 0x8b, 0x14, 0x69, 0x11, 0x56, 0x8b, 0xa2},
				7691673355574164,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: nj b s vlgtemap zql q hyzrywj pj ",
				// Value as b64: jvZ+CXaLFGkRVoui
				[]byte{0x8e, 0xf6, 0x7e, 0x09, 0x76, 0x8b, 0x14, 0x69, 0x11, 0x56, 0x8b, 0xa2},
				7691673355574164,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetStakeRules_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setstakerulesTarget, err := address.Validate("ndajs5srwzcmnuii4nufd6guaan39yp3a258bpz8tx285nff")
	require.NoError(t, err)

	// ABoMK/n8ZrEvTVNPRGIrU3pSSGxKM1M5bmRhanM1c3J3emNtbnVpaTRudWZkNmd1YWFuMzl5cDNhMjU4YnB6OHR4Mjg1bmZm
	expect := []byte{0x00, 0x1a, 0x0c, 0x2b, 0xf9, 0xfc, 0x66, 0xb1, 0x2f, 0x4d, 0x53, 0x4f, 0x44, 0x62, 0x2b, 0x53, 0x7a, 0x52, 0x48, 0x6c, 0x4a, 0x33, 0x53, 0x39, 0x6e, 0x64, 0x61, 0x6a, 0x73, 0x35, 0x73, 0x72, 0x77, 0x7a, 0x63, 0x6d, 0x6e, 0x75, 0x69, 0x69, 0x34, 0x6e, 0x75, 0x66, 0x64, 0x36, 0x67, 0x75, 0x61, 0x61, 0x6e, 0x33, 0x39, 0x79, 0x70, 0x33, 0x61, 0x32, 0x35, 0x38, 0x62, 0x70, 0x7a, 0x38, 0x74, 0x78, 0x32, 0x38, 0x35, 0x6e, 0x66, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetStakeRules
	}{
		{
			"no signatures",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: /MSODb+SzRHlJ3S9
				[]byte{0xfc, 0xc4, 0x8e, 0x0d, 0xbf, 0x92, 0xcd, 0x11, 0xe5, 0x27, 0x74, 0xbd},
				7331732411672241,
			),
		},
		{
			"with signature",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: /MSODb+SzRHlJ3S9
				[]byte{0xfc, 0xc4, 0x8e, 0x0d, 0xbf, 0x92, 0xcd, 0x11, 0xe5, 0x27, 0x74, 0xbd},
				7331732411672241,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
