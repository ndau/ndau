package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndajfg53u7jggqrbuuyy2sm9fsp6sybq93vzwa4eb7eft7vv")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndaqk28vhzvbek2928n2ehdnbgqku23v968jfngcvnmgzn9q")
	require.NoError(t, err)

	// bmRhcWsyOHZoenZiZWsyOTI4bjJlaGRuYmdxa3UyM3Y5NjhqZm5nY3ZubWd6bjlxAAWCIQf8/70AApoPXz8aEm5kYWpmZzUzdTdqZ2dxcmJ1dXl5MnNtOWZzcDZzeWJxOTN2endhNGViN2VmdDd2dg==
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x6b, 0x32, 0x38, 0x76, 0x68, 0x7a, 0x76, 0x62, 0x65, 0x6b, 0x32, 0x39, 0x32, 0x38, 0x6e, 0x32, 0x65, 0x68, 0x64, 0x6e, 0x62, 0x67, 0x71, 0x6b, 0x75, 0x32, 0x33, 0x76, 0x39, 0x36, 0x38, 0x6a, 0x66, 0x6e, 0x67, 0x63, 0x76, 0x6e, 0x6d, 0x67, 0x7a, 0x6e, 0x39, 0x71, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x6a, 0x66, 0x67, 0x35, 0x33, 0x75, 0x37, 0x6a, 0x67, 0x67, 0x71, 0x72, 0x62, 0x75, 0x75, 0x79, 0x79, 0x32, 0x73, 0x6d, 0x39, 0x66, 0x73, 0x70, 0x36, 0x73, 0x79, 0x62, 0x71, 0x39, 0x33, 0x76, 0x7a, 0x77, 0x61, 0x34, 0x65, 0x62, 0x37, 0x65, 0x66, 0x74, 0x37, 0x76, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndar9wqm9jdwbk4pyrxjr9mnmbsbpnd26sdgyeufi54y5hwz")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x0f, 0x15, 0x8e, 0x13, 0x61, 0x36, 0x0d, 0x58, 0x7b, 0xf4, 0x08, 0x53, 0xf1, 0x38, 0xe7, 0xe7, 0xcf, 0x0d, 0x67, 0xd8, 0xbd, 0x0a, 0xdf, 0xeb, 0xab, 0x62, 0x29, 0x33, 0xc2, 0x1e, 0xbc, 0x09}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWFodG1kc3ZuZTVhNHlkNThzZWZoNmoyNjl2NjhkbWg1YzhzeHo5bXhwdGN1bjhjZDQ4YXY1ODg2NHFwdGk2aAAQTcdmlXTFbmRhcjl3cW05amR3Yms0cHlyeGpyOW1ubWJzYnBuZDI2c2RneWV1Zmk1NHk1aHd6YU5UQnpUeU5aMDJISGgxRQ==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x68, 0x74, 0x6d, 0x64, 0x73, 0x76, 0x6e, 0x65, 0x35, 0x61, 0x34, 0x79, 0x64, 0x35, 0x38, 0x73, 0x65, 0x66, 0x68, 0x36, 0x6a, 0x32, 0x36, 0x39, 0x76, 0x36, 0x38, 0x64, 0x6d, 0x68, 0x35, 0x63, 0x38, 0x73, 0x78, 0x7a, 0x39, 0x6d, 0x78, 0x70, 0x74, 0x63, 0x75, 0x6e, 0x38, 0x63, 0x64, 0x34, 0x38, 0x61, 0x76, 0x35, 0x38, 0x38, 0x36, 0x34, 0x71, 0x70, 0x74, 0x69, 0x36, 0x68, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x72, 0x39, 0x77, 0x71, 0x6d, 0x39, 0x6a, 0x64, 0x77, 0x62, 0x6b, 0x34, 0x70, 0x79, 0x72, 0x78, 0x6a, 0x72, 0x39, 0x6d, 0x6e, 0x6d, 0x62, 0x73, 0x62, 0x70, 0x6e, 0x64, 0x32, 0x36, 0x73, 0x64, 0x67, 0x79, 0x65, 0x75, 0x66, 0x69, 0x35, 0x34, 0x79, 0x35, 0x68, 0x77, 0x7a, 0x61, 0x4e, 0x54, 0x42, 0x7a, 0x54, 0x79, 0x4e, 0x5a, 0x30, 0x32, 0x48, 0x48, 0x68, 0x31, 0x45}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: aNTBzTyNZ02HHh1E
				[]byte{0x68, 0xd4, 0xc1, 0xcd, 0x3c, 0x8d, 0x67, 0x4d, 0x87, 0x1e, 0x1d, 0x44},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: aNTBzTyNZ02HHh1E
				[]byte{0x68, 0xd4, 0xc1, 0xcd, 0x3c, 0x8d, 0x67, 0x4d, 0x87, 0x1e, 0x1d, 0x44},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndaknbqi7w2kkwu94neifwdyxkzqt5jr3dat3mm7tgs3zgd2")
	require.NoError(t, err)

	// bmRha25icWk3dzJra3d1OTRuZWlmd2R5eGt6cXQ1anIzZGF0M21tN3RnczN6Z2QyAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x6e, 0x62, 0x71, 0x69, 0x37, 0x77, 0x32, 0x6b, 0x6b, 0x77, 0x75, 0x39, 0x34, 0x6e, 0x65, 0x69, 0x66, 0x77, 0x64, 0x79, 0x78, 0x6b, 0x7a, 0x71, 0x74, 0x35, 0x6a, 0x72, 0x33, 0x64, 0x61, 0x74, 0x33, 0x6d, 0x6d, 0x37, 0x74, 0x67, 0x73, 0x33, 0x7a, 0x67, 0x64, 0x32, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndaneq9wu2ceveqimmivb7hm75c3q6zcqtceb279jn8g5zis")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFuZXE5d3UyY2V2ZXFpbW1pdmI3aG03NWMzcTZ6Y3F0Y2ViMjc5am44ZzV6aXM=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x65, 0x71, 0x39, 0x77, 0x75, 0x32, 0x63, 0x65, 0x76, 0x65, 0x71, 0x69, 0x6d, 0x6d, 0x69, 0x76, 0x62, 0x37, 0x68, 0x6d, 0x37, 0x35, 0x63, 0x33, 0x71, 0x36, 0x7a, 0x63, 0x71, 0x74, 0x63, 0x65, 0x62, 0x32, 0x37, 0x39, 0x6a, 0x6e, 0x38, 0x67, 0x35, 0x7a, 0x69, 0x73}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndafm6kigjfgkf5c58ibnj7gai6u7bphsist89f8q7rautnd")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaqfm3jyx9nwfcp5fqy248wgzt6ccku7gbueiq29ieiwhr4")
	require.NoError(t, err)

	// bmRhcWZtM2p5eDlud2ZjcDVmcXkyNDh3Z3p0NmNja3U3Z2J1ZWlxMjlpZWl3aHI0AAjSrCLE0zRuZGFmbTZraWdqZmdrZjVjNThpYm5qN2dhaTZ1N2JwaHNpc3Q4OWY4cTdyYXV0bmQ=
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x66, 0x6d, 0x33, 0x6a, 0x79, 0x78, 0x39, 0x6e, 0x77, 0x66, 0x63, 0x70, 0x35, 0x66, 0x71, 0x79, 0x32, 0x34, 0x38, 0x77, 0x67, 0x7a, 0x74, 0x36, 0x63, 0x63, 0x6b, 0x75, 0x37, 0x67, 0x62, 0x75, 0x65, 0x69, 0x71, 0x32, 0x39, 0x69, 0x65, 0x69, 0x77, 0x68, 0x72, 0x34, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x66, 0x6d, 0x36, 0x6b, 0x69, 0x67, 0x6a, 0x66, 0x67, 0x6b, 0x66, 0x35, 0x63, 0x35, 0x38, 0x69, 0x62, 0x6e, 0x6a, 0x37, 0x67, 0x61, 0x69, 0x36, 0x75, 0x37, 0x62, 0x70, 0x68, 0x73, 0x69, 0x73, 0x74, 0x38, 0x39, 0x66, 0x38, 0x71, 0x37, 0x72, 0x61, 0x75, 0x74, 0x6e, 0x64}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndanc6skj5mstknusksufzdzq8f842tx8rtc33dkzwp2c7rb")
	require.NoError(t, err)

	// bmRhbmM2c2tqNW1zdGtudXNrc3VmemR6cThmODQydHg4cnRjMzNka3p3cDJjN3JiAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x63, 0x36, 0x73, 0x6b, 0x6a, 0x35, 0x6d, 0x73, 0x74, 0x6b, 0x6e, 0x75, 0x73, 0x6b, 0x73, 0x75, 0x66, 0x7a, 0x64, 0x7a, 0x71, 0x38, 0x66, 0x38, 0x34, 0x32, 0x74, 0x78, 0x38, 0x72, 0x74, 0x63, 0x33, 0x33, 0x64, 0x6b, 0x7a, 0x77, 0x70, 0x32, 0x63, 0x37, 0x72, 0x62, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndaidvsbeyhu76ewu2yvieieh9uwzhmppp2uy69vg6ww4puc")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhaWR2c2JleWh1NzZld3UyeXZpZWllaDl1d3pobXBwcDJ1eTY5dmc2d3c0cHVj
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x69, 0x64, 0x76, 0x73, 0x62, 0x65, 0x79, 0x68, 0x75, 0x37, 0x36, 0x65, 0x77, 0x75, 0x32, 0x79, 0x76, 0x69, 0x65, 0x69, 0x65, 0x68, 0x39, 0x75, 0x77, 0x7a, 0x68, 0x6d, 0x70, 0x70, 0x70, 0x32, 0x75, 0x79, 0x36, 0x39, 0x76, 0x67, 0x36, 0x77, 0x77, 0x34, 0x70, 0x75, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndahj73nrj8wqjzfp55e2r55s9parrqn43v5mbfmpu5t6bcp")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFoajczbnJqOHdxanpmcDU1ZTJyNTVzOXBhcnJxbjQzdjVtYmZtcHU1dDZiY3A=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x68, 0x6a, 0x37, 0x33, 0x6e, 0x72, 0x6a, 0x38, 0x77, 0x71, 0x6a, 0x7a, 0x66, 0x70, 0x35, 0x35, 0x65, 0x32, 0x72, 0x35, 0x35, 0x73, 0x39, 0x70, 0x61, 0x72, 0x72, 0x71, 0x6e, 0x34, 0x33, 0x76, 0x35, 0x6d, 0x62, 0x66, 0x6d, 0x70, 0x75, 0x35, 0x74, 0x36, 0x62, 0x63, 0x70}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationSource, err := address.Validate("ndaqjiyse8jhimupc3mas39pegxddd66v27eagbmcg7z3bv7")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndai3hthupwwk4wpy7dfbmve8z43k6csidbnp9q2k3vrn8rt")
	require.NoError(t, err)

	// bmRhaTNodGh1cHd3azR3cHk3ZGZibXZlOHo0M2s2Y3NpZGJucDlxMmszdnJuOHJ0AAz/orpRehFuZGFxaml5c2U4amhpbXVwYzNtYXMzOXBlZ3hkZGQ2NnYyN2VhZ2JtY2c3ejNidjc=
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x33, 0x68, 0x74, 0x68, 0x75, 0x70, 0x77, 0x77, 0x6b, 0x34, 0x77, 0x70, 0x79, 0x37, 0x64, 0x66, 0x62, 0x6d, 0x76, 0x65, 0x38, 0x7a, 0x34, 0x33, 0x6b, 0x36, 0x63, 0x73, 0x69, 0x64, 0x62, 0x6e, 0x70, 0x39, 0x71, 0x32, 0x6b, 0x33, 0x76, 0x72, 0x6e, 0x38, 0x72, 0x74, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x71, 0x6a, 0x69, 0x79, 0x73, 0x65, 0x38, 0x6a, 0x68, 0x69, 0x6d, 0x75, 0x70, 0x63, 0x33, 0x6d, 0x61, 0x73, 0x33, 0x39, 0x70, 0x65, 0x67, 0x78, 0x64, 0x64, 0x64, 0x36, 0x36, 0x76, 0x32, 0x37, 0x65, 0x61, 0x67, 0x62, 0x6d, 0x63, 0x67, 0x37, 0x7a, 0x33, 0x62, 0x76, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationSource,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationSource,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndabmkjznctk27cvuvzg5z8se6tkcudxsb9zmywrmcd9seia")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x00, 0x42, 0xdc, 0xfd, 0xdc, 0x32, 0x57, 0x07, 0x58, 0xf8, 0x57, 0xd7, 0x4d, 0xc5, 0x18, 0x17, 0xfb, 0xd5, 0x55, 0xfc, 0xd0, 0x1a, 0x6b, 0x29, 0x18, 0x49, 0x1b, 0x64, 0xfb, 0xbb, 0xee, 0x71}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xc6, 0xb5, 0xd3, 0x7c, 0x47, 0x29, 0xa0, 0xc4, 0xe4, 0xc3, 0xd9, 0x9e, 0x0f, 0x9a, 0xa4, 0x28, 0x4c, 0x3d, 0x0f, 0x37, 0x4f, 0x98, 0x83, 0x2a, 0xa7, 0xe4, 0x7b, 0xc3, 0xbd, 0x45, 0x75, 0xf0}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWFhZWZ6aDc1czNmcWI0MjlibTdxdnFmZGFtOXp4a3g5dmlidzQzamRiZXR5M2g1enJ6aGMzdjV6NzRyc3ZteQAZX/GDxHNZbmRhYm1ranpuY3RrMjdjdnV2emc1ejhzZTZ0a2N1ZHhzYjl6bXl3cm1jZDlzZWlhbnB1YmE4amFkdGJiZWRkbW13NTZpNnc0YnRoZTJybjM2ZDY0d3N3ZTJyaXJnN2gzdGEza3c5dWh6czc3aXg0OWF3dWh2bTR6cWZpYmVIUnNNU05pdmU0SU9hWkM=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x61, 0x65, 0x66, 0x7a, 0x68, 0x37, 0x35, 0x73, 0x33, 0x66, 0x71, 0x62, 0x34, 0x32, 0x39, 0x62, 0x6d, 0x37, 0x71, 0x76, 0x71, 0x66, 0x64, 0x61, 0x6d, 0x39, 0x7a, 0x78, 0x6b, 0x78, 0x39, 0x76, 0x69, 0x62, 0x77, 0x34, 0x33, 0x6a, 0x64, 0x62, 0x65, 0x74, 0x79, 0x33, 0x68, 0x35, 0x7a, 0x72, 0x7a, 0x68, 0x63, 0x33, 0x76, 0x35, 0x7a, 0x37, 0x34, 0x72, 0x73, 0x76, 0x6d, 0x79, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x62, 0x6d, 0x6b, 0x6a, 0x7a, 0x6e, 0x63, 0x74, 0x6b, 0x32, 0x37, 0x63, 0x76, 0x75, 0x76, 0x7a, 0x67, 0x35, 0x7a, 0x38, 0x73, 0x65, 0x36, 0x74, 0x6b, 0x63, 0x75, 0x64, 0x78, 0x73, 0x62, 0x39, 0x7a, 0x6d, 0x79, 0x77, 0x72, 0x6d, 0x63, 0x64, 0x39, 0x73, 0x65, 0x69, 0x61, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x64, 0x6d, 0x6d, 0x77, 0x35, 0x36, 0x69, 0x36, 0x77, 0x34, 0x62, 0x74, 0x68, 0x65, 0x32, 0x72, 0x6e, 0x33, 0x36, 0x64, 0x36, 0x34, 0x77, 0x73, 0x77, 0x65, 0x32, 0x72, 0x69, 0x72, 0x67, 0x37, 0x68, 0x33, 0x74, 0x61, 0x33, 0x6b, 0x77, 0x39, 0x75, 0x68, 0x7a, 0x73, 0x37, 0x37, 0x69, 0x78, 0x34, 0x39, 0x61, 0x77, 0x75, 0x68, 0x76, 0x6d, 0x34, 0x7a, 0x71, 0x66, 0x69, 0x62, 0x65, 0x48, 0x52, 0x73, 0x4d, 0x53, 0x4e, 0x69, 0x76, 0x65, 0x34, 0x49, 0x4f, 0x61, 0x5a, 0x43}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: eHRsMSNive4IOaZC
				[]byte{0x78, 0x74, 0x6c, 0x31, 0x23, 0x62, 0xbd, 0xee, 0x08, 0x39, 0xa6, 0x42},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: eHRsMSNive4IOaZC
				[]byte{0x78, 0x74, 0x6c, 0x31, 0x23, 0x62, 0xbd, 0xee, 0x08, 0x39, 0xa6, 0x42},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndabq69f62yicd8iw5z5k9umg73mbhxyqtnnzmnytaez7avk")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndapvz2r5xyjwihj9bjvixreja8af38eb5scvih3byd25cr8")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFwdnoycjV4eWp3aWhqOWJqdml4cmVqYThhZjM4ZWI1c2N2aWgzYnlkMjVjcjhuZGFicTY5ZjYyeWljZDhpdzV6NWs5dW1nNzNtYmh4eXF0bm56bW55dGFlejdhdms=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x70, 0x76, 0x7a, 0x32, 0x72, 0x35, 0x78, 0x79, 0x6a, 0x77, 0x69, 0x68, 0x6a, 0x39, 0x62, 0x6a, 0x76, 0x69, 0x78, 0x72, 0x65, 0x6a, 0x61, 0x38, 0x61, 0x66, 0x33, 0x38, 0x65, 0x62, 0x35, 0x73, 0x63, 0x76, 0x69, 0x68, 0x33, 0x62, 0x79, 0x64, 0x32, 0x35, 0x63, 0x72, 0x38, 0x6e, 0x64, 0x61, 0x62, 0x71, 0x36, 0x39, 0x66, 0x36, 0x32, 0x79, 0x69, 0x63, 0x64, 0x38, 0x69, 0x77, 0x35, 0x7a, 0x35, 0x6b, 0x39, 0x75, 0x6d, 0x67, 0x37, 0x33, 0x6d, 0x62, 0x68, 0x78, 0x79, 0x71, 0x74, 0x6e, 0x6e, 0x7a, 0x6d, 0x6e, 0x79, 0x74, 0x61, 0x65, 0x7a, 0x37, 0x61, 0x76, 0x6b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndapxu4aubihym2rr6t3bzqc5829hjvqndggex2xg8dgmjrq")
	require.NoError(t, err)

	// QUFpZFRFS3RRRmJ4L1d6am5kYXB4dTRhdWJpaHltMnJyNnQzYnpxYzU4MjloanZxbmRnZ2V4MnhnOGRnbWpycXN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x41, 0x41, 0x69, 0x64, 0x54, 0x45, 0x4b, 0x74, 0x51, 0x46, 0x62, 0x78, 0x2f, 0x57, 0x7a, 0x6a, 0x6e, 0x64, 0x61, 0x70, 0x78, 0x75, 0x34, 0x61, 0x75, 0x62, 0x69, 0x68, 0x79, 0x6d, 0x32, 0x72, 0x72, 0x36, 0x74, 0x33, 0x62, 0x7a, 0x71, 0x63, 0x35, 0x38, 0x32, 0x39, 0x68, 0x6a, 0x76, 0x71, 0x6e, 0x64, 0x67, 0x67, 0x65, 0x78, 0x32, 0x78, 0x67, 0x38, 0x64, 0x67, 0x6d, 0x6a, 0x72, 0x71, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: AAidTEKtQFbx/Wzj
				[]byte{0x00, 0x08, 0x9d, 0x4c, 0x42, 0xad, 0x40, 0x56, 0xf1, 0xfd, 0x6c, 0xe3},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: AAidTEKtQFbx/Wzj
				[]byte{0x00, 0x08, 0x9d, 0x4c, 0x42, 0xad, 0x40, 0x56, 0xf1, 0xfd, 0x6c, 0xe3},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndak8dubdtdu5riyt7ma4hx9gqrddh7w44ja3jypzipusbje")
	require.NoError(t, err)

	// bmRhazhkdWJkdGR1NXJpeXQ3bWE0aHg5Z3FyZGRoN3c0NGphM2p5cHppcHVzYmplAA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x38, 0x64, 0x75, 0x62, 0x64, 0x74, 0x64, 0x75, 0x35, 0x72, 0x69, 0x79, 0x74, 0x37, 0x6d, 0x61, 0x34, 0x68, 0x78, 0x39, 0x67, 0x71, 0x72, 0x64, 0x64, 0x68, 0x37, 0x77, 0x34, 0x34, 0x6a, 0x61, 0x33, 0x6a, 0x79, 0x70, 0x7a, 0x69, 0x70, 0x75, 0x73, 0x62, 0x6a, 0x65, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndahet3i9b9a883prktsdjyr5k96xjq5n9jyjmb7benb5c95")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndamrvdyurwv5mhb29w5vxukx8zqxme738pt6g44ycsiafnu")
	require.NoError(t, err)

	// bmRhbXJ2ZHl1cnd2NW1oYjI5dzV2eHVreDh6cXhtZTczOHB0Nmc0NHljc2lhZm51MXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWhldDNpOWI5YTg4M3Bya3RzZGp5cjVrOTZ4anE1bjlqeWptYjdiZW5iNWM5NQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x72, 0x76, 0x64, 0x79, 0x75, 0x72, 0x77, 0x76, 0x35, 0x6d, 0x68, 0x62, 0x32, 0x39, 0x77, 0x35, 0x76, 0x78, 0x75, 0x6b, 0x78, 0x38, 0x7a, 0x71, 0x78, 0x6d, 0x65, 0x37, 0x33, 0x38, 0x70, 0x74, 0x36, 0x67, 0x34, 0x34, 0x79, 0x63, 0x73, 0x69, 0x61, 0x66, 0x6e, 0x75, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x68, 0x65, 0x74, 0x33, 0x69, 0x39, 0x62, 0x39, 0x61, 0x38, 0x38, 0x33, 0x70, 0x72, 0x6b, 0x74, 0x73, 0x64, 0x6a, 0x79, 0x72, 0x35, 0x6b, 0x39, 0x36, 0x78, 0x6a, 0x71, 0x35, 0x6e, 0x39, 0x6a, 0x79, 0x6a, 0x6d, 0x62, 0x37, 0x62, 0x65, 0x6e, 0x62, 0x35, 0x63, 0x39, 0x35}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmotlV0lBcVFZS1BudHFhN3AzAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x65, 0x57, 0x49, 0x41, 0x71, 0x51, 0x59, 0x4b, 0x50, 0x6e, 0x74, 0x71, 0x61, 0x37, 0x70, 0x33, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: eWIAqQYKPntqa7p3
				[]byte{0x79, 0x62, 0x00, 0xa9, 0x06, 0x0a, 0x3e, 0x7b, 0x6a, 0x6b, 0xba, 0x77},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: eWIAqQYKPntqa7p3
				[]byte{0x79, 0x62, 0x00, 0xa9, 0x06, 0x0a, 0x3e, 0x7b, 0x6a, 0x6b, 0xba, 0x77},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSidechainTx_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	sidechaintxSource, err := address.Validate("ndadfwd9an6k96nydut49ttkhcqkjfc8rb57399itnitc3sw")
	require.NoError(t, err)
	sidechaintxSidechainSignatures, err := signature.RawSignature(signature.Ed25519, []byte{0x72, 0x4b, 0xcd, 0xe6, 0x49, 0xa2, 0x03, 0x36, 0x52, 0xbc, 0x6d, 0x09, 0x3b, 0x20, 0xfd, 0x03, 0x91, 0x07, 0x15, 0x53, 0x27, 0x9e, 0x98, 0x53, 0xe9, 0xa8, 0xb0, 0xda, 0xcc, 0x92, 0x94, 0x8c, 0x0f, 0x59, 0xd2, 0xaf, 0x8a, 0x5f, 0xf0, 0xf6, 0x37, 0x0e, 0xe4, 0x96, 0x4e, 0xcd, 0x45, 0xe0, 0x9f, 0xbd, 0x46, 0x9a, 0x8a, 0x16, 0x6a, 0xaf, 0x13, 0xa8, 0x16, 0x58, 0xcd, 0xf3, 0xbb, 0x52})
	require.NoError(t, err)

	// AAJeEXA5N5cAAAAAAAAAXDlZM3Zvc3BNYlhTNWdJajlhNGphZHRjYXFqZjY1M3Vqd2lidm53eDZwd2V2eWloN2FxaXNxZmt2ZThyanN3OWp4YzJweHZldXV1Z2E4eXF1eDhmZjk2aHlnNmhxamZ1cTN4YzhiaDc3aTRwaXdmdmt4Nmo0c2Z1MjN6MzV5d3M2cGpodjg4YWNuZGFkZndkOWFuNms5Nm55ZHV0NDl0dGtoY3FramZjOHJiNTczOTlpdG5pdGMzc3c=
	expect := []byte{0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x39, 0x59, 0x33, 0x76, 0x6f, 0x73, 0x70, 0x4d, 0x62, 0x58, 0x53, 0x35, 0x67, 0x49, 0x6a, 0x39, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x71, 0x6a, 0x66, 0x36, 0x35, 0x33, 0x75, 0x6a, 0x77, 0x69, 0x62, 0x76, 0x6e, 0x77, 0x78, 0x36, 0x70, 0x77, 0x65, 0x76, 0x79, 0x69, 0x68, 0x37, 0x61, 0x71, 0x69, 0x73, 0x71, 0x66, 0x6b, 0x76, 0x65, 0x38, 0x72, 0x6a, 0x73, 0x77, 0x39, 0x6a, 0x78, 0x63, 0x32, 0x70, 0x78, 0x76, 0x65, 0x75, 0x75, 0x75, 0x67, 0x61, 0x38, 0x79, 0x71, 0x75, 0x78, 0x38, 0x66, 0x66, 0x39, 0x36, 0x68, 0x79, 0x67, 0x36, 0x68, 0x71, 0x6a, 0x66, 0x75, 0x71, 0x33, 0x78, 0x63, 0x38, 0x62, 0x68, 0x37, 0x37, 0x69, 0x34, 0x70, 0x69, 0x77, 0x66, 0x76, 0x6b, 0x78, 0x36, 0x6a, 0x34, 0x73, 0x66, 0x75, 0x32, 0x33, 0x7a, 0x33, 0x35, 0x79, 0x77, 0x73, 0x36, 0x70, 0x6a, 0x68, 0x76, 0x38, 0x38, 0x61, 0x63, 0x6e, 0x64, 0x61, 0x64, 0x66, 0x77, 0x64, 0x39, 0x61, 0x6e, 0x36, 0x6b, 0x39, 0x36, 0x6e, 0x79, 0x64, 0x75, 0x74, 0x34, 0x39, 0x74, 0x74, 0x6b, 0x68, 0x63, 0x71, 0x6b, 0x6a, 0x66, 0x63, 0x38, 0x72, 0x62, 0x35, 0x37, 0x33, 0x39, 0x39, 0x69, 0x74, 0x6e, 0x69, 0x74, 0x63, 0x33, 0x73, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SidechainTx
	}{
		{
			"no signatures",
			NewSidechainTx(
				sidechaintxSource,
				92,
				// SidechainSignableBytes as b64: 9Y3vospMbXS5gIj9
				[]byte{0xf5, 0x8d, 0xef, 0xa2, 0xca, 0x4c, 0x6d, 0x74, 0xb9, 0x80, 0x88, 0xfd},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
			),
		},
		{
			"with signature",
			NewSidechainTx(
				sidechaintxSource,
				92,
				// SidechainSignableBytes as b64: 9Y3vospMbXS5gIj9
				[]byte{0xf5, 0x8d, 0xef, 0xa2, 0xca, 0x4c, 0x6d, 0x74, 0xb9, 0x80, 0x88, 0xfd},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndafhhwtid2dh845bpjy6rdddtkdzc58dftzqbu7mfbxqasy")
	require.NoError(t, err)

	// bmRhZmhod3RpZDJkaDg0NWJwank2cmRkZHRrZHpjNThkZnR6cWJ1N21mYnhxYXN5ABP6yCVBcNA=
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x68, 0x68, 0x77, 0x74, 0x69, 0x64, 0x32, 0x64, 0x68, 0x38, 0x34, 0x35, 0x62, 0x70, 0x6a, 0x79, 0x36, 0x72, 0x64, 0x64, 0x64, 0x74, 0x6b, 0x64, 0x7a, 0x63, 0x35, 0x38, 0x64, 0x66, 0x74, 0x7a, 0x71, 0x62, 0x75, 0x37, 0x6d, 0x66, 0x62, 0x78, 0x71, 0x61, 0x73, 0x79, 0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndad63gajv7eypa5m5iemrc2ns4g6zexn9wpzc6tcj85w2n4")
	require.NoError(t, err)

	// AA2S+t7X5spuZGFkNjNnYWp2N2V5cGE1bTVpZW1yYzJuczRnNnpleG45d3B6YzZ0Y2o4NXcybjQ=
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x6e, 0x64, 0x61, 0x64, 0x36, 0x33, 0x67, 0x61, 0x6a, 0x76, 0x37, 0x65, 0x79, 0x70, 0x61, 0x35, 0x6d, 0x35, 0x69, 0x65, 0x6d, 0x72, 0x63, 0x32, 0x6e, 0x73, 0x34, 0x67, 0x36, 0x7a, 0x65, 0x78, 0x6e, 0x39, 0x77, 0x70, 0x7a, 0x63, 0x36, 0x74, 0x63, 0x6a, 0x38, 0x35, 0x77, 0x32, 0x6e, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAn3Z2Z46KEAH/erJE/OdA==
	expect := []byte{0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1, 0x00, 0x1f, 0xf7, 0xab, 0x24, 0x4f, 0xce, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2805298263287969,
				8998038698708596,
			),
		},
		{
			"with signature",
			NewIssue(
				2805298263287969,
				8998038698708596,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
