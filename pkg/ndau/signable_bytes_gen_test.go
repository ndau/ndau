package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndar9xfh2gzwiasu55prh7pghgqyyaur2vj6ccsiuk4yejsa")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndar2vy9pzx28j2wesmxhatiqndbn6tekt4eyfvezrj8ya8q")
	require.NoError(t, err)

	// bmRhcjJ2eTlwengyOGoyd2VzbXhoYXRpcW5kYm42dGVrdDRleWZ2ZXpyajh5YThxAAWCIQf8/70AApoPXz8aEm5kYXI5eGZoMmd6d2lhc3U1NXByaDdwZ2hncXl5YXVyMnZqNmNjc2l1azR5ZWpzYQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x72, 0x32, 0x76, 0x79, 0x39, 0x70, 0x7a, 0x78, 0x32, 0x38, 0x6a, 0x32, 0x77, 0x65, 0x73, 0x6d, 0x78, 0x68, 0x61, 0x74, 0x69, 0x71, 0x6e, 0x64, 0x62, 0x6e, 0x36, 0x74, 0x65, 0x6b, 0x74, 0x34, 0x65, 0x79, 0x66, 0x76, 0x65, 0x7a, 0x72, 0x6a, 0x38, 0x79, 0x61, 0x38, 0x71, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x72, 0x39, 0x78, 0x66, 0x68, 0x32, 0x67, 0x7a, 0x77, 0x69, 0x61, 0x73, 0x75, 0x35, 0x35, 0x70, 0x72, 0x68, 0x37, 0x70, 0x67, 0x68, 0x67, 0x71, 0x79, 0x79, 0x61, 0x75, 0x72, 0x32, 0x76, 0x6a, 0x36, 0x63, 0x63, 0x73, 0x69, 0x75, 0x6b, 0x34, 0x79, 0x65, 0x6a, 0x73, 0x61}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndapr97gn4yxyd7tf6rsx6w8kdpdw5amu5pyit7nkqwpi99u")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xf9, 0x58, 0x2e, 0xa4, 0x5e, 0xaf, 0xf1, 0xdb, 0xbe, 0xf5, 0x6b, 0x70, 0x29, 0x26, 0x73, 0x4e, 0x13, 0xae, 0xe0, 0xfa, 0x35, 0x66, 0x98, 0x73, 0xda, 0x25, 0x96, 0x7f, 0x86, 0xa4, 0xa9, 0xf0}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWQ2eHNteGVtNHo5ZHk3ODh4eHpha2pncXBoYmhtemE5aTR5cGdkdjVpdTNuOTZnd3V3OWJxOG15dHd0eTh1cQAQTcdmlXTFbmRhcHI5N2duNHl4eWQ3dGY2cnN4Nnc4a2RwZHc1YW11NXB5aXQ3bmtxd3BpOTl1K0tZRTJmUFZLOEY3bE5TWA==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x36, 0x78, 0x73, 0x6d, 0x78, 0x65, 0x6d, 0x34, 0x7a, 0x39, 0x64, 0x79, 0x37, 0x38, 0x38, 0x78, 0x78, 0x7a, 0x61, 0x6b, 0x6a, 0x67, 0x71, 0x70, 0x68, 0x62, 0x68, 0x6d, 0x7a, 0x61, 0x39, 0x69, 0x34, 0x79, 0x70, 0x67, 0x64, 0x76, 0x35, 0x69, 0x75, 0x33, 0x6e, 0x39, 0x36, 0x67, 0x77, 0x75, 0x77, 0x39, 0x62, 0x71, 0x38, 0x6d, 0x79, 0x74, 0x77, 0x74, 0x79, 0x38, 0x75, 0x71, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x70, 0x72, 0x39, 0x37, 0x67, 0x6e, 0x34, 0x79, 0x78, 0x79, 0x64, 0x37, 0x74, 0x66, 0x36, 0x72, 0x73, 0x78, 0x36, 0x77, 0x38, 0x6b, 0x64, 0x70, 0x64, 0x77, 0x35, 0x61, 0x6d, 0x75, 0x35, 0x70, 0x79, 0x69, 0x74, 0x37, 0x6e, 0x6b, 0x71, 0x77, 0x70, 0x69, 0x39, 0x39, 0x75, 0x2b, 0x4b, 0x59, 0x45, 0x32, 0x66, 0x50, 0x56, 0x4b, 0x38, 0x46, 0x37, 0x6c, 0x4e, 0x53, 0x58}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: +KYE2fPVK8F7lNSX
				[]byte{0xf8, 0xa6, 0x04, 0xd9, 0xf3, 0xd5, 0x2b, 0xc1, 0x7b, 0x94, 0xd4, 0x97},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: +KYE2fPVK8F7lNSX
				[]byte{0xf8, 0xa6, 0x04, 0xd9, 0xf3, 0xd5, 0x2b, 0xc1, 0x7b, 0x94, 0xd4, 0x97},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndaq23sjzkd224jiyt7rm9j2uf2zr7h387q784hjfegfw8j8")
	require.NoError(t, err)

	// bmRhcTIzc2p6a2QyMjRqaXl0N3JtOWoydWYyenI3aDM4N3E3ODRoamZlZ2Z3OGo4AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x32, 0x33, 0x73, 0x6a, 0x7a, 0x6b, 0x64, 0x32, 0x32, 0x34, 0x6a, 0x69, 0x79, 0x74, 0x37, 0x72, 0x6d, 0x39, 0x6a, 0x32, 0x75, 0x66, 0x32, 0x7a, 0x72, 0x37, 0x68, 0x33, 0x38, 0x37, 0x71, 0x37, 0x38, 0x34, 0x68, 0x6a, 0x66, 0x65, 0x67, 0x66, 0x77, 0x38, 0x6a, 0x38, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndacxcszuarp89hfxk2ym7hne66fcaihduhirraa6gxpiuxt")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFjeGNzenVhcnA4OWhmeGsyeW03aG5lNjZmY2FpaGR1aGlycmFhNmd4cGl1eHQ=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x63, 0x78, 0x63, 0x73, 0x7a, 0x75, 0x61, 0x72, 0x70, 0x38, 0x39, 0x68, 0x66, 0x78, 0x6b, 0x32, 0x79, 0x6d, 0x37, 0x68, 0x6e, 0x65, 0x36, 0x36, 0x66, 0x63, 0x61, 0x69, 0x68, 0x64, 0x75, 0x68, 0x69, 0x72, 0x72, 0x61, 0x61, 0x36, 0x67, 0x78, 0x70, 0x69, 0x75, 0x78, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndada2e4wyku8g2csdiupzrpdqdqvv76rp9nx45gr5xk6auc")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaqrj44jkkih8ayvyj2zzaddwnwxwjivdu6bhsi9v4pbtv8")
	require.NoError(t, err)

	// bmRhcXJqNDRqa2tpaDhheXZ5ajJ6emFkZHdud3h3aml2ZHU2YmhzaTl2NHBidHY4AAjSrCLE0zRuZGFkYTJlNHd5a3U4ZzJjc2RpdXB6cnBkcWRxdnY3NnJwOW54NDVncjV4azZhdWM=
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x72, 0x6a, 0x34, 0x34, 0x6a, 0x6b, 0x6b, 0x69, 0x68, 0x38, 0x61, 0x79, 0x76, 0x79, 0x6a, 0x32, 0x7a, 0x7a, 0x61, 0x64, 0x64, 0x77, 0x6e, 0x77, 0x78, 0x77, 0x6a, 0x69, 0x76, 0x64, 0x75, 0x36, 0x62, 0x68, 0x73, 0x69, 0x39, 0x76, 0x34, 0x70, 0x62, 0x74, 0x76, 0x38, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x64, 0x61, 0x32, 0x65, 0x34, 0x77, 0x79, 0x6b, 0x75, 0x38, 0x67, 0x32, 0x63, 0x73, 0x64, 0x69, 0x75, 0x70, 0x7a, 0x72, 0x70, 0x64, 0x71, 0x64, 0x71, 0x76, 0x76, 0x37, 0x36, 0x72, 0x70, 0x39, 0x6e, 0x78, 0x34, 0x35, 0x67, 0x72, 0x35, 0x78, 0x6b, 0x36, 0x61, 0x75, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndajsw4xrc4mhmps6xabrwai66i9hp689aszjjibbtuk266a")
	require.NoError(t, err)

	// bmRhanN3NHhyYzRtaG1wczZ4YWJyd2FpNjZpOWhwNjg5YXN6amppYmJ0dWsyNjZhAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x73, 0x77, 0x34, 0x78, 0x72, 0x63, 0x34, 0x6d, 0x68, 0x6d, 0x70, 0x73, 0x36, 0x78, 0x61, 0x62, 0x72, 0x77, 0x61, 0x69, 0x36, 0x36, 0x69, 0x39, 0x68, 0x70, 0x36, 0x38, 0x39, 0x61, 0x73, 0x7a, 0x6a, 0x6a, 0x69, 0x62, 0x62, 0x74, 0x75, 0x6b, 0x32, 0x36, 0x36, 0x61, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndaa2s55gjffauzwvivmjungawedr8vajvmp3e67zvtcjy4y")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhYTJzNTVnamZmYXV6d3Zpdm1qdW5nYXdlZHI4dmFqdm1wM2U2N3p2dGNqeTR5
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x61, 0x32, 0x73, 0x35, 0x35, 0x67, 0x6a, 0x66, 0x66, 0x61, 0x75, 0x7a, 0x77, 0x76, 0x69, 0x76, 0x6d, 0x6a, 0x75, 0x6e, 0x67, 0x61, 0x77, 0x65, 0x64, 0x72, 0x38, 0x76, 0x61, 0x6a, 0x76, 0x6d, 0x70, 0x33, 0x65, 0x36, 0x37, 0x7a, 0x76, 0x74, 0x63, 0x6a, 0x79, 0x34, 0x79}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndarfwvvm3fbhpc888nrpis3nvp5pmnrkjnsmy3ba5dq99jf")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFyZnd2dm0zZmJocGM4ODhucnBpczNudnA1cG1ucmtqbnNteTNiYTVkcTk5amY=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x72, 0x66, 0x77, 0x76, 0x76, 0x6d, 0x33, 0x66, 0x62, 0x68, 0x70, 0x63, 0x38, 0x38, 0x38, 0x6e, 0x72, 0x70, 0x69, 0x73, 0x33, 0x6e, 0x76, 0x70, 0x35, 0x70, 0x6d, 0x6e, 0x72, 0x6b, 0x6a, 0x6e, 0x73, 0x6d, 0x79, 0x33, 0x62, 0x61, 0x35, 0x64, 0x71, 0x39, 0x39, 0x6a, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndak8jfgtsrqp4qxp3wafeyizpesa9496vdnu8s8y3w4xh9w")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndaq39hkjy7mk4dbp3yjhe8a3rjuri72p83mrqvq95akux6d")
	require.NoError(t, err)

	// bmRhcTM5aGtqeTdtazRkYnAzeWpoZThhM3JqdXJpNzJwODNtcnF2cTk1YWt1eDZkAAz/orpRehFuZGFrOGpmZ3RzcnFwNHF4cDN3YWZleWl6cGVzYTk0OTZ2ZG51OHM4eTN3NHhoOXc=
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x33, 0x39, 0x68, 0x6b, 0x6a, 0x79, 0x37, 0x6d, 0x6b, 0x34, 0x64, 0x62, 0x70, 0x33, 0x79, 0x6a, 0x68, 0x65, 0x38, 0x61, 0x33, 0x72, 0x6a, 0x75, 0x72, 0x69, 0x37, 0x32, 0x70, 0x38, 0x33, 0x6d, 0x72, 0x71, 0x76, 0x71, 0x39, 0x35, 0x61, 0x6b, 0x75, 0x78, 0x36, 0x64, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x6b, 0x38, 0x6a, 0x66, 0x67, 0x74, 0x73, 0x72, 0x71, 0x70, 0x34, 0x71, 0x78, 0x70, 0x33, 0x77, 0x61, 0x66, 0x65, 0x79, 0x69, 0x7a, 0x70, 0x65, 0x73, 0x61, 0x39, 0x34, 0x39, 0x36, 0x76, 0x64, 0x6e, 0x75, 0x38, 0x73, 0x38, 0x79, 0x33, 0x77, 0x34, 0x78, 0x68, 0x39, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndae42aujfmcd9w55fh9fygz85dscc4bttfzxxyh27v89unq")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xeb, 0x9d, 0xf5, 0x5a, 0xef, 0x42, 0x19, 0xec, 0xf0, 0x5e, 0x6f, 0x38, 0x8f, 0xc8, 0xa7, 0x6a, 0xa4, 0x69, 0x4f, 0xf1, 0x8f, 0x61, 0xd4, 0x93, 0x40, 0x88, 0x87, 0xa4, 0xb1, 0xbc, 0x68, 0x82}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xbf, 0x07, 0x5f, 0x90, 0xe9, 0xb3, 0xa4, 0x85, 0xa2, 0x74, 0xa7, 0xbc, 0xdc, 0xfa, 0x2e, 0x6f, 0xc6, 0xb4, 0xcf, 0xb6, 0xb0, 0xb2, 0xf8, 0xce, 0x17, 0x13, 0x87, 0x9c, 0xe3, 0x01, 0x0c, 0xc4}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWR4MzU3azQ3N2JidjVoc20zenZ0ZDhpdzd4a2k0a3I4Z2h5ZHhldmljZWlyamZ0enR3aWZ5am1ocWhhZGlkbQAZX/GDxHNZbmRhZTQyYXVqZm1jZDl3NTVmaDlmeWd6ODVkc2NjNGJ0dGZ6eHh5aDI3djg5dW5xbnB1YmE4amFkdGJiZWM5c3F6NnM3ZzM0amJwY3F1djUzemg0ZjN6NnBwZ3J5NDJtZjhncWM2ajJyaGhkYWVnbmlzZXN5Y2VrdHh6ZFpuNlIvM3hubHlWWXZzR3o=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x78, 0x33, 0x35, 0x37, 0x6b, 0x34, 0x37, 0x37, 0x62, 0x62, 0x76, 0x35, 0x68, 0x73, 0x6d, 0x33, 0x7a, 0x76, 0x74, 0x64, 0x38, 0x69, 0x77, 0x37, 0x78, 0x6b, 0x69, 0x34, 0x6b, 0x72, 0x38, 0x67, 0x68, 0x79, 0x64, 0x78, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x72, 0x6a, 0x66, 0x74, 0x7a, 0x74, 0x77, 0x69, 0x66, 0x79, 0x6a, 0x6d, 0x68, 0x71, 0x68, 0x61, 0x64, 0x69, 0x64, 0x6d, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x65, 0x34, 0x32, 0x61, 0x75, 0x6a, 0x66, 0x6d, 0x63, 0x64, 0x39, 0x77, 0x35, 0x35, 0x66, 0x68, 0x39, 0x66, 0x79, 0x67, 0x7a, 0x38, 0x35, 0x64, 0x73, 0x63, 0x63, 0x34, 0x62, 0x74, 0x74, 0x66, 0x7a, 0x78, 0x78, 0x79, 0x68, 0x32, 0x37, 0x76, 0x38, 0x39, 0x75, 0x6e, 0x71, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x39, 0x73, 0x71, 0x7a, 0x36, 0x73, 0x37, 0x67, 0x33, 0x34, 0x6a, 0x62, 0x70, 0x63, 0x71, 0x75, 0x76, 0x35, 0x33, 0x7a, 0x68, 0x34, 0x66, 0x33, 0x7a, 0x36, 0x70, 0x70, 0x67, 0x72, 0x79, 0x34, 0x32, 0x6d, 0x66, 0x38, 0x67, 0x71, 0x63, 0x36, 0x6a, 0x32, 0x72, 0x68, 0x68, 0x64, 0x61, 0x65, 0x67, 0x6e, 0x69, 0x73, 0x65, 0x73, 0x79, 0x63, 0x65, 0x6b, 0x74, 0x78, 0x7a, 0x64, 0x5a, 0x6e, 0x36, 0x52, 0x2f, 0x33, 0x78, 0x6e, 0x6c, 0x79, 0x56, 0x59, 0x76, 0x73, 0x47, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: Zn6R/3xnlyVYvsGz
				[]byte{0x66, 0x7e, 0x91, 0xff, 0x7c, 0x67, 0x97, 0x25, 0x58, 0xbe, 0xc1, 0xb3},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: Zn6R/3xnlyVYvsGz
				[]byte{0x66, 0x7e, 0x91, 0xff, 0x7c, 0x67, 0x97, 0x25, 0x58, 0xbe, 0xc1, 0xb3},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndabktseqh6u3d7y2cxxpknie2dnmgz5njn42gqduwpawd9v")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndariivk5zfg46tdznf4jyvudurh3zpr8huiuyhy7uf9zmww")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFyaWl2azV6Zmc0NnRkem5mNGp5dnVkdXJoM3pwcjhodWl1eWh5N3VmOXptd3duZGFia3RzZXFoNnUzZDd5MmN4eHBrbmllMmRubWd6NW5qbjQyZ3FkdXdwYXdkOXY=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x69, 0x76, 0x6b, 0x35, 0x7a, 0x66, 0x67, 0x34, 0x36, 0x74, 0x64, 0x7a, 0x6e, 0x66, 0x34, 0x6a, 0x79, 0x76, 0x75, 0x64, 0x75, 0x72, 0x68, 0x33, 0x7a, 0x70, 0x72, 0x38, 0x68, 0x75, 0x69, 0x75, 0x79, 0x68, 0x79, 0x37, 0x75, 0x66, 0x39, 0x7a, 0x6d, 0x77, 0x77, 0x6e, 0x64, 0x61, 0x62, 0x6b, 0x74, 0x73, 0x65, 0x71, 0x68, 0x36, 0x75, 0x33, 0x64, 0x37, 0x79, 0x32, 0x63, 0x78, 0x78, 0x70, 0x6b, 0x6e, 0x69, 0x65, 0x32, 0x64, 0x6e, 0x6d, 0x67, 0x7a, 0x35, 0x6e, 0x6a, 0x6e, 0x34, 0x32, 0x67, 0x71, 0x64, 0x75, 0x77, 0x70, 0x61, 0x77, 0x64, 0x39, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndahuviekrjmwnkry9h4n6tp3j78bayfpq8g2syyfnqcbhd3")
	require.NoError(t, err)

	// N3NPUnlCWExEZk5rMzh0em5kYWh1dmlla3JqbXdua3J5OWg0bjZ0cDNqNzhiYXlmcHE4ZzJzeXlmbnFjYmhkM3N0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x37, 0x73, 0x4f, 0x52, 0x79, 0x42, 0x58, 0x4c, 0x44, 0x66, 0x4e, 0x6b, 0x33, 0x38, 0x74, 0x7a, 0x6e, 0x64, 0x61, 0x68, 0x75, 0x76, 0x69, 0x65, 0x6b, 0x72, 0x6a, 0x6d, 0x77, 0x6e, 0x6b, 0x72, 0x79, 0x39, 0x68, 0x34, 0x6e, 0x36, 0x74, 0x70, 0x33, 0x6a, 0x37, 0x38, 0x62, 0x61, 0x79, 0x66, 0x70, 0x71, 0x38, 0x67, 0x32, 0x73, 0x79, 0x79, 0x66, 0x6e, 0x71, 0x63, 0x62, 0x68, 0x64, 0x33, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 7sORyBXLDfNk38tz
				[]byte{0xee, 0xc3, 0x91, 0xc8, 0x15, 0xcb, 0x0d, 0xf3, 0x64, 0xdf, 0xcb, 0x73},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 7sORyBXLDfNk38tz
				[]byte{0xee, 0xc3, 0x91, 0xc8, 0x15, 0xcb, 0x0d, 0xf3, 0x64, 0xdf, 0xcb, 0x73},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndaqdpyhdyj3v22ieth7csmt2yyrzpbpt3cet3sh33ripngt")
	require.NoError(t, err)

	// bmRhcWRweWhkeWozdjIyaWV0aDdjc210Mnl5cnpwYnB0M2NldDNzaDMzcmlwbmd0AA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x64, 0x70, 0x79, 0x68, 0x64, 0x79, 0x6a, 0x33, 0x76, 0x32, 0x32, 0x69, 0x65, 0x74, 0x68, 0x37, 0x63, 0x73, 0x6d, 0x74, 0x32, 0x79, 0x79, 0x72, 0x7a, 0x70, 0x62, 0x70, 0x74, 0x33, 0x63, 0x65, 0x74, 0x33, 0x73, 0x68, 0x33, 0x33, 0x72, 0x69, 0x70, 0x6e, 0x67, 0x74, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndaai8kzqaguvb9yapaj477zqgyf89c7suzhnw83uz7i5zm9")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndabkkbsvftggnv4ekkiay469rbpwiuqyj43fmfuv37x3ghi")
	require.NoError(t, err)

	// bmRhYmtrYnN2ZnRnZ252NGVra2lheTQ2OXJicHdpdXF5ajQzZm1mdXYzN3gzZ2hpMXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWFpOGt6cWFndXZiOXlhcGFqNDc3enFneWY4OWM3c3V6aG53ODN1ejdpNXptOQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x62, 0x6b, 0x6b, 0x62, 0x73, 0x76, 0x66, 0x74, 0x67, 0x67, 0x6e, 0x76, 0x34, 0x65, 0x6b, 0x6b, 0x69, 0x61, 0x79, 0x34, 0x36, 0x39, 0x72, 0x62, 0x70, 0x77, 0x69, 0x75, 0x71, 0x79, 0x6a, 0x34, 0x33, 0x66, 0x6d, 0x66, 0x75, 0x76, 0x33, 0x37, 0x78, 0x33, 0x67, 0x68, 0x69, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x61, 0x69, 0x38, 0x6b, 0x7a, 0x71, 0x61, 0x67, 0x75, 0x76, 0x62, 0x39, 0x79, 0x61, 0x70, 0x61, 0x6a, 0x34, 0x37, 0x37, 0x7a, 0x71, 0x67, 0x79, 0x66, 0x38, 0x39, 0x63, 0x37, 0x73, 0x75, 0x7a, 0x68, 0x6e, 0x77, 0x38, 0x33, 0x75, 0x7a, 0x37, 0x69, 0x35, 0x7a, 0x6d, 0x39}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmos2d1RjeXROekFNZDVhelJ4AAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x36, 0x77, 0x54, 0x63, 0x79, 0x74, 0x4e, 0x7a, 0x41, 0x4d, 0x64, 0x35, 0x61, 0x7a, 0x52, 0x78, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: 6wTcytNzAMd5azRx
				[]byte{0xeb, 0x04, 0xdc, 0xca, 0xd3, 0x73, 0x00, 0xc7, 0x79, 0x6b, 0x34, 0x71},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: 6wTcytNzAMd5azRx
				[]byte{0xeb, 0x04, 0xdc, 0xca, 0xd3, 0x73, 0x00, 0xc7, 0x79, 0x6b, 0x34, 0x71},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndabmsw8pcpkynnm7iurhfgwet8awmyjk33pn8u6hcerk6w4")
	require.NoError(t, err)

	// bmRhYm1zdzhwY3BreW5ubTdpdXJoZmd3ZXQ4YXdteWprMzNwbjh1NmhjZXJrNnc0AAJeEXA5N5c=
	expect := []byte{0x6e, 0x64, 0x61, 0x62, 0x6d, 0x73, 0x77, 0x38, 0x70, 0x63, 0x70, 0x6b, 0x79, 0x6e, 0x6e, 0x6d, 0x37, 0x69, 0x75, 0x72, 0x68, 0x66, 0x67, 0x77, 0x65, 0x74, 0x38, 0x61, 0x77, 0x6d, 0x79, 0x6a, 0x6b, 0x33, 0x33, 0x70, 0x6e, 0x38, 0x75, 0x36, 0x68, 0x63, 0x65, 0x72, 0x6b, 0x36, 0x77, 0x34, 0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndaewm2kwiur5m2n7ie5i8wahpv3qnbsyu9y6kfaq7mg9uxz")
	require.NoError(t, err)

	// ABP6yCVBcNBuZGFld20ya3dpdXI1bTJuN2llNWk4d2FocHYzcW5ic3l1OXk2a2ZhcTdtZzl1eHo=
	expect := []byte{0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0, 0x6e, 0x64, 0x61, 0x65, 0x77, 0x6d, 0x32, 0x6b, 0x77, 0x69, 0x75, 0x72, 0x35, 0x6d, 0x32, 0x6e, 0x37, 0x69, 0x65, 0x35, 0x69, 0x38, 0x77, 0x61, 0x68, 0x70, 0x76, 0x33, 0x71, 0x6e, 0x62, 0x73, 0x79, 0x75, 0x39, 0x79, 0x36, 0x6b, 0x66, 0x61, 0x71, 0x37, 0x6d, 0x67, 0x39, 0x75, 0x78, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA2S+t7X5soACfdnZnjooQ==
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				3820780875409098,
				2805298263287969,
			),
		},
		{
			"with signature",
			NewIssue(
				3820780875409098,
				2805298263287969,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndaku6kmsayuipkeuiapxg5st8sk92rmbp6zp23rdx7te9ci")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndaqr7pxiz2x3vkda4vuhqr88cjf67ik8auxkgw3upndftyk")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x7d, 0xe1, 0x0a, 0x1f, 0xb3, 0x45, 0xfb, 0xed, 0x2e, 0x85, 0xad, 0x4e, 0xba, 0x59, 0x23, 0x9e, 0x3e, 0xf4, 0xc5, 0x5e, 0x13, 0x07, 0xfc, 0xb8, 0x3c, 0x55, 0x4f, 0x0d, 0xc5, 0x01, 0xc4, 0xe9}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0xe6, 0xd7, 0x4a, 0x1e, 0x0b, 0xd5, 0x54, 0x62, 0xbb, 0x96, 0xdd, 0x24, 0xb4, 0xee, 0x69, 0x64, 0x9c, 0xb3, 0x70, 0x4b, 0xab, 0x6b, 0xa3, 0x64, 0xd6, 0x1f, 0xa2, 0x91, 0x92, 0x9f, 0xcd, 0xf1, 0x18, 0x33, 0xe5, 0xb7, 0x04, 0x56, 0xc8, 0xef, 0x1e, 0xd5, 0xd9, 0x45, 0xff, 0x8a, 0xbf, 0x05, 0xaf, 0xbd, 0xbd, 0xe8, 0x7a, 0x72, 0xc1, 0x30, 0x73, 0xee, 0xe8, 0xfb, 0xda, 0x46, 0x30, 0xcc})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x5b, 0x5b, 0xbc, 0xe3, 0x41, 0x20, 0x05, 0xfc, 0x69, 0x1a, 0xcf, 0x01, 0x83, 0xa5, 0x2c, 0x8d, 0xfa, 0xbd, 0x01, 0x96, 0xdc, 0xd2, 0x8a, 0xc0, 0x18, 0x4b, 0x05, 0x25, 0x2b, 0x71, 0xbf, 0x12}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndae2fdfhifbrau77zjkczrwkn7x29ydsci3tg8is2hjqrsp")
	require.NoError(t, err)

	// bmRhcXI3cHhpejJ4M3ZrZGE0dnVocXI4OGNqZjY3aWs4YXV4a2d3M3VwbmRmdHlrbmRhZTJmZGZoaWZicmF1Nzd6amtjenJ3a243eDI5eWRzY2kzdGc4aXMyaGpxcnNwbnB1YmE4amFkdGJiZWI4OGNjczl5cGM5ejVqcXN5eXc3cXUzZXFyZDc3Z2ZtMmpzcjlmMmh0a3c4ZHFmYWhjcXU2c2lxYXltYjhnNTF5NG02ZHQ1aDIxbTQ2czM0MzczNHVzYTRqYWR0Y2E2NW13d2hzbTR4a2dmcTZ5NXd1bWo1dmpudXFtZzZjbXhweDRnM2d5ZDh0amRldzkzejJ0c245Znk2Y2ZwdWhyZDVrN3V0cjl0azlzbW03N3p6d2h3NnliZ2IzODc0aDU1amRkYnZkeTh3cWs0bW56bnB1YmE4amFkdGJiZWJweHpyaGRpZXNhbTlkamRtaHNkYTdmZnVnOXhyaWJ1NXFwZmN5YWRiZnNramptcWc5dGVjaGRkcHM0ZjQ5ZVBuWDZJelU2d29HVmFleDIAB4MDVqpvQW5kYWt1Nmttc2F5dWlwa2V1aWFweGc1c3Q4c2s5MnJtYnA2enAyM3JkeDd0ZTljaQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x72, 0x37, 0x70, 0x78, 0x69, 0x7a, 0x32, 0x78, 0x33, 0x76, 0x6b, 0x64, 0x61, 0x34, 0x76, 0x75, 0x68, 0x71, 0x72, 0x38, 0x38, 0x63, 0x6a, 0x66, 0x36, 0x37, 0x69, 0x6b, 0x38, 0x61, 0x75, 0x78, 0x6b, 0x67, 0x77, 0x33, 0x75, 0x70, 0x6e, 0x64, 0x66, 0x74, 0x79, 0x6b, 0x6e, 0x64, 0x61, 0x65, 0x32, 0x66, 0x64, 0x66, 0x68, 0x69, 0x66, 0x62, 0x72, 0x61, 0x75, 0x37, 0x37, 0x7a, 0x6a, 0x6b, 0x63, 0x7a, 0x72, 0x77, 0x6b, 0x6e, 0x37, 0x78, 0x32, 0x39, 0x79, 0x64, 0x73, 0x63, 0x69, 0x33, 0x74, 0x67, 0x38, 0x69, 0x73, 0x32, 0x68, 0x6a, 0x71, 0x72, 0x73, 0x70, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x38, 0x38, 0x63, 0x63, 0x73, 0x39, 0x79, 0x70, 0x63, 0x39, 0x7a, 0x35, 0x6a, 0x71, 0x73, 0x79, 0x79, 0x77, 0x37, 0x71, 0x75, 0x33, 0x65, 0x71, 0x72, 0x64, 0x37, 0x37, 0x67, 0x66, 0x6d, 0x32, 0x6a, 0x73, 0x72, 0x39, 0x66, 0x32, 0x68, 0x74, 0x6b, 0x77, 0x38, 0x64, 0x71, 0x66, 0x61, 0x68, 0x63, 0x71, 0x75, 0x36, 0x73, 0x69, 0x71, 0x61, 0x79, 0x6d, 0x62, 0x38, 0x67, 0x35, 0x31, 0x79, 0x34, 0x6d, 0x36, 0x64, 0x74, 0x35, 0x68, 0x32, 0x31, 0x6d, 0x34, 0x36, 0x73, 0x33, 0x34, 0x33, 0x37, 0x33, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x36, 0x35, 0x6d, 0x77, 0x77, 0x68, 0x73, 0x6d, 0x34, 0x78, 0x6b, 0x67, 0x66, 0x71, 0x36, 0x79, 0x35, 0x77, 0x75, 0x6d, 0x6a, 0x35, 0x76, 0x6a, 0x6e, 0x75, 0x71, 0x6d, 0x67, 0x36, 0x63, 0x6d, 0x78, 0x70, 0x78, 0x34, 0x67, 0x33, 0x67, 0x79, 0x64, 0x38, 0x74, 0x6a, 0x64, 0x65, 0x77, 0x39, 0x33, 0x7a, 0x32, 0x74, 0x73, 0x6e, 0x39, 0x66, 0x79, 0x36, 0x63, 0x66, 0x70, 0x75, 0x68, 0x72, 0x64, 0x35, 0x6b, 0x37, 0x75, 0x74, 0x72, 0x39, 0x74, 0x6b, 0x39, 0x73, 0x6d, 0x6d, 0x37, 0x37, 0x7a, 0x7a, 0x77, 0x68, 0x77, 0x36, 0x79, 0x62, 0x67, 0x62, 0x33, 0x38, 0x37, 0x34, 0x68, 0x35, 0x35, 0x6a, 0x64, 0x64, 0x62, 0x76, 0x64, 0x79, 0x38, 0x77, 0x71, 0x6b, 0x34, 0x6d, 0x6e, 0x7a, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x70, 0x78, 0x7a, 0x72, 0x68, 0x64, 0x69, 0x65, 0x73, 0x61, 0x6d, 0x39, 0x64, 0x6a, 0x64, 0x6d, 0x68, 0x73, 0x64, 0x61, 0x37, 0x66, 0x66, 0x75, 0x67, 0x39, 0x78, 0x72, 0x69, 0x62, 0x75, 0x35, 0x71, 0x70, 0x66, 0x63, 0x79, 0x61, 0x64, 0x62, 0x66, 0x73, 0x6b, 0x6a, 0x6a, 0x6d, 0x71, 0x67, 0x39, 0x74, 0x65, 0x63, 0x68, 0x64, 0x64, 0x70, 0x73, 0x34, 0x66, 0x34, 0x39, 0x65, 0x50, 0x6e, 0x58, 0x36, 0x49, 0x7a, 0x55, 0x36, 0x77, 0x6f, 0x47, 0x56, 0x61, 0x65, 0x78, 0x32, 0x00, 0x07, 0x83, 0x03, 0x56, 0xaa, 0x6f, 0x41, 0x6e, 0x64, 0x61, 0x6b, 0x75, 0x36, 0x6b, 0x6d, 0x73, 0x61, 0x79, 0x75, 0x69, 0x70, 0x6b, 0x65, 0x75, 0x69, 0x61, 0x70, 0x78, 0x67, 0x35, 0x73, 0x74, 0x38, 0x73, 0x6b, 0x39, 0x32, 0x72, 0x6d, 0x62, 0x70, 0x36, 0x7a, 0x70, 0x32, 0x33, 0x72, 0x64, 0x78, 0x37, 0x74, 0x65, 0x39, 0x63, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: PnX6IzU6woGVaex2
				[]byte{0x3e, 0x75, 0xfa, 0x23, 0x35, 0x3a, 0xc2, 0x81, 0x95, 0x69, 0xec, 0x76},
				createchildaccountChildDelegationNode,
				2114375199125313,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: PnX6IzU6woGVaex2
				[]byte{0x3e, 0x75, 0xfa, 0x23, 0x35, 0x3a, 0xc2, 0x81, 0x95, 0x69, 0xec, 0x76},
				createchildaccountChildDelegationNode,
				2114375199125313,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABToHt5FZKQACPi9Ppmz3A==
	expect := []byte{0x00, 0x14, 0xe8, 0x1e, 0xde, 0x45, 0x64, 0xa4, 0x00, 0x08, 0xf8, 0xbd, 0x3e, 0x99, 0xb3, 0xdc}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBhcGUgcWxlcXloeXogeXdqanBqenAgcmYgZ21vIGFmZXQgc2J6cmp4IAAO73omlHmPT3lhQlZtNGJNTm9YVEloWQ==
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x61, 0x70, 0x65, 0x20, 0x71, 0x6c, 0x65, 0x71, 0x79, 0x68, 0x79, 0x7a, 0x20, 0x79, 0x77, 0x6a, 0x6a, 0x70, 0x6a, 0x7a, 0x70, 0x20, 0x72, 0x66, 0x20, 0x67, 0x6d, 0x6f, 0x20, 0x61, 0x66, 0x65, 0x74, 0x20, 0x73, 0x62, 0x7a, 0x72, 0x6a, 0x78, 0x20, 0x00, 0x0e, 0xef, 0x7a, 0x26, 0x94, 0x79, 0x8f, 0x4f, 0x79, 0x61, 0x42, 0x56, 0x6d, 0x34, 0x62, 0x4d, 0x4e, 0x6f, 0x58, 0x54, 0x49, 0x68, 0x59}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: OyaBVm4bMNoXTIhY
				[]byte{0x3b, 0x26, 0x81, 0x56, 0x6e, 0x1b, 0x30, 0xda, 0x17, 0x4c, 0x88, 0x58},
				4203957586262415,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: OyaBVm4bMNoXTIhY
				[]byte{0x3b, 0x26, 0x81, 0x56, 0x6e, 0x1b, 0x30, 0xda, 0x17, 0x4c, 0x88, 0x58},
				4203957586262415,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
