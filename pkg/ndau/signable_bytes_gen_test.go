package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndaqq89666v6e3ujex5krp46iy9wur9spwep9tpqkecamaki")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndaapk6vsv7nzafwekbufyqy527eutm4q82z3xcjyus5n842")
	require.NoError(t, err)

	// bmRhYXBrNnZzdjduemFmd2VrYnVmeXF5NTI3ZXV0bTRxODJ6M3hjanl1czVuODQyAAWCIQf8/70AApoPXz8aEm5kYXFxODk2NjZ2NmUzdWpleDVrcnA0Nml5OXd1cjlzcHdlcDl0cHFrZWNhbWFraQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x70, 0x6b, 0x36, 0x76, 0x73, 0x76, 0x37, 0x6e, 0x7a, 0x61, 0x66, 0x77, 0x65, 0x6b, 0x62, 0x75, 0x66, 0x79, 0x71, 0x79, 0x35, 0x32, 0x37, 0x65, 0x75, 0x74, 0x6d, 0x34, 0x71, 0x38, 0x32, 0x7a, 0x33, 0x78, 0x63, 0x6a, 0x79, 0x75, 0x73, 0x35, 0x6e, 0x38, 0x34, 0x32, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x71, 0x71, 0x38, 0x39, 0x36, 0x36, 0x36, 0x76, 0x36, 0x65, 0x33, 0x75, 0x6a, 0x65, 0x78, 0x35, 0x6b, 0x72, 0x70, 0x34, 0x36, 0x69, 0x79, 0x39, 0x77, 0x75, 0x72, 0x39, 0x73, 0x70, 0x77, 0x65, 0x70, 0x39, 0x74, 0x70, 0x71, 0x6b, 0x65, 0x63, 0x61, 0x6d, 0x61, 0x6b, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndac3beunkses6sk2i3uaxec6fatppsenfipdvxw59nahcgw")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xd4, 0x56, 0x65, 0x87, 0xf8, 0x68, 0x0d, 0xd9, 0x25, 0xf6, 0x8c, 0x78, 0xf7, 0x9a, 0xb1, 0x3e, 0xec, 0xe0, 0x89, 0x97, 0x22, 0xe5, 0x25, 0xd0, 0xde, 0x21, 0xd4, 0x17, 0xd4, 0xb2, 0xe9, 0xcd}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWRrZm4zbmg5YndhNXlqZjg0Z2h0NzY0eWU5cTMyZWp1NnRxa2pxczUyczdpZjh3eW13NjU4bnV6NzhxeDR5ZgAQTcdmlXTFbmRhYzNiZXVua3NlczZzazJpM3VheGVjNmZhdHBwc2VuZmlwZHZ4dzU5bmFoY2d3QVBHWW1KdGZEL3gvM2NPTQ==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x6b, 0x66, 0x6e, 0x33, 0x6e, 0x68, 0x39, 0x62, 0x77, 0x61, 0x35, 0x79, 0x6a, 0x66, 0x38, 0x34, 0x67, 0x68, 0x74, 0x37, 0x36, 0x34, 0x79, 0x65, 0x39, 0x71, 0x33, 0x32, 0x65, 0x6a, 0x75, 0x36, 0x74, 0x71, 0x6b, 0x6a, 0x71, 0x73, 0x35, 0x32, 0x73, 0x37, 0x69, 0x66, 0x38, 0x77, 0x79, 0x6d, 0x77, 0x36, 0x35, 0x38, 0x6e, 0x75, 0x7a, 0x37, 0x38, 0x71, 0x78, 0x34, 0x79, 0x66, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x63, 0x33, 0x62, 0x65, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x73, 0x36, 0x73, 0x6b, 0x32, 0x69, 0x33, 0x75, 0x61, 0x78, 0x65, 0x63, 0x36, 0x66, 0x61, 0x74, 0x70, 0x70, 0x73, 0x65, 0x6e, 0x66, 0x69, 0x70, 0x64, 0x76, 0x78, 0x77, 0x35, 0x39, 0x6e, 0x61, 0x68, 0x63, 0x67, 0x77, 0x41, 0x50, 0x47, 0x59, 0x6d, 0x4a, 0x74, 0x66, 0x44, 0x2f, 0x78, 0x2f, 0x33, 0x63, 0x4f, 0x4d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: APGYmJtfD/x/3cOM
				[]byte{0x00, 0xf1, 0x98, 0x98, 0x9b, 0x5f, 0x0f, 0xfc, 0x7f, 0xdd, 0xc3, 0x8c},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: APGYmJtfD/x/3cOM
				[]byte{0x00, 0xf1, 0x98, 0x98, 0x9b, 0x5f, 0x0f, 0xfc, 0x7f, 0xdd, 0xc3, 0x8c},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndagxdcp53jb35jiwyizx7wr8dg4acgeb6yrp8wkn3vfz6dn")
	require.NoError(t, err)

	// bmRhZ3hkY3A1M2piMzVqaXd5aXp4N3dyOGRnNGFjZ2ViNnlycDh3a24zdmZ6NmRuAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x67, 0x78, 0x64, 0x63, 0x70, 0x35, 0x33, 0x6a, 0x62, 0x33, 0x35, 0x6a, 0x69, 0x77, 0x79, 0x69, 0x7a, 0x78, 0x37, 0x77, 0x72, 0x38, 0x64, 0x67, 0x34, 0x61, 0x63, 0x67, 0x65, 0x62, 0x36, 0x79, 0x72, 0x70, 0x38, 0x77, 0x6b, 0x6e, 0x33, 0x76, 0x66, 0x7a, 0x36, 0x64, 0x6e, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndafvqdpiy376v9agebtrnd45dxxvhscv456858nhanyt987")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFmdnFkcGl5Mzc2djlhZ2VidHJuZDQ1ZHh4dmhzY3Y0NTY4NThuaGFueXQ5ODc=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x66, 0x76, 0x71, 0x64, 0x70, 0x69, 0x79, 0x33, 0x37, 0x36, 0x76, 0x39, 0x61, 0x67, 0x65, 0x62, 0x74, 0x72, 0x6e, 0x64, 0x34, 0x35, 0x64, 0x78, 0x78, 0x76, 0x68, 0x73, 0x63, 0x76, 0x34, 0x35, 0x36, 0x38, 0x35, 0x38, 0x6e, 0x68, 0x61, 0x6e, 0x79, 0x74, 0x39, 0x38, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndaa248nz3z4t28j4hh79ykaj7kicjx2iqw2u2ez5yh7b7ri")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndafir5tvn88dcruh8f38anhn5fvqiuz6nue42sf5qnv4ugt")
	require.NoError(t, err)

	// bmRhZmlyNXR2bjg4ZGNydWg4ZjM4YW5objVmdnFpdXo2bnVlNDJzZjVxbnY0dWd0AAjSrCLE0zRuZGFhMjQ4bnozejR0MjhqNGhoNzl5a2FqN2tpY2p4MmlxdzJ1MmV6NXloN2I3cmk=
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x69, 0x72, 0x35, 0x74, 0x76, 0x6e, 0x38, 0x38, 0x64, 0x63, 0x72, 0x75, 0x68, 0x38, 0x66, 0x33, 0x38, 0x61, 0x6e, 0x68, 0x6e, 0x35, 0x66, 0x76, 0x71, 0x69, 0x75, 0x7a, 0x36, 0x6e, 0x75, 0x65, 0x34, 0x32, 0x73, 0x66, 0x35, 0x71, 0x6e, 0x76, 0x34, 0x75, 0x67, 0x74, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x61, 0x32, 0x34, 0x38, 0x6e, 0x7a, 0x33, 0x7a, 0x34, 0x74, 0x32, 0x38, 0x6a, 0x34, 0x68, 0x68, 0x37, 0x39, 0x79, 0x6b, 0x61, 0x6a, 0x37, 0x6b, 0x69, 0x63, 0x6a, 0x78, 0x32, 0x69, 0x71, 0x77, 0x32, 0x75, 0x32, 0x65, 0x7a, 0x35, 0x79, 0x68, 0x37, 0x62, 0x37, 0x72, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndamukadnibrjcwpwvtedmqi6nyjimx58b7kgv974m5wmm43")
	require.NoError(t, err)

	// bmRhbXVrYWRuaWJyamN3cHd2dGVkbXFpNm55amlteDU4YjdrZ3Y5NzRtNXdtbTQzAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x75, 0x6b, 0x61, 0x64, 0x6e, 0x69, 0x62, 0x72, 0x6a, 0x63, 0x77, 0x70, 0x77, 0x76, 0x74, 0x65, 0x64, 0x6d, 0x71, 0x69, 0x36, 0x6e, 0x79, 0x6a, 0x69, 0x6d, 0x78, 0x35, 0x38, 0x62, 0x37, 0x6b, 0x67, 0x76, 0x39, 0x37, 0x34, 0x6d, 0x35, 0x77, 0x6d, 0x6d, 0x34, 0x33, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndaehk7i5i2jn3fycyd94m7hh97w3fdj76g4z488gxyiband")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhZWhrN2k1aTJqbjNmeWN5ZDk0bTdoaDk3dzNmZGo3Nmc0ejQ4OGd4eWliYW5k
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x65, 0x68, 0x6b, 0x37, 0x69, 0x35, 0x69, 0x32, 0x6a, 0x6e, 0x33, 0x66, 0x79, 0x63, 0x79, 0x64, 0x39, 0x34, 0x6d, 0x37, 0x68, 0x68, 0x39, 0x37, 0x77, 0x33, 0x66, 0x64, 0x6a, 0x37, 0x36, 0x67, 0x34, 0x7a, 0x34, 0x38, 0x38, 0x67, 0x78, 0x79, 0x69, 0x62, 0x61, 0x6e, 0x64}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndaf7a6jqjgw4ui3faidjvutsje88pb9tj2qen6b3cazecqi")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFmN2E2anFqZ3c0dWkzZmFpZGp2dXRzamU4OHBiOXRqMnFlbjZiM2NhemVjcWk=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x66, 0x37, 0x61, 0x36, 0x6a, 0x71, 0x6a, 0x67, 0x77, 0x34, 0x75, 0x69, 0x33, 0x66, 0x61, 0x69, 0x64, 0x6a, 0x76, 0x75, 0x74, 0x73, 0x6a, 0x65, 0x38, 0x38, 0x70, 0x62, 0x39, 0x74, 0x6a, 0x32, 0x71, 0x65, 0x6e, 0x36, 0x62, 0x33, 0x63, 0x61, 0x7a, 0x65, 0x63, 0x71, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndaf3qubuwpqk36xwyec8mwycdt4rsd4gn2q7vmy4ynwbs8x")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndae9i82aw52jtjyb7rmvz3thsmm2zsymmijr7u3erh5f2xc")
	require.NoError(t, err)

	// bmRhZTlpODJhdzUyanRqeWI3cm12ejN0aHNtbTJ6c3ltbWlqcjd1M2VyaDVmMnhjAAz/orpRehFuZGFmM3F1YnV3cHFrMzZ4d3llYzhtd3ljZHQ0cnNkNGduMnE3dm15NHlud2JzOHg=
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x39, 0x69, 0x38, 0x32, 0x61, 0x77, 0x35, 0x32, 0x6a, 0x74, 0x6a, 0x79, 0x62, 0x37, 0x72, 0x6d, 0x76, 0x7a, 0x33, 0x74, 0x68, 0x73, 0x6d, 0x6d, 0x32, 0x7a, 0x73, 0x79, 0x6d, 0x6d, 0x69, 0x6a, 0x72, 0x37, 0x75, 0x33, 0x65, 0x72, 0x68, 0x35, 0x66, 0x32, 0x78, 0x63, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x66, 0x33, 0x71, 0x75, 0x62, 0x75, 0x77, 0x70, 0x71, 0x6b, 0x33, 0x36, 0x78, 0x77, 0x79, 0x65, 0x63, 0x38, 0x6d, 0x77, 0x79, 0x63, 0x64, 0x74, 0x34, 0x72, 0x73, 0x64, 0x34, 0x67, 0x6e, 0x32, 0x71, 0x37, 0x76, 0x6d, 0x79, 0x34, 0x79, 0x6e, 0x77, 0x62, 0x73, 0x38, 0x78}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndagg9wvbkz8wk2bb99mzte5f7zrmia62v4znxjxywst6ew2")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x3e, 0x17, 0x29, 0xfb, 0xe3, 0xdd, 0xfd, 0x1f, 0xd7, 0x73, 0x9b, 0xce, 0x3c, 0x80, 0x4d, 0xca, 0x07, 0xa7, 0x9e, 0x8d, 0x46, 0x28, 0xba, 0xc2, 0x51, 0xe5, 0x2c, 0xfb, 0xc2, 0xad, 0x9d, 0x1d}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x33, 0x54, 0x03, 0x69, 0x50, 0x0c, 0x14, 0xc8, 0xee, 0x16, 0x00, 0x32, 0x9e, 0x04, 0xb6, 0x5a, 0x5d, 0xe4, 0x37, 0x54, 0xbc, 0x03, 0x1f, 0xd2, 0xac, 0x23, 0x81, 0xb7, 0x26, 0x83, 0xfc, 0x0e}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWE5YnFrcjU2cnE5NGg4enFxcDY2cmVhanpmYXJqNjh0eGRjdHF5Y2todXUzODhjeHlxdDQ1ZTZrc3V1NThjdgAZX/GDxHNZbmRhZ2c5d3Zia3o4d2syYmI5OW16dGU1Zjd6cm1pYTYydjR6bnhqeHl3c3Q2ZXcybnB1YmE4amFkdGJiZWEzeGlhNWprYWdianVocWMyYWRmaHNleTNwZjUzYnprdThhZ2g4dXhzdDJkcDNnc3I4YTdwdGJ1OGtyczRnN3NjbFVIYmhuSWdoYzNOL0U=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x39, 0x62, 0x71, 0x6b, 0x72, 0x35, 0x36, 0x72, 0x71, 0x39, 0x34, 0x68, 0x38, 0x7a, 0x71, 0x71, 0x70, 0x36, 0x36, 0x72, 0x65, 0x61, 0x6a, 0x7a, 0x66, 0x61, 0x72, 0x6a, 0x36, 0x38, 0x74, 0x78, 0x64, 0x63, 0x74, 0x71, 0x79, 0x63, 0x6b, 0x68, 0x75, 0x75, 0x33, 0x38, 0x38, 0x63, 0x78, 0x79, 0x71, 0x74, 0x34, 0x35, 0x65, 0x36, 0x6b, 0x73, 0x75, 0x75, 0x35, 0x38, 0x63, 0x76, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x67, 0x67, 0x39, 0x77, 0x76, 0x62, 0x6b, 0x7a, 0x38, 0x77, 0x6b, 0x32, 0x62, 0x62, 0x39, 0x39, 0x6d, 0x7a, 0x74, 0x65, 0x35, 0x66, 0x37, 0x7a, 0x72, 0x6d, 0x69, 0x61, 0x36, 0x32, 0x76, 0x34, 0x7a, 0x6e, 0x78, 0x6a, 0x78, 0x79, 0x77, 0x73, 0x74, 0x36, 0x65, 0x77, 0x32, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x33, 0x78, 0x69, 0x61, 0x35, 0x6a, 0x6b, 0x61, 0x67, 0x62, 0x6a, 0x75, 0x68, 0x71, 0x63, 0x32, 0x61, 0x64, 0x66, 0x68, 0x73, 0x65, 0x79, 0x33, 0x70, 0x66, 0x35, 0x33, 0x62, 0x7a, 0x6b, 0x75, 0x38, 0x61, 0x67, 0x68, 0x38, 0x75, 0x78, 0x73, 0x74, 0x32, 0x64, 0x70, 0x33, 0x67, 0x73, 0x72, 0x38, 0x61, 0x37, 0x70, 0x74, 0x62, 0x75, 0x38, 0x6b, 0x72, 0x73, 0x34, 0x67, 0x37, 0x73, 0x63, 0x6c, 0x55, 0x48, 0x62, 0x68, 0x6e, 0x49, 0x67, 0x68, 0x63, 0x33, 0x4e, 0x2f, 0x45}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: sclUHbhnIghc3N/E
				[]byte{0xb1, 0xc9, 0x54, 0x1d, 0xb8, 0x67, 0x22, 0x08, 0x5c, 0xdc, 0xdf, 0xc4},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: sclUHbhnIghc3N/E
				[]byte{0xb1, 0xc9, 0x54, 0x1d, 0xb8, 0x67, 0x22, 0x08, 0x5c, 0xdc, 0xdf, 0xc4},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndaq8ceg64jbkcjs5pp54anped97tbssm57y7b4m2nmcaunr")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndadv7yxigamyy2s2g6uuinkg7cfv6fmtd5dd6j7sucrhvca")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFkdjd5eGlnYW15eTJzMmc2dXVpbmtnN2NmdjZmbXRkNWRkNmo3c3Vjcmh2Y2FuZGFxOGNlZzY0amJrY2pzNXBwNTRhbnBlZDk3dGJzc201N3k3YjRtMm5tY2F1bnI=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x64, 0x76, 0x37, 0x79, 0x78, 0x69, 0x67, 0x61, 0x6d, 0x79, 0x79, 0x32, 0x73, 0x32, 0x67, 0x36, 0x75, 0x75, 0x69, 0x6e, 0x6b, 0x67, 0x37, 0x63, 0x66, 0x76, 0x36, 0x66, 0x6d, 0x74, 0x64, 0x35, 0x64, 0x64, 0x36, 0x6a, 0x37, 0x73, 0x75, 0x63, 0x72, 0x68, 0x76, 0x63, 0x61, 0x6e, 0x64, 0x61, 0x71, 0x38, 0x63, 0x65, 0x67, 0x36, 0x34, 0x6a, 0x62, 0x6b, 0x63, 0x6a, 0x73, 0x35, 0x70, 0x70, 0x35, 0x34, 0x61, 0x6e, 0x70, 0x65, 0x64, 0x39, 0x37, 0x74, 0x62, 0x73, 0x73, 0x6d, 0x35, 0x37, 0x79, 0x37, 0x62, 0x34, 0x6d, 0x32, 0x6e, 0x6d, 0x63, 0x61, 0x75, 0x6e, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndaiwu87czaqframiiya7s7h6sabxagwtu2psutzy5fnkrwf")
	require.NoError(t, err)

	// eFQ1SC9oWE1CdEswRnVWUG5kYWl3dTg3Y3phcWZyYW1paXlhN3M3aDZzYWJ4YWd3dHUycHN1dHp5NWZua3J3ZnN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x78, 0x54, 0x35, 0x48, 0x2f, 0x68, 0x58, 0x4d, 0x42, 0x74, 0x4b, 0x30, 0x46, 0x75, 0x56, 0x50, 0x6e, 0x64, 0x61, 0x69, 0x77, 0x75, 0x38, 0x37, 0x63, 0x7a, 0x61, 0x71, 0x66, 0x72, 0x61, 0x6d, 0x69, 0x69, 0x79, 0x61, 0x37, 0x73, 0x37, 0x68, 0x36, 0x73, 0x61, 0x62, 0x78, 0x61, 0x67, 0x77, 0x74, 0x75, 0x32, 0x70, 0x73, 0x75, 0x74, 0x7a, 0x79, 0x35, 0x66, 0x6e, 0x6b, 0x72, 0x77, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: xT5H/hXMBtK0FuVP
				[]byte{0xc5, 0x3e, 0x47, 0xfe, 0x15, 0xcc, 0x06, 0xd2, 0xb4, 0x16, 0xe5, 0x4f},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: xT5H/hXMBtK0FuVP
				[]byte{0xc5, 0x3e, 0x47, 0xfe, 0x15, 0xcc, 0x06, 0xd2, 0xb4, 0x16, 0xe5, 0x4f},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndamfypstdvgc2vxi7ghnsjmm4a2t9mi8ikjv2rkbaw5arw2")
	require.NoError(t, err)

	// bmRhbWZ5cHN0ZHZnYzJ2eGk3Z2huc2ptbTRhMnQ5bWk4aWtqdjJya2JhdzVhcncyAA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x66, 0x79, 0x70, 0x73, 0x74, 0x64, 0x76, 0x67, 0x63, 0x32, 0x76, 0x78, 0x69, 0x37, 0x67, 0x68, 0x6e, 0x73, 0x6a, 0x6d, 0x6d, 0x34, 0x61, 0x32, 0x74, 0x39, 0x6d, 0x69, 0x38, 0x69, 0x6b, 0x6a, 0x76, 0x32, 0x72, 0x6b, 0x62, 0x61, 0x77, 0x35, 0x61, 0x72, 0x77, 0x32, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndaeq9we3ykrsf6dia48435yk592rapbqgnmnass87u38knc")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndaiifetgvbs7ezas38ijgd25qwrkjmdr9kk8rmpnbyqau9x")
	require.NoError(t, err)

	// bmRhaWlmZXRndmJzN2V6YXMzOGlqZ2QyNXF3cmtqbWRyOWtrOHJtcG5ieXFhdTl4MXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWVxOXdlM3lrcnNmNmRpYTQ4NDM1eWs1OTJyYXBicWdubW5hc3M4N3UzOGtuYw==
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x69, 0x66, 0x65, 0x74, 0x67, 0x76, 0x62, 0x73, 0x37, 0x65, 0x7a, 0x61, 0x73, 0x33, 0x38, 0x69, 0x6a, 0x67, 0x64, 0x32, 0x35, 0x71, 0x77, 0x72, 0x6b, 0x6a, 0x6d, 0x64, 0x72, 0x39, 0x6b, 0x6b, 0x38, 0x72, 0x6d, 0x70, 0x6e, 0x62, 0x79, 0x71, 0x61, 0x75, 0x39, 0x78, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x65, 0x71, 0x39, 0x77, 0x65, 0x33, 0x79, 0x6b, 0x72, 0x73, 0x66, 0x36, 0x64, 0x69, 0x61, 0x34, 0x38, 0x34, 0x33, 0x35, 0x79, 0x6b, 0x35, 0x39, 0x32, 0x72, 0x61, 0x70, 0x62, 0x71, 0x67, 0x6e, 0x6d, 0x6e, 0x61, 0x73, 0x73, 0x38, 0x37, 0x75, 0x33, 0x38, 0x6b, 0x6e, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmos2YUtUbWErN1pLeDZmZlEwAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x36, 0x61, 0x4b, 0x54, 0x6d, 0x61, 0x2b, 0x37, 0x5a, 0x4b, 0x78, 0x36, 0x66, 0x66, 0x51, 0x30, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: 6aKTma+7ZKx6ffQ0
				[]byte{0xe9, 0xa2, 0x93, 0x99, 0xaf, 0xbb, 0x64, 0xac, 0x7a, 0x7d, 0xf4, 0x34},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: 6aKTma+7ZKx6ffQ0
				[]byte{0xe9, 0xa2, 0x93, 0x99, 0xaf, 0xbb, 0x64, 0xac, 0x7a, 0x7d, 0xf4, 0x34},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSidechainTx_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	sidechaintxSource, err := address.Validate("ndaa568k3e6aw3n8fsqu6mv3m3wumtts86yyuumfqbrzhuxc")
	require.NoError(t, err)
	sidechaintxSidechainSignatures, err := signature.RawSignature(signature.Ed25519, []byte{0xb8, 0x57, 0x80, 0xe0, 0x78, 0xc9, 0x92, 0x24, 0xad, 0xfd, 0x0b, 0x94, 0x59, 0x52, 0xf8, 0xc0, 0x87, 0x9e, 0x04, 0x14, 0xbc, 0xca, 0x0a, 0x66, 0x96, 0x4d, 0x85, 0x20, 0x3b, 0xe8, 0xa6, 0xb7, 0x67, 0x61, 0x32, 0x9d, 0x48, 0xa0, 0x36, 0x13, 0x71, 0x47, 0xf5, 0x43, 0x67, 0x49, 0xce, 0x64, 0x9c, 0x9a, 0x7a, 0x62, 0x6f, 0xe4, 0x0d, 0xf5, 0x10, 0x2a, 0xbf, 0x05, 0x56, 0x52, 0x30, 0x40})
	require.NoError(t, err)

	// AAJeEXA5N5cAAAAAAAAATERJaHVzd0x4S1JvSUs2M3hhNGphZHRjYXpibTJiMmQyM2dqY2ptcjdicWtmdXd6MjJjZDM2YmF3enZmYXczd3lqeWN1YXE5aXc0NXlxMmp1dnhla2Fwc3ZxZmQ5a3M1aGpoaGdqaGU0cmp0ZzkzYXA4d2ljeHIyZmszamRhc2c5dTNqbXdjc2tuZGFhNTY4azNlNmF3M244ZnNxdTZtdjNtM3d1bXR0czg2eXl1dW1mcWJyemh1eGM=
	expect := []byte{0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x44, 0x49, 0x68, 0x75, 0x73, 0x77, 0x4c, 0x78, 0x4b, 0x52, 0x6f, 0x49, 0x4b, 0x36, 0x33, 0x78, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x7a, 0x62, 0x6d, 0x32, 0x62, 0x32, 0x64, 0x32, 0x33, 0x67, 0x6a, 0x63, 0x6a, 0x6d, 0x72, 0x37, 0x62, 0x71, 0x6b, 0x66, 0x75, 0x77, 0x7a, 0x32, 0x32, 0x63, 0x64, 0x33, 0x36, 0x62, 0x61, 0x77, 0x7a, 0x76, 0x66, 0x61, 0x77, 0x33, 0x77, 0x79, 0x6a, 0x79, 0x63, 0x75, 0x61, 0x71, 0x39, 0x69, 0x77, 0x34, 0x35, 0x79, 0x71, 0x32, 0x6a, 0x75, 0x76, 0x78, 0x65, 0x6b, 0x61, 0x70, 0x73, 0x76, 0x71, 0x66, 0x64, 0x39, 0x6b, 0x73, 0x35, 0x68, 0x6a, 0x68, 0x68, 0x67, 0x6a, 0x68, 0x65, 0x34, 0x72, 0x6a, 0x74, 0x67, 0x39, 0x33, 0x61, 0x70, 0x38, 0x77, 0x69, 0x63, 0x78, 0x72, 0x32, 0x66, 0x6b, 0x33, 0x6a, 0x64, 0x61, 0x73, 0x67, 0x39, 0x75, 0x33, 0x6a, 0x6d, 0x77, 0x63, 0x73, 0x6b, 0x6e, 0x64, 0x61, 0x61, 0x35, 0x36, 0x38, 0x6b, 0x33, 0x65, 0x36, 0x61, 0x77, 0x33, 0x6e, 0x38, 0x66, 0x73, 0x71, 0x75, 0x36, 0x6d, 0x76, 0x33, 0x6d, 0x33, 0x77, 0x75, 0x6d, 0x74, 0x74, 0x73, 0x38, 0x36, 0x79, 0x79, 0x75, 0x75, 0x6d, 0x66, 0x71, 0x62, 0x72, 0x7a, 0x68, 0x75, 0x78, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SidechainTx
	}{
		{
			"no signatures",
			NewSidechainTx(
				sidechaintxSource,
				76,
				// SidechainSignableBytes as b64: DIhuswLxKRoIK63x
				[]byte{0x0c, 0x88, 0x6e, 0xb3, 0x02, 0xf1, 0x29, 0x1a, 0x08, 0x2b, 0xad, 0xf1},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
			),
		},
		{
			"with signature",
			NewSidechainTx(
				sidechaintxSource,
				76,
				// SidechainSignableBytes as b64: DIhuswLxKRoIK63x
				[]byte{0x0c, 0x88, 0x6e, 0xb3, 0x02, 0xf1, 0x29, 0x1a, 0x08, 0x2b, 0xad, 0xf1},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndahv2u3m6p75fyujdktzu26yg3qdz9iq4umgrijr9ycr857")
	require.NoError(t, err)

	// bmRhaHYydTNtNnA3NWZ5dWpka3R6dTI2eWczcWR6OWlxNHVtZ3JpanI5eWNyODU3ABP6yCVBcNA=
	expect := []byte{0x6e, 0x64, 0x61, 0x68, 0x76, 0x32, 0x75, 0x33, 0x6d, 0x36, 0x70, 0x37, 0x35, 0x66, 0x79, 0x75, 0x6a, 0x64, 0x6b, 0x74, 0x7a, 0x75, 0x32, 0x36, 0x79, 0x67, 0x33, 0x71, 0x64, 0x7a, 0x39, 0x69, 0x71, 0x34, 0x75, 0x6d, 0x67, 0x72, 0x69, 0x6a, 0x72, 0x39, 0x79, 0x63, 0x72, 0x38, 0x35, 0x37, 0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndagqw9b5tdcnvye53xt76fe2k27s9wsrrz8jvvg9c4mhk92")
	require.NoError(t, err)

	// AA2S+t7X5spuZGFncXc5YjV0ZGNudnllNTN4dDc2ZmUyazI3czl3c3JyejhqdnZnOWM0bWhrOTI=
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x6e, 0x64, 0x61, 0x67, 0x71, 0x77, 0x39, 0x62, 0x35, 0x74, 0x64, 0x63, 0x6e, 0x76, 0x79, 0x65, 0x35, 0x33, 0x78, 0x74, 0x37, 0x36, 0x66, 0x65, 0x32, 0x6b, 0x32, 0x37, 0x73, 0x39, 0x77, 0x73, 0x72, 0x72, 0x7a, 0x38, 0x6a, 0x76, 0x76, 0x67, 0x39, 0x63, 0x34, 0x6d, 0x68, 0x6b, 0x39, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAn3Z2Z46KEAH/erJE/OdA==
	expect := []byte{0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1, 0x00, 0x1f, 0xf7, 0xab, 0x24, 0x4f, 0xce, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2805298263287969,
				8998038698708596,
			),
		},
		{
			"with signature",
			NewIssue(
				2805298263287969,
				8998038698708596,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimchildaccountTarget, err := address.Validate("ndaeayiax7edbuuuy6nrzr5rhjuik9ffya9c2adzukxkjkn3")
	require.NoError(t, err)
	claimchildaccountChild, err := address.Validate("ndacicja5edqidtukgqm9jhjt78kgq9rpq7r4rum8j5pccub")
	require.NoError(t, err)
	claimchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x04, 0xee, 0xf7, 0xc1, 0xf9, 0x4f, 0x59, 0xf6, 0xee, 0x8e, 0x62, 0xfd, 0xef, 0xc7, 0xc4, 0x6a, 0x4e, 0x22, 0xda, 0xfd, 0x7b, 0x9a, 0x3b, 0x22, 0x97, 0x77, 0x9e, 0x90, 0x75, 0x88, 0xa7, 0xfc}, nil)
	require.NoError(t, err)
	claimchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0xa6, 0xb7, 0x84, 0xb6, 0x8c, 0x6c, 0xe9, 0xf1, 0x72, 0x0f, 0x27, 0x5f, 0xb1, 0x7b, 0x70, 0xba, 0x23, 0xd8, 0xe8, 0xec, 0x49, 0x92, 0x8d, 0xb0, 0x92, 0x67, 0xf7, 0x55, 0x58, 0xac, 0xcc, 0xd8, 0x9f, 0x81, 0xbc, 0xb0, 0xe7, 0x1f, 0x2e, 0xe2, 0xa5, 0x88, 0x5b, 0xcc, 0x88, 0xd8, 0xfc, 0x44, 0xc5, 0xad, 0x27, 0x27, 0xdd, 0xd5, 0x6d, 0x6a, 0x64, 0x43, 0xbc, 0x54, 0xaa, 0xad, 0x3d, 0x1f})
	require.NoError(t, err)
	claimchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xc0, 0x8c, 0x32, 0x0e, 0x0d, 0x36, 0x02, 0x5e, 0xbf, 0xdd, 0xea, 0xad, 0xe2, 0x00, 0x1f, 0x59, 0xbb, 0x54, 0xbc, 0xfb, 0x60, 0xa0, 0x91, 0xc4, 0x10, 0xe9, 0x05, 0x4a, 0x38, 0xda, 0x2e, 0xb0}, nil)
	require.NoError(t, err)

	// bmRhY2ljamE1ZWRxaWR0dWtncW05amhqdDc4a2dxOXJwcTdyNHJ1bThqNXBjY3VibnB1YmE4amFkdGJiZWFjcTc3OGI5Zmh4djd6cXQzdHI1NThoMnR4ZTZpeTQ5eDczd3EzY3U3NTM3ZWR4dGN2OTNxdGg4MmlqYmZjajhtMjNkdDE2aDQ0bTM2czc3MTcxOHVzYTRqYWR0Y2F3NDUyanB3bnB2dzljNnNyZTdyNWM4NXN6aXQ3dDRobmpnamk1bmV1bjk1eGt5Zm4zdm5qOWFwNnlkdnQ4bXpjd3llZnp2ZWk1ZDhlanRwcGU2djc1eG1wcGp1ZWhyY3d4a3l2NGgzcmQ1c2o4NWthbnB1YmE4amFkdGJiZWRhaTJuc3FidzVhZXp4OTV6eGs1MnNhZDduNXl4ZjY5cHNrYmVxZWNkd3NrdXQyNWl6bWJuOTl1ZXg5eGl1NjFDSEJERTRGOEd5Ry9YMmUAFOge3kVkpG5kYWVheWlheDdlZGJ1dXV5Nm5yenI1cmhqdWlrOWZmeWE5YzJhZHp1a3hramtuMw==
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x69, 0x63, 0x6a, 0x61, 0x35, 0x65, 0x64, 0x71, 0x69, 0x64, 0x74, 0x75, 0x6b, 0x67, 0x71, 0x6d, 0x39, 0x6a, 0x68, 0x6a, 0x74, 0x37, 0x38, 0x6b, 0x67, 0x71, 0x39, 0x72, 0x70, 0x71, 0x37, 0x72, 0x34, 0x72, 0x75, 0x6d, 0x38, 0x6a, 0x35, 0x70, 0x63, 0x63, 0x75, 0x62, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x63, 0x71, 0x37, 0x37, 0x38, 0x62, 0x39, 0x66, 0x68, 0x78, 0x76, 0x37, 0x7a, 0x71, 0x74, 0x33, 0x74, 0x72, 0x35, 0x35, 0x38, 0x68, 0x32, 0x74, 0x78, 0x65, 0x36, 0x69, 0x79, 0x34, 0x39, 0x78, 0x37, 0x33, 0x77, 0x71, 0x33, 0x63, 0x75, 0x37, 0x35, 0x33, 0x37, 0x65, 0x64, 0x78, 0x74, 0x63, 0x76, 0x39, 0x33, 0x71, 0x74, 0x68, 0x38, 0x32, 0x69, 0x6a, 0x62, 0x66, 0x63, 0x6a, 0x38, 0x6d, 0x32, 0x33, 0x64, 0x74, 0x31, 0x36, 0x68, 0x34, 0x34, 0x6d, 0x33, 0x36, 0x73, 0x37, 0x37, 0x31, 0x37, 0x31, 0x38, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x77, 0x34, 0x35, 0x32, 0x6a, 0x70, 0x77, 0x6e, 0x70, 0x76, 0x77, 0x39, 0x63, 0x36, 0x73, 0x72, 0x65, 0x37, 0x72, 0x35, 0x63, 0x38, 0x35, 0x73, 0x7a, 0x69, 0x74, 0x37, 0x74, 0x34, 0x68, 0x6e, 0x6a, 0x67, 0x6a, 0x69, 0x35, 0x6e, 0x65, 0x75, 0x6e, 0x39, 0x35, 0x78, 0x6b, 0x79, 0x66, 0x6e, 0x33, 0x76, 0x6e, 0x6a, 0x39, 0x61, 0x70, 0x36, 0x79, 0x64, 0x76, 0x74, 0x38, 0x6d, 0x7a, 0x63, 0x77, 0x79, 0x65, 0x66, 0x7a, 0x76, 0x65, 0x69, 0x35, 0x64, 0x38, 0x65, 0x6a, 0x74, 0x70, 0x70, 0x65, 0x36, 0x76, 0x37, 0x35, 0x78, 0x6d, 0x70, 0x70, 0x6a, 0x75, 0x65, 0x68, 0x72, 0x63, 0x77, 0x78, 0x6b, 0x79, 0x76, 0x34, 0x68, 0x33, 0x72, 0x64, 0x35, 0x73, 0x6a, 0x38, 0x35, 0x6b, 0x61, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x61, 0x69, 0x32, 0x6e, 0x73, 0x71, 0x62, 0x77, 0x35, 0x61, 0x65, 0x7a, 0x78, 0x39, 0x35, 0x7a, 0x78, 0x6b, 0x35, 0x32, 0x73, 0x61, 0x64, 0x37, 0x6e, 0x35, 0x79, 0x78, 0x66, 0x36, 0x39, 0x70, 0x73, 0x6b, 0x62, 0x65, 0x71, 0x65, 0x63, 0x64, 0x77, 0x73, 0x6b, 0x75, 0x74, 0x32, 0x35, 0x69, 0x7a, 0x6d, 0x62, 0x6e, 0x39, 0x39, 0x75, 0x65, 0x78, 0x39, 0x78, 0x69, 0x75, 0x36, 0x31, 0x43, 0x48, 0x42, 0x44, 0x45, 0x34, 0x46, 0x38, 0x47, 0x79, 0x47, 0x2f, 0x58, 0x32, 0x65, 0x00, 0x14, 0xe8, 0x1e, 0xde, 0x45, 0x64, 0xa4, 0x6e, 0x64, 0x61, 0x65, 0x61, 0x79, 0x69, 0x61, 0x78, 0x37, 0x65, 0x64, 0x62, 0x75, 0x75, 0x75, 0x79, 0x36, 0x6e, 0x72, 0x7a, 0x72, 0x35, 0x72, 0x68, 0x6a, 0x75, 0x69, 0x6b, 0x39, 0x66, 0x66, 0x79, 0x61, 0x39, 0x63, 0x32, 0x61, 0x64, 0x7a, 0x75, 0x6b, 0x78, 0x6b, 0x6a, 0x6b, 0x6e, 0x33}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimChildAccount
	}{
		{
			"no signatures",
			NewClaimChildAccount(
				claimchildaccountTarget,
				claimchildaccountChild,
				*claimchildaccountChildOwnership,
				*claimchildaccountChildSignature,
				22783476771718,
				[]signature.PublicKey{*claimchildaccountChildValidationKeys},
				// ChildValidationScript as b64: 1CHBDE4F8GyG/X2e
				[]byte{0xd4, 0x21, 0xc1, 0x0c, 0x4e, 0x05, 0xf0, 0x6c, 0x86, 0xfd, 0x7d, 0x9e},
				5884718809965732,
			),
		},
		{
			"with signature",
			NewClaimChildAccount(
				claimchildaccountTarget,
				claimchildaccountChild,
				*claimchildaccountChildOwnership,
				*claimchildaccountChildSignature,
				22783476771718,
				[]signature.PublicKey{*claimchildaccountChildValidationKeys},
				// ChildValidationScript as b64: 1CHBDE4F8GyG/X2e
				[]byte{0xd4, 0x21, 0xc1, 0x0c, 0x4e, 0x05, 0xf0, 0x6c, 0x86, 0xfd, 0x7d, 0x9e},
				5884718809965732,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
