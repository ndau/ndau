package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndaetp4nibbvb9qxc3tvgpwzzrdws6xuvwmfm8mb6ccp4arw")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndanqp434juwkjex7q8eui2dfaxhu364mftf3rxe98weam7k")
	require.NoError(t, err)

	// bmRhbnFwNDM0anV3a2pleDdxOGV1aTJkZmF4aHUzNjRtZnRmM3J4ZTk4d2VhbTdrAAWCIQf8/70AApoPXz8aEm5kYWV0cDRuaWJidmI5cXhjM3R2Z3B3enpyZHdzNnh1dndtZm04bWI2Y2NwNGFydw==
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x71, 0x70, 0x34, 0x33, 0x34, 0x6a, 0x75, 0x77, 0x6b, 0x6a, 0x65, 0x78, 0x37, 0x71, 0x38, 0x65, 0x75, 0x69, 0x32, 0x64, 0x66, 0x61, 0x78, 0x68, 0x75, 0x33, 0x36, 0x34, 0x6d, 0x66, 0x74, 0x66, 0x33, 0x72, 0x78, 0x65, 0x39, 0x38, 0x77, 0x65, 0x61, 0x6d, 0x37, 0x6b, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x65, 0x74, 0x70, 0x34, 0x6e, 0x69, 0x62, 0x62, 0x76, 0x62, 0x39, 0x71, 0x78, 0x63, 0x33, 0x74, 0x76, 0x67, 0x70, 0x77, 0x7a, 0x7a, 0x72, 0x64, 0x77, 0x73, 0x36, 0x78, 0x75, 0x76, 0x77, 0x6d, 0x66, 0x6d, 0x38, 0x6d, 0x62, 0x36, 0x63, 0x63, 0x70, 0x34, 0x61, 0x72, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndaitjirqtpebvjkuatay7tb7eixmt2unnz2vdiadx4hvveb")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x99, 0x04, 0x92, 0xb4, 0x13, 0x6a, 0x32, 0x69, 0xd8, 0x32, 0x8e, 0x86, 0x64, 0x2e, 0xe7, 0x71, 0x09, 0x42, 0x89, 0xe6, 0xd9, 0xe2, 0x0b, 0x61, 0x8c, 0x36, 0xd1, 0xae, 0x34, 0x45, 0xc1, 0x37}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWNuc2pleHdjcHhkZTRxMmdraGluM2JxNjcyc3Vzd2o2NW44ZWM1YnRzNXBkbXR3aXphdnI2YnZpNHVwajY5eQAQTcdmlXTFbmRhaXRqaXJxdHBlYnZqa3VhdGF5N3RiN2VpeG10MnVubnoydmRpYWR4NGh2dmViVGhYUnlEbnZsU3A0Z3Bsbg==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x6e, 0x73, 0x6a, 0x65, 0x78, 0x77, 0x63, 0x70, 0x78, 0x64, 0x65, 0x34, 0x71, 0x32, 0x67, 0x6b, 0x68, 0x69, 0x6e, 0x33, 0x62, 0x71, 0x36, 0x37, 0x32, 0x73, 0x75, 0x73, 0x77, 0x6a, 0x36, 0x35, 0x6e, 0x38, 0x65, 0x63, 0x35, 0x62, 0x74, 0x73, 0x35, 0x70, 0x64, 0x6d, 0x74, 0x77, 0x69, 0x7a, 0x61, 0x76, 0x72, 0x36, 0x62, 0x76, 0x69, 0x34, 0x75, 0x70, 0x6a, 0x36, 0x39, 0x79, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x69, 0x74, 0x6a, 0x69, 0x72, 0x71, 0x74, 0x70, 0x65, 0x62, 0x76, 0x6a, 0x6b, 0x75, 0x61, 0x74, 0x61, 0x79, 0x37, 0x74, 0x62, 0x37, 0x65, 0x69, 0x78, 0x6d, 0x74, 0x32, 0x75, 0x6e, 0x6e, 0x7a, 0x32, 0x76, 0x64, 0x69, 0x61, 0x64, 0x78, 0x34, 0x68, 0x76, 0x76, 0x65, 0x62, 0x54, 0x68, 0x58, 0x52, 0x79, 0x44, 0x6e, 0x76, 0x6c, 0x53, 0x70, 0x34, 0x67, 0x70, 0x6c, 0x6e}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: ThXRyDnvlSp4gpln
				[]byte{0x4e, 0x15, 0xd1, 0xc8, 0x39, 0xef, 0x95, 0x2a, 0x78, 0x82, 0x99, 0x67},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: ThXRyDnvlSp4gpln
				[]byte{0x4e, 0x15, 0xd1, 0xc8, 0x39, 0xef, 0x95, 0x2a, 0x78, 0x82, 0x99, 0x67},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndadni63j7gajjhydhs2ct6vwjumwck49jyfuc8smgwmgny7")
	require.NoError(t, err)

	// bmRhZG5pNjNqN2dhampoeWRoczJjdDZ2d2p1bXdjazQ5anlmdWM4c21nd21nbnk3AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x6e, 0x69, 0x36, 0x33, 0x6a, 0x37, 0x67, 0x61, 0x6a, 0x6a, 0x68, 0x79, 0x64, 0x68, 0x73, 0x32, 0x63, 0x74, 0x36, 0x76, 0x77, 0x6a, 0x75, 0x6d, 0x77, 0x63, 0x6b, 0x34, 0x39, 0x6a, 0x79, 0x66, 0x75, 0x63, 0x38, 0x73, 0x6d, 0x67, 0x77, 0x6d, 0x67, 0x6e, 0x79, 0x37, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndar9qcx37hm23mhu86f4f9v6he5ehjpss8mycjd9j3g3ijy")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFyOXFjeDM3aG0yM21odTg2ZjRmOXY2aGU1ZWhqcHNzOG15Y2pkOWozZzNpank=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x39, 0x71, 0x63, 0x78, 0x33, 0x37, 0x68, 0x6d, 0x32, 0x33, 0x6d, 0x68, 0x75, 0x38, 0x36, 0x66, 0x34, 0x66, 0x39, 0x76, 0x36, 0x68, 0x65, 0x35, 0x65, 0x68, 0x6a, 0x70, 0x73, 0x73, 0x38, 0x6d, 0x79, 0x63, 0x6a, 0x64, 0x39, 0x6a, 0x33, 0x67, 0x33, 0x69, 0x6a, 0x79}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndanziq4v4scngyrqthhf95a6a259mugh93qaktk7jacnnzk")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaa7tm84e7vixm2ynijdf2fy3h6n56rvyczfr6879f89w57")
	require.NoError(t, err)

	// bmRhYTd0bTg0ZTd2aXhtMnluaWpkZjJmeTNoNm41NnJ2eWN6ZnI2ODc5Zjg5dzU3AAjSrCLE0zRuZGFuemlxNHY0c2NuZ3lycXRoaGY5NWE2YTI1OW11Z2g5M3Fha3RrN2phY25uems=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x37, 0x74, 0x6d, 0x38, 0x34, 0x65, 0x37, 0x76, 0x69, 0x78, 0x6d, 0x32, 0x79, 0x6e, 0x69, 0x6a, 0x64, 0x66, 0x32, 0x66, 0x79, 0x33, 0x68, 0x36, 0x6e, 0x35, 0x36, 0x72, 0x76, 0x79, 0x63, 0x7a, 0x66, 0x72, 0x36, 0x38, 0x37, 0x39, 0x66, 0x38, 0x39, 0x77, 0x35, 0x37, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x6e, 0x7a, 0x69, 0x71, 0x34, 0x76, 0x34, 0x73, 0x63, 0x6e, 0x67, 0x79, 0x72, 0x71, 0x74, 0x68, 0x68, 0x66, 0x39, 0x35, 0x61, 0x36, 0x61, 0x32, 0x35, 0x39, 0x6d, 0x75, 0x67, 0x68, 0x39, 0x33, 0x71, 0x61, 0x6b, 0x74, 0x6b, 0x37, 0x6a, 0x61, 0x63, 0x6e, 0x6e, 0x7a, 0x6b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndagd2ek2jhpssjcgsey69wtj45fd6htn76rwiqh5meihqqa")
	require.NoError(t, err)

	// bmRhZ2QyZWsyamhwc3NqY2dzZXk2OXd0ajQ1ZmQ2aHRuNzZyd2lxaDVtZWlocXFhAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x67, 0x64, 0x32, 0x65, 0x6b, 0x32, 0x6a, 0x68, 0x70, 0x73, 0x73, 0x6a, 0x63, 0x67, 0x73, 0x65, 0x79, 0x36, 0x39, 0x77, 0x74, 0x6a, 0x34, 0x35, 0x66, 0x64, 0x36, 0x68, 0x74, 0x6e, 0x37, 0x36, 0x72, 0x77, 0x69, 0x71, 0x68, 0x35, 0x6d, 0x65, 0x69, 0x68, 0x71, 0x71, 0x61, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndafvj96tsz3btyaammzf3dv33bmgwesbbgn7c8p6qeqy58g")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhZnZqOTZ0c3ozYnR5YWFtbXpmM2R2MzNibWd3ZXNiYmduN2M4cDZxZXF5NThn
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x66, 0x76, 0x6a, 0x39, 0x36, 0x74, 0x73, 0x7a, 0x33, 0x62, 0x74, 0x79, 0x61, 0x61, 0x6d, 0x6d, 0x7a, 0x66, 0x33, 0x64, 0x76, 0x33, 0x33, 0x62, 0x6d, 0x67, 0x77, 0x65, 0x73, 0x62, 0x62, 0x67, 0x6e, 0x37, 0x63, 0x38, 0x70, 0x36, 0x71, 0x65, 0x71, 0x79, 0x35, 0x38, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndansqwxfgkt2p265r4n8wujj4ne6d9v5ga823kdhv58236a")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFuc3F3eGZna3QycDI2NXI0bjh3dWpqNG5lNmQ5djVnYTgyM2tkaHY1ODIzNmE=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x6e, 0x73, 0x71, 0x77, 0x78, 0x66, 0x67, 0x6b, 0x74, 0x32, 0x70, 0x32, 0x36, 0x35, 0x72, 0x34, 0x6e, 0x38, 0x77, 0x75, 0x6a, 0x6a, 0x34, 0x6e, 0x65, 0x36, 0x64, 0x39, 0x76, 0x35, 0x67, 0x61, 0x38, 0x32, 0x33, 0x6b, 0x64, 0x68, 0x76, 0x35, 0x38, 0x32, 0x33, 0x36, 0x61}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndaridcfygzz4vzmukuj8na5juct3gstvey6b8qpk7uu5dcs")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndar2x66ypeumwi745hxxw88emykddbf2t7npez34uhbg6ws")
	require.NoError(t, err)

	// bmRhcjJ4NjZ5cGV1bXdpNzQ1aHh4dzg4ZW15a2RkYmYydDducGV6MzR1aGJnNndzAAz/orpRehFuZGFyaWRjZnlneno0dnptdWt1ajhuYTVqdWN0M2dzdHZleTZiOHFwazd1dTVkY3M=
	expect := []byte{0x6e, 0x64, 0x61, 0x72, 0x32, 0x78, 0x36, 0x36, 0x79, 0x70, 0x65, 0x75, 0x6d, 0x77, 0x69, 0x37, 0x34, 0x35, 0x68, 0x78, 0x78, 0x77, 0x38, 0x38, 0x65, 0x6d, 0x79, 0x6b, 0x64, 0x64, 0x62, 0x66, 0x32, 0x74, 0x37, 0x6e, 0x70, 0x65, 0x7a, 0x33, 0x34, 0x75, 0x68, 0x62, 0x67, 0x36, 0x77, 0x73, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x64, 0x63, 0x66, 0x79, 0x67, 0x7a, 0x7a, 0x34, 0x76, 0x7a, 0x6d, 0x75, 0x6b, 0x75, 0x6a, 0x38, 0x6e, 0x61, 0x35, 0x6a, 0x75, 0x63, 0x74, 0x33, 0x67, 0x73, 0x74, 0x76, 0x65, 0x79, 0x36, 0x62, 0x38, 0x71, 0x70, 0x6b, 0x37, 0x75, 0x75, 0x35, 0x64, 0x63, 0x73}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndaaa3mnm6tc25mqiqjpy69jkc6jyyxxvcwvvtpdfv9yuupf")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xe7, 0x74, 0xe5, 0xeb, 0xc3, 0x32, 0xd5, 0x1f, 0x19, 0x11, 0x98, 0xb7, 0x73, 0x43, 0x46, 0x8b, 0xe9, 0x18, 0x7e, 0x4f, 0xa6, 0x5b, 0xa2, 0x22, 0x41, 0x15, 0x0a, 0xdb, 0x12, 0x52, 0xfb, 0xa6}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x74, 0x48, 0x9b, 0xcf, 0xb1, 0x75, 0x9d, 0xb6, 0x99, 0xbc, 0x98, 0x62, 0x69, 0xdd, 0xb0, 0x17, 0xad, 0x71, 0x17, 0x55, 0xdf, 0xbc, 0xeb, 0x3c, 0x33, 0x79, 0x9b, 0xca, 0xc1, 0xf0, 0x39, 0xf1}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWR2emozcm0ybjNwa2gyM2Nnbm1xNjRkaTRmOHVnZDhqOHZmeml0Y2lla3N4eTJ1a203NG5kOGo5dGU2aDVkYQAZX/GDxHNZbmRhYWEzbW5tNnRjMjVtcWlxanB5Njlqa2M2anl5eHh2Y3d2dnRwZGZ2OXl1dXBmbnB1YmE4amFkdGJiZWI0ZXRnOHJ5ZjQzNXB3M3p1bmdlNHE3eWFtNDQ2aXprenI1MzQzNmdwNjN6dXliOGE2OWMzeHlzY2Z4M3h4cVBnY3k4ZXNxZGRFV01hdlk=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x76, 0x7a, 0x6a, 0x33, 0x72, 0x6d, 0x32, 0x6e, 0x33, 0x70, 0x6b, 0x68, 0x32, 0x33, 0x63, 0x67, 0x6e, 0x6d, 0x71, 0x36, 0x34, 0x64, 0x69, 0x34, 0x66, 0x38, 0x75, 0x67, 0x64, 0x38, 0x6a, 0x38, 0x76, 0x66, 0x7a, 0x69, 0x74, 0x63, 0x69, 0x65, 0x6b, 0x73, 0x78, 0x79, 0x32, 0x75, 0x6b, 0x6d, 0x37, 0x34, 0x6e, 0x64, 0x38, 0x6a, 0x39, 0x74, 0x65, 0x36, 0x68, 0x35, 0x64, 0x61, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x61, 0x61, 0x33, 0x6d, 0x6e, 0x6d, 0x36, 0x74, 0x63, 0x32, 0x35, 0x6d, 0x71, 0x69, 0x71, 0x6a, 0x70, 0x79, 0x36, 0x39, 0x6a, 0x6b, 0x63, 0x36, 0x6a, 0x79, 0x79, 0x78, 0x78, 0x76, 0x63, 0x77, 0x76, 0x76, 0x74, 0x70, 0x64, 0x66, 0x76, 0x39, 0x79, 0x75, 0x75, 0x70, 0x66, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x34, 0x65, 0x74, 0x67, 0x38, 0x72, 0x79, 0x66, 0x34, 0x33, 0x35, 0x70, 0x77, 0x33, 0x7a, 0x75, 0x6e, 0x67, 0x65, 0x34, 0x71, 0x37, 0x79, 0x61, 0x6d, 0x34, 0x34, 0x36, 0x69, 0x7a, 0x6b, 0x7a, 0x72, 0x35, 0x33, 0x34, 0x33, 0x36, 0x67, 0x70, 0x36, 0x33, 0x7a, 0x75, 0x79, 0x62, 0x38, 0x61, 0x36, 0x39, 0x63, 0x33, 0x78, 0x79, 0x73, 0x63, 0x66, 0x78, 0x33, 0x78, 0x78, 0x71, 0x50, 0x67, 0x63, 0x79, 0x38, 0x65, 0x73, 0x71, 0x64, 0x64, 0x45, 0x57, 0x4d, 0x61, 0x76, 0x59}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: Pgcy8esqddEWMavY
				[]byte{0x3e, 0x07, 0x32, 0xf1, 0xeb, 0x2a, 0x75, 0xd1, 0x16, 0x31, 0xab, 0xd8},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: Pgcy8esqddEWMavY
				[]byte{0x3e, 0x07, 0x32, 0xf1, 0xeb, 0x2a, 0x75, 0xd1, 0x16, 0x31, 0xab, 0xd8},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndagwtn2eh2rffecpmvqq3r5suebxxgdea7k995ib2g3usgk")
	require.NoError(t, err)
	stakeRules, err := address.Validate("ndapu4cuv3stt36z4n7xwpxm58wxwktmbuf6acvcxgdpejr9")
	require.NoError(t, err)
	stakeStakeTo, err := address.Validate("ndahzparsre37fx8dvhwfbqetfszpbwy3dgycbdvspn589mk")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFwdTRjdXYzc3R0MzZ6NG43eHdweG01OHd4d2t0bWJ1ZjZhY3ZjeGdkcGVqcjkABJUapCZXuW5kYWh6cGFyc3JlMzdmeDhkdmh3ZmJxZXRmc3pwYnd5M2RneWNiZHZzcG41ODlta25kYWd3dG4yZWgycmZmZWNwbXZxcTNyNXN1ZWJ4eGdkZWE3azk5NWliMmczdXNnaw==
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x70, 0x75, 0x34, 0x63, 0x75, 0x76, 0x33, 0x73, 0x74, 0x74, 0x33, 0x36, 0x7a, 0x34, 0x6e, 0x37, 0x78, 0x77, 0x70, 0x78, 0x6d, 0x35, 0x38, 0x77, 0x78, 0x77, 0x6b, 0x74, 0x6d, 0x62, 0x75, 0x66, 0x36, 0x61, 0x63, 0x76, 0x63, 0x78, 0x67, 0x64, 0x70, 0x65, 0x6a, 0x72, 0x39, 0x00, 0x04, 0x95, 0x1a, 0xa4, 0x26, 0x57, 0xb9, 0x6e, 0x64, 0x61, 0x68, 0x7a, 0x70, 0x61, 0x72, 0x73, 0x72, 0x65, 0x33, 0x37, 0x66, 0x78, 0x38, 0x64, 0x76, 0x68, 0x77, 0x66, 0x62, 0x71, 0x65, 0x74, 0x66, 0x73, 0x7a, 0x70, 0x62, 0x77, 0x79, 0x33, 0x64, 0x67, 0x79, 0x63, 0x62, 0x64, 0x76, 0x73, 0x70, 0x6e, 0x35, 0x38, 0x39, 0x6d, 0x6b, 0x6e, 0x64, 0x61, 0x67, 0x77, 0x74, 0x6e, 0x32, 0x65, 0x68, 0x32, 0x72, 0x66, 0x66, 0x65, 0x63, 0x70, 0x6d, 0x76, 0x71, 0x71, 0x33, 0x72, 0x35, 0x73, 0x75, 0x65, 0x62, 0x78, 0x78, 0x67, 0x64, 0x65, 0x61, 0x37, 0x6b, 0x39, 0x39, 0x35, 0x69, 0x62, 0x32, 0x67, 0x33, 0x75, 0x73, 0x67, 0x6b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndaktfypcdutcgpda3dbfu5aax6m57rex7dwjwp5s7nj8tgk")
	require.NoError(t, err)

	// cUVMTXFBOGhTeEhIMU1VOW5kYWt0ZnlwY2R1dGNncGRhM2RiZnU1YWF4Nm01N3JleDdkd2p3cDVzN25qOHRna3N0cmluZzogaGN0Y3VhIGh4a3FmZGFmIAAaew+dodpY
	expect := []byte{0x71, 0x45, 0x4c, 0x4d, 0x71, 0x41, 0x38, 0x68, 0x53, 0x78, 0x48, 0x48, 0x31, 0x4d, 0x55, 0x39, 0x6e, 0x64, 0x61, 0x6b, 0x74, 0x66, 0x79, 0x70, 0x63, 0x64, 0x75, 0x74, 0x63, 0x67, 0x70, 0x64, 0x61, 0x33, 0x64, 0x62, 0x66, 0x75, 0x35, 0x61, 0x61, 0x78, 0x36, 0x6d, 0x35, 0x37, 0x72, 0x65, 0x78, 0x37, 0x64, 0x77, 0x6a, 0x77, 0x70, 0x35, 0x73, 0x37, 0x6e, 0x6a, 0x38, 0x74, 0x67, 0x6b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x68, 0x63, 0x74, 0x63, 0x75, 0x61, 0x20, 0x68, 0x78, 0x6b, 0x71, 0x66, 0x64, 0x61, 0x66, 0x20, 0x00, 0x1a, 0x7b, 0x0f, 0x9d, 0xa1, 0xda, 0x58}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: qELMqA8hSxHH1MU9
				[]byte{0xa8, 0x42, 0xcc, 0xa8, 0x0f, 0x21, 0x4b, 0x11, 0xc7, 0xd4, 0xc5, 0x3d},
				"string: hctcua hxkqfdaf ",
				7453656393833048,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: qELMqA8hSxHH1MU9
				[]byte{0xa8, 0x42, 0xcc, 0xa8, 0x0f, 0x21, 0x4b, 0x11, 0xc7, 0xd4, 0xc5, 0x3d},
				"string: hctcua hxkqfdaf ",
				7453656393833048,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABS3pVol5LEAC4lM+EDsnA==
	expect := []byte{0x00, 0x14, 0xb7, 0xa5, 0x5a, 0x25, 0xe4, 0xb1, 0x00, 0x0b, 0x89, 0x4c, 0xf8, 0x40, 0xec, 0x9c}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				5831420344132785,
				3247188419341468,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				5831420344132785,
				3247188419341468,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndak384xfxmh9nmakiewkzt75vapfce542cbts7pu36wuhj8")
	require.NoError(t, err)

	// bmRhazM4NHhmeG1oOW5tYWtpZXdrenQ3NXZhcGZjZTU0MmNidHM3cHUzNnd1aGo4AAKwKTbVAfw=
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x33, 0x38, 0x34, 0x78, 0x66, 0x78, 0x6d, 0x68, 0x39, 0x6e, 0x6d, 0x61, 0x6b, 0x69, 0x65, 0x77, 0x6b, 0x7a, 0x74, 0x37, 0x35, 0x76, 0x61, 0x70, 0x66, 0x63, 0x65, 0x35, 0x34, 0x32, 0x63, 0x62, 0x74, 0x73, 0x37, 0x70, 0x75, 0x33, 0x36, 0x77, 0x75, 0x68, 0x6a, 0x38, 0x00, 0x02, 0xb0, 0x29, 0x36, 0xd5, 0x01, 0xfc}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				756641013498364,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				756641013498364,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndaihti4g8wj3km3gz9xd7x5r2ei5ns2mg3hupw8e7urdm5b")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndahet3vqdsih943e6vwm2h3mr85asfdjybi5ep8au78jhki")
	require.NoError(t, err)

	// bmRhaGV0M3ZxZHNpaDk0M2U2dndtMmgzbXI4NWFzZmRqeWJpNWVwOGF1NzhqaGtpMnkzbTdkdDE1aDE2bTQ4czY1ODkzMnVzABFD9/Sl7ncAGEuS9nQEOG5kYWlodGk0Zzh3ajNrbTNnejl4ZDd4NXIyZWk1bnMybWczaHVwdzhlN3VyZG01Yg==
	expect := []byte{0x6e, 0x64, 0x61, 0x68, 0x65, 0x74, 0x33, 0x76, 0x71, 0x64, 0x73, 0x69, 0x68, 0x39, 0x34, 0x33, 0x65, 0x36, 0x76, 0x77, 0x6d, 0x32, 0x68, 0x33, 0x6d, 0x72, 0x38, 0x35, 0x61, 0x73, 0x66, 0x64, 0x6a, 0x79, 0x62, 0x69, 0x35, 0x65, 0x70, 0x38, 0x61, 0x75, 0x37, 0x38, 0x6a, 0x68, 0x6b, 0x69, 0x32, 0x79, 0x33, 0x6d, 0x37, 0x64, 0x74, 0x31, 0x35, 0x68, 0x31, 0x36, 0x6d, 0x34, 0x38, 0x73, 0x36, 0x35, 0x38, 0x39, 0x33, 0x32, 0x75, 0x73, 0x00, 0x11, 0x43, 0xf7, 0xf4, 0xa5, 0xee, 0x77, 0x00, 0x18, 0x4b, 0x92, 0xf6, 0x74, 0x04, 0x38, 0x6e, 0x64, 0x61, 0x69, 0x68, 0x74, 0x69, 0x34, 0x67, 0x38, 0x77, 0x6a, 0x33, 0x6b, 0x6d, 0x33, 0x67, 0x7a, 0x39, 0x78, 0x64, 0x37, 0x78, 0x35, 0x72, 0x32, 0x65, 0x69, 0x35, 0x6e, 0x73, 0x32, 0x6d, 0x67, 0x33, 0x68, 0x75, 0x70, 0x77, 0x38, 0x65, 0x37, 0x75, 0x72, 0x64, 0x6d, 0x35, 0x62}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				4859806844579447,
				71507808658932,
				6838494013162552,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				4859806844579447,
				71507808658932,
				6838494013162552,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA2WjT9x+XxCK3NUd0lqTkVqdDdRd2dFAALCkpEBj6Y=
	expect := []byte{0x00, 0x0d, 0x96, 0x8d, 0x3f, 0x71, 0xf9, 0x7c, 0x42, 0x2b, 0x73, 0x54, 0x77, 0x49, 0x6a, 0x4e, 0x45, 0x6a, 0x74, 0x37, 0x51, 0x77, 0x67, 0x45, 0x00, 0x02, 0xc2, 0x92, 0x91, 0x01, 0x8f, 0xa6}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: B+sTwIjNEjt7QwgE
				[]byte{0x07, 0xeb, 0x13, 0xc0, 0x88, 0xcd, 0x12, 0x3b, 0x7b, 0x43, 0x08, 0x04},
				3824708096227708,
				776884707233702,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: B+sTwIjNEjt7QwgE
				[]byte{0x07, 0xeb, 0x13, 0xc0, 0x88, 0xcd, 0x12, 0x3b, 0x7b, 0x43, 0x08, 0x04},
				3824708096227708,
				776884707233702,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndaazmkx4nnx6t62yn2j2269sca8bfd5vzwfraxx67ubzr4n")
	require.NoError(t, err)

	// bmRhYXpta3g0bm54NnQ2MnluMmoyMjY5c2NhOGJmZDV2endmcmF4eDY3dWJ6cjRuAAbjyvzK5FE=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x7a, 0x6d, 0x6b, 0x78, 0x34, 0x6e, 0x6e, 0x78, 0x36, 0x74, 0x36, 0x32, 0x79, 0x6e, 0x32, 0x6a, 0x32, 0x32, 0x36, 0x39, 0x73, 0x63, 0x61, 0x38, 0x62, 0x66, 0x64, 0x35, 0x76, 0x7a, 0x77, 0x66, 0x72, 0x61, 0x78, 0x78, 0x36, 0x37, 0x75, 0x62, 0x7a, 0x72, 0x34, 0x6e, 0x00, 0x06, 0xe3, 0xca, 0xfc, 0xca, 0xe4, 0x51}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				1939310824318033,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				1939310824318033,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndait9i5f5c3ypgbiwtgjqsjquxcg9ca4nmjacxf4evm9j62")
	require.NoError(t, err)
	unstakeRules, err := address.Validate("ndaitw5ucmavk7nhq67i8tejkcf43h7w76drkev3kywt7k9v")
	require.NoError(t, err)
	unstakeStakeTo, err := address.Validate("ndaq9jxyy5xjs9q2g42q7j9ygztb5qadwxavvbf7n25jc5ua")
	require.NoError(t, err)

	// AAYjQ7GGtjxuZGFpdHc1dWNtYXZrN25ocTY3aTh0ZWprY2Y0M2g3dzc2ZHJrZXYza3l3dDdrOXYACdnxfZ6RbW5kYXE5anh5eTV4anM5cTJnNDJxN2o5eWd6dGI1cWFkd3hhdnZiZjduMjVqYzV1YW5kYWl0OWk1ZjVjM3lwZ2Jpd3RnanFzanF1eGNnOWNhNG5tamFjeGY0ZXZtOWo2Mg==
	expect := []byte{0x00, 0x06, 0x23, 0x43, 0xb1, 0x86, 0xb6, 0x3c, 0x6e, 0x64, 0x61, 0x69, 0x74, 0x77, 0x35, 0x75, 0x63, 0x6d, 0x61, 0x76, 0x6b, 0x37, 0x6e, 0x68, 0x71, 0x36, 0x37, 0x69, 0x38, 0x74, 0x65, 0x6a, 0x6b, 0x63, 0x66, 0x34, 0x33, 0x68, 0x37, 0x77, 0x37, 0x36, 0x64, 0x72, 0x6b, 0x65, 0x76, 0x33, 0x6b, 0x79, 0x77, 0x74, 0x37, 0x6b, 0x39, 0x76, 0x00, 0x09, 0xd9, 0xf1, 0x7d, 0x9e, 0x91, 0x6d, 0x6e, 0x64, 0x61, 0x71, 0x39, 0x6a, 0x78, 0x79, 0x79, 0x35, 0x78, 0x6a, 0x73, 0x39, 0x71, 0x32, 0x67, 0x34, 0x32, 0x71, 0x37, 0x6a, 0x39, 0x79, 0x67, 0x7a, 0x74, 0x62, 0x35, 0x71, 0x61, 0x64, 0x77, 0x78, 0x61, 0x76, 0x76, 0x62, 0x66, 0x37, 0x6e, 0x32, 0x35, 0x6a, 0x63, 0x35, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x69, 0x74, 0x39, 0x69, 0x35, 0x66, 0x35, 0x63, 0x33, 0x79, 0x70, 0x67, 0x62, 0x69, 0x77, 0x74, 0x67, 0x6a, 0x71, 0x73, 0x6a, 0x71, 0x75, 0x78, 0x63, 0x67, 0x39, 0x63, 0x61, 0x34, 0x6e, 0x6d, 0x6a, 0x61, 0x63, 0x78, 0x66, 0x34, 0x65, 0x76, 0x6d, 0x39, 0x6a, 0x36, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				1727623508440636,
				2772906008285549,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				1727623508440636,
				2772906008285549,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAo7k5P5QVIAFAPe9jpccg==
	expect := []byte{0x00, 0x0a, 0x3b, 0x93, 0x93, 0xf9, 0x41, 0x52, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2880254795923794,
				5633755682856050,
			),
		},
		{
			"with signature",
			NewIssue(
				2880254795923794,
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndacpx5eqxi6ewdjwd9ku9krxi82nubbm55ukdj56ugvxhrk")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndaftv4yvj63kbc3nfvsv92gyvgtpykgggkbhskcmm5egf52")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xb9, 0x87, 0x6a, 0xe9, 0xb5, 0x20, 0x13, 0xd4, 0x94, 0xaa, 0x55, 0x28, 0x08, 0xc2, 0xe5, 0x3e, 0x12, 0xb7, 0x6a, 0x75, 0xff, 0xb5, 0x4f, 0xec, 0xab, 0x3c, 0x33, 0x0b, 0xa1, 0x83, 0x78, 0xc3}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x94, 0x52, 0x9e, 0x1a, 0xb6, 0x84, 0x61, 0xa6, 0xda, 0x04, 0x13, 0x84, 0xdc, 0x0a, 0xde, 0x51, 0x73, 0xc5, 0x93, 0xd3, 0x85, 0xe2, 0xff, 0xc1, 0xdf, 0xb7, 0x97, 0xc9, 0xba, 0x3c, 0x0d, 0xac, 0x3c, 0x88, 0xbe, 0x4d, 0xa7, 0xd7, 0xa4, 0xe7, 0xad, 0xaa, 0x6b, 0x70, 0xf4, 0x45, 0x0f, 0xf3, 0x8e, 0xa5, 0xaa, 0x4d, 0xb0, 0x5e, 0x48, 0x79, 0x89, 0x3e, 0x45, 0x8d, 0x39, 0x20, 0xb5, 0x2c})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x3b, 0xf8, 0xa3, 0xe3, 0x07, 0x38, 0x56, 0x89, 0x09, 0x53, 0x05, 0x77, 0x3b, 0xbc, 0x99, 0xff, 0xfb, 0x01, 0x7c, 0xd9, 0xbb, 0xb9, 0x2b, 0xf0, 0x29, 0x25, 0x4b, 0x27, 0x8d, 0x30, 0x9b, 0xc5}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndan4a6pvvni7c3fuvdzpwe92hmtpwaf2grx5cdnfwb8hki8")
	require.NoError(t, err)

	// bmRhZnR2NHl2ajYza2JjM25mdnN2OTJneXZndHB5a2dnZ2tiaHNrY21tNWVnZjUybmRhbjRhNnB2dm5pN2MzZnV2ZHpwd2U5MmhtdHB3YWYyZ3J4NWNkbmZ3Yjhoa2k4bnB1YmE4amFkdGJiZWM2MnE0emp5d3NiaHhld3hqa3VzY2djNnc5YmZwNWtxejk1a3Y5bnhuOGRnYzdic3A2bmh3djJ4cGV6NWh1YTZtMjdkdDIxaDExbTI3czY1OTA2MnVzYTRqYWR0Y2F1dGpqNmd4eXN0czRweXNlY3FjcDJjeThrZjM2bWU4dnN6dHI5c3E5eThtNnZxdDZieXlkM2NmOGp5djdyamhoeHl4Z3k2aHdpd2g5aGR4ZnhqZzVhenVpcmdldjZ0bnBoZXNta21hMzVzamM2NXVlbnB1YmE4amFkdGJiZWE3OXRpOWRhNjZmcGNpamtuY3pxcTc2dmg5OXlhbTY1Zzc1dWs5c2ZldXd5ajZwZ2NwNm1kanZhM3F5NGRuZWErUWNzWmdRSW1ZWk5RRXYAEQF/vImALW5kYWNweDVlcXhpNmV3ZGp3ZDlrdTlrcnhpODJudWJibTU1dWtkajU2dWd2eGhyaw==
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x74, 0x76, 0x34, 0x79, 0x76, 0x6a, 0x36, 0x33, 0x6b, 0x62, 0x63, 0x33, 0x6e, 0x66, 0x76, 0x73, 0x76, 0x39, 0x32, 0x67, 0x79, 0x76, 0x67, 0x74, 0x70, 0x79, 0x6b, 0x67, 0x67, 0x67, 0x6b, 0x62, 0x68, 0x73, 0x6b, 0x63, 0x6d, 0x6d, 0x35, 0x65, 0x67, 0x66, 0x35, 0x32, 0x6e, 0x64, 0x61, 0x6e, 0x34, 0x61, 0x36, 0x70, 0x76, 0x76, 0x6e, 0x69, 0x37, 0x63, 0x33, 0x66, 0x75, 0x76, 0x64, 0x7a, 0x70, 0x77, 0x65, 0x39, 0x32, 0x68, 0x6d, 0x74, 0x70, 0x77, 0x61, 0x66, 0x32, 0x67, 0x72, 0x78, 0x35, 0x63, 0x64, 0x6e, 0x66, 0x77, 0x62, 0x38, 0x68, 0x6b, 0x69, 0x38, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x36, 0x32, 0x71, 0x34, 0x7a, 0x6a, 0x79, 0x77, 0x73, 0x62, 0x68, 0x78, 0x65, 0x77, 0x78, 0x6a, 0x6b, 0x75, 0x73, 0x63, 0x67, 0x63, 0x36, 0x77, 0x39, 0x62, 0x66, 0x70, 0x35, 0x6b, 0x71, 0x7a, 0x39, 0x35, 0x6b, 0x76, 0x39, 0x6e, 0x78, 0x6e, 0x38, 0x64, 0x67, 0x63, 0x37, 0x62, 0x73, 0x70, 0x36, 0x6e, 0x68, 0x77, 0x76, 0x32, 0x78, 0x70, 0x65, 0x7a, 0x35, 0x68, 0x75, 0x61, 0x36, 0x6d, 0x32, 0x37, 0x64, 0x74, 0x32, 0x31, 0x68, 0x31, 0x31, 0x6d, 0x32, 0x37, 0x73, 0x36, 0x35, 0x39, 0x30, 0x36, 0x32, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x75, 0x74, 0x6a, 0x6a, 0x36, 0x67, 0x78, 0x79, 0x73, 0x74, 0x73, 0x34, 0x70, 0x79, 0x73, 0x65, 0x63, 0x71, 0x63, 0x70, 0x32, 0x63, 0x79, 0x38, 0x6b, 0x66, 0x33, 0x36, 0x6d, 0x65, 0x38, 0x76, 0x73, 0x7a, 0x74, 0x72, 0x39, 0x73, 0x71, 0x39, 0x79, 0x38, 0x6d, 0x36, 0x76, 0x71, 0x74, 0x36, 0x62, 0x79, 0x79, 0x64, 0x33, 0x63, 0x66, 0x38, 0x6a, 0x79, 0x76, 0x37, 0x72, 0x6a, 0x68, 0x68, 0x78, 0x79, 0x78, 0x67, 0x79, 0x36, 0x68, 0x77, 0x69, 0x77, 0x68, 0x39, 0x68, 0x64, 0x78, 0x66, 0x78, 0x6a, 0x67, 0x35, 0x61, 0x7a, 0x75, 0x69, 0x72, 0x67, 0x65, 0x76, 0x36, 0x74, 0x6e, 0x70, 0x68, 0x65, 0x73, 0x6d, 0x6b, 0x6d, 0x61, 0x33, 0x35, 0x73, 0x6a, 0x63, 0x36, 0x35, 0x75, 0x65, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x37, 0x39, 0x74, 0x69, 0x39, 0x64, 0x61, 0x36, 0x36, 0x66, 0x70, 0x63, 0x69, 0x6a, 0x6b, 0x6e, 0x63, 0x7a, 0x71, 0x71, 0x37, 0x36, 0x76, 0x68, 0x39, 0x39, 0x79, 0x61, 0x6d, 0x36, 0x35, 0x67, 0x37, 0x35, 0x75, 0x6b, 0x39, 0x73, 0x66, 0x65, 0x75, 0x77, 0x79, 0x6a, 0x36, 0x70, 0x67, 0x63, 0x70, 0x36, 0x6d, 0x64, 0x6a, 0x76, 0x61, 0x33, 0x71, 0x79, 0x34, 0x64, 0x6e, 0x65, 0x61, 0x2b, 0x51, 0x63, 0x73, 0x5a, 0x67, 0x51, 0x49, 0x6d, 0x59, 0x5a, 0x4e, 0x51, 0x45, 0x76, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d, 0x6e, 0x64, 0x61, 0x63, 0x70, 0x78, 0x35, 0x65, 0x71, 0x78, 0x69, 0x36, 0x65, 0x77, 0x64, 0x6a, 0x77, 0x64, 0x39, 0x6b, 0x75, 0x39, 0x6b, 0x72, 0x78, 0x69, 0x38, 0x32, 0x6e, 0x75, 0x62, 0x62, 0x6d, 0x35, 0x35, 0x75, 0x6b, 0x64, 0x6a, 0x35, 0x36, 0x75, 0x67, 0x76, 0x78, 0x68, 0x72, 0x6b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				17961087659062,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: a+QcsZgQImYZNQEv
				[]byte{0x6b, 0xe4, 0x1c, 0xb1, 0x98, 0x10, 0x22, 0x66, 0x19, 0x35, 0x01, 0x2f},
				createchildaccountChildDelegationNode,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				17961087659062,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: a+QcsZgQImYZNQEv
				[]byte{0x6b, 0xe4, 0x1c, 0xb1, 0x98, 0x10, 0x22, 0x66, 0x19, 0x35, 0x01, 0x2f},
				createchildaccountChildDelegationNode,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA+kWRaYdWcAFaMVckx+dg==
	expect := []byte{0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				4402827188794727,
				6090287018180214,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				4402827188794727,
				6090287018180214,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBqb2Jjc24gbGd0ZSAAChVq5YNJazlxY25iN2hXN2pxVWQwUUk=
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x6a, 0x6f, 0x62, 0x63, 0x73, 0x6e, 0x20, 0x6c, 0x67, 0x74, 0x65, 0x20, 0x00, 0x0a, 0x15, 0x6a, 0xe5, 0x83, 0x49, 0x6b, 0x39, 0x71, 0x63, 0x6e, 0x62, 0x37, 0x68, 0x57, 0x37, 0x6a, 0x71, 0x55, 0x64, 0x30, 0x51, 0x49}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: jobcsn lgte ",
				// Value as b64: 9qcnb7hW7jqUd0QI
				[]byte{0xf6, 0xa7, 0x27, 0x6f, 0xb8, 0x56, 0xee, 0x3a, 0x94, 0x77, 0x44, 0x08},
				2838298628409707,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: jobcsn lgte ",
				// Value as b64: 9qcnb7hW7jqUd0QI
				[]byte{0xf6, 0xa7, 0x27, 0x6f, 0xb8, 0x56, 0xee, 0x3a, 0x94, 0x77, 0x44, 0x08},
				2838298628409707,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetStakeRules_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setstakerulesTarget, err := address.Validate("ndapk6c5hnw97ps358e2iaeaiksbsuj4sfwxxtanmmwypgav")
	require.NoError(t, err)

	// ABRnpK9j50NRc0NOZDlFeXFQcUU5bC9HbmRhcGs2YzVobnc5N3BzMzU4ZTJpYWVhaWtzYnN1ajRzZnd4eHRhbm1td3lwZ2F2
	expect := []byte{0x00, 0x14, 0x67, 0xa4, 0xaf, 0x63, 0xe7, 0x43, 0x51, 0x73, 0x43, 0x4e, 0x64, 0x39, 0x45, 0x79, 0x71, 0x50, 0x71, 0x45, 0x39, 0x6c, 0x2f, 0x47, 0x6e, 0x64, 0x61, 0x70, 0x6b, 0x36, 0x63, 0x35, 0x68, 0x6e, 0x77, 0x39, 0x37, 0x70, 0x73, 0x33, 0x35, 0x38, 0x65, 0x32, 0x69, 0x61, 0x65, 0x61, 0x69, 0x6b, 0x73, 0x62, 0x73, 0x75, 0x6a, 0x34, 0x73, 0x66, 0x77, 0x78, 0x78, 0x74, 0x61, 0x6e, 0x6d, 0x6d, 0x77, 0x79, 0x70, 0x67, 0x61, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetStakeRules
	}{
		{
			"no signatures",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: QsCNd9EyqPqE9l/G
				[]byte{0x42, 0xc0, 0x8d, 0x77, 0xd1, 0x32, 0xa8, 0xfa, 0x84, 0xf6, 0x5f, 0xc6},
				5743456549070659,
			),
		},
		{
			"with signature",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: QsCNd9EyqPqE9l/G
				[]byte{0x42, 0xc0, 0x8d, 0x77, 0xd1, 0x32, 0xa8, 0xfa, 0x84, 0xf6, 0x5f, 0xc6},
				5743456549070659,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSchema_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiB6cWwgcSAAG6b2BvZpdw==
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x7a, 0x71, 0x6c, 0x20, 0x71, 0x20, 0x00, 0x1b, 0xa6, 0xf6, 0x06, 0xf6, 0x69, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSchema
	}{
		{
			"no signatures",
			NewChangeSchema(
				"string: zql q ",
				7783399980165495,
			),
		},
		{
			"with signature",
			NewChangeSchema(
				"string: zql q ",
				7783399980165495,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
