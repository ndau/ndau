package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndaivy25536k4tg5q8rpacji5r928aiu7qy4r28tgfccy7b3")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndaa95j7h9wpwtsz8abk36yh9b4dkpwik2wiu5jrrnkzmxjj")
	require.NoError(t, err)

	// bmRhYTk1ajdoOXdwd3RzejhhYmszNnloOWI0ZGtwd2lrMndpdTVqcnJua3pteGpqAAWCIQf8/70AApoPXz8aEm5kYWl2eTI1NTM2azR0ZzVxOHJwYWNqaTVyOTI4YWl1N3F5NHIyOHRnZmNjeTdiMw==
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x39, 0x35, 0x6a, 0x37, 0x68, 0x39, 0x77, 0x70, 0x77, 0x74, 0x73, 0x7a, 0x38, 0x61, 0x62, 0x6b, 0x33, 0x36, 0x79, 0x68, 0x39, 0x62, 0x34, 0x64, 0x6b, 0x70, 0x77, 0x69, 0x6b, 0x32, 0x77, 0x69, 0x75, 0x35, 0x6a, 0x72, 0x72, 0x6e, 0x6b, 0x7a, 0x6d, 0x78, 0x6a, 0x6a, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x69, 0x76, 0x79, 0x32, 0x35, 0x35, 0x33, 0x36, 0x6b, 0x34, 0x74, 0x67, 0x35, 0x71, 0x38, 0x72, 0x70, 0x61, 0x63, 0x6a, 0x69, 0x35, 0x72, 0x39, 0x32, 0x38, 0x61, 0x69, 0x75, 0x37, 0x71, 0x79, 0x34, 0x72, 0x32, 0x38, 0x74, 0x67, 0x66, 0x63, 0x63, 0x79, 0x37, 0x62, 0x33}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndaixphez72gqcpgxjf4ashsif5f8kz4wwftxwh5mtzik2pg")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x95, 0x59, 0xe9, 0x11, 0x17, 0xc6, 0xd0, 0x76, 0x80, 0xf5, 0x41, 0x47, 0xab, 0x9f, 0x45, 0xff, 0xb9, 0x93, 0x5d, 0xcc, 0x80, 0x34, 0x87, 0x9b, 0xb7, 0x6f, 0x3a, 0x70, 0x42, 0x99, 0x9d, 0x29}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWNreHY0aXRjOWRwYTd3YTh4YXdyazY5aXo5NXZlNDczdWFkamI2NXk3enZ3NmNjdmdxdXZ6d3E3Zzhmc3VtYwAQTcdmlXTFbmRhaXhwaGV6NzJncWNwZ3hqZjRhc2hzaWY1ZjhrejR3d2Z0eHdoNW10emlrMnBnSFQvTk9FNGs3NHh3MFZrNA==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x6b, 0x78, 0x76, 0x34, 0x69, 0x74, 0x63, 0x39, 0x64, 0x70, 0x61, 0x37, 0x77, 0x61, 0x38, 0x78, 0x61, 0x77, 0x72, 0x6b, 0x36, 0x39, 0x69, 0x7a, 0x39, 0x35, 0x76, 0x65, 0x34, 0x37, 0x33, 0x75, 0x61, 0x64, 0x6a, 0x62, 0x36, 0x35, 0x79, 0x37, 0x7a, 0x76, 0x77, 0x36, 0x63, 0x63, 0x76, 0x67, 0x71, 0x75, 0x76, 0x7a, 0x77, 0x71, 0x37, 0x67, 0x38, 0x66, 0x73, 0x75, 0x6d, 0x63, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x69, 0x78, 0x70, 0x68, 0x65, 0x7a, 0x37, 0x32, 0x67, 0x71, 0x63, 0x70, 0x67, 0x78, 0x6a, 0x66, 0x34, 0x61, 0x73, 0x68, 0x73, 0x69, 0x66, 0x35, 0x66, 0x38, 0x6b, 0x7a, 0x34, 0x77, 0x77, 0x66, 0x74, 0x78, 0x77, 0x68, 0x35, 0x6d, 0x74, 0x7a, 0x69, 0x6b, 0x32, 0x70, 0x67, 0x48, 0x54, 0x2f, 0x4e, 0x4f, 0x45, 0x34, 0x6b, 0x37, 0x34, 0x78, 0x77, 0x30, 0x56, 0x6b, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: HT/NOE4k74xw0Vk4
				[]byte{0x1d, 0x3f, 0xcd, 0x38, 0x4e, 0x24, 0xef, 0x8c, 0x70, 0xd1, 0x59, 0x38},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: HT/NOE4k74xw0Vk4
				[]byte{0x1d, 0x3f, 0xcd, 0x38, 0x4e, 0x24, 0xef, 0x8c, 0x70, 0xd1, 0x59, 0x38},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndaaa8t3txa8sgxjt8nt42pwes6urfnzk2vswkkpaesmvw5r")
	require.NoError(t, err)

	// bmRhYWE4dDN0eGE4c2d4anQ4bnQ0MnB3ZXM2dXJmbnprMnZzd2trcGFlc212dzVyAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x61, 0x38, 0x74, 0x33, 0x74, 0x78, 0x61, 0x38, 0x73, 0x67, 0x78, 0x6a, 0x74, 0x38, 0x6e, 0x74, 0x34, 0x32, 0x70, 0x77, 0x65, 0x73, 0x36, 0x75, 0x72, 0x66, 0x6e, 0x7a, 0x6b, 0x32, 0x76, 0x73, 0x77, 0x6b, 0x6b, 0x70, 0x61, 0x65, 0x73, 0x6d, 0x76, 0x77, 0x35, 0x72, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndarbss5eqi2hjx8x8q6kc6zxctkbzrca57uqcbq3ww38tr9")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFyYnNzNWVxaTJoang4eDhxNmtjNnp4Y3RrYnpyY2E1N3VxY2JxM3d3Mzh0cjk=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x62, 0x73, 0x73, 0x35, 0x65, 0x71, 0x69, 0x32, 0x68, 0x6a, 0x78, 0x38, 0x78, 0x38, 0x71, 0x36, 0x6b, 0x63, 0x36, 0x7a, 0x78, 0x63, 0x74, 0x6b, 0x62, 0x7a, 0x72, 0x63, 0x61, 0x35, 0x37, 0x75, 0x71, 0x63, 0x62, 0x71, 0x33, 0x77, 0x77, 0x33, 0x38, 0x74, 0x72, 0x39}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndapk7xc2u9qtzt9p4zsg8f5tktf6q7scdruqejdbwfr4eq9")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaauy6agcrykegdhm5skpwr5tuma67zr5errg6r6faia3rk")
	require.NoError(t, err)

	// bmRhYXV5NmFnY3J5a2VnZGhtNXNrcHdyNXR1bWE2N3pyNWVycmc2cjZmYWlhM3JrAAjSrCLE0zRuZGFwazd4YzJ1OXF0enQ5cDR6c2c4ZjV0a3RmNnE3c2NkcnVxZWpkYndmcjRlcTk=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x75, 0x79, 0x36, 0x61, 0x67, 0x63, 0x72, 0x79, 0x6b, 0x65, 0x67, 0x64, 0x68, 0x6d, 0x35, 0x73, 0x6b, 0x70, 0x77, 0x72, 0x35, 0x74, 0x75, 0x6d, 0x61, 0x36, 0x37, 0x7a, 0x72, 0x35, 0x65, 0x72, 0x72, 0x67, 0x36, 0x72, 0x36, 0x66, 0x61, 0x69, 0x61, 0x33, 0x72, 0x6b, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x70, 0x6b, 0x37, 0x78, 0x63, 0x32, 0x75, 0x39, 0x71, 0x74, 0x7a, 0x74, 0x39, 0x70, 0x34, 0x7a, 0x73, 0x67, 0x38, 0x66, 0x35, 0x74, 0x6b, 0x74, 0x66, 0x36, 0x71, 0x37, 0x73, 0x63, 0x64, 0x72, 0x75, 0x71, 0x65, 0x6a, 0x64, 0x62, 0x77, 0x66, 0x72, 0x34, 0x65, 0x71, 0x39}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndapqbfx7x8nqapyhb4rbd25xmkjnkbxyee44ydz3njavqen")
	require.NoError(t, err)

	// bmRhcHFiZng3eDhucWFweWhiNHJiZDI1eG1ram5rYnh5ZWU0NHlkejNuamF2cWVuAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x71, 0x62, 0x66, 0x78, 0x37, 0x78, 0x38, 0x6e, 0x71, 0x61, 0x70, 0x79, 0x68, 0x62, 0x34, 0x72, 0x62, 0x64, 0x32, 0x35, 0x78, 0x6d, 0x6b, 0x6a, 0x6e, 0x6b, 0x62, 0x78, 0x79, 0x65, 0x65, 0x34, 0x34, 0x79, 0x64, 0x7a, 0x33, 0x6e, 0x6a, 0x61, 0x76, 0x71, 0x65, 0x6e, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndams5cwdtzm2pegh5pp83rip46zhy4s5ui5jjmy4fcar349")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhbXM1Y3dkdHptMnBlZ2g1cHA4M3JpcDQ2emh5NHM1dWk1ampteTRmY2FyMzQ5
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x6d, 0x73, 0x35, 0x63, 0x77, 0x64, 0x74, 0x7a, 0x6d, 0x32, 0x70, 0x65, 0x67, 0x68, 0x35, 0x70, 0x70, 0x38, 0x33, 0x72, 0x69, 0x70, 0x34, 0x36, 0x7a, 0x68, 0x79, 0x34, 0x73, 0x35, 0x75, 0x69, 0x35, 0x6a, 0x6a, 0x6d, 0x79, 0x34, 0x66, 0x63, 0x61, 0x72, 0x33, 0x34, 0x39}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndaav3629jsgaayn8kjwzhtukjtzytm9ry88t2jdks2awi26")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFhdjM2Mjlqc2dhYXluOGtqd3podHVranR6eXRtOXJ5ODh0Mmpka3MyYXdpMjY=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x61, 0x76, 0x33, 0x36, 0x32, 0x39, 0x6a, 0x73, 0x67, 0x61, 0x61, 0x79, 0x6e, 0x38, 0x6b, 0x6a, 0x77, 0x7a, 0x68, 0x74, 0x75, 0x6b, 0x6a, 0x74, 0x7a, 0x79, 0x74, 0x6d, 0x39, 0x72, 0x79, 0x38, 0x38, 0x74, 0x32, 0x6a, 0x64, 0x6b, 0x73, 0x32, 0x61, 0x77, 0x69, 0x32, 0x36}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndacymnbezzpeg4hcjgje486fbuecmnrjzzd3nchpsxbmdir")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndah3ecaqasnzr9956spxkbywydisfdhkxz8hqc9d3mhgshd")
	require.NoError(t, err)

	// bmRhaDNlY2FxYXNuenI5OTU2c3B4a2J5d3lkaXNmZGhreHo4aHFjOWQzbWhnc2hkAAz/orpRehFuZGFjeW1uYmV6enBlZzRoY2pnamU0ODZmYnVlY21ucmp6emQzbmNocHN4Ym1kaXI=
	expect := []byte{0x6e, 0x64, 0x61, 0x68, 0x33, 0x65, 0x63, 0x61, 0x71, 0x61, 0x73, 0x6e, 0x7a, 0x72, 0x39, 0x39, 0x35, 0x36, 0x73, 0x70, 0x78, 0x6b, 0x62, 0x79, 0x77, 0x79, 0x64, 0x69, 0x73, 0x66, 0x64, 0x68, 0x6b, 0x78, 0x7a, 0x38, 0x68, 0x71, 0x63, 0x39, 0x64, 0x33, 0x6d, 0x68, 0x67, 0x73, 0x68, 0x64, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x63, 0x79, 0x6d, 0x6e, 0x62, 0x65, 0x7a, 0x7a, 0x70, 0x65, 0x67, 0x34, 0x68, 0x63, 0x6a, 0x67, 0x6a, 0x65, 0x34, 0x38, 0x36, 0x66, 0x62, 0x75, 0x65, 0x63, 0x6d, 0x6e, 0x72, 0x6a, 0x7a, 0x7a, 0x64, 0x33, 0x6e, 0x63, 0x68, 0x70, 0x73, 0x78, 0x62, 0x6d, 0x64, 0x69, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndaj5jyeakxehcgamxg64kmehx6r4ra55y2awhuk833tcy8g")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xc4, 0xec, 0x35, 0x23, 0xfc, 0x31, 0x44, 0x14, 0xd3, 0x74, 0xa7, 0x13, 0xd1, 0x2a, 0x35, 0xd9, 0xe6, 0x3f, 0x8d, 0x11, 0x5a, 0xc3, 0xbd, 0x13, 0x47, 0x08, 0xa1, 0x0f, 0x2e, 0x94, 0xa4, 0x98}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xc6, 0x81, 0x76, 0xf4, 0xb6, 0xa3, 0x40, 0xd2, 0x09, 0xf6, 0xed, 0xbb, 0xde, 0xef, 0xc6, 0xd7, 0x53, 0x7a, 0xaf, 0xe1, 0xf4, 0x44, 0x1c, 0x74, 0x62, 0x32, 0x50, 0x22, 0x23, 0x3a, 0xbc, 0x43}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWRjcTJwamQ5czJ3aWZndnF1dnRod2prZ3puOG5yNnBjZnBuaHJpdmk2ZWtjZDNxdXV1anNjbjl6N2lnYTRpegAZX/GDxHNZbmRhajVqeWVha3hlaGNnYW14ZzY0a21laHg2cjRyYTU1eTJhd2h1azgzM3RjeThnbnB1YmE4amFkdGJiZWRkaWM3end5NHR3Yndzajg1eTV6enpyMjVteGc4eHI2aDRlaWhkd25pM2ZhaXRkaGs4ZWgyczJ5NXJldmRyZjFCOHlwaWsrQnJURGdUM1k=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x63, 0x71, 0x32, 0x70, 0x6a, 0x64, 0x39, 0x73, 0x32, 0x77, 0x69, 0x66, 0x67, 0x76, 0x71, 0x75, 0x76, 0x74, 0x68, 0x77, 0x6a, 0x6b, 0x67, 0x7a, 0x6e, 0x38, 0x6e, 0x72, 0x36, 0x70, 0x63, 0x66, 0x70, 0x6e, 0x68, 0x72, 0x69, 0x76, 0x69, 0x36, 0x65, 0x6b, 0x63, 0x64, 0x33, 0x71, 0x75, 0x75, 0x75, 0x6a, 0x73, 0x63, 0x6e, 0x39, 0x7a, 0x37, 0x69, 0x67, 0x61, 0x34, 0x69, 0x7a, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x6a, 0x35, 0x6a, 0x79, 0x65, 0x61, 0x6b, 0x78, 0x65, 0x68, 0x63, 0x67, 0x61, 0x6d, 0x78, 0x67, 0x36, 0x34, 0x6b, 0x6d, 0x65, 0x68, 0x78, 0x36, 0x72, 0x34, 0x72, 0x61, 0x35, 0x35, 0x79, 0x32, 0x61, 0x77, 0x68, 0x75, 0x6b, 0x38, 0x33, 0x33, 0x74, 0x63, 0x79, 0x38, 0x67, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x64, 0x69, 0x63, 0x37, 0x7a, 0x77, 0x79, 0x34, 0x74, 0x77, 0x62, 0x77, 0x73, 0x6a, 0x38, 0x35, 0x79, 0x35, 0x7a, 0x7a, 0x7a, 0x72, 0x32, 0x35, 0x6d, 0x78, 0x67, 0x38, 0x78, 0x72, 0x36, 0x68, 0x34, 0x65, 0x69, 0x68, 0x64, 0x77, 0x6e, 0x69, 0x33, 0x66, 0x61, 0x69, 0x74, 0x64, 0x68, 0x6b, 0x38, 0x65, 0x68, 0x32, 0x73, 0x32, 0x79, 0x35, 0x72, 0x65, 0x76, 0x64, 0x72, 0x66, 0x31, 0x42, 0x38, 0x79, 0x70, 0x69, 0x6b, 0x2b, 0x42, 0x72, 0x54, 0x44, 0x67, 0x54, 0x33, 0x59}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: 1B8ypik+BrTDgT3Y
				[]byte{0xd4, 0x1f, 0x32, 0xa6, 0x29, 0x3e, 0x06, 0xb4, 0xc3, 0x81, 0x3d, 0xd8},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: 1B8ypik+BrTDgT3Y
				[]byte{0xd4, 0x1f, 0x32, 0xa6, 0x29, 0x3e, 0x06, 0xb4, 0xc3, 0x81, 0x3d, 0xd8},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndak8szgmm2x2hiaudhyg47c7586n4us2wk3ah5axjrffd8n")
	require.NoError(t, err)
	stakeRules, err := address.Validate("ndaajgmt4x4y6nmezf28iakpwgdgbsexuh33u9ngk6thjkkr")
	require.NoError(t, err)
	stakeStakeTo, err := address.Validate("ndaq7ezsgawbsp7vfarkmwffqferutd6jh5y2ifrhyrw3gu9")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFhamdtdDR4NHk2bm1lemYyOGlha3B3Z2RnYnNleHVoMzN1OW5nazZ0aGpra3IABJUapCZXuW5kYXE3ZXpzZ2F3YnNwN3ZmYXJrbXdmZnFmZXJ1dGQ2amg1eTJpZnJoeXJ3M2d1OW5kYWs4c3pnbW0yeDJoaWF1ZGh5ZzQ3Yzc1ODZuNHVzMndrM2FoNWF4anJmZmQ4bg==
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x61, 0x6a, 0x67, 0x6d, 0x74, 0x34, 0x78, 0x34, 0x79, 0x36, 0x6e, 0x6d, 0x65, 0x7a, 0x66, 0x32, 0x38, 0x69, 0x61, 0x6b, 0x70, 0x77, 0x67, 0x64, 0x67, 0x62, 0x73, 0x65, 0x78, 0x75, 0x68, 0x33, 0x33, 0x75, 0x39, 0x6e, 0x67, 0x6b, 0x36, 0x74, 0x68, 0x6a, 0x6b, 0x6b, 0x72, 0x00, 0x04, 0x95, 0x1a, 0xa4, 0x26, 0x57, 0xb9, 0x6e, 0x64, 0x61, 0x71, 0x37, 0x65, 0x7a, 0x73, 0x67, 0x61, 0x77, 0x62, 0x73, 0x70, 0x37, 0x76, 0x66, 0x61, 0x72, 0x6b, 0x6d, 0x77, 0x66, 0x66, 0x71, 0x66, 0x65, 0x72, 0x75, 0x74, 0x64, 0x36, 0x6a, 0x68, 0x35, 0x79, 0x32, 0x69, 0x66, 0x72, 0x68, 0x79, 0x72, 0x77, 0x33, 0x67, 0x75, 0x39, 0x6e, 0x64, 0x61, 0x6b, 0x38, 0x73, 0x7a, 0x67, 0x6d, 0x6d, 0x32, 0x78, 0x32, 0x68, 0x69, 0x61, 0x75, 0x64, 0x68, 0x79, 0x67, 0x34, 0x37, 0x63, 0x37, 0x35, 0x38, 0x36, 0x6e, 0x34, 0x75, 0x73, 0x32, 0x77, 0x6b, 0x33, 0x61, 0x68, 0x35, 0x61, 0x78, 0x6a, 0x72, 0x66, 0x66, 0x64, 0x38, 0x6e}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndadwirhs59pn4zsndqiujxng2grijim4m3ybe8txrfubj5i")
	require.NoError(t, err)

	// NTdGdW92V0VzSmdMckN0WW5kYWR3aXJoczU5cG40enNuZHFpdWp4bmcyZ3JpamltNG0zeWJlOHR4cmZ1Ymo1aXN0cmluZzogaGN0Y3VhIGh4a3FmZGFmIAAaew+dodpY
	expect := []byte{0x35, 0x37, 0x46, 0x75, 0x6f, 0x76, 0x57, 0x45, 0x73, 0x4a, 0x67, 0x4c, 0x72, 0x43, 0x74, 0x59, 0x6e, 0x64, 0x61, 0x64, 0x77, 0x69, 0x72, 0x68, 0x73, 0x35, 0x39, 0x70, 0x6e, 0x34, 0x7a, 0x73, 0x6e, 0x64, 0x71, 0x69, 0x75, 0x6a, 0x78, 0x6e, 0x67, 0x32, 0x67, 0x72, 0x69, 0x6a, 0x69, 0x6d, 0x34, 0x6d, 0x33, 0x79, 0x62, 0x65, 0x38, 0x74, 0x78, 0x72, 0x66, 0x75, 0x62, 0x6a, 0x35, 0x69, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x68, 0x63, 0x74, 0x63, 0x75, 0x61, 0x20, 0x68, 0x78, 0x6b, 0x71, 0x66, 0x64, 0x61, 0x66, 0x20, 0x00, 0x1a, 0x7b, 0x0f, 0x9d, 0xa1, 0xda, 0x58}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 57FuovWEsJgLrCtY
				[]byte{0xe7, 0xb1, 0x6e, 0xa2, 0xf5, 0x84, 0xb0, 0x98, 0x0b, 0xac, 0x2b, 0x58},
				"string: hctcua hxkqfdaf ",
				7453656393833048,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 57FuovWEsJgLrCtY
				[]byte{0xe7, 0xb1, 0x6e, 0xa2, 0xf5, 0x84, 0xb0, 0x98, 0x0b, 0xac, 0x2b, 0x58},
				"string: hctcua hxkqfdaf ",
				7453656393833048,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABS3pVol5LEAC4lM+EDsnA==
	expect := []byte{0x00, 0x14, 0xb7, 0xa5, 0x5a, 0x25, 0xe4, 0xb1, 0x00, 0x0b, 0x89, 0x4c, 0xf8, 0x40, 0xec, 0x9c}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				5831420344132785,
				3247188419341468,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				5831420344132785,
				3247188419341468,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndaijzg5yzxtezwjg2evc2tyha535spx3qjw53hnbv2tk4h6")
	require.NoError(t, err)

	// bmRhaWp6ZzV5enh0ZXp3amcyZXZjMnR5aGE1MzVzcHgzcWp3NTNobmJ2MnRrNGg2AAKwKTbVAfw=
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x6a, 0x7a, 0x67, 0x35, 0x79, 0x7a, 0x78, 0x74, 0x65, 0x7a, 0x77, 0x6a, 0x67, 0x32, 0x65, 0x76, 0x63, 0x32, 0x74, 0x79, 0x68, 0x61, 0x35, 0x33, 0x35, 0x73, 0x70, 0x78, 0x33, 0x71, 0x6a, 0x77, 0x35, 0x33, 0x68, 0x6e, 0x62, 0x76, 0x32, 0x74, 0x6b, 0x34, 0x68, 0x36, 0x00, 0x02, 0xb0, 0x29, 0x36, 0xd5, 0x01, 0xfc}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				756641013498364,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				756641013498364,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndantmjinjqqdpu7w4fgfxrx59vjrmewnrbx4e6bcbazbfws")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndacxw7krq69c7psmaxg7yycdjc4ftghbgm5gex6yja2rhbw")
	require.NoError(t, err)

	// bmRhY3h3N2tycTY5Yzdwc21heGc3eXljZGpjNGZ0Z2hiZ201Z2V4NnlqYTJyaGJ3MnkzbTdkdDE1aDE2bTQ4czY1ODkzMnVzABFD9/Sl7ncAGEuS9nQEOG5kYW50bWppbmpxcWRwdTd3NGZnZnhyeDU5dmpybWV3bnJieDRlNmJjYmF6YmZ3cw==
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x78, 0x77, 0x37, 0x6b, 0x72, 0x71, 0x36, 0x39, 0x63, 0x37, 0x70, 0x73, 0x6d, 0x61, 0x78, 0x67, 0x37, 0x79, 0x79, 0x63, 0x64, 0x6a, 0x63, 0x34, 0x66, 0x74, 0x67, 0x68, 0x62, 0x67, 0x6d, 0x35, 0x67, 0x65, 0x78, 0x36, 0x79, 0x6a, 0x61, 0x32, 0x72, 0x68, 0x62, 0x77, 0x32, 0x79, 0x33, 0x6d, 0x37, 0x64, 0x74, 0x31, 0x35, 0x68, 0x31, 0x36, 0x6d, 0x34, 0x38, 0x73, 0x36, 0x35, 0x38, 0x39, 0x33, 0x32, 0x75, 0x73, 0x00, 0x11, 0x43, 0xf7, 0xf4, 0xa5, 0xee, 0x77, 0x00, 0x18, 0x4b, 0x92, 0xf6, 0x74, 0x04, 0x38, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x6d, 0x6a, 0x69, 0x6e, 0x6a, 0x71, 0x71, 0x64, 0x70, 0x75, 0x37, 0x77, 0x34, 0x66, 0x67, 0x66, 0x78, 0x72, 0x78, 0x35, 0x39, 0x76, 0x6a, 0x72, 0x6d, 0x65, 0x77, 0x6e, 0x72, 0x62, 0x78, 0x34, 0x65, 0x36, 0x62, 0x63, 0x62, 0x61, 0x7a, 0x62, 0x66, 0x77, 0x73}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				4859806844579447,
				71507808658932,
				6838494013162552,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				4859806844579447,
				71507808658932,
				6838494013162552,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA2WjT9x+XxKeUJheTdpa2pOOHZvSWw0AALCkpEBj6Y=
	expect := []byte{0x00, 0x0d, 0x96, 0x8d, 0x3f, 0x71, 0xf9, 0x7c, 0x4a, 0x79, 0x42, 0x61, 0x79, 0x37, 0x69, 0x6b, 0x6a, 0x4e, 0x38, 0x76, 0x6f, 0x49, 0x6c, 0x34, 0x00, 0x02, 0xc2, 0x92, 0x91, 0x01, 0x8f, 0xa6}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: JyBay7ikjN8voIl4
				[]byte{0x27, 0x20, 0x5a, 0xcb, 0xb8, 0xa4, 0x8c, 0xdf, 0x2f, 0xa0, 0x89, 0x78},
				3824708096227708,
				776884707233702,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: JyBay7ikjN8voIl4
				[]byte{0x27, 0x20, 0x5a, 0xcb, 0xb8, 0xa4, 0x8c, 0xdf, 0x2f, 0xa0, 0x89, 0x78},
				3824708096227708,
				776884707233702,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndapqy4vaaff8rwwp9ctemmyf4y2c4s9b44vfpbi6bv3ubvi")
	require.NoError(t, err)

	// bmRhcHF5NHZhYWZmOHJ3d3A5Y3RlbW15ZjR5MmM0czliNDR2ZnBiaTZidjN1YnZpAAbjyvzK5FE=
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x71, 0x79, 0x34, 0x76, 0x61, 0x61, 0x66, 0x66, 0x38, 0x72, 0x77, 0x77, 0x70, 0x39, 0x63, 0x74, 0x65, 0x6d, 0x6d, 0x79, 0x66, 0x34, 0x79, 0x32, 0x63, 0x34, 0x73, 0x39, 0x62, 0x34, 0x34, 0x76, 0x66, 0x70, 0x62, 0x69, 0x36, 0x62, 0x76, 0x33, 0x75, 0x62, 0x76, 0x69, 0x00, 0x06, 0xe3, 0xca, 0xfc, 0xca, 0xe4, 0x51}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				1939310824318033,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				1939310824318033,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndajam2p9dvr5pz6u4kxvit4jyz4r4sxi2pchjbqrzg9qr4e")
	require.NoError(t, err)
	unstakeRules, err := address.Validate("ndakkjq8p22gw5skek4aarij8h4c82xrb4xbwwiqk4x99956")
	require.NoError(t, err)
	unstakeStakeTo, err := address.Validate("ndafjvuv6ktz8n7vbker2p34dntn374tcmjf8j4qe82ymrt8")
	require.NoError(t, err)

	// AAYjQ7GGtjxuZGFra2pxOHAyMmd3NXNrZWs0YWFyaWo4aDRjODJ4cmI0eGJ3d2lxazR4OTk5NTYACdnxfZ6RbW5kYWZqdnV2Nmt0ejhuN3Zia2VyMnAzNGRudG4zNzR0Y21qZjhqNHFlODJ5bXJ0OG5kYWphbTJwOWR2cjVwejZ1NGt4dml0NGp5ejRyNHN4aTJwY2hqYnFyemc5cXI0ZQ==
	expect := []byte{0x00, 0x06, 0x23, 0x43, 0xb1, 0x86, 0xb6, 0x3c, 0x6e, 0x64, 0x61, 0x6b, 0x6b, 0x6a, 0x71, 0x38, 0x70, 0x32, 0x32, 0x67, 0x77, 0x35, 0x73, 0x6b, 0x65, 0x6b, 0x34, 0x61, 0x61, 0x72, 0x69, 0x6a, 0x38, 0x68, 0x34, 0x63, 0x38, 0x32, 0x78, 0x72, 0x62, 0x34, 0x78, 0x62, 0x77, 0x77, 0x69, 0x71, 0x6b, 0x34, 0x78, 0x39, 0x39, 0x39, 0x35, 0x36, 0x00, 0x09, 0xd9, 0xf1, 0x7d, 0x9e, 0x91, 0x6d, 0x6e, 0x64, 0x61, 0x66, 0x6a, 0x76, 0x75, 0x76, 0x36, 0x6b, 0x74, 0x7a, 0x38, 0x6e, 0x37, 0x76, 0x62, 0x6b, 0x65, 0x72, 0x32, 0x70, 0x33, 0x34, 0x64, 0x6e, 0x74, 0x6e, 0x33, 0x37, 0x34, 0x74, 0x63, 0x6d, 0x6a, 0x66, 0x38, 0x6a, 0x34, 0x71, 0x65, 0x38, 0x32, 0x79, 0x6d, 0x72, 0x74, 0x38, 0x6e, 0x64, 0x61, 0x6a, 0x61, 0x6d, 0x32, 0x70, 0x39, 0x64, 0x76, 0x72, 0x35, 0x70, 0x7a, 0x36, 0x75, 0x34, 0x6b, 0x78, 0x76, 0x69, 0x74, 0x34, 0x6a, 0x79, 0x7a, 0x34, 0x72, 0x34, 0x73, 0x78, 0x69, 0x32, 0x70, 0x63, 0x68, 0x6a, 0x62, 0x71, 0x72, 0x7a, 0x67, 0x39, 0x71, 0x72, 0x34, 0x65}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				1727623508440636,
				2772906008285549,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				1727623508440636,
				2772906008285549,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAo7k5P5QVIAFAPe9jpccg==
	expect := []byte{0x00, 0x0a, 0x3b, 0x93, 0x93, 0xf9, 0x41, 0x52, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2880254795923794,
				5633755682856050,
			),
		},
		{
			"with signature",
			NewIssue(
				2880254795923794,
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndaighxi8kyqbaijqk7dzt3ibiy7eh4pei3c75t2vf29guvy")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndamursb6wbmbyabeyv8knmhh939nfbtcnxj5neraxgauskk")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xc9, 0x35, 0x2c, 0xb7, 0xaa, 0x5a, 0x10, 0x53, 0x4c, 0x09, 0x54, 0x19, 0xa7, 0xac, 0xea, 0xe6, 0x3c, 0x94, 0x3f, 0x38, 0xd7, 0x97, 0x0e, 0x0f, 0x15, 0xdd, 0xfd, 0x43, 0x39, 0xd3, 0xab, 0xda}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x30, 0x1e, 0x1f, 0xf6, 0x20, 0x13, 0xd0, 0x86, 0xa0, 0xea, 0x7f, 0x06, 0xf9, 0x17, 0x48, 0x85, 0xf5, 0xbc, 0x45, 0x98, 0xc7, 0x5f, 0x0a, 0x8e, 0xc5, 0x31, 0x23, 0xda, 0xd4, 0xf7, 0x63, 0x25, 0xf2, 0x46, 0xa4, 0x57, 0x0a, 0xc2, 0xe3, 0x9d, 0xe0, 0x99, 0x69, 0xe9, 0x9f, 0x55, 0x86, 0xca, 0x97, 0xdf, 0x1a, 0xfc, 0xbc, 0x4a, 0xd5, 0xa6, 0x64, 0x54, 0xd9, 0xf4, 0x7d, 0xe7, 0x19, 0xb7})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x8b, 0xf8, 0xb2, 0x93, 0xa6, 0x6d, 0x7d, 0x37, 0xc7, 0x0e, 0xe0, 0x8c, 0x1d, 0x6b, 0xde, 0xaa, 0x85, 0x20, 0xe5, 0xb8, 0xe3, 0xb8, 0xe1, 0x58, 0xf4, 0x27, 0xc5, 0x41, 0x09, 0x5d, 0x76, 0x2e}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndaip9iyvtgpyw5qknxp5xjd4dd5q6ewka4x37stji49x3ws")
	require.NoError(t, err)

	// bmRhbXVyc2I2d2JtYnlhYmV5djhrbm1oaDkzOW5mYnRjbnhqNW5lcmF4Z2F1c2trbmRhaXA5aXl2dGdweXc1cWtueHA1eGpkNGRkNXE2ZXdrYTR4MzdzdGppNDl4M3dzbnB1YmE4amFkdGJiZWRldmttZnp4anBiYXc0bmJma2J2ajduN212ZDNmYjloZG0zcWRzcmN6cTk0czMzNHF4N3g1NWJybTVyeDJtazZtMjdkdDIxaDExbTI3czY1OTA2MnVzYTRqYWR0Y2FnYXJiOTd0YWNyaWlwaWhrcjZkcnVmNGlzejQ1MnRuMjI3cnN4ZHlmZ2V0N3h4aHpubnU5ZXR4ZWs2Zm5mMjY3NmNueXY0bjlreWRueGY4OWRtOG0ydXl4dzN1Zmp5cndyenZ0dnA1aWFudDR0Z2I0bnB1YmE4amFkdGJiZWNmOXRud3Z3M3l6NHA4aGI1c2kyaG1tNTR4aWtpaGZ6ZHQ1dDJrMjhzdjZrc2lqbXg1Yzdpdmpndm1pN3dud1FoR3EvdkdIc2xscGZGSWUAEQF/vImALW5kYWlnaHhpOGt5cWJhaWpxazdkenQzaWJpeTdlaDRwZWkzYzc1dDJ2ZjI5Z3V2eQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x75, 0x72, 0x73, 0x62, 0x36, 0x77, 0x62, 0x6d, 0x62, 0x79, 0x61, 0x62, 0x65, 0x79, 0x76, 0x38, 0x6b, 0x6e, 0x6d, 0x68, 0x68, 0x39, 0x33, 0x39, 0x6e, 0x66, 0x62, 0x74, 0x63, 0x6e, 0x78, 0x6a, 0x35, 0x6e, 0x65, 0x72, 0x61, 0x78, 0x67, 0x61, 0x75, 0x73, 0x6b, 0x6b, 0x6e, 0x64, 0x61, 0x69, 0x70, 0x39, 0x69, 0x79, 0x76, 0x74, 0x67, 0x70, 0x79, 0x77, 0x35, 0x71, 0x6b, 0x6e, 0x78, 0x70, 0x35, 0x78, 0x6a, 0x64, 0x34, 0x64, 0x64, 0x35, 0x71, 0x36, 0x65, 0x77, 0x6b, 0x61, 0x34, 0x78, 0x33, 0x37, 0x73, 0x74, 0x6a, 0x69, 0x34, 0x39, 0x78, 0x33, 0x77, 0x73, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x65, 0x76, 0x6b, 0x6d, 0x66, 0x7a, 0x78, 0x6a, 0x70, 0x62, 0x61, 0x77, 0x34, 0x6e, 0x62, 0x66, 0x6b, 0x62, 0x76, 0x6a, 0x37, 0x6e, 0x37, 0x6d, 0x76, 0x64, 0x33, 0x66, 0x62, 0x39, 0x68, 0x64, 0x6d, 0x33, 0x71, 0x64, 0x73, 0x72, 0x63, 0x7a, 0x71, 0x39, 0x34, 0x73, 0x33, 0x33, 0x34, 0x71, 0x78, 0x37, 0x78, 0x35, 0x35, 0x62, 0x72, 0x6d, 0x35, 0x72, 0x78, 0x32, 0x6d, 0x6b, 0x36, 0x6d, 0x32, 0x37, 0x64, 0x74, 0x32, 0x31, 0x68, 0x31, 0x31, 0x6d, 0x32, 0x37, 0x73, 0x36, 0x35, 0x39, 0x30, 0x36, 0x32, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x67, 0x61, 0x72, 0x62, 0x39, 0x37, 0x74, 0x61, 0x63, 0x72, 0x69, 0x69, 0x70, 0x69, 0x68, 0x6b, 0x72, 0x36, 0x64, 0x72, 0x75, 0x66, 0x34, 0x69, 0x73, 0x7a, 0x34, 0x35, 0x32, 0x74, 0x6e, 0x32, 0x32, 0x37, 0x72, 0x73, 0x78, 0x64, 0x79, 0x66, 0x67, 0x65, 0x74, 0x37, 0x78, 0x78, 0x68, 0x7a, 0x6e, 0x6e, 0x75, 0x39, 0x65, 0x74, 0x78, 0x65, 0x6b, 0x36, 0x66, 0x6e, 0x66, 0x32, 0x36, 0x37, 0x36, 0x63, 0x6e, 0x79, 0x76, 0x34, 0x6e, 0x39, 0x6b, 0x79, 0x64, 0x6e, 0x78, 0x66, 0x38, 0x39, 0x64, 0x6d, 0x38, 0x6d, 0x32, 0x75, 0x79, 0x78, 0x77, 0x33, 0x75, 0x66, 0x6a, 0x79, 0x72, 0x77, 0x72, 0x7a, 0x76, 0x74, 0x76, 0x70, 0x35, 0x69, 0x61, 0x6e, 0x74, 0x34, 0x74, 0x67, 0x62, 0x34, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x66, 0x39, 0x74, 0x6e, 0x77, 0x76, 0x77, 0x33, 0x79, 0x7a, 0x34, 0x70, 0x38, 0x68, 0x62, 0x35, 0x73, 0x69, 0x32, 0x68, 0x6d, 0x6d, 0x35, 0x34, 0x78, 0x69, 0x6b, 0x69, 0x68, 0x66, 0x7a, 0x64, 0x74, 0x35, 0x74, 0x32, 0x6b, 0x32, 0x38, 0x73, 0x76, 0x36, 0x6b, 0x73, 0x69, 0x6a, 0x6d, 0x78, 0x35, 0x63, 0x37, 0x69, 0x76, 0x6a, 0x67, 0x76, 0x6d, 0x69, 0x37, 0x77, 0x6e, 0x77, 0x51, 0x68, 0x47, 0x71, 0x2f, 0x76, 0x47, 0x48, 0x73, 0x6c, 0x6c, 0x70, 0x66, 0x46, 0x49, 0x65, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d, 0x6e, 0x64, 0x61, 0x69, 0x67, 0x68, 0x78, 0x69, 0x38, 0x6b, 0x79, 0x71, 0x62, 0x61, 0x69, 0x6a, 0x71, 0x6b, 0x37, 0x64, 0x7a, 0x74, 0x33, 0x69, 0x62, 0x69, 0x79, 0x37, 0x65, 0x68, 0x34, 0x70, 0x65, 0x69, 0x33, 0x63, 0x37, 0x35, 0x74, 0x32, 0x76, 0x66, 0x32, 0x39, 0x67, 0x75, 0x76, 0x79}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				17961087659062,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: QhGq/vGHsllpfFIe
				[]byte{0x42, 0x11, 0xaa, 0xfe, 0xf1, 0x87, 0xb2, 0x59, 0x69, 0x7c, 0x52, 0x1e},
				createchildaccountChildDelegationNode,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				17961087659062,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: QhGq/vGHsllpfFIe
				[]byte{0x42, 0x11, 0xaa, 0xfe, 0xf1, 0x87, 0xb2, 0x59, 0x69, 0x7c, 0x52, 0x1e},
				createchildaccountChildDelegationNode,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA+kWRaYdWcAFaMVckx+dg==
	expect := []byte{0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				4402827188794727,
				6090287018180214,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				4402827188794727,
				6090287018180214,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBqb2Jjc24gbGd0ZSAAChVq5YNJa3o0emFqVXBKVndMaXFGV3E=
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x6a, 0x6f, 0x62, 0x63, 0x73, 0x6e, 0x20, 0x6c, 0x67, 0x74, 0x65, 0x20, 0x00, 0x0a, 0x15, 0x6a, 0xe5, 0x83, 0x49, 0x6b, 0x7a, 0x34, 0x7a, 0x61, 0x6a, 0x55, 0x70, 0x4a, 0x56, 0x77, 0x4c, 0x69, 0x71, 0x46, 0x57, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: jobcsn lgte ",
				// Value as b64: z4zajUpJVwLiqFWq
				[]byte{0xcf, 0x8c, 0xda, 0x8d, 0x4a, 0x49, 0x57, 0x02, 0xe2, 0xa8, 0x55, 0xaa},
				2838298628409707,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: jobcsn lgte ",
				// Value as b64: z4zajUpJVwLiqFWq
				[]byte{0xcf, 0x8c, 0xda, 0x8d, 0x4a, 0x49, 0x57, 0x02, 0xe2, 0xa8, 0x55, 0xaa},
				2838298628409707,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetStakeRules_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setstakerulesTarget, err := address.Validate("ndaq8wv2g5pfprbjjcqu7dvyuqdzcm6vg2wafe9r65a86pnq")
	require.NoError(t, err)

	// ABRnpK9j50NPeWNPZCtuODBTRmFpc1FobmRhcTh3djJnNXBmcHJiampjcXU3ZHZ5dXFkemNtNnZnMndhZmU5cjY1YTg2cG5x
	expect := []byte{0x00, 0x14, 0x67, 0xa4, 0xaf, 0x63, 0xe7, 0x43, 0x4f, 0x79, 0x63, 0x4f, 0x64, 0x2b, 0x6e, 0x38, 0x30, 0x53, 0x46, 0x61, 0x69, 0x73, 0x51, 0x68, 0x6e, 0x64, 0x61, 0x71, 0x38, 0x77, 0x76, 0x32, 0x67, 0x35, 0x70, 0x66, 0x70, 0x72, 0x62, 0x6a, 0x6a, 0x63, 0x71, 0x75, 0x37, 0x64, 0x76, 0x79, 0x75, 0x71, 0x64, 0x7a, 0x63, 0x6d, 0x36, 0x76, 0x67, 0x32, 0x77, 0x61, 0x66, 0x65, 0x39, 0x72, 0x36, 0x35, 0x61, 0x38, 0x36, 0x70, 0x6e, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetStakeRules
	}{
		{
			"no signatures",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: OycOd+n80SFaisQh
				[]byte{0x3b, 0x27, 0x0e, 0x77, 0xe9, 0xfc, 0xd1, 0x21, 0x5a, 0x8a, 0xc4, 0x21},
				5743456549070659,
			),
		},
		{
			"with signature",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: OycOd+n80SFaisQh
				[]byte{0x3b, 0x27, 0x0e, 0x77, 0xe9, 0xfc, 0xd1, 0x21, 0x5a, 0x8a, 0xc4, 0x21},
				5743456549070659,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
