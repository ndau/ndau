package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndak5khrpnme56zn97t2ewre2iz9ixsm8r7cgepdr2yfq6fj")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndaiyzhmtjpg5qnyx6khyi4s78bhiwu2ugm8r9my2de2y5e5")
	require.NoError(t, err)

	// bmRhaXl6aG10anBnNXFueXg2a2h5aTRzNzhiaGl3dTJ1Z204cjlteTJkZTJ5NWU1AAWCIQf8/70AApoPXz8aEm5kYWs1a2hycG5tZTU2em45N3QyZXdyZTJpejlpeHNtOHI3Y2dlcGRyMnlmcTZmag==
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x79, 0x7a, 0x68, 0x6d, 0x74, 0x6a, 0x70, 0x67, 0x35, 0x71, 0x6e, 0x79, 0x78, 0x36, 0x6b, 0x68, 0x79, 0x69, 0x34, 0x73, 0x37, 0x38, 0x62, 0x68, 0x69, 0x77, 0x75, 0x32, 0x75, 0x67, 0x6d, 0x38, 0x72, 0x39, 0x6d, 0x79, 0x32, 0x64, 0x65, 0x32, 0x79, 0x35, 0x65, 0x35, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x6b, 0x35, 0x6b, 0x68, 0x72, 0x70, 0x6e, 0x6d, 0x65, 0x35, 0x36, 0x7a, 0x6e, 0x39, 0x37, 0x74, 0x32, 0x65, 0x77, 0x72, 0x65, 0x32, 0x69, 0x7a, 0x39, 0x69, 0x78, 0x73, 0x6d, 0x38, 0x72, 0x37, 0x63, 0x67, 0x65, 0x70, 0x64, 0x72, 0x32, 0x79, 0x66, 0x71, 0x36, 0x66, 0x6a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndafu4nuxwxpdd4evi2hb6ebw53cgnfkjf4arnfrnrgc93ay")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xf9, 0xf7, 0xca, 0x86, 0xd4, 0x53, 0xd2, 0x0f, 0x69, 0x2f, 0xc7, 0xca, 0x86, 0xf6, 0x4e, 0x2e, 0x72, 0x6e, 0x13, 0x96, 0x10, 0x5b, 0x6d, 0xde, 0xb4, 0x0e, 0x24, 0xa6, 0x10, 0x78, 0xe8, 0x2b}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWQ2OXJ1d2c0dGo3ZWQ1amY5ZDZ4Ynp5ajJ6aGU1c3Z1MmlmeTVxOHlzaGNqanNzcmR3Y3lmajloYXVxaWh6YgAQTcdmlXTFbmRhZnU0bnV4d3hwZGQ0ZXZpMmhiNmVidzUzY2duZmtqZjRhcm5mcm5yZ2M5M2F5eVNGYnp0cXFkL0xRbHN1ag==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x36, 0x39, 0x72, 0x75, 0x77, 0x67, 0x34, 0x74, 0x6a, 0x37, 0x65, 0x64, 0x35, 0x6a, 0x66, 0x39, 0x64, 0x36, 0x78, 0x62, 0x7a, 0x79, 0x6a, 0x32, 0x7a, 0x68, 0x65, 0x35, 0x73, 0x76, 0x75, 0x32, 0x69, 0x66, 0x79, 0x35, 0x71, 0x38, 0x79, 0x73, 0x68, 0x63, 0x6a, 0x6a, 0x73, 0x73, 0x72, 0x64, 0x77, 0x63, 0x79, 0x66, 0x6a, 0x39, 0x68, 0x61, 0x75, 0x71, 0x69, 0x68, 0x7a, 0x62, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x66, 0x75, 0x34, 0x6e, 0x75, 0x78, 0x77, 0x78, 0x70, 0x64, 0x64, 0x34, 0x65, 0x76, 0x69, 0x32, 0x68, 0x62, 0x36, 0x65, 0x62, 0x77, 0x35, 0x33, 0x63, 0x67, 0x6e, 0x66, 0x6b, 0x6a, 0x66, 0x34, 0x61, 0x72, 0x6e, 0x66, 0x72, 0x6e, 0x72, 0x67, 0x63, 0x39, 0x33, 0x61, 0x79, 0x79, 0x53, 0x46, 0x62, 0x7a, 0x74, 0x71, 0x71, 0x64, 0x2f, 0x4c, 0x51, 0x6c, 0x73, 0x75, 0x6a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: ySFbztqqd/LQlsuj
				[]byte{0xc9, 0x21, 0x5b, 0xce, 0xda, 0xaa, 0x77, 0xf2, 0xd0, 0x96, 0xcb, 0xa3},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: ySFbztqqd/LQlsuj
				[]byte{0xc9, 0x21, 0x5b, 0xce, 0xda, 0xaa, 0x77, 0xf2, 0xd0, 0x96, 0xcb, 0xa3},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndab3zcydxiyphit49w97bc43miaigghchgqbjvvwjjhwksb")
	require.NoError(t, err)

	// bmRhYjN6Y3lkeGl5cGhpdDQ5dzk3YmM0M21pYWlnZ2hjaGdxYmp2dndqamh3a3NiAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x62, 0x33, 0x7a, 0x63, 0x79, 0x64, 0x78, 0x69, 0x79, 0x70, 0x68, 0x69, 0x74, 0x34, 0x39, 0x77, 0x39, 0x37, 0x62, 0x63, 0x34, 0x33, 0x6d, 0x69, 0x61, 0x69, 0x67, 0x67, 0x68, 0x63, 0x68, 0x67, 0x71, 0x62, 0x6a, 0x76, 0x76, 0x77, 0x6a, 0x6a, 0x68, 0x77, 0x6b, 0x73, 0x62, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndaibv4jfnymcde22ck2nihbr64j8u4nuznghmrinwfq6pyg")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFpYnY0amZueW1jZGUyMmNrMm5paGJyNjRqOHU0bnV6bmdobXJpbndmcTZweWc=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x69, 0x62, 0x76, 0x34, 0x6a, 0x66, 0x6e, 0x79, 0x6d, 0x63, 0x64, 0x65, 0x32, 0x32, 0x63, 0x6b, 0x32, 0x6e, 0x69, 0x68, 0x62, 0x72, 0x36, 0x34, 0x6a, 0x38, 0x75, 0x34, 0x6e, 0x75, 0x7a, 0x6e, 0x67, 0x68, 0x6d, 0x72, 0x69, 0x6e, 0x77, 0x66, 0x71, 0x36, 0x70, 0x79, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndafvcc8igvq952jrwctqdy4xe736nz4jutvcxw3qhqg5bf2")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaa5vtudp22t7payuwgzbcamuxmhydwwqdeuw5e7gc5sqd9")
	require.NoError(t, err)

	// bmRhYTV2dHVkcDIydDdwYXl1d2d6YmNhbXV4bWh5ZHd3cWRldXc1ZTdnYzVzcWQ5AAjSrCLE0zRuZGFmdmNjOGlndnE5NTJqcndjdHFkeTR4ZTczNm56NGp1dHZjeHczcWhxZzViZjI=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x35, 0x76, 0x74, 0x75, 0x64, 0x70, 0x32, 0x32, 0x74, 0x37, 0x70, 0x61, 0x79, 0x75, 0x77, 0x67, 0x7a, 0x62, 0x63, 0x61, 0x6d, 0x75, 0x78, 0x6d, 0x68, 0x79, 0x64, 0x77, 0x77, 0x71, 0x64, 0x65, 0x75, 0x77, 0x35, 0x65, 0x37, 0x67, 0x63, 0x35, 0x73, 0x71, 0x64, 0x39, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x66, 0x76, 0x63, 0x63, 0x38, 0x69, 0x67, 0x76, 0x71, 0x39, 0x35, 0x32, 0x6a, 0x72, 0x77, 0x63, 0x74, 0x71, 0x64, 0x79, 0x34, 0x78, 0x65, 0x37, 0x33, 0x36, 0x6e, 0x7a, 0x34, 0x6a, 0x75, 0x74, 0x76, 0x63, 0x78, 0x77, 0x33, 0x71, 0x68, 0x71, 0x67, 0x35, 0x62, 0x66, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndakxxzif8dvsegfu25a9tmeiignguy7fzpp6ypj65heb4xh")
	require.NoError(t, err)

	// bmRha3h4emlmOGR2c2VnZnUyNWE5dG1laWlnbmd1eTdmenBwNnlwajY1aGViNHhoAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x78, 0x78, 0x7a, 0x69, 0x66, 0x38, 0x64, 0x76, 0x73, 0x65, 0x67, 0x66, 0x75, 0x32, 0x35, 0x61, 0x39, 0x74, 0x6d, 0x65, 0x69, 0x69, 0x67, 0x6e, 0x67, 0x75, 0x79, 0x37, 0x66, 0x7a, 0x70, 0x70, 0x36, 0x79, 0x70, 0x6a, 0x36, 0x35, 0x68, 0x65, 0x62, 0x34, 0x78, 0x68, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndaay9wdefw5etnnwchg6a8k8gu6up6b99t8vpmrenjxwykc")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhYXk5d2RlZnc1ZXRubndjaGc2YThrOGd1NnVwNmI5OXQ4dnBtcmVuanh3eWtj
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x61, 0x79, 0x39, 0x77, 0x64, 0x65, 0x66, 0x77, 0x35, 0x65, 0x74, 0x6e, 0x6e, 0x77, 0x63, 0x68, 0x67, 0x36, 0x61, 0x38, 0x6b, 0x38, 0x67, 0x75, 0x36, 0x75, 0x70, 0x36, 0x62, 0x39, 0x39, 0x74, 0x38, 0x76, 0x70, 0x6d, 0x72, 0x65, 0x6e, 0x6a, 0x78, 0x77, 0x79, 0x6b, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndacm5vkcb68qcrh47hqsz9zq8wju673b3aiuhsjrq3suscv")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFjbTV2a2NiNjhxY3JoNDdocXN6OXpxOHdqdTY3M2IzYWl1aHNqcnEzc3VzY3Y=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x63, 0x6d, 0x35, 0x76, 0x6b, 0x63, 0x62, 0x36, 0x38, 0x71, 0x63, 0x72, 0x68, 0x34, 0x37, 0x68, 0x71, 0x73, 0x7a, 0x39, 0x7a, 0x71, 0x38, 0x77, 0x6a, 0x75, 0x36, 0x37, 0x33, 0x62, 0x33, 0x61, 0x69, 0x75, 0x68, 0x73, 0x6a, 0x72, 0x71, 0x33, 0x73, 0x75, 0x73, 0x63, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndafbhdf5nq3845jfw4ufs3esggvsbg8h99a3efrrkia2uw9")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndampsfba77zw9m2g8rcxjyzrd3q7yueyut7iv4hc7jsycvy")
	require.NoError(t, err)

	// bmRhbXBzZmJhNzd6dzltMmc4cmN4anl6cmQzcTd5dWV5dXQ3aXY0aGM3anN5Y3Z5AAz/orpRehFuZGFmYmhkZjVucTM4NDVqZnc0dWZzM2VzZ2d2c2JnOGg5OWEzZWZycmtpYTJ1dzk=
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x70, 0x73, 0x66, 0x62, 0x61, 0x37, 0x37, 0x7a, 0x77, 0x39, 0x6d, 0x32, 0x67, 0x38, 0x72, 0x63, 0x78, 0x6a, 0x79, 0x7a, 0x72, 0x64, 0x33, 0x71, 0x37, 0x79, 0x75, 0x65, 0x79, 0x75, 0x74, 0x37, 0x69, 0x76, 0x34, 0x68, 0x63, 0x37, 0x6a, 0x73, 0x79, 0x63, 0x76, 0x79, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x66, 0x62, 0x68, 0x64, 0x66, 0x35, 0x6e, 0x71, 0x33, 0x38, 0x34, 0x35, 0x6a, 0x66, 0x77, 0x34, 0x75, 0x66, 0x73, 0x33, 0x65, 0x73, 0x67, 0x67, 0x76, 0x73, 0x62, 0x67, 0x38, 0x68, 0x39, 0x39, 0x61, 0x33, 0x65, 0x66, 0x72, 0x72, 0x6b, 0x69, 0x61, 0x32, 0x75, 0x77, 0x39}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndaeywd6nz2xvkhn2z8cuy3x4rum7mueynygrpueziqcckgf")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x02, 0x4d, 0x47, 0x35, 0x1f, 0x7b, 0x48, 0xe7, 0x29, 0x15, 0x95, 0x51, 0x84, 0x4e, 0x36, 0x3d, 0x02, 0x90, 0x36, 0xdd, 0x94, 0xf1, 0x21, 0xe9, 0x5c, 0x30, 0x25, 0xdb, 0x5e, 0xb5, 0x47, 0x07}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x68, 0xe7, 0x3b, 0xbc, 0xa6, 0x00, 0xe8, 0x02, 0xc2, 0x92, 0x1e, 0x32, 0xed, 0x93, 0x88, 0x94, 0x9b, 0xcb, 0xbb, 0x4e, 0x95, 0x51, 0x52, 0x98, 0x63, 0xb2, 0x1d, 0x5e, 0x0f, 0xe8, 0x7a, 0x5a}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWFiZTR0M3hkNzd3dDMzamN5a3hkYmNxZzI4c2ZlYnk1eWtyY2lyam1zMmNteTQ4eXhkc3J3aXI3Y3NwenIycgAZX/GDxHNZbmRhZXl3ZDZuejJ4dmtobjJ6OGN1eTN4NHJ1bTdtdWV5bnlncnB1ZXppcWNja2dmbnB1YmE4amFkdGJiZWJ3cXFxNzZ3MmFxc2F5Y3VpcmRmNW52dGNranp1NzVqNGt4Y3d3Mm5xM2I0enNyN2I3Znhqa3VqZjlldXF1ZWM1SUdhckRYTkdBTERnRDg=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x62, 0x65, 0x34, 0x74, 0x33, 0x78, 0x64, 0x37, 0x37, 0x77, 0x74, 0x33, 0x33, 0x6a, 0x63, 0x79, 0x6b, 0x78, 0x64, 0x62, 0x63, 0x71, 0x67, 0x32, 0x38, 0x73, 0x66, 0x65, 0x62, 0x79, 0x35, 0x79, 0x6b, 0x72, 0x63, 0x69, 0x72, 0x6a, 0x6d, 0x73, 0x32, 0x63, 0x6d, 0x79, 0x34, 0x38, 0x79, 0x78, 0x64, 0x73, 0x72, 0x77, 0x69, 0x72, 0x37, 0x63, 0x73, 0x70, 0x7a, 0x72, 0x32, 0x72, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x65, 0x79, 0x77, 0x64, 0x36, 0x6e, 0x7a, 0x32, 0x78, 0x76, 0x6b, 0x68, 0x6e, 0x32, 0x7a, 0x38, 0x63, 0x75, 0x79, 0x33, 0x78, 0x34, 0x72, 0x75, 0x6d, 0x37, 0x6d, 0x75, 0x65, 0x79, 0x6e, 0x79, 0x67, 0x72, 0x70, 0x75, 0x65, 0x7a, 0x69, 0x71, 0x63, 0x63, 0x6b, 0x67, 0x66, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x77, 0x71, 0x71, 0x71, 0x37, 0x36, 0x77, 0x32, 0x61, 0x71, 0x73, 0x61, 0x79, 0x63, 0x75, 0x69, 0x72, 0x64, 0x66, 0x35, 0x6e, 0x76, 0x74, 0x63, 0x6b, 0x6a, 0x7a, 0x75, 0x37, 0x35, 0x6a, 0x34, 0x6b, 0x78, 0x63, 0x77, 0x77, 0x32, 0x6e, 0x71, 0x33, 0x62, 0x34, 0x7a, 0x73, 0x72, 0x37, 0x62, 0x37, 0x66, 0x78, 0x6a, 0x6b, 0x75, 0x6a, 0x66, 0x39, 0x65, 0x75, 0x71, 0x75, 0x65, 0x63, 0x35, 0x49, 0x47, 0x61, 0x72, 0x44, 0x58, 0x4e, 0x47, 0x41, 0x4c, 0x44, 0x67, 0x44, 0x38}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: c5IGarDXNGALDgD8
				[]byte{0x73, 0x92, 0x06, 0x6a, 0xb0, 0xd7, 0x34, 0x60, 0x0b, 0x0e, 0x00, 0xfc},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: c5IGarDXNGALDgD8
				[]byte{0x73, 0x92, 0x06, 0x6a, 0xb0, 0xd7, 0x34, 0x60, 0x0b, 0x0e, 0x00, 0xfc},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndanribcd7c3gmw2tc6txarbrhxinhud66gfxnbn7cejzmp8")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndaguwen54shjmqn3vsebmkaax4mdp7h9csvuvqrrtugfmn2")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFndXdlbjU0c2hqbXFuM3ZzZWJta2FheDRtZHA3aDljc3Z1dnFycnR1Z2ZtbjJuZGFucmliY2Q3YzNnbXcydGM2dHhhcmJyaHhpbmh1ZDY2Z2Z4bmJuN2NlanptcDg=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x67, 0x75, 0x77, 0x65, 0x6e, 0x35, 0x34, 0x73, 0x68, 0x6a, 0x6d, 0x71, 0x6e, 0x33, 0x76, 0x73, 0x65, 0x62, 0x6d, 0x6b, 0x61, 0x61, 0x78, 0x34, 0x6d, 0x64, 0x70, 0x37, 0x68, 0x39, 0x63, 0x73, 0x76, 0x75, 0x76, 0x71, 0x72, 0x72, 0x74, 0x75, 0x67, 0x66, 0x6d, 0x6e, 0x32, 0x6e, 0x64, 0x61, 0x6e, 0x72, 0x69, 0x62, 0x63, 0x64, 0x37, 0x63, 0x33, 0x67, 0x6d, 0x77, 0x32, 0x74, 0x63, 0x36, 0x74, 0x78, 0x61, 0x72, 0x62, 0x72, 0x68, 0x78, 0x69, 0x6e, 0x68, 0x75, 0x64, 0x36, 0x36, 0x67, 0x66, 0x78, 0x6e, 0x62, 0x6e, 0x37, 0x63, 0x65, 0x6a, 0x7a, 0x6d, 0x70, 0x38}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndahhd8xsh477tcb35dna26q7a73ekyru6u6x2gyw89pk85d")
	require.NoError(t, err)

	// L1p5T3FGemI1NXUzaFJRZG5kYWhoZDh4c2g0Nzd0Y2IzNWRuYTI2cTdhNzNla3lydTZ1NngyZ3l3ODlwazg1ZHN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x2f, 0x5a, 0x79, 0x4f, 0x71, 0x46, 0x7a, 0x62, 0x35, 0x35, 0x75, 0x33, 0x68, 0x52, 0x51, 0x64, 0x6e, 0x64, 0x61, 0x68, 0x68, 0x64, 0x38, 0x78, 0x73, 0x68, 0x34, 0x37, 0x37, 0x74, 0x63, 0x62, 0x33, 0x35, 0x64, 0x6e, 0x61, 0x32, 0x36, 0x71, 0x37, 0x61, 0x37, 0x33, 0x65, 0x6b, 0x79, 0x72, 0x75, 0x36, 0x75, 0x36, 0x78, 0x32, 0x67, 0x79, 0x77, 0x38, 0x39, 0x70, 0x6b, 0x38, 0x35, 0x64, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: /ZyOqFzb55u3hRQd
				[]byte{0xfd, 0x9c, 0x8e, 0xa8, 0x5c, 0xdb, 0xe7, 0x9b, 0xb7, 0x85, 0x14, 0x1d},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: /ZyOqFzb55u3hRQd
				[]byte{0xfd, 0x9c, 0x8e, 0xa8, 0x5c, 0xdb, 0xe7, 0x9b, 0xb7, 0x85, 0x14, 0x1d},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndacuenqx3ctt87mberqm5cveiigzfrke8atb8gz3c53t4ey")
	require.NoError(t, err)

	// bmRhY3VlbnF4M2N0dDg3bWJlcnFtNWN2ZWlpZ3pmcmtlOGF0YjhnejNjNTN0NGV5AA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x75, 0x65, 0x6e, 0x71, 0x78, 0x33, 0x63, 0x74, 0x74, 0x38, 0x37, 0x6d, 0x62, 0x65, 0x72, 0x71, 0x6d, 0x35, 0x63, 0x76, 0x65, 0x69, 0x69, 0x67, 0x7a, 0x66, 0x72, 0x6b, 0x65, 0x38, 0x61, 0x74, 0x62, 0x38, 0x67, 0x7a, 0x33, 0x63, 0x35, 0x33, 0x74, 0x34, 0x65, 0x79, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndab6yddhs7b4yq2jyakkz77renizaawap34dnpdryzunads")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndantxu76zyrx8e84c44ygjg9zihad5q25e7j6evpb7cwxgu")
	require.NoError(t, err)

	// bmRhbnR4dTc2enlyeDhlODRjNDR5Z2pnOXppaGFkNXEyNWU3ajZldnBiN2N3eGd1MXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWI2eWRkaHM3YjR5cTJqeWFra3o3N3Jlbml6YWF3YXAzNGRucGRyeXp1bmFkcw==
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x74, 0x78, 0x75, 0x37, 0x36, 0x7a, 0x79, 0x72, 0x78, 0x38, 0x65, 0x38, 0x34, 0x63, 0x34, 0x34, 0x79, 0x67, 0x6a, 0x67, 0x39, 0x7a, 0x69, 0x68, 0x61, 0x64, 0x35, 0x71, 0x32, 0x35, 0x65, 0x37, 0x6a, 0x36, 0x65, 0x76, 0x70, 0x62, 0x37, 0x63, 0x77, 0x78, 0x67, 0x75, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x62, 0x36, 0x79, 0x64, 0x64, 0x68, 0x73, 0x37, 0x62, 0x34, 0x79, 0x71, 0x32, 0x6a, 0x79, 0x61, 0x6b, 0x6b, 0x7a, 0x37, 0x37, 0x72, 0x65, 0x6e, 0x69, 0x7a, 0x61, 0x61, 0x77, 0x61, 0x70, 0x33, 0x34, 0x64, 0x6e, 0x70, 0x64, 0x72, 0x79, 0x7a, 0x75, 0x6e, 0x61, 0x64, 0x73}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmosvZ25PM3c2QUFrT3lBM0JmAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x2f, 0x67, 0x6e, 0x4f, 0x33, 0x77, 0x36, 0x41, 0x41, 0x6b, 0x4f, 0x79, 0x41, 0x33, 0x42, 0x66, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: /gnO3w6AAkOyA3Bf
				[]byte{0xfe, 0x09, 0xce, 0xdf, 0x0e, 0x80, 0x02, 0x43, 0xb2, 0x03, 0x70, 0x5f},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: /gnO3w6AAkOyA3Bf
				[]byte{0xfe, 0x09, 0xce, 0xdf, 0x0e, 0x80, 0x02, 0x43, 0xb2, 0x03, 0x70, 0x5f},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSidechainTx_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	sidechaintxSource, err := address.Validate("ndadipvc6pcejncawyz2f8tg5j8y7yquwi98cps783vkciuw")
	require.NoError(t, err)
	sidechaintxSidechainSignatures, err := signature.RawSignature(signature.Ed25519, []byte{0xf2, 0xeb, 0xc4, 0x62, 0x03, 0xa1, 0x7b, 0x01, 0x89, 0x36, 0x45, 0x85, 0x6f, 0x55, 0x6e, 0xfa, 0x83, 0x04, 0x98, 0xef, 0x7a, 0xe0, 0x7f, 0x6b, 0x4a, 0xeb, 0x29, 0x82, 0x11, 0xcd, 0x68, 0x7d, 0xab, 0x72, 0x84, 0x69, 0x7a, 0x41, 0xbf, 0x73, 0x7e, 0x0f, 0x24, 0x36, 0xa4, 0x90, 0x38, 0xec, 0x7c, 0x1d, 0x70, 0x60, 0xf4, 0x91, 0x40, 0xdf, 0x67, 0x15, 0xec, 0x23, 0x1b, 0xad, 0x24, 0xd0})
	require.NoError(t, err)

	// AAJeEXA5N5cAAAAAAAAAY3VpeElaeC9DTDRmUnhzdkNhNGphZHRjYThteDZpMnNkd2Y3c2RjanlpeWN5OHhtcTlrYnNqZ2hycm1zaDg0NGs3bncyZWVxcHBiODR5NndlcGY3ZWRyNXZyMmh1aXB4ZXVhNnEyOWE3cWJzcmpla2E1N3Z0bTViZGRxeXVqd2VlZ2tkNTh5eXFuZGFkaXB2YzZwY2VqbmNhd3l6MmY4dGc1ajh5N3lxdXdpOThjcHM3ODN2a2NpdXc=
	expect := []byte{0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x75, 0x69, 0x78, 0x49, 0x5a, 0x78, 0x2f, 0x43, 0x4c, 0x34, 0x66, 0x52, 0x78, 0x73, 0x76, 0x43, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x38, 0x6d, 0x78, 0x36, 0x69, 0x32, 0x73, 0x64, 0x77, 0x66, 0x37, 0x73, 0x64, 0x63, 0x6a, 0x79, 0x69, 0x79, 0x63, 0x79, 0x38, 0x78, 0x6d, 0x71, 0x39, 0x6b, 0x62, 0x73, 0x6a, 0x67, 0x68, 0x72, 0x72, 0x6d, 0x73, 0x68, 0x38, 0x34, 0x34, 0x6b, 0x37, 0x6e, 0x77, 0x32, 0x65, 0x65, 0x71, 0x70, 0x70, 0x62, 0x38, 0x34, 0x79, 0x36, 0x77, 0x65, 0x70, 0x66, 0x37, 0x65, 0x64, 0x72, 0x35, 0x76, 0x72, 0x32, 0x68, 0x75, 0x69, 0x70, 0x78, 0x65, 0x75, 0x61, 0x36, 0x71, 0x32, 0x39, 0x61, 0x37, 0x71, 0x62, 0x73, 0x72, 0x6a, 0x65, 0x6b, 0x61, 0x35, 0x37, 0x76, 0x74, 0x6d, 0x35, 0x62, 0x64, 0x64, 0x71, 0x79, 0x75, 0x6a, 0x77, 0x65, 0x65, 0x67, 0x6b, 0x64, 0x35, 0x38, 0x79, 0x79, 0x71, 0x6e, 0x64, 0x61, 0x64, 0x69, 0x70, 0x76, 0x63, 0x36, 0x70, 0x63, 0x65, 0x6a, 0x6e, 0x63, 0x61, 0x77, 0x79, 0x7a, 0x32, 0x66, 0x38, 0x74, 0x67, 0x35, 0x6a, 0x38, 0x79, 0x37, 0x79, 0x71, 0x75, 0x77, 0x69, 0x39, 0x38, 0x63, 0x70, 0x73, 0x37, 0x38, 0x33, 0x76, 0x6b, 0x63, 0x69, 0x75, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SidechainTx
	}{
		{
			"no signatures",
			NewSidechainTx(
				sidechaintxSource,
				99,
				// SidechainSignableBytes as b64: uixIZx/CL4fRxsvC
				[]byte{0xba, 0x2c, 0x48, 0x67, 0x1f, 0xc2, 0x2f, 0x87, 0xd1, 0xc6, 0xcb, 0xc2},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
			),
		},
		{
			"with signature",
			NewSidechainTx(
				sidechaintxSource,
				99,
				// SidechainSignableBytes as b64: uixIZx/CL4fRxsvC
				[]byte{0xba, 0x2c, 0x48, 0x67, 0x1f, 0xc2, 0x2f, 0x87, 0xd1, 0xc6, 0xcb, 0xc2},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndaf2wibigdw5wn772mjdsvbnhnvx4i8q7i83rd4ztxskz6h")
	require.NoError(t, err)

	// bmRhZjJ3aWJpZ2R3NXduNzcybWpkc3Zibmhudng0aThxN2k4M3JkNHp0eHNrejZoABP6yCVBcNA=
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x32, 0x77, 0x69, 0x62, 0x69, 0x67, 0x64, 0x77, 0x35, 0x77, 0x6e, 0x37, 0x37, 0x32, 0x6d, 0x6a, 0x64, 0x73, 0x76, 0x62, 0x6e, 0x68, 0x6e, 0x76, 0x78, 0x34, 0x69, 0x38, 0x71, 0x37, 0x69, 0x38, 0x33, 0x72, 0x64, 0x34, 0x7a, 0x74, 0x78, 0x73, 0x6b, 0x7a, 0x36, 0x68, 0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndagcs5wnui9et634qix5u66btuj382jy8ag9ksbgegr2942")
	require.NoError(t, err)

	// AA2S+t7X5spuZGFnY3M1d251aTlldDYzNHFpeDV1NjZidHVqMzgyank4YWc5a3NiZ2VncjI5NDI=
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x6e, 0x64, 0x61, 0x67, 0x63, 0x73, 0x35, 0x77, 0x6e, 0x75, 0x69, 0x39, 0x65, 0x74, 0x36, 0x33, 0x34, 0x71, 0x69, 0x78, 0x35, 0x75, 0x36, 0x36, 0x62, 0x74, 0x75, 0x6a, 0x33, 0x38, 0x32, 0x6a, 0x79, 0x38, 0x61, 0x67, 0x39, 0x6b, 0x73, 0x62, 0x67, 0x65, 0x67, 0x72, 0x32, 0x39, 0x34, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAn3Z2Z46KEAH/erJE/OdA==
	expect := []byte{0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1, 0x00, 0x1f, 0xf7, 0xab, 0x24, 0x4f, 0xce, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2805298263287969,
				8998038698708596,
			),
		},
		{
			"with signature",
			NewIssue(
				2805298263287969,
				8998038698708596,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
