package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndac3gkcfvc2iiicndqtwksdxa497i2dqkyhuiffx5q2demb")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndadx4hkcfp78dr24fcxk9pbet7kpnvg6he7mps98aphv8m3")
	require.NoError(t, err)

	// bmRhZHg0aGtjZnA3OGRyMjRmY3hrOXBiZXQ3a3Budmc2aGU3bXBzOThhcGh2OG0zAAWCIQf8/70AApoPXz8aEm5kYWMzZ2tjZnZjMmlpaWNuZHF0d2tzZHhhNDk3aTJkcWt5aHVpZmZ4NXEyZGVtYg==
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x78, 0x34, 0x68, 0x6b, 0x63, 0x66, 0x70, 0x37, 0x38, 0x64, 0x72, 0x32, 0x34, 0x66, 0x63, 0x78, 0x6b, 0x39, 0x70, 0x62, 0x65, 0x74, 0x37, 0x6b, 0x70, 0x6e, 0x76, 0x67, 0x36, 0x68, 0x65, 0x37, 0x6d, 0x70, 0x73, 0x39, 0x38, 0x61, 0x70, 0x68, 0x76, 0x38, 0x6d, 0x33, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x63, 0x33, 0x67, 0x6b, 0x63, 0x66, 0x76, 0x63, 0x32, 0x69, 0x69, 0x69, 0x63, 0x6e, 0x64, 0x71, 0x74, 0x77, 0x6b, 0x73, 0x64, 0x78, 0x61, 0x34, 0x39, 0x37, 0x69, 0x32, 0x64, 0x71, 0x6b, 0x79, 0x68, 0x75, 0x69, 0x66, 0x66, 0x78, 0x35, 0x71, 0x32, 0x64, 0x65, 0x6d, 0x62}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndagnf2z45tiijx8vsnsggf6jjvttitnbydje4z64htrv4i2")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x4c, 0x1f, 0x14, 0x09, 0xa4, 0x5e, 0x37, 0x9b, 0x40, 0x86, 0x08, 0x75, 0xa1, 0x39, 0x8b, 0x3e, 0xfc, 0x82, 0x8b, 0xd2, 0x77, 0x36, 0x5d, 0x9c, 0x78, 0xb6, 0x45, 0x52, 0x0e, 0x9f, 0xff, 0x1a}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWJnYjhmYWp3dHJkcmc0YXMyZWhtaWozdG45cjNhd200ajV2bnpuNnJjNWVrd3Nxdjk5dHh1cjdpZnJnOTduZQAQTcdmlXTFbmRhZ25mMno0NXRpaWp4OHZzbnNnZ2Y2amp2dHRpdG5ieWRqZTR6NjRodHJ2NGkyb0dCWm1KeHQ4RVUrT2d0Zg==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x67, 0x62, 0x38, 0x66, 0x61, 0x6a, 0x77, 0x74, 0x72, 0x64, 0x72, 0x67, 0x34, 0x61, 0x73, 0x32, 0x65, 0x68, 0x6d, 0x69, 0x6a, 0x33, 0x74, 0x6e, 0x39, 0x72, 0x33, 0x61, 0x77, 0x6d, 0x34, 0x6a, 0x35, 0x76, 0x6e, 0x7a, 0x6e, 0x36, 0x72, 0x63, 0x35, 0x65, 0x6b, 0x77, 0x73, 0x71, 0x76, 0x39, 0x39, 0x74, 0x78, 0x75, 0x72, 0x37, 0x69, 0x66, 0x72, 0x67, 0x39, 0x37, 0x6e, 0x65, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x67, 0x6e, 0x66, 0x32, 0x7a, 0x34, 0x35, 0x74, 0x69, 0x69, 0x6a, 0x78, 0x38, 0x76, 0x73, 0x6e, 0x73, 0x67, 0x67, 0x66, 0x36, 0x6a, 0x6a, 0x76, 0x74, 0x74, 0x69, 0x74, 0x6e, 0x62, 0x79, 0x64, 0x6a, 0x65, 0x34, 0x7a, 0x36, 0x34, 0x68, 0x74, 0x72, 0x76, 0x34, 0x69, 0x32, 0x6f, 0x47, 0x42, 0x5a, 0x6d, 0x4a, 0x78, 0x74, 0x38, 0x45, 0x55, 0x2b, 0x4f, 0x67, 0x74, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: oGBZmJxt8EU+Ogtf
				[]byte{0xa0, 0x60, 0x59, 0x98, 0x9c, 0x6d, 0xf0, 0x45, 0x3e, 0x3a, 0x0b, 0x5f},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: oGBZmJxt8EU+Ogtf
				[]byte{0xa0, 0x60, 0x59, 0x98, 0x9c, 0x6d, 0xf0, 0x45, 0x3e, 0x3a, 0x0b, 0x5f},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndafxv474m9z9uinec4e445t7ngr6hehx7fmkhuau4vkvps7")
	require.NoError(t, err)

	// bmRhZnh2NDc0bTl6OXVpbmVjNGU0NDV0N25ncjZoZWh4N2Zta2h1YXU0dmt2cHM3AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x78, 0x76, 0x34, 0x37, 0x34, 0x6d, 0x39, 0x7a, 0x39, 0x75, 0x69, 0x6e, 0x65, 0x63, 0x34, 0x65, 0x34, 0x34, 0x35, 0x74, 0x37, 0x6e, 0x67, 0x72, 0x36, 0x68, 0x65, 0x68, 0x78, 0x37, 0x66, 0x6d, 0x6b, 0x68, 0x75, 0x61, 0x75, 0x34, 0x76, 0x6b, 0x76, 0x70, 0x73, 0x37, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndaqpkzqudanavp5ma79pg85mip9bq2vfkzst4h8t8zh4zbx")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFxcGt6cXVkYW5hdnA1bWE3OXBnODVtaXA5YnEydmZrenN0NGg4dDh6aDR6Yng=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x71, 0x70, 0x6b, 0x7a, 0x71, 0x75, 0x64, 0x61, 0x6e, 0x61, 0x76, 0x70, 0x35, 0x6d, 0x61, 0x37, 0x39, 0x70, 0x67, 0x38, 0x35, 0x6d, 0x69, 0x70, 0x39, 0x62, 0x71, 0x32, 0x76, 0x66, 0x6b, 0x7a, 0x73, 0x74, 0x34, 0x68, 0x38, 0x74, 0x38, 0x7a, 0x68, 0x34, 0x7a, 0x62, 0x78}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndaqgh8ai9njbyxqrhi3xmcrba37j9y7rhsiuzxankcu8cpp")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndadue2xmq4xnvbri6twuqq5gvzukamvijy2q8izrz6exuym")
	require.NoError(t, err)

	// bmRhZHVlMnhtcTR4bnZicmk2dHd1cXE1Z3Z6dWthbXZpankycThpenJ6NmV4dXltAAjSrCLE0zRuZGFxZ2g4YWk5bmpieXhxcmhpM3htY3JiYTM3ajl5N3Joc2l1enhhbmtjdThjcHA=
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x75, 0x65, 0x32, 0x78, 0x6d, 0x71, 0x34, 0x78, 0x6e, 0x76, 0x62, 0x72, 0x69, 0x36, 0x74, 0x77, 0x75, 0x71, 0x71, 0x35, 0x67, 0x76, 0x7a, 0x75, 0x6b, 0x61, 0x6d, 0x76, 0x69, 0x6a, 0x79, 0x32, 0x71, 0x38, 0x69, 0x7a, 0x72, 0x7a, 0x36, 0x65, 0x78, 0x75, 0x79, 0x6d, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x71, 0x67, 0x68, 0x38, 0x61, 0x69, 0x39, 0x6e, 0x6a, 0x62, 0x79, 0x78, 0x71, 0x72, 0x68, 0x69, 0x33, 0x78, 0x6d, 0x63, 0x72, 0x62, 0x61, 0x33, 0x37, 0x6a, 0x39, 0x79, 0x37, 0x72, 0x68, 0x73, 0x69, 0x75, 0x7a, 0x78, 0x61, 0x6e, 0x6b, 0x63, 0x75, 0x38, 0x63, 0x70, 0x70}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndai4fvsu9upimi3wsapkmnhx8xmyiywesxiwnzjaiy5iwfp")
	require.NoError(t, err)

	// bmRhaTRmdnN1OXVwaW1pM3dzYXBrbW5oeDh4bXlpeXdlc3hpd256amFpeTVpd2ZwAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x34, 0x66, 0x76, 0x73, 0x75, 0x39, 0x75, 0x70, 0x69, 0x6d, 0x69, 0x33, 0x77, 0x73, 0x61, 0x70, 0x6b, 0x6d, 0x6e, 0x68, 0x78, 0x38, 0x78, 0x6d, 0x79, 0x69, 0x79, 0x77, 0x65, 0x73, 0x78, 0x69, 0x77, 0x6e, 0x7a, 0x6a, 0x61, 0x69, 0x79, 0x35, 0x69, 0x77, 0x66, 0x70, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndajs2qsb2w397ysbsym3smudsahxhsdjz7ycgh2dn24y74a")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhanMycXNiMnczOTd5c2JzeW0zc211ZHNhaHhoc2Rqejd5Y2doMmRuMjR5NzRh
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x6a, 0x73, 0x32, 0x71, 0x73, 0x62, 0x32, 0x77, 0x33, 0x39, 0x37, 0x79, 0x73, 0x62, 0x73, 0x79, 0x6d, 0x33, 0x73, 0x6d, 0x75, 0x64, 0x73, 0x61, 0x68, 0x78, 0x68, 0x73, 0x64, 0x6a, 0x7a, 0x37, 0x79, 0x63, 0x67, 0x68, 0x32, 0x64, 0x6e, 0x32, 0x34, 0x79, 0x37, 0x34, 0x61}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndaei7n56g2w6z6jvt75exjcc7vuvphveahbupaa5xsh2ndw")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFlaTduNTZnMnc2ejZqdnQ3NWV4amNjN3Z1dnBodmVhaGJ1cGFhNXhzaDJuZHc=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x65, 0x69, 0x37, 0x6e, 0x35, 0x36, 0x67, 0x32, 0x77, 0x36, 0x7a, 0x36, 0x6a, 0x76, 0x74, 0x37, 0x35, 0x65, 0x78, 0x6a, 0x63, 0x63, 0x37, 0x76, 0x75, 0x76, 0x70, 0x68, 0x76, 0x65, 0x61, 0x68, 0x62, 0x75, 0x70, 0x61, 0x61, 0x35, 0x78, 0x73, 0x68, 0x32, 0x6e, 0x64, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndamqvbrvd74smdprnu5kq3m8anpj63zxr48ka5kvyjnhtfz")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndacddbzngk5wr2ir6pfeirnca96ci66whq6yhmn8nbj2qqh")
	require.NoError(t, err)

	// bmRhY2RkYnpuZ2s1d3IyaXI2cGZlaXJuY2E5NmNpNjZ3aHE2eWhtbjhuYmoycXFoAAz/orpRehFuZGFtcXZicnZkNzRzbWRwcm51NWtxM204YW5wajYzenhyNDhrYTVrdnlqbmh0Zno=
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x64, 0x64, 0x62, 0x7a, 0x6e, 0x67, 0x6b, 0x35, 0x77, 0x72, 0x32, 0x69, 0x72, 0x36, 0x70, 0x66, 0x65, 0x69, 0x72, 0x6e, 0x63, 0x61, 0x39, 0x36, 0x63, 0x69, 0x36, 0x36, 0x77, 0x68, 0x71, 0x36, 0x79, 0x68, 0x6d, 0x6e, 0x38, 0x6e, 0x62, 0x6a, 0x32, 0x71, 0x71, 0x68, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x6d, 0x71, 0x76, 0x62, 0x72, 0x76, 0x64, 0x37, 0x34, 0x73, 0x6d, 0x64, 0x70, 0x72, 0x6e, 0x75, 0x35, 0x6b, 0x71, 0x33, 0x6d, 0x38, 0x61, 0x6e, 0x70, 0x6a, 0x36, 0x33, 0x7a, 0x78, 0x72, 0x34, 0x38, 0x6b, 0x61, 0x35, 0x6b, 0x76, 0x79, 0x6a, 0x6e, 0x68, 0x74, 0x66, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndap2uigzqp24x2cnqerw5u6vv3hqtsi3z6dn9ygu7bqufv7")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x1a, 0x67, 0x59, 0xc6, 0xe5, 0xc3, 0xaa, 0x34, 0x15, 0xb4, 0xa8, 0x68, 0x27, 0x3c, 0x6d, 0xc3, 0xca, 0xfe, 0x91, 0x44, 0x4d, 0x2a, 0x8a, 0xcd, 0x70, 0x17, 0x2f, 0x55, 0xa2, 0x6e, 0x42, 0xbe}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x6c, 0xb8, 0x7f, 0x3f, 0xc5, 0xe0, 0x31, 0x21, 0xeb, 0xd1, 0x3d, 0x08, 0x8f, 0x76, 0xd1, 0xf1, 0xde, 0xbf, 0x91, 0x7c, 0x80, 0xdd, 0xea, 0x41, 0xa0, 0x71, 0xd4, 0x2c, 0xeb, 0xc6, 0x1c, 0x34}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWFwZ3F5cWc2emI0d3BheHl1d2dzajM2cHpiNng5d3RpdGd1eGN5cHFhbXU4eHBjcDNibTZ6YzhmYW1zOHBneQAZX/GDxHNZbmRhcDJ1aWd6cXAyNHgyY25xZXJ3NXU2dnYzaHF0c2kzejZkbjl5Z3U3YnF1ZnY3bnB1YmE4amFkdGJiZWJ5bXM5MzkyenNkY2lybTRlOHN0ZDV5NGgyNzdyNnRydWFwNTR1YndiMjdpbWhtMjJxZGpwaGY5cGJzcW5uM1VsejdqVE9WaU1hOTlhaG4=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x70, 0x67, 0x71, 0x79, 0x71, 0x67, 0x36, 0x7a, 0x62, 0x34, 0x77, 0x70, 0x61, 0x78, 0x79, 0x75, 0x77, 0x67, 0x73, 0x6a, 0x33, 0x36, 0x70, 0x7a, 0x62, 0x36, 0x78, 0x39, 0x77, 0x74, 0x69, 0x74, 0x67, 0x75, 0x78, 0x63, 0x79, 0x70, 0x71, 0x61, 0x6d, 0x75, 0x38, 0x78, 0x70, 0x63, 0x70, 0x33, 0x62, 0x6d, 0x36, 0x7a, 0x63, 0x38, 0x66, 0x61, 0x6d, 0x73, 0x38, 0x70, 0x67, 0x79, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x70, 0x32, 0x75, 0x69, 0x67, 0x7a, 0x71, 0x70, 0x32, 0x34, 0x78, 0x32, 0x63, 0x6e, 0x71, 0x65, 0x72, 0x77, 0x35, 0x75, 0x36, 0x76, 0x76, 0x33, 0x68, 0x71, 0x74, 0x73, 0x69, 0x33, 0x7a, 0x36, 0x64, 0x6e, 0x39, 0x79, 0x67, 0x75, 0x37, 0x62, 0x71, 0x75, 0x66, 0x76, 0x37, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x79, 0x6d, 0x73, 0x39, 0x33, 0x39, 0x32, 0x7a, 0x73, 0x64, 0x63, 0x69, 0x72, 0x6d, 0x34, 0x65, 0x38, 0x73, 0x74, 0x64, 0x35, 0x79, 0x34, 0x68, 0x32, 0x37, 0x37, 0x72, 0x36, 0x74, 0x72, 0x75, 0x61, 0x70, 0x35, 0x34, 0x75, 0x62, 0x77, 0x62, 0x32, 0x37, 0x69, 0x6d, 0x68, 0x6d, 0x32, 0x32, 0x71, 0x64, 0x6a, 0x70, 0x68, 0x66, 0x39, 0x70, 0x62, 0x73, 0x71, 0x6e, 0x6e, 0x33, 0x55, 0x6c, 0x7a, 0x37, 0x6a, 0x54, 0x4f, 0x56, 0x69, 0x4d, 0x61, 0x39, 0x39, 0x61, 0x68, 0x6e}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: Ulz7jTOViMa99ahn
				[]byte{0x52, 0x5c, 0xfb, 0x8d, 0x33, 0x95, 0x88, 0xc6, 0xbd, 0xf5, 0xa8, 0x67},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: Ulz7jTOViMa99ahn
				[]byte{0x52, 0x5c, 0xfb, 0x8d, 0x33, 0x95, 0x88, 0xc6, 0xbd, 0xf5, 0xa8, 0x67},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndafenue4aunuvwc9gj6k7fuw2waxqib67cfkuyyij7a3b2j")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndap39ipnghmjbh38vum5tnxfhdqmbjakheup3tr55v2jta8")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFwMzlpcG5naG1qYmgzOHZ1bTV0bnhmaGRxbWJqYWtoZXVwM3RyNTV2Mmp0YThuZGFmZW51ZTRhdW51dndjOWdqNms3ZnV3MndheHFpYjY3Y2ZrdXl5aWo3YTNiMmo=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x70, 0x33, 0x39, 0x69, 0x70, 0x6e, 0x67, 0x68, 0x6d, 0x6a, 0x62, 0x68, 0x33, 0x38, 0x76, 0x75, 0x6d, 0x35, 0x74, 0x6e, 0x78, 0x66, 0x68, 0x64, 0x71, 0x6d, 0x62, 0x6a, 0x61, 0x6b, 0x68, 0x65, 0x75, 0x70, 0x33, 0x74, 0x72, 0x35, 0x35, 0x76, 0x32, 0x6a, 0x74, 0x61, 0x38, 0x6e, 0x64, 0x61, 0x66, 0x65, 0x6e, 0x75, 0x65, 0x34, 0x61, 0x75, 0x6e, 0x75, 0x76, 0x77, 0x63, 0x39, 0x67, 0x6a, 0x36, 0x6b, 0x37, 0x66, 0x75, 0x77, 0x32, 0x77, 0x61, 0x78, 0x71, 0x69, 0x62, 0x36, 0x37, 0x63, 0x66, 0x6b, 0x75, 0x79, 0x79, 0x69, 0x6a, 0x37, 0x61, 0x33, 0x62, 0x32, 0x6a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndam36ygsm26en6u5tcza2yf24ckqdtigdsvqs2hskbty7vk")
	require.NoError(t, err)

	// aFZZY1ZKZHVDNEY5NkRWVG5kYW0zNnlnc20yNmVuNnU1dGN6YTJ5ZjI0Y2txZHRpZ2RzdnFzMmhza2J0eTd2a3N0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x68, 0x56, 0x59, 0x63, 0x56, 0x4a, 0x64, 0x75, 0x43, 0x34, 0x46, 0x39, 0x36, 0x44, 0x56, 0x54, 0x6e, 0x64, 0x61, 0x6d, 0x33, 0x36, 0x79, 0x67, 0x73, 0x6d, 0x32, 0x36, 0x65, 0x6e, 0x36, 0x75, 0x35, 0x74, 0x63, 0x7a, 0x61, 0x32, 0x79, 0x66, 0x32, 0x34, 0x63, 0x6b, 0x71, 0x64, 0x74, 0x69, 0x67, 0x64, 0x73, 0x76, 0x71, 0x73, 0x32, 0x68, 0x73, 0x6b, 0x62, 0x74, 0x79, 0x37, 0x76, 0x6b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: hVYcVJduC4F96DVT
				[]byte{0x85, 0x56, 0x1c, 0x54, 0x97, 0x6e, 0x0b, 0x81, 0x7d, 0xe8, 0x35, 0x53},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: hVYcVJduC4F96DVT
				[]byte{0x85, 0x56, 0x1c, 0x54, 0x97, 0x6e, 0x0b, 0x81, 0x7d, 0xe8, 0x35, 0x53},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndankkcnrc72kvgehwrjzp3rhtvr6jr9gpe32fv6qsn3ivnq")
	require.NoError(t, err)

	// bmRhbmtrY25yYzcya3ZnZWh3cmp6cDNyaHR2cjZqcjlncGUzMmZ2NnFzbjNpdm5xAA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x6b, 0x6b, 0x63, 0x6e, 0x72, 0x63, 0x37, 0x32, 0x6b, 0x76, 0x67, 0x65, 0x68, 0x77, 0x72, 0x6a, 0x7a, 0x70, 0x33, 0x72, 0x68, 0x74, 0x76, 0x72, 0x36, 0x6a, 0x72, 0x39, 0x67, 0x70, 0x65, 0x33, 0x32, 0x66, 0x76, 0x36, 0x71, 0x73, 0x6e, 0x33, 0x69, 0x76, 0x6e, 0x71, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndajnfyjaf8zfctg3i9nvrk349ipzxkp785a8jvv6r7mcz8r")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndaq3faeqbw9n2hwnaur8priz2e737svb8z8i7krtjpihbmu")
	require.NoError(t, err)

	// bmRhcTNmYWVxYnc5bjJod25hdXI4cHJpejJlNzM3c3ZiOHo4aTdrcnRqcGloYm11MXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWpuZnlqYWY4emZjdGczaTludnJrMzQ5aXB6eGtwNzg1YThqdnY2cjdtY3o4cg==
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x33, 0x66, 0x61, 0x65, 0x71, 0x62, 0x77, 0x39, 0x6e, 0x32, 0x68, 0x77, 0x6e, 0x61, 0x75, 0x72, 0x38, 0x70, 0x72, 0x69, 0x7a, 0x32, 0x65, 0x37, 0x33, 0x37, 0x73, 0x76, 0x62, 0x38, 0x7a, 0x38, 0x69, 0x37, 0x6b, 0x72, 0x74, 0x6a, 0x70, 0x69, 0x68, 0x62, 0x6d, 0x75, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x6a, 0x6e, 0x66, 0x79, 0x6a, 0x61, 0x66, 0x38, 0x7a, 0x66, 0x63, 0x74, 0x67, 0x33, 0x69, 0x39, 0x6e, 0x76, 0x72, 0x6b, 0x33, 0x34, 0x39, 0x69, 0x70, 0x7a, 0x78, 0x6b, 0x70, 0x37, 0x38, 0x35, 0x61, 0x38, 0x6a, 0x76, 0x76, 0x36, 0x72, 0x37, 0x6d, 0x63, 0x7a, 0x38, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmotlcHdycXY0K0RrUnlna2NHAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x65, 0x70, 0x77, 0x72, 0x71, 0x76, 0x34, 0x2b, 0x44, 0x6b, 0x52, 0x79, 0x67, 0x6b, 0x63, 0x47, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: epwrqv4+DkRygkcG
				[]byte{0x7a, 0x9c, 0x2b, 0xaa, 0xfe, 0x3e, 0x0e, 0x44, 0x72, 0x82, 0x47, 0x06},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: epwrqv4+DkRygkcG
				[]byte{0x7a, 0x9c, 0x2b, 0xaa, 0xfe, 0x3e, 0x0e, 0x44, 0x72, 0x82, 0x47, 0x06},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSidechainTx_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	sidechaintxSource, err := address.Validate("ndab6hy6y5cpdvf84wzhj2ffzugh9ybuksg86gk2w59pexpw")
	require.NoError(t, err)
	sidechaintxSidechainSignatures, err := signature.RawSignature(signature.Ed25519, []byte{0xdc, 0xf8, 0x9f, 0xaa, 0x5a, 0xa2, 0x65, 0x15, 0x53, 0xc7, 0xa6, 0x7d, 0xcb, 0xa0, 0x14, 0xc7, 0xf0, 0x2e, 0xeb, 0x5f, 0x15, 0x9a, 0xfe, 0xaa, 0x8f, 0x93, 0x1d, 0xe4, 0xfd, 0x3a, 0xf0, 0x22, 0x3c, 0x4e, 0xf5, 0xa8, 0x53, 0xfb, 0x68, 0x84, 0x3a, 0xd3, 0xaf, 0x43, 0x98, 0x09, 0x99, 0x64, 0x0e, 0xff, 0x25, 0xce, 0xdd, 0x3e, 0xd5, 0xc0, 0x05, 0xdd, 0xd2, 0xe0, 0x2c, 0x80, 0x4e, 0x99})
	require.NoError(t, err)

	// AAJeEXA5N5cAAAAAAAAAz05JYjE1Y0lhVVpmRWxpTFRhNGphZHRjYTV2Nmo5a3U0d2p1dGt3OGh3Mzg2emlhdzI5MmM3NDQ5Y3lwcjdrd3J1bnE4ajlqNDhhdGQydnp4eGJqOXk0ZWVobWo0OHM2MmJnbnlpZHo5ZXpocDRyeXgyYWM3NXd6YWZ1YWU3Z3I1eDhnd2Fuam1uZGFiNmh5Nnk1Y3BkdmY4NHd6aGoyZmZ6dWdoOXlidWtzZzg2Z2sydzU5cGV4cHc=
	expect := []byte{0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0x4e, 0x49, 0x62, 0x31, 0x35, 0x63, 0x49, 0x61, 0x55, 0x5a, 0x66, 0x45, 0x6c, 0x69, 0x4c, 0x54, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x35, 0x76, 0x36, 0x6a, 0x39, 0x6b, 0x75, 0x34, 0x77, 0x6a, 0x75, 0x74, 0x6b, 0x77, 0x38, 0x68, 0x77, 0x33, 0x38, 0x36, 0x7a, 0x69, 0x61, 0x77, 0x32, 0x39, 0x32, 0x63, 0x37, 0x34, 0x34, 0x39, 0x63, 0x79, 0x70, 0x72, 0x37, 0x6b, 0x77, 0x72, 0x75, 0x6e, 0x71, 0x38, 0x6a, 0x39, 0x6a, 0x34, 0x38, 0x61, 0x74, 0x64, 0x32, 0x76, 0x7a, 0x78, 0x78, 0x62, 0x6a, 0x39, 0x79, 0x34, 0x65, 0x65, 0x68, 0x6d, 0x6a, 0x34, 0x38, 0x73, 0x36, 0x32, 0x62, 0x67, 0x6e, 0x79, 0x69, 0x64, 0x7a, 0x39, 0x65, 0x7a, 0x68, 0x70, 0x34, 0x72, 0x79, 0x78, 0x32, 0x61, 0x63, 0x37, 0x35, 0x77, 0x7a, 0x61, 0x66, 0x75, 0x61, 0x65, 0x37, 0x67, 0x72, 0x35, 0x78, 0x38, 0x67, 0x77, 0x61, 0x6e, 0x6a, 0x6d, 0x6e, 0x64, 0x61, 0x62, 0x36, 0x68, 0x79, 0x36, 0x79, 0x35, 0x63, 0x70, 0x64, 0x76, 0x66, 0x38, 0x34, 0x77, 0x7a, 0x68, 0x6a, 0x32, 0x66, 0x66, 0x7a, 0x75, 0x67, 0x68, 0x39, 0x79, 0x62, 0x75, 0x6b, 0x73, 0x67, 0x38, 0x36, 0x67, 0x6b, 0x32, 0x77, 0x35, 0x39, 0x70, 0x65, 0x78, 0x70, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SidechainTx
	}{
		{
			"no signatures",
			NewSidechainTx(
				sidechaintxSource,
				207,
				// SidechainSignableBytes as b64: NIb15cIaUZfEliLT
				[]byte{0x34, 0x86, 0xf5, 0xe5, 0xc2, 0x1a, 0x51, 0x97, 0xc4, 0x96, 0x22, 0xd3},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
			),
		},
		{
			"with signature",
			NewSidechainTx(
				sidechaintxSource,
				207,
				// SidechainSignableBytes as b64: NIb15cIaUZfEliLT
				[]byte{0x34, 0x86, 0xf5, 0xe5, 0xc2, 0x1a, 0x51, 0x97, 0xc4, 0x96, 0x22, 0xd3},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndap7pk6yrstykvwhz5f7beimcdcs24npp9igv75iy3qyyfx")
	require.NoError(t, err)

	// bmRhcDdwazZ5cnN0eWt2d2h6NWY3YmVpbWNkY3MyNG5wcDlpZ3Y3NWl5M3F5eWZ4ABP6yCVBcNA=
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x37, 0x70, 0x6b, 0x36, 0x79, 0x72, 0x73, 0x74, 0x79, 0x6b, 0x76, 0x77, 0x68, 0x7a, 0x35, 0x66, 0x37, 0x62, 0x65, 0x69, 0x6d, 0x63, 0x64, 0x63, 0x73, 0x32, 0x34, 0x6e, 0x70, 0x70, 0x39, 0x69, 0x67, 0x76, 0x37, 0x35, 0x69, 0x79, 0x33, 0x71, 0x79, 0x79, 0x66, 0x78, 0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndamm96pfc6twe5yfuyxa94g7xkpu9h28gkgwdahk9t5tvaf")
	require.NoError(t, err)

	// AA2S+t7X5spuZGFtbTk2cGZjNnR3ZTV5ZnV5eGE5NGc3eGtwdTloMjhna2d3ZGFoazl0NXR2YWY=
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x6e, 0x64, 0x61, 0x6d, 0x6d, 0x39, 0x36, 0x70, 0x66, 0x63, 0x36, 0x74, 0x77, 0x65, 0x35, 0x79, 0x66, 0x75, 0x79, 0x78, 0x61, 0x39, 0x34, 0x67, 0x37, 0x78, 0x6b, 0x70, 0x75, 0x39, 0x68, 0x32, 0x38, 0x67, 0x6b, 0x67, 0x77, 0x64, 0x61, 0x68, 0x6b, 0x39, 0x74, 0x35, 0x74, 0x76, 0x61, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAn3Z2Z46KEAH/erJE/OdA==
	expect := []byte{0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1, 0x00, 0x1f, 0xf7, 0xab, 0x24, 0x4f, 0xce, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2805298263287969,
				8998038698708596,
			),
		},
		{
			"with signature",
			NewIssue(
				2805298263287969,
				8998038698708596,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimchildaccountTarget, err := address.Validate("ndafe2mi8xdpr96w9djk6xphxmv4b48sczrzrq8j5iqhx46h")
	require.NoError(t, err)
	claimchildaccountChild, err := address.Validate("ndah9mc4j6ajnngwed42ran935snq8wxehvbt5rcqugtkwgy")
	require.NoError(t, err)
	claimchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x78, 0x2c, 0xda, 0x87, 0xdb, 0x58, 0x80, 0xc7, 0x4e, 0x7d, 0x45, 0x0c, 0x11, 0xd9, 0x1b, 0xc4, 0x28, 0x30, 0x5f, 0xe8, 0x41, 0xb8, 0x63, 0x1e, 0xf2, 0x8d, 0x17, 0xd0, 0x1f, 0x09, 0x00, 0xb1}, nil)
	require.NoError(t, err)
	claimchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x75, 0x34, 0x3f, 0x18, 0xa1, 0xee, 0x89, 0x9a, 0xdb, 0xdc, 0xf5, 0xf1, 0x90, 0x28, 0x1f, 0x2a, 0x7b, 0x86, 0x2e, 0x1a, 0xda, 0x2f, 0xa0, 0x2f, 0xe9, 0xa8, 0x1d, 0xed, 0x1f, 0x70, 0xeb, 0x60, 0x93, 0x1f, 0x7e, 0xcd, 0x6f, 0x1e, 0xc6, 0xc2, 0xe4, 0x33, 0xd2, 0x98, 0x35, 0x0a, 0xe6, 0x51, 0x3a, 0x21, 0x65, 0xd8, 0x75, 0xb4, 0x3d, 0x63, 0xc5, 0xc6, 0x2f, 0x7d, 0xb7, 0x84, 0x46, 0xdc})
	require.NoError(t, err)
	claimchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x77, 0x3a, 0xca, 0x56, 0x2e, 0xcb, 0x63, 0x33, 0x9f, 0xeb, 0xd9, 0xd3, 0x16, 0x36, 0x19, 0xc8, 0x36, 0x00, 0x68, 0xc5, 0x2f, 0xb7, 0xec, 0x74, 0x21, 0x7a, 0x2b, 0xac, 0x14, 0x0c, 0x7e, 0xec}, nil)
	require.NoError(t, err)

	// bmRhaDltYzRqNmFqbm5nd2VkNDJyYW45MzVzbnE4d3hlaHZidDVyY3F1Z3Rrd2d5bnB1YmE4amFkdGJiZWI2YzN5d2g1cG5pYnQ0cXJ4Y3MyZXEzZHJjY3NuYzk3YmE1czIyODhrZ3Ryd2E5YmVhbWN0dTQ3c3pyaHlmN2E0amFkdGNhcXc0ZDhnZmI3NGUzeHk4Njh6MjNha2E5Zmo3Mm5tczQ1aXo0YW05anhhcTg0aDVzN3BzamdoNTgzeHp0N3R5YzZzMzdmZ2J4Ym12ZmNxdGJuem5obXBiN25yYzZubTU3eThjZXB6ZWlmbmo3M3pldW5wdWJhOGphZHRiYmViNXZ4dXV5ZjVmeWduNjk3cm43Z2Z0eWRoZWRuYWRpMnd6NXI1ZHdlZjdjem1hd2J0OXEyZnMyYmdiZjloZHJ0MExBenVGOWxpTnRaYTN3AAeDA1aqb0FuZGFmZTJtaTh4ZHByOTZ3OWRqazZ4cGh4bXY0YjQ4c2N6cnpycThqNWlxaHg0Nmg=
	expect := []byte{0x6e, 0x64, 0x61, 0x68, 0x39, 0x6d, 0x63, 0x34, 0x6a, 0x36, 0x61, 0x6a, 0x6e, 0x6e, 0x67, 0x77, 0x65, 0x64, 0x34, 0x32, 0x72, 0x61, 0x6e, 0x39, 0x33, 0x35, 0x73, 0x6e, 0x71, 0x38, 0x77, 0x78, 0x65, 0x68, 0x76, 0x62, 0x74, 0x35, 0x72, 0x63, 0x71, 0x75, 0x67, 0x74, 0x6b, 0x77, 0x67, 0x79, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x36, 0x63, 0x33, 0x79, 0x77, 0x68, 0x35, 0x70, 0x6e, 0x69, 0x62, 0x74, 0x34, 0x71, 0x72, 0x78, 0x63, 0x73, 0x32, 0x65, 0x71, 0x33, 0x64, 0x72, 0x63, 0x63, 0x73, 0x6e, 0x63, 0x39, 0x37, 0x62, 0x61, 0x35, 0x73, 0x32, 0x32, 0x38, 0x38, 0x6b, 0x67, 0x74, 0x72, 0x77, 0x61, 0x39, 0x62, 0x65, 0x61, 0x6d, 0x63, 0x74, 0x75, 0x34, 0x37, 0x73, 0x7a, 0x72, 0x68, 0x79, 0x66, 0x37, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x71, 0x77, 0x34, 0x64, 0x38, 0x67, 0x66, 0x62, 0x37, 0x34, 0x65, 0x33, 0x78, 0x79, 0x38, 0x36, 0x38, 0x7a, 0x32, 0x33, 0x61, 0x6b, 0x61, 0x39, 0x66, 0x6a, 0x37, 0x32, 0x6e, 0x6d, 0x73, 0x34, 0x35, 0x69, 0x7a, 0x34, 0x61, 0x6d, 0x39, 0x6a, 0x78, 0x61, 0x71, 0x38, 0x34, 0x68, 0x35, 0x73, 0x37, 0x70, 0x73, 0x6a, 0x67, 0x68, 0x35, 0x38, 0x33, 0x78, 0x7a, 0x74, 0x37, 0x74, 0x79, 0x63, 0x36, 0x73, 0x33, 0x37, 0x66, 0x67, 0x62, 0x78, 0x62, 0x6d, 0x76, 0x66, 0x63, 0x71, 0x74, 0x62, 0x6e, 0x7a, 0x6e, 0x68, 0x6d, 0x70, 0x62, 0x37, 0x6e, 0x72, 0x63, 0x36, 0x6e, 0x6d, 0x35, 0x37, 0x79, 0x38, 0x63, 0x65, 0x70, 0x7a, 0x65, 0x69, 0x66, 0x6e, 0x6a, 0x37, 0x33, 0x7a, 0x65, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x35, 0x76, 0x78, 0x75, 0x75, 0x79, 0x66, 0x35, 0x66, 0x79, 0x67, 0x6e, 0x36, 0x39, 0x37, 0x72, 0x6e, 0x37, 0x67, 0x66, 0x74, 0x79, 0x64, 0x68, 0x65, 0x64, 0x6e, 0x61, 0x64, 0x69, 0x32, 0x77, 0x7a, 0x35, 0x72, 0x35, 0x64, 0x77, 0x65, 0x66, 0x37, 0x63, 0x7a, 0x6d, 0x61, 0x77, 0x62, 0x74, 0x39, 0x71, 0x32, 0x66, 0x73, 0x32, 0x62, 0x67, 0x62, 0x66, 0x39, 0x68, 0x64, 0x72, 0x74, 0x30, 0x4c, 0x41, 0x7a, 0x75, 0x46, 0x39, 0x6c, 0x69, 0x4e, 0x74, 0x5a, 0x61, 0x33, 0x77, 0x00, 0x07, 0x83, 0x03, 0x56, 0xaa, 0x6f, 0x41, 0x6e, 0x64, 0x61, 0x66, 0x65, 0x32, 0x6d, 0x69, 0x38, 0x78, 0x64, 0x70, 0x72, 0x39, 0x36, 0x77, 0x39, 0x64, 0x6a, 0x6b, 0x36, 0x78, 0x70, 0x68, 0x78, 0x6d, 0x76, 0x34, 0x62, 0x34, 0x38, 0x73, 0x63, 0x7a, 0x72, 0x7a, 0x72, 0x71, 0x38, 0x6a, 0x35, 0x69, 0x71, 0x68, 0x78, 0x34, 0x36, 0x68}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimChildAccount
	}{
		{
			"no signatures",
			NewClaimChildAccount(
				claimchildaccountTarget,
				claimchildaccountChild,
				*claimchildaccountChildOwnership,
				*claimchildaccountChildSignature,
				[]signature.PublicKey{*claimchildaccountChildValidationKeys},
				// ChildValidationScript as b64: t0LAzuF9liNtZa3w
				[]byte{0xb7, 0x42, 0xc0, 0xce, 0xe1, 0x7d, 0x96, 0x23, 0x6d, 0x65, 0xad, 0xf0},
				2114375199125313,
			),
		},
		{
			"with signature",
			NewClaimChildAccount(
				claimchildaccountTarget,
				claimchildaccountChild,
				*claimchildaccountChildOwnership,
				*claimchildaccountChildSignature,
				[]signature.PublicKey{*claimchildaccountChildValidationKeys},
				// ChildValidationScript as b64: t0LAzuF9liNtZa3w
				[]byte{0xb7, 0x42, 0xc0, 0xce, 0xe1, 0x7d, 0x96, 0x23, 0x6d, 0x65, 0xad, 0xf0},
				2114375199125313,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
