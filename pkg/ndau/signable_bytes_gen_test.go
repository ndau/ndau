package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndajgqku9htejqq6k3r3ny6zwuwcpbyxydyrpjvbhxa3jgkr")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndafnm7nsx2t359dtmidnbr6hify8z9p2w2i8jckg24h2qup")
	require.NoError(t, err)

	// bmRhZm5tN25zeDJ0MzU5ZHRtaWRuYnI2aGlmeTh6OXAydzJpOGpja2cyNGgycXVwAAWCIQf8/70AApoPXz8aEm5kYWpncWt1OWh0ZWpxcTZrM3Izbnk2end1d2NwYnl4eWR5cnBqdmJoeGEzamdrcg==
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x6e, 0x6d, 0x37, 0x6e, 0x73, 0x78, 0x32, 0x74, 0x33, 0x35, 0x39, 0x64, 0x74, 0x6d, 0x69, 0x64, 0x6e, 0x62, 0x72, 0x36, 0x68, 0x69, 0x66, 0x79, 0x38, 0x7a, 0x39, 0x70, 0x32, 0x77, 0x32, 0x69, 0x38, 0x6a, 0x63, 0x6b, 0x67, 0x32, 0x34, 0x68, 0x32, 0x71, 0x75, 0x70, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x6a, 0x67, 0x71, 0x6b, 0x75, 0x39, 0x68, 0x74, 0x65, 0x6a, 0x71, 0x71, 0x36, 0x6b, 0x33, 0x72, 0x33, 0x6e, 0x79, 0x36, 0x7a, 0x77, 0x75, 0x77, 0x63, 0x70, 0x62, 0x79, 0x78, 0x79, 0x64, 0x79, 0x72, 0x70, 0x6a, 0x76, 0x62, 0x68, 0x78, 0x61, 0x33, 0x6a, 0x67, 0x6b, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndafyyuuq7zr59xzh2g3hxqhkh6f9e4rum9bsfsmx6fte3hh")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xfa, 0x19, 0xea, 0xce, 0x31, 0xd4, 0xea, 0xe7, 0x6b, 0xac, 0x5b, 0x1b, 0xbc, 0x63, 0xac, 0xe1, 0xf9, 0x64, 0x82, 0x81, 0x09, 0xb8, 0x1e, 0xa0, 0x3d, 0x4e, 0x83, 0x22, 0x24, 0xbd, 0xb9, 0xe9}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWQ3YnY0eXFnaGtxeDM1bXh0cHR6cmRkeHZzOXUzZWNzZWU1c2h4YWh4aGlnaXRlenk2OHZ6enBzOWg3bnl3NwAQTcdmlXTFbmRhZnl5dXVxN3pyNTl4emgyZzNoeHFoa2g2ZjllNHJ1bTlic2ZzbXg2ZnRlM2hoZ1Q0R0JJL2JlVkNsU01pVg==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x37, 0x62, 0x76, 0x34, 0x79, 0x71, 0x67, 0x68, 0x6b, 0x71, 0x78, 0x33, 0x35, 0x6d, 0x78, 0x74, 0x70, 0x74, 0x7a, 0x72, 0x64, 0x64, 0x78, 0x76, 0x73, 0x39, 0x75, 0x33, 0x65, 0x63, 0x73, 0x65, 0x65, 0x35, 0x73, 0x68, 0x78, 0x61, 0x68, 0x78, 0x68, 0x69, 0x67, 0x69, 0x74, 0x65, 0x7a, 0x79, 0x36, 0x38, 0x76, 0x7a, 0x7a, 0x70, 0x73, 0x39, 0x68, 0x37, 0x6e, 0x79, 0x77, 0x37, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x66, 0x79, 0x79, 0x75, 0x75, 0x71, 0x37, 0x7a, 0x72, 0x35, 0x39, 0x78, 0x7a, 0x68, 0x32, 0x67, 0x33, 0x68, 0x78, 0x71, 0x68, 0x6b, 0x68, 0x36, 0x66, 0x39, 0x65, 0x34, 0x72, 0x75, 0x6d, 0x39, 0x62, 0x73, 0x66, 0x73, 0x6d, 0x78, 0x36, 0x66, 0x74, 0x65, 0x33, 0x68, 0x68, 0x67, 0x54, 0x34, 0x47, 0x42, 0x49, 0x2f, 0x62, 0x65, 0x56, 0x43, 0x6c, 0x53, 0x4d, 0x69, 0x56}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: gT4GBI/beVClSMiV
				[]byte{0x81, 0x3e, 0x06, 0x04, 0x8f, 0xdb, 0x79, 0x50, 0xa5, 0x48, 0xc8, 0x95},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: gT4GBI/beVClSMiV
				[]byte{0x81, 0x3e, 0x06, 0x04, 0x8f, 0xdb, 0x79, 0x50, 0xa5, 0x48, 0xc8, 0x95},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndacij8snywrrbu6df59wsaw7hc98u9bc3myr8md9xt4jbyx")
	require.NoError(t, err)

	// bmRhY2lqOHNueXdycmJ1NmRmNTl3c2F3N2hjOTh1OWJjM215cjhtZDl4dDRqYnl4AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x69, 0x6a, 0x38, 0x73, 0x6e, 0x79, 0x77, 0x72, 0x72, 0x62, 0x75, 0x36, 0x64, 0x66, 0x35, 0x39, 0x77, 0x73, 0x61, 0x77, 0x37, 0x68, 0x63, 0x39, 0x38, 0x75, 0x39, 0x62, 0x63, 0x33, 0x6d, 0x79, 0x72, 0x38, 0x6d, 0x64, 0x39, 0x78, 0x74, 0x34, 0x6a, 0x62, 0x79, 0x78, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndae5z3wvafypi8yy5tfvrsxba6emcz5zatqnfcv7i9rr8y7")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFlNXozd3ZhZnlwaTh5eTV0ZnZyc3hiYTZlbWN6NXphdHFuZmN2N2k5cnI4eTc=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x65, 0x35, 0x7a, 0x33, 0x77, 0x76, 0x61, 0x66, 0x79, 0x70, 0x69, 0x38, 0x79, 0x79, 0x35, 0x74, 0x66, 0x76, 0x72, 0x73, 0x78, 0x62, 0x61, 0x36, 0x65, 0x6d, 0x63, 0x7a, 0x35, 0x7a, 0x61, 0x74, 0x71, 0x6e, 0x66, 0x63, 0x76, 0x37, 0x69, 0x39, 0x72, 0x72, 0x38, 0x79, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndarb64ii2ue7b5s4jvhrddea8s4rtquye36ne48dirtiid8")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaikqkecgejmft5bfiytmqirtff4idp4hdf7a8mw5xzeres")
	require.NoError(t, err)

	// bmRhaWtxa2VjZ2VqbWZ0NWJmaXl0bXFpcnRmZjRpZHA0aGRmN2E4bXc1eHplcmVzAAjSrCLE0zRuZGFyYjY0aWkydWU3YjVzNGp2aHJkZGVhOHM0cnRxdXllMzZuZTQ4ZGlydGlpZDg=
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x6b, 0x71, 0x6b, 0x65, 0x63, 0x67, 0x65, 0x6a, 0x6d, 0x66, 0x74, 0x35, 0x62, 0x66, 0x69, 0x79, 0x74, 0x6d, 0x71, 0x69, 0x72, 0x74, 0x66, 0x66, 0x34, 0x69, 0x64, 0x70, 0x34, 0x68, 0x64, 0x66, 0x37, 0x61, 0x38, 0x6d, 0x77, 0x35, 0x78, 0x7a, 0x65, 0x72, 0x65, 0x73, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x72, 0x62, 0x36, 0x34, 0x69, 0x69, 0x32, 0x75, 0x65, 0x37, 0x62, 0x35, 0x73, 0x34, 0x6a, 0x76, 0x68, 0x72, 0x64, 0x64, 0x65, 0x61, 0x38, 0x73, 0x34, 0x72, 0x74, 0x71, 0x75, 0x79, 0x65, 0x33, 0x36, 0x6e, 0x65, 0x34, 0x38, 0x64, 0x69, 0x72, 0x74, 0x69, 0x69, 0x64, 0x38}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndafyu9ynawv8gsws9sdq3y9vbzff39knvegcwtv4zude558")
	require.NoError(t, err)

	// bmRhZnl1OXluYXd2OGdzd3M5c2RxM3k5dmJ6ZmYzOWtudmVnY3d0djR6dWRlNTU4AAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x79, 0x75, 0x39, 0x79, 0x6e, 0x61, 0x77, 0x76, 0x38, 0x67, 0x73, 0x77, 0x73, 0x39, 0x73, 0x64, 0x71, 0x33, 0x79, 0x39, 0x76, 0x62, 0x7a, 0x66, 0x66, 0x33, 0x39, 0x6b, 0x6e, 0x76, 0x65, 0x67, 0x63, 0x77, 0x74, 0x76, 0x34, 0x7a, 0x75, 0x64, 0x65, 0x35, 0x35, 0x38, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndagqzjrphnn579drtdcr2eu783gprek9zth3yw6at5i53df")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhZ3F6anJwaG5uNTc5ZHJ0ZGNyMmV1NzgzZ3ByZWs5enRoM3l3NmF0NWk1M2Rm
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x67, 0x71, 0x7a, 0x6a, 0x72, 0x70, 0x68, 0x6e, 0x6e, 0x35, 0x37, 0x39, 0x64, 0x72, 0x74, 0x64, 0x63, 0x72, 0x32, 0x65, 0x75, 0x37, 0x38, 0x33, 0x67, 0x70, 0x72, 0x65, 0x6b, 0x39, 0x7a, 0x74, 0x68, 0x33, 0x79, 0x77, 0x36, 0x61, 0x74, 0x35, 0x69, 0x35, 0x33, 0x64, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndag2377pcjd3ajf8bkfympmqvtacsh2nzv874cnf7gd4fmm")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFnMjM3N3BjamQzYWpmOGJrZnltcG1xdnRhY3NoMm56djg3NGNuZjdnZDRmbW0=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x67, 0x32, 0x33, 0x37, 0x37, 0x70, 0x63, 0x6a, 0x64, 0x33, 0x61, 0x6a, 0x66, 0x38, 0x62, 0x6b, 0x66, 0x79, 0x6d, 0x70, 0x6d, 0x71, 0x76, 0x74, 0x61, 0x63, 0x73, 0x68, 0x32, 0x6e, 0x7a, 0x76, 0x38, 0x37, 0x34, 0x63, 0x6e, 0x66, 0x37, 0x67, 0x64, 0x34, 0x66, 0x6d, 0x6d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationSource, err := address.Validate("ndaem3m4vssgpxgf5yysxu7raqejp7xsrbpfiuwpn9r4gbbb")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndap6wc2z9kadqgxntqmkw3psae33bgj3pucw87z597ytrw2")
	require.NoError(t, err)

	// bmRhcDZ3YzJ6OWthZHFneG50cW1rdzNwc2FlMzNiZ2ozcHVjdzg3ejU5N3l0cncyAAz/orpRehFuZGFlbTNtNHZzc2dweGdmNXl5c3h1N3JhcWVqcDd4c3JicGZpdXdwbjlyNGdiYmI=
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x36, 0x77, 0x63, 0x32, 0x7a, 0x39, 0x6b, 0x61, 0x64, 0x71, 0x67, 0x78, 0x6e, 0x74, 0x71, 0x6d, 0x6b, 0x77, 0x33, 0x70, 0x73, 0x61, 0x65, 0x33, 0x33, 0x62, 0x67, 0x6a, 0x33, 0x70, 0x75, 0x63, 0x77, 0x38, 0x37, 0x7a, 0x35, 0x39, 0x37, 0x79, 0x74, 0x72, 0x77, 0x32, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x65, 0x6d, 0x33, 0x6d, 0x34, 0x76, 0x73, 0x73, 0x67, 0x70, 0x78, 0x67, 0x66, 0x35, 0x79, 0x79, 0x73, 0x78, 0x75, 0x37, 0x72, 0x61, 0x71, 0x65, 0x6a, 0x70, 0x37, 0x78, 0x73, 0x72, 0x62, 0x70, 0x66, 0x69, 0x75, 0x77, 0x70, 0x6e, 0x39, 0x72, 0x34, 0x67, 0x62, 0x62, 0x62}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationSource,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationSource,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndaje62dh3hn8hghsf4967n49tak9ecndzaihzft6tucediw")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xfe, 0xb2, 0xfb, 0x43, 0x6e, 0xfc, 0x3d, 0xeb, 0x25, 0x62, 0x34, 0x24, 0xaa, 0x80, 0xcf, 0x9b, 0xa5, 0xe3, 0x6d, 0x0e, 0x99, 0xc2, 0xb3, 0x7a, 0xc5, 0xa1, 0x08, 0x17, 0x5b, 0xdd, 0x8c, 0x58}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x43, 0x86, 0x32, 0x4f, 0x41, 0xb3, 0x2f, 0x74, 0xaf, 0x78, 0xa6, 0x05, 0xa3, 0x9a, 0x55, 0x0f, 0x11, 0x19, 0xd8, 0xac, 0xed, 0x14, 0xa4, 0x23, 0x42, 0xa0, 0xbf, 0x78, 0x04, 0x20, 0x4f, 0x5c}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWQ5bWY4NGRwNThkNTQzZm5pNGNqa3dhMzhwNG0yNXBiNG42Zm41NDJ5c3NzZjQ1NXlnZnNycGJxY3BkanVqYQAZX/GDxHNZbmRhamU2MmRoM2huOGhnaHNmNDk2N240OXRhazllY25kemFpaHpmdDZ0dWNlZGl3bnB1YmE4amFkdGJiZWJiMm5udXJpZzN1ODdmcnJjdmFtaTY0a3dodGNncTJ4dnl0ampiZGlrc204OGFlZWJoeDMyc3VnZmlwd3ByZTkzaUpPdzVBV1BLWHUyOW8=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x39, 0x6d, 0x66, 0x38, 0x34, 0x64, 0x70, 0x35, 0x38, 0x64, 0x35, 0x34, 0x33, 0x66, 0x6e, 0x69, 0x34, 0x63, 0x6a, 0x6b, 0x77, 0x61, 0x33, 0x38, 0x70, 0x34, 0x6d, 0x32, 0x35, 0x70, 0x62, 0x34, 0x6e, 0x36, 0x66, 0x6e, 0x35, 0x34, 0x32, 0x79, 0x73, 0x73, 0x73, 0x66, 0x34, 0x35, 0x35, 0x79, 0x67, 0x66, 0x73, 0x72, 0x70, 0x62, 0x71, 0x63, 0x70, 0x64, 0x6a, 0x75, 0x6a, 0x61, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x6a, 0x65, 0x36, 0x32, 0x64, 0x68, 0x33, 0x68, 0x6e, 0x38, 0x68, 0x67, 0x68, 0x73, 0x66, 0x34, 0x39, 0x36, 0x37, 0x6e, 0x34, 0x39, 0x74, 0x61, 0x6b, 0x39, 0x65, 0x63, 0x6e, 0x64, 0x7a, 0x61, 0x69, 0x68, 0x7a, 0x66, 0x74, 0x36, 0x74, 0x75, 0x63, 0x65, 0x64, 0x69, 0x77, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x62, 0x32, 0x6e, 0x6e, 0x75, 0x72, 0x69, 0x67, 0x33, 0x75, 0x38, 0x37, 0x66, 0x72, 0x72, 0x63, 0x76, 0x61, 0x6d, 0x69, 0x36, 0x34, 0x6b, 0x77, 0x68, 0x74, 0x63, 0x67, 0x71, 0x32, 0x78, 0x76, 0x79, 0x74, 0x6a, 0x6a, 0x62, 0x64, 0x69, 0x6b, 0x73, 0x6d, 0x38, 0x38, 0x61, 0x65, 0x65, 0x62, 0x68, 0x78, 0x33, 0x32, 0x73, 0x75, 0x67, 0x66, 0x69, 0x70, 0x77, 0x70, 0x72, 0x65, 0x39, 0x33, 0x69, 0x4a, 0x4f, 0x77, 0x35, 0x41, 0x57, 0x50, 0x4b, 0x58, 0x75, 0x32, 0x39, 0x6f}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: 93iJOw5AWPKXu29o
				[]byte{0xf7, 0x78, 0x89, 0x3b, 0x0e, 0x40, 0x58, 0xf2, 0x97, 0xbb, 0x6f, 0x68},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: 93iJOw5AWPKXu29o
				[]byte{0xf7, 0x78, 0x89, 0x3b, 0x0e, 0x40, 0x58, 0xf2, 0x97, 0xbb, 0x6f, 0x68},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndaijsgmt87sbc4bvjxvr7prbekipbpyknmrkae4v9sre79q")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndaqhzppg23nuk6qt9yrgsirr92zs4k9ec3z27as76s8k242")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFxaHpwcGcyM251azZxdDl5cmdzaXJyOTJ6czRrOWVjM3oyN2FzNzZzOGsyNDJuZGFpanNnbXQ4N3NiYzRidmp4dnI3cHJiZWtpcGJweWtubXJrYWU0djlzcmU3OXE=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x71, 0x68, 0x7a, 0x70, 0x70, 0x67, 0x32, 0x33, 0x6e, 0x75, 0x6b, 0x36, 0x71, 0x74, 0x39, 0x79, 0x72, 0x67, 0x73, 0x69, 0x72, 0x72, 0x39, 0x32, 0x7a, 0x73, 0x34, 0x6b, 0x39, 0x65, 0x63, 0x33, 0x7a, 0x32, 0x37, 0x61, 0x73, 0x37, 0x36, 0x73, 0x38, 0x6b, 0x32, 0x34, 0x32, 0x6e, 0x64, 0x61, 0x69, 0x6a, 0x73, 0x67, 0x6d, 0x74, 0x38, 0x37, 0x73, 0x62, 0x63, 0x34, 0x62, 0x76, 0x6a, 0x78, 0x76, 0x72, 0x37, 0x70, 0x72, 0x62, 0x65, 0x6b, 0x69, 0x70, 0x62, 0x70, 0x79, 0x6b, 0x6e, 0x6d, 0x72, 0x6b, 0x61, 0x65, 0x34, 0x76, 0x39, 0x73, 0x72, 0x65, 0x37, 0x39, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndag5fd36qxj22e2623mvge4rw5f6znyxzg8edmgd4evfb2j")
	require.NoError(t, err)

	// WjdBOTZIdHVuRjliYUFnZ25kYWc1ZmQzNnF4ajIyZTI2MjNtdmdlNHJ3NWY2em55eHpnOGVkbWdkNGV2ZmIyanN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x5a, 0x37, 0x41, 0x39, 0x36, 0x48, 0x74, 0x75, 0x6e, 0x46, 0x39, 0x62, 0x61, 0x41, 0x67, 0x67, 0x6e, 0x64, 0x61, 0x67, 0x35, 0x66, 0x64, 0x33, 0x36, 0x71, 0x78, 0x6a, 0x32, 0x32, 0x65, 0x32, 0x36, 0x32, 0x33, 0x6d, 0x76, 0x67, 0x65, 0x34, 0x72, 0x77, 0x35, 0x66, 0x36, 0x7a, 0x6e, 0x79, 0x78, 0x7a, 0x67, 0x38, 0x65, 0x64, 0x6d, 0x67, 0x64, 0x34, 0x65, 0x76, 0x66, 0x62, 0x32, 0x6a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: Z7A96HtunF9baAgg
				[]byte{0x67, 0xb0, 0x3d, 0xe8, 0x7b, 0x6e, 0x9c, 0x5f, 0x5b, 0x68, 0x08, 0x20},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: Z7A96HtunF9baAgg
				[]byte{0x67, 0xb0, 0x3d, 0xe8, 0x7b, 0x6e, 0x9c, 0x5f, 0x5b, 0x68, 0x08, 0x20},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndannrjqhe5sdc5ffbacss6h6vi28fbzpg3tbpgr6wsb53h2")
	require.NoError(t, err)

	// bmRhbm5yanFoZTVzZGM1ZmZiYWNzczZoNnZpMjhmYnpwZzN0YnBncjZ3c2I1M2gyAA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x6e, 0x72, 0x6a, 0x71, 0x68, 0x65, 0x35, 0x73, 0x64, 0x63, 0x35, 0x66, 0x66, 0x62, 0x61, 0x63, 0x73, 0x73, 0x36, 0x68, 0x36, 0x76, 0x69, 0x32, 0x38, 0x66, 0x62, 0x7a, 0x70, 0x67, 0x33, 0x74, 0x62, 0x70, 0x67, 0x72, 0x36, 0x77, 0x73, 0x62, 0x35, 0x33, 0x68, 0x32, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndabz277jx5g75apfr4k44gn936dr37m3nun9qt7q4i43pu7")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndarzcecy86twu66xxwsraz6yinpnyixqzqjs69wietutzrr")
	require.NoError(t, err)

	// bmRhcnpjZWN5ODZ0d3U2Nnh4d3NyYXo2eWlucG55aXhxenFqczY5d2lldHV0enJyMXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWJ6Mjc3ang1Zzc1YXBmcjRrNDRnbjkzNmRyMzdtM251bjlxdDdxNGk0M3B1Nw==
	expect := []byte{0x6e, 0x64, 0x61, 0x72, 0x7a, 0x63, 0x65, 0x63, 0x79, 0x38, 0x36, 0x74, 0x77, 0x75, 0x36, 0x36, 0x78, 0x78, 0x77, 0x73, 0x72, 0x61, 0x7a, 0x36, 0x79, 0x69, 0x6e, 0x70, 0x6e, 0x79, 0x69, 0x78, 0x71, 0x7a, 0x71, 0x6a, 0x73, 0x36, 0x39, 0x77, 0x69, 0x65, 0x74, 0x75, 0x74, 0x7a, 0x72, 0x72, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x62, 0x7a, 0x32, 0x37, 0x37, 0x6a, 0x78, 0x35, 0x67, 0x37, 0x35, 0x61, 0x70, 0x66, 0x72, 0x34, 0x6b, 0x34, 0x34, 0x67, 0x6e, 0x39, 0x33, 0x36, 0x64, 0x72, 0x33, 0x37, 0x6d, 0x33, 0x6e, 0x75, 0x6e, 0x39, 0x71, 0x74, 0x37, 0x71, 0x34, 0x69, 0x34, 0x33, 0x70, 0x75, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmotOK3o2aEZTYUtMMTFUdnp1AAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x4e, 0x2b, 0x7a, 0x36, 0x68, 0x46, 0x53, 0x61, 0x4b, 0x4c, 0x31, 0x31, 0x54, 0x76, 0x7a, 0x75, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: N+z6hFSaKL11Tvzu
				[]byte{0x37, 0xec, 0xfa, 0x84, 0x54, 0x9a, 0x28, 0xbd, 0x75, 0x4e, 0xfc, 0xee},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: N+z6hFSaKL11Tvzu
				[]byte{0x37, 0xec, 0xfa, 0x84, 0x54, 0x9a, 0x28, 0xbd, 0x75, 0x4e, 0xfc, 0xee},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSidechainTx_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	sidechaintxSource, err := address.Validate("ndagsdx4pgt8x5tqgktthz47cwtwbekegpim99pmfuctz796")
	require.NoError(t, err)
	sidechaintxSidechainSignatures, err := signature.RawSignature(signature.Ed25519, []byte{0xfb, 0x1d, 0x75, 0x7a, 0xea, 0x6c, 0x66, 0xee, 0x28, 0x8e, 0xcd, 0xa4, 0x26, 0x06, 0x9b, 0xb9, 0x7e, 0x2b, 0xca, 0x9d, 0x7e, 0x1a, 0x9b, 0xd6, 0x74, 0xec, 0xff, 0x8e, 0xb4, 0x71, 0x34, 0x78, 0xf5, 0x89, 0x0b, 0xec, 0x8f, 0x0d, 0x87, 0xb7, 0x7b, 0x47, 0x1d, 0x0d, 0x41, 0xc6, 0xb3, 0xf3, 0x77, 0x31, 0xa5, 0xc2, 0x0d, 0x86, 0x44, 0x55, 0x37, 0xa5, 0xbb, 0x09, 0x59, 0x57, 0xae, 0xc6})
	require.NoError(t, err)

	// AAJeEXA5N5cAAAAAAAAAMEpYT1BXYUp5L0o4NXFyQ2phNGphZHRjYTlucXprOHprcHR2cTZrZXEzeXVjbmJ3NXpmOWN6dXc3cjJwanp4dnc3djkyN3BkdGd0NnJtY2ltN3VoczViN3pycGR0NGRrYjI0MzlnNzN0d3piYTVidWVrdzU0bXEyam1mbTQ3dHo1dG1xOXV5dTVuZGFnc2R4NHBndDh4NXRxZ2t0dGh6NDdjd3R3YmVrZWdwaW05OXBtZnVjdHo3OTY=
	expect := []byte{0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x4a, 0x58, 0x4f, 0x50, 0x57, 0x61, 0x4a, 0x79, 0x2f, 0x4a, 0x38, 0x35, 0x71, 0x72, 0x43, 0x6a, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x39, 0x6e, 0x71, 0x7a, 0x6b, 0x38, 0x7a, 0x6b, 0x70, 0x74, 0x76, 0x71, 0x36, 0x6b, 0x65, 0x71, 0x33, 0x79, 0x75, 0x63, 0x6e, 0x62, 0x77, 0x35, 0x7a, 0x66, 0x39, 0x63, 0x7a, 0x75, 0x77, 0x37, 0x72, 0x32, 0x70, 0x6a, 0x7a, 0x78, 0x76, 0x77, 0x37, 0x76, 0x39, 0x32, 0x37, 0x70, 0x64, 0x74, 0x67, 0x74, 0x36, 0x72, 0x6d, 0x63, 0x69, 0x6d, 0x37, 0x75, 0x68, 0x73, 0x35, 0x62, 0x37, 0x7a, 0x72, 0x70, 0x64, 0x74, 0x34, 0x64, 0x6b, 0x62, 0x32, 0x34, 0x33, 0x39, 0x67, 0x37, 0x33, 0x74, 0x77, 0x7a, 0x62, 0x61, 0x35, 0x62, 0x75, 0x65, 0x6b, 0x77, 0x35, 0x34, 0x6d, 0x71, 0x32, 0x6a, 0x6d, 0x66, 0x6d, 0x34, 0x37, 0x74, 0x7a, 0x35, 0x74, 0x6d, 0x71, 0x39, 0x75, 0x79, 0x75, 0x35, 0x6e, 0x64, 0x61, 0x67, 0x73, 0x64, 0x78, 0x34, 0x70, 0x67, 0x74, 0x38, 0x78, 0x35, 0x74, 0x71, 0x67, 0x6b, 0x74, 0x74, 0x68, 0x7a, 0x34, 0x37, 0x63, 0x77, 0x74, 0x77, 0x62, 0x65, 0x6b, 0x65, 0x67, 0x70, 0x69, 0x6d, 0x39, 0x39, 0x70, 0x6d, 0x66, 0x75, 0x63, 0x74, 0x7a, 0x37, 0x39, 0x36}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SidechainTx
	}{
		{
			"no signatures",
			NewSidechainTx(
				sidechaintxSource,
				48,
				// SidechainSignableBytes as b64: JXOPWaJy/J85qrCj
				[]byte{0x25, 0x73, 0x8f, 0x59, 0xa2, 0x72, 0xfc, 0x9f, 0x39, 0xaa, 0xb0, 0xa3},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
			),
		},
		{
			"with signature",
			NewSidechainTx(
				sidechaintxSource,
				48,
				// SidechainSignableBytes as b64: JXOPWaJy/J85qrCj
				[]byte{0x25, 0x73, 0x8f, 0x59, 0xa2, 0x72, 0xfc, 0x9f, 0x39, 0xaa, 0xb0, 0xa3},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndah8iznxx74tund254cg6iyfq62nvnx6juybenre4nenzmz")
	require.NoError(t, err)

	// bmRhaDhpem54eDc0dHVuZDI1NGNnNml5ZnE2Mm52bng2anV5YmVucmU0bmVuem16ABP6yCVBcNA=
	expect := []byte{0x6e, 0x64, 0x61, 0x68, 0x38, 0x69, 0x7a, 0x6e, 0x78, 0x78, 0x37, 0x34, 0x74, 0x75, 0x6e, 0x64, 0x32, 0x35, 0x34, 0x63, 0x67, 0x36, 0x69, 0x79, 0x66, 0x71, 0x36, 0x32, 0x6e, 0x76, 0x6e, 0x78, 0x36, 0x6a, 0x75, 0x79, 0x62, 0x65, 0x6e, 0x72, 0x65, 0x34, 0x6e, 0x65, 0x6e, 0x7a, 0x6d, 0x7a, 0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndaahak6sezpnup3g8kdq4k896enbrcaejaxkuy74q3v3t8u")
	require.NoError(t, err)

	// AA2S+t7X5spuZGFhaGFrNnNlenBudXAzZzhrZHE0azg5NmVuYnJjYWVqYXhrdXk3NHEzdjN0OHU=
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x6e, 0x64, 0x61, 0x61, 0x68, 0x61, 0x6b, 0x36, 0x73, 0x65, 0x7a, 0x70, 0x6e, 0x75, 0x70, 0x33, 0x67, 0x38, 0x6b, 0x64, 0x71, 0x34, 0x6b, 0x38, 0x39, 0x36, 0x65, 0x6e, 0x62, 0x72, 0x63, 0x61, 0x65, 0x6a, 0x61, 0x78, 0x6b, 0x75, 0x79, 0x37, 0x34, 0x71, 0x33, 0x76, 0x33, 0x74, 0x38, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAn3Z2Z46KEAH/erJE/OdA==
	expect := []byte{0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1, 0x00, 0x1f, 0xf7, 0xab, 0x24, 0x4f, 0xce, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2805298263287969,
				8998038698708596,
			),
		},
		{
			"with signature",
			NewIssue(
				2805298263287969,
				8998038698708596,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
