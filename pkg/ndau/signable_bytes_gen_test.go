package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndagyyi2j6mwn46z64utwg2xm62skgsh7f4zkpi57mp85trn")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndakuqtxdfgis9m76kay7vhxmfmbdt6p7m4qdabpedkajktk")
	require.NoError(t, err)

	// bmRha3VxdHhkZmdpczltNzZrYXk3dmh4bWZtYmR0NnA3bTRxZGFicGVka2Fqa3RrAAWCIQf8/70AApoPXz8aEm5kYWd5eWkyajZtd240Nno2NHV0d2cyeG02MnNrZ3NoN2Y0emtwaTU3bXA4NXRybg==
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x75, 0x71, 0x74, 0x78, 0x64, 0x66, 0x67, 0x69, 0x73, 0x39, 0x6d, 0x37, 0x36, 0x6b, 0x61, 0x79, 0x37, 0x76, 0x68, 0x78, 0x6d, 0x66, 0x6d, 0x62, 0x64, 0x74, 0x36, 0x70, 0x37, 0x6d, 0x34, 0x71, 0x64, 0x61, 0x62, 0x70, 0x65, 0x64, 0x6b, 0x61, 0x6a, 0x6b, 0x74, 0x6b, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x67, 0x79, 0x79, 0x69, 0x32, 0x6a, 0x36, 0x6d, 0x77, 0x6e, 0x34, 0x36, 0x7a, 0x36, 0x34, 0x75, 0x74, 0x77, 0x67, 0x32, 0x78, 0x6d, 0x36, 0x32, 0x73, 0x6b, 0x67, 0x73, 0x68, 0x37, 0x66, 0x34, 0x7a, 0x6b, 0x70, 0x69, 0x35, 0x37, 0x6d, 0x70, 0x38, 0x35, 0x74, 0x72, 0x6e}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndaqmpxbzjksfy2uuqzchivc96snuhr9ahmtjhm3j2rqijtv")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xaa, 0xfe, 0x96, 0x4f, 0x09, 0x94, 0xbc, 0x34, 0x17, 0x52, 0x51, 0x3f, 0xcb, 0x9e, 0x97, 0xe6, 0x74, 0xb7, 0x16, 0x7a, 0xbc, 0x13, 0xc0, 0xfe, 0x8a, 0xb9, 0xc7, 0xfc, 0xd9, 0xaa, 0x9c, 0x42}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWN4cjdmdXJiZ2ttMnBhemtqaXY5dTY4dTl2aGpwMnlyazhiaHNoOHRrNjZyOWczeGtxZWY1YjkzbmVnZHBmbgAQTcdmlXTFbmRhcW1weGJ6amtzZnkydXVxemNoaXZjOTZzbnVocjlhaG10amhtM2oycnFpanR2dEhyUWM0dmdMZ1hwOWExdA==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x78, 0x72, 0x37, 0x66, 0x75, 0x72, 0x62, 0x67, 0x6b, 0x6d, 0x32, 0x70, 0x61, 0x7a, 0x6b, 0x6a, 0x69, 0x76, 0x39, 0x75, 0x36, 0x38, 0x75, 0x39, 0x76, 0x68, 0x6a, 0x70, 0x32, 0x79, 0x72, 0x6b, 0x38, 0x62, 0x68, 0x73, 0x68, 0x38, 0x74, 0x6b, 0x36, 0x36, 0x72, 0x39, 0x67, 0x33, 0x78, 0x6b, 0x71, 0x65, 0x66, 0x35, 0x62, 0x39, 0x33, 0x6e, 0x65, 0x67, 0x64, 0x70, 0x66, 0x6e, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x71, 0x6d, 0x70, 0x78, 0x62, 0x7a, 0x6a, 0x6b, 0x73, 0x66, 0x79, 0x32, 0x75, 0x75, 0x71, 0x7a, 0x63, 0x68, 0x69, 0x76, 0x63, 0x39, 0x36, 0x73, 0x6e, 0x75, 0x68, 0x72, 0x39, 0x61, 0x68, 0x6d, 0x74, 0x6a, 0x68, 0x6d, 0x33, 0x6a, 0x32, 0x72, 0x71, 0x69, 0x6a, 0x74, 0x76, 0x74, 0x48, 0x72, 0x51, 0x63, 0x34, 0x76, 0x67, 0x4c, 0x67, 0x58, 0x70, 0x39, 0x61, 0x31, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: tHrQc4vgLgXp9a1t
				[]byte{0xb4, 0x7a, 0xd0, 0x73, 0x8b, 0xe0, 0x2e, 0x05, 0xe9, 0xf5, 0xad, 0x6d},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: tHrQc4vgLgXp9a1t
				[]byte{0xb4, 0x7a, 0xd0, 0x73, 0x8b, 0xe0, 0x2e, 0x05, 0xe9, 0xf5, 0xad, 0x6d},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndanbvgne693x3bf47kiy5wqakbitqhc9qfcejje5s27b2qu")
	require.NoError(t, err)

	// bmRhbmJ2Z25lNjkzeDNiZjQ3a2l5NXdxYWtiaXRxaGM5cWZjZWpqZTVzMjdiMnF1AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x62, 0x76, 0x67, 0x6e, 0x65, 0x36, 0x39, 0x33, 0x78, 0x33, 0x62, 0x66, 0x34, 0x37, 0x6b, 0x69, 0x79, 0x35, 0x77, 0x71, 0x61, 0x6b, 0x62, 0x69, 0x74, 0x71, 0x68, 0x63, 0x39, 0x71, 0x66, 0x63, 0x65, 0x6a, 0x6a, 0x65, 0x35, 0x73, 0x32, 0x37, 0x62, 0x32, 0x71, 0x75, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndaqzbyzs5r87zmbibr7j7u72ruk5773vxbiat78ts2u329r")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFxemJ5enM1cjg3em1iaWJyN2o3dTcycnVrNTc3M3Z4YmlhdDc4dHMydTMyOXI=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x71, 0x7a, 0x62, 0x79, 0x7a, 0x73, 0x35, 0x72, 0x38, 0x37, 0x7a, 0x6d, 0x62, 0x69, 0x62, 0x72, 0x37, 0x6a, 0x37, 0x75, 0x37, 0x32, 0x72, 0x75, 0x6b, 0x35, 0x37, 0x37, 0x33, 0x76, 0x78, 0x62, 0x69, 0x61, 0x74, 0x37, 0x38, 0x74, 0x73, 0x32, 0x75, 0x33, 0x32, 0x39, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndah4fundqm4kt8p5jifmmusacxx93tzywrn229s8q3hqe4r")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaatuk8khrerv9b9x3izucwy94ar3ak9r6wufqe33uzzsd6")
	require.NoError(t, err)

	// bmRhYXR1azhraHJlcnY5Yjl4M2l6dWN3eTk0YXIzYWs5cjZ3dWZxZTMzdXp6c2Q2AAjSrCLE0zRuZGFoNGZ1bmRxbTRrdDhwNWppZm1tdXNhY3h4OTN0enl3cm4yMjlzOHEzaHFlNHI=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x74, 0x75, 0x6b, 0x38, 0x6b, 0x68, 0x72, 0x65, 0x72, 0x76, 0x39, 0x62, 0x39, 0x78, 0x33, 0x69, 0x7a, 0x75, 0x63, 0x77, 0x79, 0x39, 0x34, 0x61, 0x72, 0x33, 0x61, 0x6b, 0x39, 0x72, 0x36, 0x77, 0x75, 0x66, 0x71, 0x65, 0x33, 0x33, 0x75, 0x7a, 0x7a, 0x73, 0x64, 0x36, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x68, 0x34, 0x66, 0x75, 0x6e, 0x64, 0x71, 0x6d, 0x34, 0x6b, 0x74, 0x38, 0x70, 0x35, 0x6a, 0x69, 0x66, 0x6d, 0x6d, 0x75, 0x73, 0x61, 0x63, 0x78, 0x78, 0x39, 0x33, 0x74, 0x7a, 0x79, 0x77, 0x72, 0x6e, 0x32, 0x32, 0x39, 0x73, 0x38, 0x71, 0x33, 0x68, 0x71, 0x65, 0x34, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndab463fasyfqcdi64v7ecqgd7gtjfxqydddjpb5umgxn9vj")
	require.NoError(t, err)

	// bmRhYjQ2M2Zhc3lmcWNkaTY0djdlY3FnZDdndGpmeHF5ZGRkanBiNXVtZ3huOXZqAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x62, 0x34, 0x36, 0x33, 0x66, 0x61, 0x73, 0x79, 0x66, 0x71, 0x63, 0x64, 0x69, 0x36, 0x34, 0x76, 0x37, 0x65, 0x63, 0x71, 0x67, 0x64, 0x37, 0x67, 0x74, 0x6a, 0x66, 0x78, 0x71, 0x79, 0x64, 0x64, 0x64, 0x6a, 0x70, 0x62, 0x35, 0x75, 0x6d, 0x67, 0x78, 0x6e, 0x39, 0x76, 0x6a, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndaf45giegwy37iy36333qqumtkwzb43tvummcauysc78qvq")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhZjQ1Z2llZ3d5MzdpeTM2MzMzcXF1bXRrd3piNDN0dnVtbWNhdXlzYzc4cXZx
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x66, 0x34, 0x35, 0x67, 0x69, 0x65, 0x67, 0x77, 0x79, 0x33, 0x37, 0x69, 0x79, 0x33, 0x36, 0x33, 0x33, 0x33, 0x71, 0x71, 0x75, 0x6d, 0x74, 0x6b, 0x77, 0x7a, 0x62, 0x34, 0x33, 0x74, 0x76, 0x75, 0x6d, 0x6d, 0x63, 0x61, 0x75, 0x79, 0x73, 0x63, 0x37, 0x38, 0x71, 0x76, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndadsb5dwaj8qqyuduqd5kim9qfa728efh55tfvxtfxvehz2")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFkc2I1ZHdhajhxcXl1ZHVxZDVraW05cWZhNzI4ZWZoNTV0ZnZ4dGZ4dmVoejI=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x64, 0x73, 0x62, 0x35, 0x64, 0x77, 0x61, 0x6a, 0x38, 0x71, 0x71, 0x79, 0x75, 0x64, 0x75, 0x71, 0x64, 0x35, 0x6b, 0x69, 0x6d, 0x39, 0x71, 0x66, 0x61, 0x37, 0x32, 0x38, 0x65, 0x66, 0x68, 0x35, 0x35, 0x74, 0x66, 0x76, 0x78, 0x74, 0x66, 0x78, 0x76, 0x65, 0x68, 0x7a, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationSource, err := address.Validate("ndae39hcb6j7qz9xwbsrzmc83e6phzpe7jyk6hqqsk37zzjr")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndaj47w37xvkffd7q58yfsqu2nu9mgh5qtb984gags8ikxf5")
	require.NoError(t, err)

	// bmRhajQ3dzM3eHZrZmZkN3E1OHlmc3F1Mm51OW1naDVxdGI5ODRnYWdzOGlreGY1AAz/orpRehFuZGFlMzloY2I2ajdxejl4d2JzcnptYzgzZTZwaHpwZTdqeWs2aHFxc2szN3p6anI=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x34, 0x37, 0x77, 0x33, 0x37, 0x78, 0x76, 0x6b, 0x66, 0x66, 0x64, 0x37, 0x71, 0x35, 0x38, 0x79, 0x66, 0x73, 0x71, 0x75, 0x32, 0x6e, 0x75, 0x39, 0x6d, 0x67, 0x68, 0x35, 0x71, 0x74, 0x62, 0x39, 0x38, 0x34, 0x67, 0x61, 0x67, 0x73, 0x38, 0x69, 0x6b, 0x78, 0x66, 0x35, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x65, 0x33, 0x39, 0x68, 0x63, 0x62, 0x36, 0x6a, 0x37, 0x71, 0x7a, 0x39, 0x78, 0x77, 0x62, 0x73, 0x72, 0x7a, 0x6d, 0x63, 0x38, 0x33, 0x65, 0x36, 0x70, 0x68, 0x7a, 0x70, 0x65, 0x37, 0x6a, 0x79, 0x6b, 0x36, 0x68, 0x71, 0x71, 0x73, 0x6b, 0x33, 0x37, 0x7a, 0x7a, 0x6a, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationSource,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationSource,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndak8zg27gt59pjxcaeudqjv4p87ygj3ae7znxwth8b5izmh")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x79, 0xe6, 0x73, 0x65, 0x68, 0xf1, 0xd0, 0x8c, 0x4b, 0x0d, 0xf6, 0xc0, 0x00, 0x26, 0x61, 0x47, 0x3c, 0xa5, 0x0b, 0x46, 0xcf, 0x7a, 0xc7, 0x34, 0x28, 0x64, 0x39, 0xa3, 0x31, 0x8a, 0xff, 0x90}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x5a, 0xd3, 0x35, 0xce, 0x38, 0xf5, 0x73, 0xa7, 0x47, 0xb7, 0x3d, 0x10, 0x64, 0x11, 0xb7, 0x06, 0x7a, 0xe3, 0xca, 0x5b, 0x8e, 0xa8, 0x8f, 0xa1, 0x2b, 0x46, 0xaf, 0xf3, 0x02, 0xa1, 0x9a, 0xe7}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWI2OG42NWZwZDI3YmRjbWJ6NW5hYWJnbmZkdjNqaW1pNWh6eHQzd2ZidWR2aTN0dG05M2F0aTloMmR3cXk4aAAZX/GDxHNZbmRhazh6ZzI3Z3Q1OXBqeGNhZXVkcWp2NHA4N3lnajNhZTd6bnh3dGg4YjVpem1obnB1YmE4amFkdGJiZWJwcGdwcXFoZDR6aGo0aHk2OHRhM2F0eTZkaHgyOGttcWhrdGQ3YmZwZGs5NjJjd2dwcXEyeDR3eXBjems2Y25meGIxVWNmd1JxT3JuWmE=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x36, 0x38, 0x6e, 0x36, 0x35, 0x66, 0x70, 0x64, 0x32, 0x37, 0x62, 0x64, 0x63, 0x6d, 0x62, 0x7a, 0x35, 0x6e, 0x61, 0x61, 0x62, 0x67, 0x6e, 0x66, 0x64, 0x76, 0x33, 0x6a, 0x69, 0x6d, 0x69, 0x35, 0x68, 0x7a, 0x78, 0x74, 0x33, 0x77, 0x66, 0x62, 0x75, 0x64, 0x76, 0x69, 0x33, 0x74, 0x74, 0x6d, 0x39, 0x33, 0x61, 0x74, 0x69, 0x39, 0x68, 0x32, 0x64, 0x77, 0x71, 0x79, 0x38, 0x68, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x6b, 0x38, 0x7a, 0x67, 0x32, 0x37, 0x67, 0x74, 0x35, 0x39, 0x70, 0x6a, 0x78, 0x63, 0x61, 0x65, 0x75, 0x64, 0x71, 0x6a, 0x76, 0x34, 0x70, 0x38, 0x37, 0x79, 0x67, 0x6a, 0x33, 0x61, 0x65, 0x37, 0x7a, 0x6e, 0x78, 0x77, 0x74, 0x68, 0x38, 0x62, 0x35, 0x69, 0x7a, 0x6d, 0x68, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x70, 0x70, 0x67, 0x70, 0x71, 0x71, 0x68, 0x64, 0x34, 0x7a, 0x68, 0x6a, 0x34, 0x68, 0x79, 0x36, 0x38, 0x74, 0x61, 0x33, 0x61, 0x74, 0x79, 0x36, 0x64, 0x68, 0x78, 0x32, 0x38, 0x6b, 0x6d, 0x71, 0x68, 0x6b, 0x74, 0x64, 0x37, 0x62, 0x66, 0x70, 0x64, 0x6b, 0x39, 0x36, 0x32, 0x63, 0x77, 0x67, 0x70, 0x71, 0x71, 0x32, 0x78, 0x34, 0x77, 0x79, 0x70, 0x63, 0x7a, 0x6b, 0x36, 0x63, 0x6e, 0x66, 0x78, 0x62, 0x31, 0x55, 0x63, 0x66, 0x77, 0x52, 0x71, 0x4f, 0x72, 0x6e, 0x5a, 0x61}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: nfxb1UcfwRqOrnZa
				[]byte{0x9d, 0xfc, 0x5b, 0xd5, 0x47, 0x1f, 0xc1, 0x1a, 0x8e, 0xae, 0x76, 0x5a},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: nfxb1UcfwRqOrnZa
				[]byte{0x9d, 0xfc, 0x5b, 0xd5, 0x47, 0x1f, 0xc1, 0x1a, 0x8e, 0xae, 0x76, 0x5a},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndamgrc4xgcs6jahmwccstiqsib8wvifk2wsignyze3959k5")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndaqwfy658mikjkytxyu64n49t57urmifw35b2adxmueuej8")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFxd2Z5NjU4bWlramt5dHh5dTY0bjQ5dDU3dXJtaWZ3MzViMmFkeG11ZXVlajhuZGFtZ3JjNHhnY3M2amFobXdjY3N0aXFzaWI4d3ZpZmsyd3NpZ255emUzOTU5azU=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x71, 0x77, 0x66, 0x79, 0x36, 0x35, 0x38, 0x6d, 0x69, 0x6b, 0x6a, 0x6b, 0x79, 0x74, 0x78, 0x79, 0x75, 0x36, 0x34, 0x6e, 0x34, 0x39, 0x74, 0x35, 0x37, 0x75, 0x72, 0x6d, 0x69, 0x66, 0x77, 0x33, 0x35, 0x62, 0x32, 0x61, 0x64, 0x78, 0x6d, 0x75, 0x65, 0x75, 0x65, 0x6a, 0x38, 0x6e, 0x64, 0x61, 0x6d, 0x67, 0x72, 0x63, 0x34, 0x78, 0x67, 0x63, 0x73, 0x36, 0x6a, 0x61, 0x68, 0x6d, 0x77, 0x63, 0x63, 0x73, 0x74, 0x69, 0x71, 0x73, 0x69, 0x62, 0x38, 0x77, 0x76, 0x69, 0x66, 0x6b, 0x32, 0x77, 0x73, 0x69, 0x67, 0x6e, 0x79, 0x7a, 0x65, 0x33, 0x39, 0x35, 0x39, 0x6b, 0x35}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndagngn5ems9qduimrx2r59csutuaiv3ffqffs794jyz2dq5")
	require.NoError(t, err)

	// c2dsL2NnZTQvMVQ3WmRieG5kYWduZ241ZW1zOXFkdWltcngycjU5Y3N1dHVhaXYzZmZxZmZzNzk0anl6MmRxNXN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x73, 0x67, 0x6c, 0x2f, 0x63, 0x67, 0x65, 0x34, 0x2f, 0x31, 0x54, 0x37, 0x5a, 0x64, 0x62, 0x78, 0x6e, 0x64, 0x61, 0x67, 0x6e, 0x67, 0x6e, 0x35, 0x65, 0x6d, 0x73, 0x39, 0x71, 0x64, 0x75, 0x69, 0x6d, 0x72, 0x78, 0x32, 0x72, 0x35, 0x39, 0x63, 0x73, 0x75, 0x74, 0x75, 0x61, 0x69, 0x76, 0x33, 0x66, 0x66, 0x71, 0x66, 0x66, 0x73, 0x37, 0x39, 0x34, 0x6a, 0x79, 0x7a, 0x32, 0x64, 0x71, 0x35, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: sgl/cge4/1T7Zdbx
				[]byte{0xb2, 0x09, 0x7f, 0x72, 0x07, 0xb8, 0xff, 0x54, 0xfb, 0x65, 0xd6, 0xf1},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: sgl/cge4/1T7Zdbx
				[]byte{0xb2, 0x09, 0x7f, 0x72, 0x07, 0xb8, 0xff, 0x54, 0xfb, 0x65, 0xd6, 0xf1},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndaa63vqdz3ecyuubadipsn6g26y5w2iphi9e3ygbyniaujz")
	require.NoError(t, err)

	// bmRhYTYzdnFkejNlY3l1dWJhZGlwc242ZzI2eTV3MmlwaGk5ZTN5Z2J5bmlhdWp6AA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x36, 0x33, 0x76, 0x71, 0x64, 0x7a, 0x33, 0x65, 0x63, 0x79, 0x75, 0x75, 0x62, 0x61, 0x64, 0x69, 0x70, 0x73, 0x6e, 0x36, 0x67, 0x32, 0x36, 0x79, 0x35, 0x77, 0x32, 0x69, 0x70, 0x68, 0x69, 0x39, 0x65, 0x33, 0x79, 0x67, 0x62, 0x79, 0x6e, 0x69, 0x61, 0x75, 0x6a, 0x7a, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndahgyrf4gwpd9xhbzx3v4t9cuns4c5uq32cftxjni27auh6")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndaqdfp3temzbpmi25fr4jvxck3z45gfj39gqumm7e2qnemu")
	require.NoError(t, err)

	// bmRhcWRmcDN0ZW16YnBtaTI1ZnI0anZ4Y2szejQ1Z2ZqMzlncXVtbTdlMnFuZW11MXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWhneXJmNGd3cGQ5eGhiengzdjR0OWN1bnM0YzV1cTMyY2Z0eGpuaTI3YXVoNg==
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x64, 0x66, 0x70, 0x33, 0x74, 0x65, 0x6d, 0x7a, 0x62, 0x70, 0x6d, 0x69, 0x32, 0x35, 0x66, 0x72, 0x34, 0x6a, 0x76, 0x78, 0x63, 0x6b, 0x33, 0x7a, 0x34, 0x35, 0x67, 0x66, 0x6a, 0x33, 0x39, 0x67, 0x71, 0x75, 0x6d, 0x6d, 0x37, 0x65, 0x32, 0x71, 0x6e, 0x65, 0x6d, 0x75, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x68, 0x67, 0x79, 0x72, 0x66, 0x34, 0x67, 0x77, 0x70, 0x64, 0x39, 0x78, 0x68, 0x62, 0x7a, 0x78, 0x33, 0x76, 0x34, 0x74, 0x39, 0x63, 0x75, 0x6e, 0x73, 0x34, 0x63, 0x35, 0x75, 0x71, 0x33, 0x32, 0x63, 0x66, 0x74, 0x78, 0x6a, 0x6e, 0x69, 0x32, 0x37, 0x61, 0x75, 0x68, 0x36}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmotWL0JPOEVzRGltdzJCbzlJAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x56, 0x2f, 0x42, 0x4f, 0x38, 0x45, 0x73, 0x44, 0x69, 0x6d, 0x77, 0x32, 0x42, 0x6f, 0x39, 0x49, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: V/BO8EsDimw2Bo9I
				[]byte{0x57, 0xf0, 0x4e, 0xf0, 0x4b, 0x03, 0x8a, 0x6c, 0x36, 0x06, 0x8f, 0x48},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: V/BO8EsDimw2Bo9I
				[]byte{0x57, 0xf0, 0x4e, 0xf0, 0x4b, 0x03, 0x8a, 0x6c, 0x36, 0x06, 0x8f, 0x48},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSidechainTx_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	sidechaintxSource, err := address.Validate("ndagtwjrybyvwnh44akzd484483t482aexxhf9agj928jb3w")
	require.NoError(t, err)
	sidechaintxSidechainSignatures, err := signature.RawSignature(signature.Ed25519, []byte{0x3d, 0x88, 0xae, 0xbb, 0xd9, 0x38, 0x67, 0x10, 0x6f, 0xad, 0xa4, 0x74, 0xa4, 0x89, 0xb3, 0xd9, 0xb6, 0xff, 0x79, 0xd9, 0x08, 0xe7, 0x0b, 0x30, 0x0e, 0x57, 0x0c, 0x95, 0xf5, 0x7f, 0x3a, 0x1d, 0xe9, 0x47, 0x63, 0xd3, 0x6b, 0xec, 0xb4, 0x03, 0x78, 0x8e, 0xfa, 0x54, 0xf4, 0x5f, 0x1a, 0x31, 0x1f, 0xbf, 0x85, 0xef, 0xc3, 0x16, 0xf6, 0x46, 0x71, 0xc4, 0xa8, 0x0d, 0x5e, 0x4a, 0x1e, 0xea})
	require.NoError(t, err)

	// AAJeEXA5N5cAAAAAAAAABHJYZkplK21KZXRuenBtbFNhNGphZHRjYWh5ZWs3cTgzaGJ2dGE1N3B3dDRramNwdjVnNXI4OHEzYmR2c3luYXFrNmdqbTdtOWhpcTh1dDVkNHB4ODNwYWRyY2hyd3hod202cGRjaDc5c3p6NmdmenlpMzI2amthcG0zZmI3NHd1am5peG5hNWRuZGFndHdqcnlieXZ3bmg0NGFremQ0ODQ0ODN0NDgyYWV4eGhmOWFnajkyOGpiM3c=
	expect := []byte{0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x72, 0x58, 0x66, 0x4a, 0x65, 0x2b, 0x6d, 0x4a, 0x65, 0x74, 0x6e, 0x7a, 0x70, 0x6d, 0x6c, 0x53, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x68, 0x79, 0x65, 0x6b, 0x37, 0x71, 0x38, 0x33, 0x68, 0x62, 0x76, 0x74, 0x61, 0x35, 0x37, 0x70, 0x77, 0x74, 0x34, 0x6b, 0x6a, 0x63, 0x70, 0x76, 0x35, 0x67, 0x35, 0x72, 0x38, 0x38, 0x71, 0x33, 0x62, 0x64, 0x76, 0x73, 0x79, 0x6e, 0x61, 0x71, 0x6b, 0x36, 0x67, 0x6a, 0x6d, 0x37, 0x6d, 0x39, 0x68, 0x69, 0x71, 0x38, 0x75, 0x74, 0x35, 0x64, 0x34, 0x70, 0x78, 0x38, 0x33, 0x70, 0x61, 0x64, 0x72, 0x63, 0x68, 0x72, 0x77, 0x78, 0x68, 0x77, 0x6d, 0x36, 0x70, 0x64, 0x63, 0x68, 0x37, 0x39, 0x73, 0x7a, 0x7a, 0x36, 0x67, 0x66, 0x7a, 0x79, 0x69, 0x33, 0x32, 0x36, 0x6a, 0x6b, 0x61, 0x70, 0x6d, 0x33, 0x66, 0x62, 0x37, 0x34, 0x77, 0x75, 0x6a, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x35, 0x64, 0x6e, 0x64, 0x61, 0x67, 0x74, 0x77, 0x6a, 0x72, 0x79, 0x62, 0x79, 0x76, 0x77, 0x6e, 0x68, 0x34, 0x34, 0x61, 0x6b, 0x7a, 0x64, 0x34, 0x38, 0x34, 0x34, 0x38, 0x33, 0x74, 0x34, 0x38, 0x32, 0x61, 0x65, 0x78, 0x78, 0x68, 0x66, 0x39, 0x61, 0x67, 0x6a, 0x39, 0x32, 0x38, 0x6a, 0x62, 0x33, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SidechainTx
	}{
		{
			"no signatures",
			NewSidechainTx(
				sidechaintxSource,
				4,
				// SidechainSignableBytes as b64: rXfJe+mJetnzpmlS
				[]byte{0xad, 0x77, 0xc9, 0x7b, 0xe9, 0x89, 0x7a, 0xd9, 0xf3, 0xa6, 0x69, 0x52},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
			),
		},
		{
			"with signature",
			NewSidechainTx(
				sidechaintxSource,
				4,
				// SidechainSignableBytes as b64: rXfJe+mJetnzpmlS
				[]byte{0xad, 0x77, 0xc9, 0x7b, 0xe9, 0x89, 0x7a, 0xd9, 0xf3, 0xa6, 0x69, 0x52},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndak8k5knzapcryimz24m7y4xfd4ydn3ihcc2ift39wcs7fn")
	require.NoError(t, err)

	// bmRhazhrNWtuemFwY3J5aW16MjRtN3k0eGZkNHlkbjNpaGNjMmlmdDM5d2NzN2ZuABP6yCVBcNA=
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x38, 0x6b, 0x35, 0x6b, 0x6e, 0x7a, 0x61, 0x70, 0x63, 0x72, 0x79, 0x69, 0x6d, 0x7a, 0x32, 0x34, 0x6d, 0x37, 0x79, 0x34, 0x78, 0x66, 0x64, 0x34, 0x79, 0x64, 0x6e, 0x33, 0x69, 0x68, 0x63, 0x63, 0x32, 0x69, 0x66, 0x74, 0x33, 0x39, 0x77, 0x63, 0x73, 0x37, 0x66, 0x6e, 0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
