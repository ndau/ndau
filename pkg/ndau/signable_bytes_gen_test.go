package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndacx83aq89i278rq6i7vhvs3j9rswq3k2pdt9c84vfqiage")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndad79weu32bpg5y4ehqgde3ij3vib8vmfhs3kr5j66upu6t")
	require.NoError(t, err)

	// bmRhZDc5d2V1MzJicGc1eTRlaHFnZGUzaWozdmliOHZtZmhzM2tyNWo2NnVwdTZ0AAWCIQf8/70AApoPXz8aEm5kYWN4ODNhcTg5aTI3OHJxNmk3dmh2czNqOXJzd3EzazJwZHQ5Yzg0dmZxaWFnZQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x37, 0x39, 0x77, 0x65, 0x75, 0x33, 0x32, 0x62, 0x70, 0x67, 0x35, 0x79, 0x34, 0x65, 0x68, 0x71, 0x67, 0x64, 0x65, 0x33, 0x69, 0x6a, 0x33, 0x76, 0x69, 0x62, 0x38, 0x76, 0x6d, 0x66, 0x68, 0x73, 0x33, 0x6b, 0x72, 0x35, 0x6a, 0x36, 0x36, 0x75, 0x70, 0x75, 0x36, 0x74, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x63, 0x78, 0x38, 0x33, 0x61, 0x71, 0x38, 0x39, 0x69, 0x32, 0x37, 0x38, 0x72, 0x71, 0x36, 0x69, 0x37, 0x76, 0x68, 0x76, 0x73, 0x33, 0x6a, 0x39, 0x72, 0x73, 0x77, 0x71, 0x33, 0x6b, 0x32, 0x70, 0x64, 0x74, 0x39, 0x63, 0x38, 0x34, 0x76, 0x66, 0x71, 0x69, 0x61, 0x67, 0x65}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndag2ffwib9d9p92777ztig86kauafz4axx59gnud9qe68em")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xea, 0x92, 0xea, 0x66, 0x0a, 0x69, 0x71, 0xb2, 0xba, 0x16, 0x33, 0x74, 0xb9, 0x33, 0x30, 0x39, 0xdc, 0x26, 0xbb, 0x13, 0xe9, 0x01, 0xd1, 0xc6, 0x3f, 0x51, 0xb8, 0xeb, 0xd6, 0xff, 0x27, 0x43}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWR4amY0dmdiand6ZG54NGMyM3pqcWp2Z2E2NzJqeDVjcndzZHdxZ2g3aTV0NDh5OTZ2d2hkZHl4dTM0cmR6eAAQTcdmlXTFbmRhZzJmZndpYjlkOXA5Mjc3N3p0aWc4NmthdWFmejRheHg1OWdudWQ5cWU2OGVtNHJaNlJkZWgvZ1hVdnlkNA==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x78, 0x6a, 0x66, 0x34, 0x76, 0x67, 0x62, 0x6a, 0x77, 0x7a, 0x64, 0x6e, 0x78, 0x34, 0x63, 0x32, 0x33, 0x7a, 0x6a, 0x71, 0x6a, 0x76, 0x67, 0x61, 0x36, 0x37, 0x32, 0x6a, 0x78, 0x35, 0x63, 0x72, 0x77, 0x73, 0x64, 0x77, 0x71, 0x67, 0x68, 0x37, 0x69, 0x35, 0x74, 0x34, 0x38, 0x79, 0x39, 0x36, 0x76, 0x77, 0x68, 0x64, 0x64, 0x79, 0x78, 0x75, 0x33, 0x34, 0x72, 0x64, 0x7a, 0x78, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x67, 0x32, 0x66, 0x66, 0x77, 0x69, 0x62, 0x39, 0x64, 0x39, 0x70, 0x39, 0x32, 0x37, 0x37, 0x37, 0x7a, 0x74, 0x69, 0x67, 0x38, 0x36, 0x6b, 0x61, 0x75, 0x61, 0x66, 0x7a, 0x34, 0x61, 0x78, 0x78, 0x35, 0x39, 0x67, 0x6e, 0x75, 0x64, 0x39, 0x71, 0x65, 0x36, 0x38, 0x65, 0x6d, 0x34, 0x72, 0x5a, 0x36, 0x52, 0x64, 0x65, 0x68, 0x2f, 0x67, 0x58, 0x55, 0x76, 0x79, 0x64, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: 4rZ6Rdeh/gXUvyd4
				[]byte{0xe2, 0xb6, 0x7a, 0x45, 0xd7, 0xa1, 0xfe, 0x05, 0xd4, 0xbf, 0x27, 0x78},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: 4rZ6Rdeh/gXUvyd4
				[]byte{0xe2, 0xb6, 0x7a, 0x45, 0xd7, 0xa1, 0xfe, 0x05, 0xd4, 0xbf, 0x27, 0x78},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndad7vf9vi66hbmp972masm89pm68x73e8px2ya6wdqqvpmt")
	require.NoError(t, err)

	// bmRhZDd2Zjl2aTY2aGJtcDk3Mm1hc204OXBtNjh4NzNlOHB4MnlhNndkcXF2cG10AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x37, 0x76, 0x66, 0x39, 0x76, 0x69, 0x36, 0x36, 0x68, 0x62, 0x6d, 0x70, 0x39, 0x37, 0x32, 0x6d, 0x61, 0x73, 0x6d, 0x38, 0x39, 0x70, 0x6d, 0x36, 0x38, 0x78, 0x37, 0x33, 0x65, 0x38, 0x70, 0x78, 0x32, 0x79, 0x61, 0x36, 0x77, 0x64, 0x71, 0x71, 0x76, 0x70, 0x6d, 0x74, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndaku5prr7u2r6ppxvusmpgct59759j5rbfnfgbfckbmfmps")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFrdTVwcnI3dTJyNnBweHZ1c21wZ2N0NTk3NTlqNXJiZm5mZ2JmY2tibWZtcHM=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x6b, 0x75, 0x35, 0x70, 0x72, 0x72, 0x37, 0x75, 0x32, 0x72, 0x36, 0x70, 0x70, 0x78, 0x76, 0x75, 0x73, 0x6d, 0x70, 0x67, 0x63, 0x74, 0x35, 0x39, 0x37, 0x35, 0x39, 0x6a, 0x35, 0x72, 0x62, 0x66, 0x6e, 0x66, 0x67, 0x62, 0x66, 0x63, 0x6b, 0x62, 0x6d, 0x66, 0x6d, 0x70, 0x73}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndakcr62we6emarmu6w8tniymqi9d5ifdgx6uckmrxy8ed6c")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaqa5zctxgjh63egtjxxy4h4uj4qbjxd56z3iixixagaeb2")
	require.NoError(t, err)

	// bmRhcWE1emN0eGdqaDYzZWd0anh4eTRoNHVqNHFianhkNTZ6M2lpeGl4YWdhZWIyAAjSrCLE0zRuZGFrY3I2MndlNmVtYXJtdTZ3OHRuaXltcWk5ZDVpZmRneDZ1Y2ttcnh5OGVkNmM=
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x61, 0x35, 0x7a, 0x63, 0x74, 0x78, 0x67, 0x6a, 0x68, 0x36, 0x33, 0x65, 0x67, 0x74, 0x6a, 0x78, 0x78, 0x79, 0x34, 0x68, 0x34, 0x75, 0x6a, 0x34, 0x71, 0x62, 0x6a, 0x78, 0x64, 0x35, 0x36, 0x7a, 0x33, 0x69, 0x69, 0x78, 0x69, 0x78, 0x61, 0x67, 0x61, 0x65, 0x62, 0x32, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x6b, 0x63, 0x72, 0x36, 0x32, 0x77, 0x65, 0x36, 0x65, 0x6d, 0x61, 0x72, 0x6d, 0x75, 0x36, 0x77, 0x38, 0x74, 0x6e, 0x69, 0x79, 0x6d, 0x71, 0x69, 0x39, 0x64, 0x35, 0x69, 0x66, 0x64, 0x67, 0x78, 0x36, 0x75, 0x63, 0x6b, 0x6d, 0x72, 0x78, 0x79, 0x38, 0x65, 0x64, 0x36, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndaaqxc5hgr8ee4vy9p3eaz3v274ergnnhc3rz4apbxgunj7")
	require.NoError(t, err)

	// bmRhYXF4YzVoZ3I4ZWU0dnk5cDNlYXozdjI3NGVyZ25uaGMzcno0YXBieGd1bmo3AAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x71, 0x78, 0x63, 0x35, 0x68, 0x67, 0x72, 0x38, 0x65, 0x65, 0x34, 0x76, 0x79, 0x39, 0x70, 0x33, 0x65, 0x61, 0x7a, 0x33, 0x76, 0x32, 0x37, 0x34, 0x65, 0x72, 0x67, 0x6e, 0x6e, 0x68, 0x63, 0x33, 0x72, 0x7a, 0x34, 0x61, 0x70, 0x62, 0x78, 0x67, 0x75, 0x6e, 0x6a, 0x37, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndacq8acrcp7hyrdsiz3tfjz6byf9j8sjmqgp9799gc82ap3")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhY3E4YWNyY3A3aHlyZHNpejN0Zmp6NmJ5ZjlqOHNqbXFncDk3OTlnYzgyYXAz
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x63, 0x71, 0x38, 0x61, 0x63, 0x72, 0x63, 0x70, 0x37, 0x68, 0x79, 0x72, 0x64, 0x73, 0x69, 0x7a, 0x33, 0x74, 0x66, 0x6a, 0x7a, 0x36, 0x62, 0x79, 0x66, 0x39, 0x6a, 0x38, 0x73, 0x6a, 0x6d, 0x71, 0x67, 0x70, 0x39, 0x37, 0x39, 0x39, 0x67, 0x63, 0x38, 0x32, 0x61, 0x70, 0x33}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndab79dsss9dy5sqzvn5kk2cdt37hzzf7b9ucv6h4wsiuyu4")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFiNzlkc3NzOWR5NXNxenZuNWtrMmNkdDM3aHp6ZjdiOXVjdjZoNHdzaXV5dTQ=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x62, 0x37, 0x39, 0x64, 0x73, 0x73, 0x73, 0x39, 0x64, 0x79, 0x35, 0x73, 0x71, 0x7a, 0x76, 0x6e, 0x35, 0x6b, 0x6b, 0x32, 0x63, 0x64, 0x74, 0x33, 0x37, 0x68, 0x7a, 0x7a, 0x66, 0x37, 0x62, 0x39, 0x75, 0x63, 0x76, 0x36, 0x68, 0x34, 0x77, 0x73, 0x69, 0x75, 0x79, 0x75, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndadgywaw99ntjie99nhjgcb9bdne8gztdfdf78vz5ihyf8b")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndaqbwrtqu6s6t24gbaenppe54ng9bhywxtyv2p76jd8qe4x")
	require.NoError(t, err)

	// bmRhcWJ3cnRxdTZzNnQyNGdiYWVucHBlNTRuZzliaHl3eHR5djJwNzZqZDhxZTR4AAz/orpRehFuZGFkZ3l3YXc5OW50amllOTluaGpnY2I5YmRuZThnenRkZmRmNzh2ejVpaHlmOGI=
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x62, 0x77, 0x72, 0x74, 0x71, 0x75, 0x36, 0x73, 0x36, 0x74, 0x32, 0x34, 0x67, 0x62, 0x61, 0x65, 0x6e, 0x70, 0x70, 0x65, 0x35, 0x34, 0x6e, 0x67, 0x39, 0x62, 0x68, 0x79, 0x77, 0x78, 0x74, 0x79, 0x76, 0x32, 0x70, 0x37, 0x36, 0x6a, 0x64, 0x38, 0x71, 0x65, 0x34, 0x78, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x64, 0x67, 0x79, 0x77, 0x61, 0x77, 0x39, 0x39, 0x6e, 0x74, 0x6a, 0x69, 0x65, 0x39, 0x39, 0x6e, 0x68, 0x6a, 0x67, 0x63, 0x62, 0x39, 0x62, 0x64, 0x6e, 0x65, 0x38, 0x67, 0x7a, 0x74, 0x64, 0x66, 0x64, 0x66, 0x37, 0x38, 0x76, 0x7a, 0x35, 0x69, 0x68, 0x79, 0x66, 0x38, 0x62}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndae4a3sa97p9dfpj9q7f5n2udvhpfvq3i9pqwngiw3ufaka")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x51, 0xcb, 0xa5, 0x02, 0xdd, 0x6e, 0x32, 0x2a, 0x0c, 0xff, 0xbb, 0x55, 0x44, 0x3e, 0x64, 0x9d, 0x07, 0xd6, 0x01, 0xde, 0x4c, 0xd7, 0x55, 0x48, 0x42, 0xfe, 0x20, 0xa2, 0x90, 0xaf, 0x36, 0x38}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xbc, 0x40, 0xae, 0x9e, 0x1b, 0xf2, 0x22, 0x63, 0x00, 0xbc, 0x90, 0x66, 0x01, 0x71, 0xfe, 0x2a, 0x08, 0xd4, 0xc2, 0x22, 0x84, 0x92, 0xcf, 0x0c, 0x9c, 0x44, 0x59, 0xc2, 0xe1, 0xf9, 0x7f, 0xf0}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWJpNnpqaWM1eHpkZWtzbjk4N3hrdGI4bnVxc3J4c2I1M2dwcXhraWltOWNiaXdzeDY1ZHNkbXQ5NjdoeDZnaQAZX/GDxHNZbmRhZTRhM3NhOTdwOWRmcGo5cTdmNW4ydWR2aHBmdnEzaTlwcXduZ2l3M3VmYWthbnB1YmE4amFkdGJiZWM4ZWJtdzhkcjNjZTIyYXp1aWduYW10OTJ4YXR4Z2Nla2NqZnYybnZ0Y2Z2c3piOWY5OWF5aXhjNmk0eDNycFJEdkM5dVViVWZubkhIWVA=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x69, 0x36, 0x7a, 0x6a, 0x69, 0x63, 0x35, 0x78, 0x7a, 0x64, 0x65, 0x6b, 0x73, 0x6e, 0x39, 0x38, 0x37, 0x78, 0x6b, 0x74, 0x62, 0x38, 0x6e, 0x75, 0x71, 0x73, 0x72, 0x78, 0x73, 0x62, 0x35, 0x33, 0x67, 0x70, 0x71, 0x78, 0x6b, 0x69, 0x69, 0x6d, 0x39, 0x63, 0x62, 0x69, 0x77, 0x73, 0x78, 0x36, 0x35, 0x64, 0x73, 0x64, 0x6d, 0x74, 0x39, 0x36, 0x37, 0x68, 0x78, 0x36, 0x67, 0x69, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x65, 0x34, 0x61, 0x33, 0x73, 0x61, 0x39, 0x37, 0x70, 0x39, 0x64, 0x66, 0x70, 0x6a, 0x39, 0x71, 0x37, 0x66, 0x35, 0x6e, 0x32, 0x75, 0x64, 0x76, 0x68, 0x70, 0x66, 0x76, 0x71, 0x33, 0x69, 0x39, 0x70, 0x71, 0x77, 0x6e, 0x67, 0x69, 0x77, 0x33, 0x75, 0x66, 0x61, 0x6b, 0x61, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x38, 0x65, 0x62, 0x6d, 0x77, 0x38, 0x64, 0x72, 0x33, 0x63, 0x65, 0x32, 0x32, 0x61, 0x7a, 0x75, 0x69, 0x67, 0x6e, 0x61, 0x6d, 0x74, 0x39, 0x32, 0x78, 0x61, 0x74, 0x78, 0x67, 0x63, 0x65, 0x6b, 0x63, 0x6a, 0x66, 0x76, 0x32, 0x6e, 0x76, 0x74, 0x63, 0x66, 0x76, 0x73, 0x7a, 0x62, 0x39, 0x66, 0x39, 0x39, 0x61, 0x79, 0x69, 0x78, 0x63, 0x36, 0x69, 0x34, 0x78, 0x33, 0x72, 0x70, 0x52, 0x44, 0x76, 0x43, 0x39, 0x75, 0x55, 0x62, 0x55, 0x66, 0x6e, 0x6e, 0x48, 0x48, 0x59, 0x50}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: RDvC9uUbUfnnHHYP
				[]byte{0x44, 0x3b, 0xc2, 0xf6, 0xe5, 0x1b, 0x51, 0xf9, 0xe7, 0x1c, 0x76, 0x0f},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: RDvC9uUbUfnnHHYP
				[]byte{0x44, 0x3b, 0xc2, 0xf6, 0xe5, 0x1b, 0x51, 0xf9, 0xe7, 0x1c, 0x76, 0x0f},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndaahfn4cmda3ip6ktc5a8tm2r55gptfusu83885axvpzh7m")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndafibi3ssge9z46cjhguzwme2evap825ea2bzz3hzrcej76")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFmaWJpM3NzZ2U5ejQ2Y2poZ3V6d21lMmV2YXA4MjVlYTJienozaHpyY2VqNzZuZGFhaGZuNGNtZGEzaXA2a3RjNWE4dG0ycjU1Z3B0ZnVzdTgzODg1YXh2cHpoN20=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x66, 0x69, 0x62, 0x69, 0x33, 0x73, 0x73, 0x67, 0x65, 0x39, 0x7a, 0x34, 0x36, 0x63, 0x6a, 0x68, 0x67, 0x75, 0x7a, 0x77, 0x6d, 0x65, 0x32, 0x65, 0x76, 0x61, 0x70, 0x38, 0x32, 0x35, 0x65, 0x61, 0x32, 0x62, 0x7a, 0x7a, 0x33, 0x68, 0x7a, 0x72, 0x63, 0x65, 0x6a, 0x37, 0x36, 0x6e, 0x64, 0x61, 0x61, 0x68, 0x66, 0x6e, 0x34, 0x63, 0x6d, 0x64, 0x61, 0x33, 0x69, 0x70, 0x36, 0x6b, 0x74, 0x63, 0x35, 0x61, 0x38, 0x74, 0x6d, 0x32, 0x72, 0x35, 0x35, 0x67, 0x70, 0x74, 0x66, 0x75, 0x73, 0x75, 0x38, 0x33, 0x38, 0x38, 0x35, 0x61, 0x78, 0x76, 0x70, 0x7a, 0x68, 0x37, 0x6d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndanqhjknuzysax6kdbzf6x5evyyk9jmaepcx5hyihkug5c7")
	require.NoError(t, err)

	// eGcrVWRmakVLWVVWbG5Qem5kYW5xaGprbnV6eXNheDZrZGJ6ZjZ4NWV2eXlrOWptYWVwY3g1aHlpaGt1ZzVjN3N0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x78, 0x67, 0x2b, 0x55, 0x64, 0x66, 0x6a, 0x45, 0x4b, 0x59, 0x55, 0x56, 0x6c, 0x6e, 0x50, 0x7a, 0x6e, 0x64, 0x61, 0x6e, 0x71, 0x68, 0x6a, 0x6b, 0x6e, 0x75, 0x7a, 0x79, 0x73, 0x61, 0x78, 0x36, 0x6b, 0x64, 0x62, 0x7a, 0x66, 0x36, 0x78, 0x35, 0x65, 0x76, 0x79, 0x79, 0x6b, 0x39, 0x6a, 0x6d, 0x61, 0x65, 0x70, 0x63, 0x78, 0x35, 0x68, 0x79, 0x69, 0x68, 0x6b, 0x75, 0x67, 0x35, 0x63, 0x37, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: xg+UdfjEKYUVlnPz
				[]byte{0xc6, 0x0f, 0x94, 0x75, 0xf8, 0xc4, 0x29, 0x85, 0x15, 0x96, 0x73, 0xf3},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: xg+UdfjEKYUVlnPz
				[]byte{0xc6, 0x0f, 0x94, 0x75, 0xf8, 0xc4, 0x29, 0x85, 0x15, 0x96, 0x73, 0xf3},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndaiup2yhe6rhaierzrh4dm6hwwy5uxscu36fjrmsq9fx5k3")
	require.NoError(t, err)

	// bmRhaXVwMnloZTZyaGFpZXJ6cmg0ZG02aHd3eTV1eHNjdTM2ZmpybXNxOWZ4NWszAA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x75, 0x70, 0x32, 0x79, 0x68, 0x65, 0x36, 0x72, 0x68, 0x61, 0x69, 0x65, 0x72, 0x7a, 0x72, 0x68, 0x34, 0x64, 0x6d, 0x36, 0x68, 0x77, 0x77, 0x79, 0x35, 0x75, 0x78, 0x73, 0x63, 0x75, 0x33, 0x36, 0x66, 0x6a, 0x72, 0x6d, 0x73, 0x71, 0x39, 0x66, 0x78, 0x35, 0x6b, 0x33, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndagvqm6sdeatstrun83m9ps3gy238ka3qscsxrcyrtqh7gb")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndaf8v3r4dauuhgfypqk8d4v39wn8ytj7i77zrrnqrtqzeza")
	require.NoError(t, err)

	// bmRhZjh2M3I0ZGF1dWhnZnlwcWs4ZDR2Mzl3bjh5dGo3aTc3enJybnFydHF6ZXphMXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWd2cW02c2RlYXRzdHJ1bjgzbTlwczNneTIzOGthM3FzY3N4cmN5cnRxaDdnYg==
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x38, 0x76, 0x33, 0x72, 0x34, 0x64, 0x61, 0x75, 0x75, 0x68, 0x67, 0x66, 0x79, 0x70, 0x71, 0x6b, 0x38, 0x64, 0x34, 0x76, 0x33, 0x39, 0x77, 0x6e, 0x38, 0x79, 0x74, 0x6a, 0x37, 0x69, 0x37, 0x37, 0x7a, 0x72, 0x72, 0x6e, 0x71, 0x72, 0x74, 0x71, 0x7a, 0x65, 0x7a, 0x61, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x67, 0x76, 0x71, 0x6d, 0x36, 0x73, 0x64, 0x65, 0x61, 0x74, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x38, 0x33, 0x6d, 0x39, 0x70, 0x73, 0x33, 0x67, 0x79, 0x32, 0x33, 0x38, 0x6b, 0x61, 0x33, 0x71, 0x73, 0x63, 0x73, 0x78, 0x72, 0x63, 0x79, 0x72, 0x74, 0x71, 0x68, 0x37, 0x67, 0x62}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmot6TWhOVk9aR3oxK0xHL0VwAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x7a, 0x4d, 0x68, 0x4e, 0x56, 0x4f, 0x5a, 0x47, 0x7a, 0x31, 0x2b, 0x4c, 0x47, 0x2f, 0x45, 0x70, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: zMhNVOZGz1+LG/Ep
				[]byte{0xcc, 0xc8, 0x4d, 0x54, 0xe6, 0x46, 0xcf, 0x5f, 0x8b, 0x1b, 0xf1, 0x29},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: zMhNVOZGz1+LG/Ep
				[]byte{0xcc, 0xc8, 0x4d, 0x54, 0xe6, 0x46, 0xcf, 0x5f, 0x8b, 0x1b, 0xf1, 0x29},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndadbahpqteddv37imkttqw743p3fssf9hv7keceyig26tgx")
	require.NoError(t, err)

	// bmRhZGJhaHBxdGVkZHYzN2lta3R0cXc3NDNwM2Zzc2Y5aHY3a2VjZXlpZzI2dGd4AAJeEXA5N5c=
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x62, 0x61, 0x68, 0x70, 0x71, 0x74, 0x65, 0x64, 0x64, 0x76, 0x33, 0x37, 0x69, 0x6d, 0x6b, 0x74, 0x74, 0x71, 0x77, 0x37, 0x34, 0x33, 0x70, 0x33, 0x66, 0x73, 0x73, 0x66, 0x39, 0x68, 0x76, 0x37, 0x6b, 0x65, 0x63, 0x65, 0x79, 0x69, 0x67, 0x32, 0x36, 0x74, 0x67, 0x78, 0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndaitdsk2ibbytgw944h4iyyxgmft97bhvdrxsq84xvmb6mk")
	require.NoError(t, err)

	// ABP6yCVBcNBuZGFpdGRzazJpYmJ5dGd3OTQ0aDRpeXl4Z21mdDk3Ymh2ZHJ4c3E4NHh2bWI2bWs=
	expect := []byte{0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0, 0x6e, 0x64, 0x61, 0x69, 0x74, 0x64, 0x73, 0x6b, 0x32, 0x69, 0x62, 0x62, 0x79, 0x74, 0x67, 0x77, 0x39, 0x34, 0x34, 0x68, 0x34, 0x69, 0x79, 0x79, 0x78, 0x67, 0x6d, 0x66, 0x74, 0x39, 0x37, 0x62, 0x68, 0x76, 0x64, 0x72, 0x78, 0x73, 0x71, 0x38, 0x34, 0x78, 0x76, 0x6d, 0x62, 0x36, 0x6d, 0x6b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA2S+t7X5soACfdnZnjooQ==
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				3820780875409098,
				2805298263287969,
			),
		},
		{
			"with signature",
			NewIssue(
				3820780875409098,
				2805298263287969,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndaczdvd44nw56nc4ne9qwqi8wejxhqzebheg79y89yex4iu")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndahfspk6bkfuq5w8fnbz257h7arnkym2qgnmacpidvckz35")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xdd, 0x43, 0x7b, 0x66, 0x8c, 0x57, 0x0e, 0x47, 0x6c, 0xe2, 0xd3, 0xa2, 0x9b, 0xc6, 0x16, 0x19, 0x40, 0x04, 0x9c, 0xe7, 0x4f, 0xe2, 0x13, 0xf4, 0xed, 0xbc, 0x2a, 0x65, 0x53, 0x00, 0xcd, 0x8e}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x05, 0x7d, 0x78, 0x09, 0x1b, 0xea, 0x5c, 0x96, 0xa4, 0xc3, 0xf1, 0x48, 0x97, 0xfb, 0x80, 0x90, 0xb3, 0x95, 0xa8, 0xf9, 0xc8, 0x3a, 0x5e, 0x6f, 0x28, 0xfe, 0x07, 0x99, 0x32, 0x36, 0x31, 0xbf, 0xb4, 0xd8, 0x4d, 0x5a, 0xa6, 0x81, 0x03, 0x44, 0xac, 0xcb, 0x41, 0x57, 0x7e, 0xf7, 0xae, 0x4b, 0x95, 0xf5, 0x30, 0xb3, 0xa4, 0x51, 0x00, 0x9f, 0x49, 0x60, 0xe5, 0x87, 0x55, 0x92, 0x64, 0x17})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xad, 0x35, 0x75, 0xc2, 0x35, 0x5b, 0xdf, 0xf4, 0xc0, 0xd3, 0x5e, 0x10, 0x13, 0x2c, 0x4b, 0x07, 0x14, 0x10, 0x11, 0x0f, 0xfb, 0xd4, 0x70, 0x3d, 0x8a, 0x6e, 0xbc, 0x4f, 0x09, 0x89, 0xa0, 0xc4}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndafpnukzxaji3dz3vdnchty45e6seyg3zwyxtwnjg96dsk6")
	require.NoError(t, err)

	// bmRhaGZzcGs2YmtmdXE1dzhmbmJ6MjU3aDdhcm5reW0ycWdubWFjcGlkdmNrejM1bmRhZnBudWt6eGFqaTNkejN2ZG5jaHR5NDVlNnNleWczend5eHR3bmpnOTZkc2s2bnB1YmE4amFkdGJiZWRxd2c4NWd0dG1zNnQ1bjZtajRmZzhnYzJud2FiZTY2N2g4ZWU5dzd5OGN3M2t2YWRnMjZyM3lqaWt5ZDZwMzF5NG02ZHQ1aDIxbTQ2czM0MzczNHVzYTRqYWR0Y2FheDh6c2NpNTdqcWpwamdkOGZlanI4NmF1YzMzbWtoMzNhN2Y2NTNpOTJkM3VudHlnZzk1anljcG1rdmljYTRleHZmd2N4NTg4OHplemZyeGdjMzRpd2lhdjdleWIzbmhreWpnaWYyZGozcnc5YXo4bnB1YmE4amFkdGJiZWN5dms3cWNneHA3OTdnYTRwcmJhZTNuam5kdGllYXRiOTc3aTZiN3Rqem0ydjJqdGdzbmk1OXQ1ampzdzk4bVNzNVplVWZyelc4YnlFNWQAB4MDVqpvQW5kYWN6ZHZkNDRudzU2bmM0bmU5cXdxaTh3ZWp4aHF6ZWJoZWc3OXk4OXlleDRpdQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x68, 0x66, 0x73, 0x70, 0x6b, 0x36, 0x62, 0x6b, 0x66, 0x75, 0x71, 0x35, 0x77, 0x38, 0x66, 0x6e, 0x62, 0x7a, 0x32, 0x35, 0x37, 0x68, 0x37, 0x61, 0x72, 0x6e, 0x6b, 0x79, 0x6d, 0x32, 0x71, 0x67, 0x6e, 0x6d, 0x61, 0x63, 0x70, 0x69, 0x64, 0x76, 0x63, 0x6b, 0x7a, 0x33, 0x35, 0x6e, 0x64, 0x61, 0x66, 0x70, 0x6e, 0x75, 0x6b, 0x7a, 0x78, 0x61, 0x6a, 0x69, 0x33, 0x64, 0x7a, 0x33, 0x76, 0x64, 0x6e, 0x63, 0x68, 0x74, 0x79, 0x34, 0x35, 0x65, 0x36, 0x73, 0x65, 0x79, 0x67, 0x33, 0x7a, 0x77, 0x79, 0x78, 0x74, 0x77, 0x6e, 0x6a, 0x67, 0x39, 0x36, 0x64, 0x73, 0x6b, 0x36, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x71, 0x77, 0x67, 0x38, 0x35, 0x67, 0x74, 0x74, 0x6d, 0x73, 0x36, 0x74, 0x35, 0x6e, 0x36, 0x6d, 0x6a, 0x34, 0x66, 0x67, 0x38, 0x67, 0x63, 0x32, 0x6e, 0x77, 0x61, 0x62, 0x65, 0x36, 0x36, 0x37, 0x68, 0x38, 0x65, 0x65, 0x39, 0x77, 0x37, 0x79, 0x38, 0x63, 0x77, 0x33, 0x6b, 0x76, 0x61, 0x64, 0x67, 0x32, 0x36, 0x72, 0x33, 0x79, 0x6a, 0x69, 0x6b, 0x79, 0x64, 0x36, 0x70, 0x33, 0x31, 0x79, 0x34, 0x6d, 0x36, 0x64, 0x74, 0x35, 0x68, 0x32, 0x31, 0x6d, 0x34, 0x36, 0x73, 0x33, 0x34, 0x33, 0x37, 0x33, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x61, 0x78, 0x38, 0x7a, 0x73, 0x63, 0x69, 0x35, 0x37, 0x6a, 0x71, 0x6a, 0x70, 0x6a, 0x67, 0x64, 0x38, 0x66, 0x65, 0x6a, 0x72, 0x38, 0x36, 0x61, 0x75, 0x63, 0x33, 0x33, 0x6d, 0x6b, 0x68, 0x33, 0x33, 0x61, 0x37, 0x66, 0x36, 0x35, 0x33, 0x69, 0x39, 0x32, 0x64, 0x33, 0x75, 0x6e, 0x74, 0x79, 0x67, 0x67, 0x39, 0x35, 0x6a, 0x79, 0x63, 0x70, 0x6d, 0x6b, 0x76, 0x69, 0x63, 0x61, 0x34, 0x65, 0x78, 0x76, 0x66, 0x77, 0x63, 0x78, 0x35, 0x38, 0x38, 0x38, 0x7a, 0x65, 0x7a, 0x66, 0x72, 0x78, 0x67, 0x63, 0x33, 0x34, 0x69, 0x77, 0x69, 0x61, 0x76, 0x37, 0x65, 0x79, 0x62, 0x33, 0x6e, 0x68, 0x6b, 0x79, 0x6a, 0x67, 0x69, 0x66, 0x32, 0x64, 0x6a, 0x33, 0x72, 0x77, 0x39, 0x61, 0x7a, 0x38, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x79, 0x76, 0x6b, 0x37, 0x71, 0x63, 0x67, 0x78, 0x70, 0x37, 0x39, 0x37, 0x67, 0x61, 0x34, 0x70, 0x72, 0x62, 0x61, 0x65, 0x33, 0x6e, 0x6a, 0x6e, 0x64, 0x74, 0x69, 0x65, 0x61, 0x74, 0x62, 0x39, 0x37, 0x37, 0x69, 0x36, 0x62, 0x37, 0x74, 0x6a, 0x7a, 0x6d, 0x32, 0x76, 0x32, 0x6a, 0x74, 0x67, 0x73, 0x6e, 0x69, 0x35, 0x39, 0x74, 0x35, 0x6a, 0x6a, 0x73, 0x77, 0x39, 0x38, 0x6d, 0x53, 0x73, 0x35, 0x5a, 0x65, 0x55, 0x66, 0x72, 0x7a, 0x57, 0x38, 0x62, 0x79, 0x45, 0x35, 0x64, 0x00, 0x07, 0x83, 0x03, 0x56, 0xaa, 0x6f, 0x41, 0x6e, 0x64, 0x61, 0x63, 0x7a, 0x64, 0x76, 0x64, 0x34, 0x34, 0x6e, 0x77, 0x35, 0x36, 0x6e, 0x63, 0x34, 0x6e, 0x65, 0x39, 0x71, 0x77, 0x71, 0x69, 0x38, 0x77, 0x65, 0x6a, 0x78, 0x68, 0x71, 0x7a, 0x65, 0x62, 0x68, 0x65, 0x67, 0x37, 0x39, 0x79, 0x38, 0x39, 0x79, 0x65, 0x78, 0x34, 0x69, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: Ss5ZeUfrzW8byE5d
				[]byte{0x4a, 0xce, 0x59, 0x79, 0x47, 0xeb, 0xcd, 0x6f, 0x1b, 0xc8, 0x4e, 0x5d},
				createchildaccountChildDelegationNode,
				2114375199125313,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: Ss5ZeUfrzW8byE5d
				[]byte{0x4a, 0xce, 0x59, 0x79, 0x47, 0xeb, 0xcd, 0x6f, 0x1b, 0xc8, 0x4e, 0x5d},
				createchildaccountChildDelegationNode,
				2114375199125313,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABToHt5FZKQACPi9Ppmz3A==
	expect := []byte{0x00, 0x14, 0xe8, 0x1e, 0xde, 0x45, 0x64, 0xa4, 0x00, 0x08, 0xf8, 0xbd, 0x3e, 0x99, 0xb3, 0xdc}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBhcGUgcWxlcXloeXogeXdqanBqenAgcmYgZ21vIGFmZXQgc2J6cmp4IAAO73omlHmPUjZZalB6SUlZbmo3b0hnOA==
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x61, 0x70, 0x65, 0x20, 0x71, 0x6c, 0x65, 0x71, 0x79, 0x68, 0x79, 0x7a, 0x20, 0x79, 0x77, 0x6a, 0x6a, 0x70, 0x6a, 0x7a, 0x70, 0x20, 0x72, 0x66, 0x20, 0x67, 0x6d, 0x6f, 0x20, 0x61, 0x66, 0x65, 0x74, 0x20, 0x73, 0x62, 0x7a, 0x72, 0x6a, 0x78, 0x20, 0x00, 0x0e, 0xef, 0x7a, 0x26, 0x94, 0x79, 0x8f, 0x52, 0x36, 0x59, 0x6a, 0x50, 0x7a, 0x49, 0x49, 0x59, 0x6e, 0x6a, 0x37, 0x6f, 0x48, 0x67, 0x38}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: R6YjPzIIYnj7oHg8
				[]byte{0x47, 0xa6, 0x23, 0x3f, 0x32, 0x08, 0x62, 0x78, 0xfb, 0xa0, 0x78, 0x3c},
				4203957586262415,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: R6YjPzIIYnj7oHg8
				[]byte{0x47, 0xa6, 0x23, 0x3f, 0x32, 0x08, 0x62, 0x78, 0xfb, 0xa0, 0x78, 0x3c},
				4203957586262415,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
