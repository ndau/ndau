package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndakc5g9wmptbax33q5v49jnufcyzkrh7fends5iw4gxmqrw")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndamyivzwuj2p5m5xdtmvft46xg5vnekwm2wdsrdycfew4an")
	require.NoError(t, err)

	// bmRhbXlpdnp3dWoycDVtNXhkdG12ZnQ0NnhnNXZuZWt3bTJ3ZHNyZHljZmV3NGFuAAWCIQf8/70AApoPXz8aEm5kYWtjNWc5d21wdGJheDMzcTV2NDlqbnVmY3l6a3JoN2ZlbmRzNWl3NGd4bXFydw==
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x79, 0x69, 0x76, 0x7a, 0x77, 0x75, 0x6a, 0x32, 0x70, 0x35, 0x6d, 0x35, 0x78, 0x64, 0x74, 0x6d, 0x76, 0x66, 0x74, 0x34, 0x36, 0x78, 0x67, 0x35, 0x76, 0x6e, 0x65, 0x6b, 0x77, 0x6d, 0x32, 0x77, 0x64, 0x73, 0x72, 0x64, 0x79, 0x63, 0x66, 0x65, 0x77, 0x34, 0x61, 0x6e, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x6b, 0x63, 0x35, 0x67, 0x39, 0x77, 0x6d, 0x70, 0x74, 0x62, 0x61, 0x78, 0x33, 0x33, 0x71, 0x35, 0x76, 0x34, 0x39, 0x6a, 0x6e, 0x75, 0x66, 0x63, 0x79, 0x7a, 0x6b, 0x72, 0x68, 0x37, 0x66, 0x65, 0x6e, 0x64, 0x73, 0x35, 0x69, 0x77, 0x34, 0x67, 0x78, 0x6d, 0x71, 0x72, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndamd2fmjug4ggrcprzdpybgb2itq6iqx5c6dfhvfsvfzira")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x05, 0xcf, 0x98, 0x4d, 0x29, 0x70, 0x7b, 0x6b, 0x27, 0x52, 0x35, 0xa3, 0x23, 0xb4, 0x80, 0xc7, 0x13, 0x65, 0xbd, 0x7d, 0xb5, 0x96, 0x89, 0xb3, 0x26, 0xf9, 0xec, 0xbf, 0x6a, 0x3d, 0x0a, 0xca}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWFjNjlnY3BmZjJoeTQzaGtpNDRnaTd3c2RkdGczcDdyeTQzcGNwdmU1NjgzcjVraHdmbngzZ3ZldTR3M3o4YwAQTcdmlXTFbmRhbWQyZm1qdWc0Z2dyY3ByemRweWJnYjJpdHE2aXF4NWM2ZGZodmZzdmZ6aXJhK1p2RkNiT0crYy9kNmQ0Uw==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x63, 0x36, 0x39, 0x67, 0x63, 0x70, 0x66, 0x66, 0x32, 0x68, 0x79, 0x34, 0x33, 0x68, 0x6b, 0x69, 0x34, 0x34, 0x67, 0x69, 0x37, 0x77, 0x73, 0x64, 0x64, 0x74, 0x67, 0x33, 0x70, 0x37, 0x72, 0x79, 0x34, 0x33, 0x70, 0x63, 0x70, 0x76, 0x65, 0x35, 0x36, 0x38, 0x33, 0x72, 0x35, 0x6b, 0x68, 0x77, 0x66, 0x6e, 0x78, 0x33, 0x67, 0x76, 0x65, 0x75, 0x34, 0x77, 0x33, 0x7a, 0x38, 0x63, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x6d, 0x64, 0x32, 0x66, 0x6d, 0x6a, 0x75, 0x67, 0x34, 0x67, 0x67, 0x72, 0x63, 0x70, 0x72, 0x7a, 0x64, 0x70, 0x79, 0x62, 0x67, 0x62, 0x32, 0x69, 0x74, 0x71, 0x36, 0x69, 0x71, 0x78, 0x35, 0x63, 0x36, 0x64, 0x66, 0x68, 0x76, 0x66, 0x73, 0x76, 0x66, 0x7a, 0x69, 0x72, 0x61, 0x2b, 0x5a, 0x76, 0x46, 0x43, 0x62, 0x4f, 0x47, 0x2b, 0x63, 0x2f, 0x64, 0x36, 0x64, 0x34, 0x53}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: +ZvFCbOG+c/d6d4S
				[]byte{0xf9, 0x9b, 0xc5, 0x09, 0xb3, 0x86, 0xf9, 0xcf, 0xdd, 0xe9, 0xde, 0x12},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: +ZvFCbOG+c/d6d4S
				[]byte{0xf9, 0x9b, 0xc5, 0x09, 0xb3, 0x86, 0xf9, 0xcf, 0xdd, 0xe9, 0xde, 0x12},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndaemy3q5uwtjnjktmkvjddfnkm24e32tcutmyea3385iqac")
	require.NoError(t, err)

	// bmRhZW15M3E1dXd0am5qa3Rta3ZqZGRmbmttMjRlMzJ0Y3V0bXllYTMzODVpcWFjAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x6d, 0x79, 0x33, 0x71, 0x35, 0x75, 0x77, 0x74, 0x6a, 0x6e, 0x6a, 0x6b, 0x74, 0x6d, 0x6b, 0x76, 0x6a, 0x64, 0x64, 0x66, 0x6e, 0x6b, 0x6d, 0x32, 0x34, 0x65, 0x33, 0x32, 0x74, 0x63, 0x75, 0x74, 0x6d, 0x79, 0x65, 0x61, 0x33, 0x33, 0x38, 0x35, 0x69, 0x71, 0x61, 0x63, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndajqpeziksvncvs9wgqcmajiq5qhvaq6eedd25wfd6up8g7")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFqcXBlemlrc3ZuY3ZzOXdncWNtYWppcTVxaHZhcTZlZWRkMjV3ZmQ2dXA4Zzc=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x6a, 0x71, 0x70, 0x65, 0x7a, 0x69, 0x6b, 0x73, 0x76, 0x6e, 0x63, 0x76, 0x73, 0x39, 0x77, 0x67, 0x71, 0x63, 0x6d, 0x61, 0x6a, 0x69, 0x71, 0x35, 0x71, 0x68, 0x76, 0x61, 0x71, 0x36, 0x65, 0x65, 0x64, 0x64, 0x32, 0x35, 0x77, 0x66, 0x64, 0x36, 0x75, 0x70, 0x38, 0x67, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndah9hhg7dytwdb9v5ce97ik7vsudnt377g9rnmqushy92nd")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndajmdjhdqxz6grs3ed9itsmqxqejg8b9qyve9f9xz9zwguk")
	require.NoError(t, err)

	// bmRham1kamhkcXh6NmdyczNlZDlpdHNtcXhxZWpnOGI5cXl2ZTlmOXh6OXp3Z3VrAAjSrCLE0zRuZGFoOWhoZzdkeXR3ZGI5djVjZTk3aWs3dnN1ZG50Mzc3Zzlybm1xdXNoeTkybmQ=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x6d, 0x64, 0x6a, 0x68, 0x64, 0x71, 0x78, 0x7a, 0x36, 0x67, 0x72, 0x73, 0x33, 0x65, 0x64, 0x39, 0x69, 0x74, 0x73, 0x6d, 0x71, 0x78, 0x71, 0x65, 0x6a, 0x67, 0x38, 0x62, 0x39, 0x71, 0x79, 0x76, 0x65, 0x39, 0x66, 0x39, 0x78, 0x7a, 0x39, 0x7a, 0x77, 0x67, 0x75, 0x6b, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x68, 0x39, 0x68, 0x68, 0x67, 0x37, 0x64, 0x79, 0x74, 0x77, 0x64, 0x62, 0x39, 0x76, 0x35, 0x63, 0x65, 0x39, 0x37, 0x69, 0x6b, 0x37, 0x76, 0x73, 0x75, 0x64, 0x6e, 0x74, 0x33, 0x37, 0x37, 0x67, 0x39, 0x72, 0x6e, 0x6d, 0x71, 0x75, 0x73, 0x68, 0x79, 0x39, 0x32, 0x6e, 0x64}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndahexj4hvvewdratik2is8vyfeb4g2p89npt8mm6uwrn3f4")
	require.NoError(t, err)

	// bmRhaGV4ajRodnZld2RyYXRpazJpczh2eWZlYjRnMnA4OW5wdDhtbTZ1d3JuM2Y0AAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x68, 0x65, 0x78, 0x6a, 0x34, 0x68, 0x76, 0x76, 0x65, 0x77, 0x64, 0x72, 0x61, 0x74, 0x69, 0x6b, 0x32, 0x69, 0x73, 0x38, 0x76, 0x79, 0x66, 0x65, 0x62, 0x34, 0x67, 0x32, 0x70, 0x38, 0x39, 0x6e, 0x70, 0x74, 0x38, 0x6d, 0x6d, 0x36, 0x75, 0x77, 0x72, 0x6e, 0x33, 0x66, 0x34, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndaiq2hbcfkuw4p7jsrp8unawwfp83trnju9m5u4pk7ngeec")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhaXEyaGJjZmt1dzRwN2pzcnA4dW5hd3dmcDgzdHJuanU5bTV1NHBrN25nZWVj
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x69, 0x71, 0x32, 0x68, 0x62, 0x63, 0x66, 0x6b, 0x75, 0x77, 0x34, 0x70, 0x37, 0x6a, 0x73, 0x72, 0x70, 0x38, 0x75, 0x6e, 0x61, 0x77, 0x77, 0x66, 0x70, 0x38, 0x33, 0x74, 0x72, 0x6e, 0x6a, 0x75, 0x39, 0x6d, 0x35, 0x75, 0x34, 0x70, 0x6b, 0x37, 0x6e, 0x67, 0x65, 0x65, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndaijj3x4jstpaqf7ytxeawujiypw8ygeim79uvhshyc33xq")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFpamozeDRqc3RwYXFmN3l0eGVhd3VqaXlwdzh5Z2VpbTc5dXZoc2h5YzMzeHE=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x69, 0x6a, 0x6a, 0x33, 0x78, 0x34, 0x6a, 0x73, 0x74, 0x70, 0x61, 0x71, 0x66, 0x37, 0x79, 0x74, 0x78, 0x65, 0x61, 0x77, 0x75, 0x6a, 0x69, 0x79, 0x70, 0x77, 0x38, 0x79, 0x67, 0x65, 0x69, 0x6d, 0x37, 0x39, 0x75, 0x76, 0x68, 0x73, 0x68, 0x79, 0x63, 0x33, 0x33, 0x78, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndaayitj5fdkxgixaqb8m72u9fd8zrrqymu8p4jhiywyhf7v")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndaex4un3uabw7xeph97zennp9ay3xhjsrft6qhevam7aepg")
	require.NoError(t, err)

	// bmRhZXg0dW4zdWFidzd4ZXBoOTd6ZW5ucDlheTN4aGpzcmZ0NnFoZXZhbTdhZXBnAAz/orpRehFuZGFheWl0ajVmZGt4Z2l4YXFiOG03MnU5ZmQ4enJycXltdThwNGpoaXl3eWhmN3Y=
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x78, 0x34, 0x75, 0x6e, 0x33, 0x75, 0x61, 0x62, 0x77, 0x37, 0x78, 0x65, 0x70, 0x68, 0x39, 0x37, 0x7a, 0x65, 0x6e, 0x6e, 0x70, 0x39, 0x61, 0x79, 0x33, 0x78, 0x68, 0x6a, 0x73, 0x72, 0x66, 0x74, 0x36, 0x71, 0x68, 0x65, 0x76, 0x61, 0x6d, 0x37, 0x61, 0x65, 0x70, 0x67, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x61, 0x79, 0x69, 0x74, 0x6a, 0x35, 0x66, 0x64, 0x6b, 0x78, 0x67, 0x69, 0x78, 0x61, 0x71, 0x62, 0x38, 0x6d, 0x37, 0x32, 0x75, 0x39, 0x66, 0x64, 0x38, 0x7a, 0x72, 0x72, 0x71, 0x79, 0x6d, 0x75, 0x38, 0x70, 0x34, 0x6a, 0x68, 0x69, 0x79, 0x77, 0x79, 0x68, 0x66, 0x37, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndahbkdbcaz5q6h89bngrdc328jaub2kg2fkmpps4ckrjemf")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xb9, 0x3c, 0xb5, 0xf4, 0x5a, 0xf8, 0x7b, 0xe6, 0xa0, 0xd2, 0x8a, 0x30, 0xb0, 0xb8, 0xc1, 0xd3, 0x01, 0x4c, 0x8f, 0xf6, 0xdd, 0x95, 0xcd, 0x1b, 0x32, 0x07, 0x5e, 0x3a, 0x32, 0x80, 0x55, 0xf6}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xa6, 0x56, 0x29, 0x53, 0xeb, 0x7c, 0xaf, 0x31, 0xb2, 0xbd, 0xbc, 0xc4, 0xf6, 0xc3, 0xde, 0x4b, 0xfb, 0xbf, 0x24, 0x03, 0xdc, 0x80, 0x30, 0xc4, 0xc7, 0xe7, 0xba, 0x8f, 0x69, 0x19, 0xfa, 0x01}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWM2djNwcndtbTZoejN4YTRrZmRibmYyMmhqc2N2ZXI4NXEzbXZpNWdpZHg2cXR1c2JrOW5zdzg0OGd4dDI1OAAZX/GDxHNZbmRhaGJrZGJjYXo1cTZoODlibmdyZGMzMjhqYXViMmtnMmZrbXBwczRja3JqZW1mbnB1YmE4amFkdGJiZWN2Zm5ra3Y3cDhrOG5wdXp5OG5qN3lkNTNmOXpyM2VhcnFpYW5nZTI5djV4ZDVqZGg3YWNwaXFnY2pucW1wZnNTdzJ0VmovSFlBbERIYTk=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x36, 0x76, 0x33, 0x70, 0x72, 0x77, 0x6d, 0x6d, 0x36, 0x68, 0x7a, 0x33, 0x78, 0x61, 0x34, 0x6b, 0x66, 0x64, 0x62, 0x6e, 0x66, 0x32, 0x32, 0x68, 0x6a, 0x73, 0x63, 0x76, 0x65, 0x72, 0x38, 0x35, 0x71, 0x33, 0x6d, 0x76, 0x69, 0x35, 0x67, 0x69, 0x64, 0x78, 0x36, 0x71, 0x74, 0x75, 0x73, 0x62, 0x6b, 0x39, 0x6e, 0x73, 0x77, 0x38, 0x34, 0x38, 0x67, 0x78, 0x74, 0x32, 0x35, 0x38, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x68, 0x62, 0x6b, 0x64, 0x62, 0x63, 0x61, 0x7a, 0x35, 0x71, 0x36, 0x68, 0x38, 0x39, 0x62, 0x6e, 0x67, 0x72, 0x64, 0x63, 0x33, 0x32, 0x38, 0x6a, 0x61, 0x75, 0x62, 0x32, 0x6b, 0x67, 0x32, 0x66, 0x6b, 0x6d, 0x70, 0x70, 0x73, 0x34, 0x63, 0x6b, 0x72, 0x6a, 0x65, 0x6d, 0x66, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x76, 0x66, 0x6e, 0x6b, 0x6b, 0x76, 0x37, 0x70, 0x38, 0x6b, 0x38, 0x6e, 0x70, 0x75, 0x7a, 0x79, 0x38, 0x6e, 0x6a, 0x37, 0x79, 0x64, 0x35, 0x33, 0x66, 0x39, 0x7a, 0x72, 0x33, 0x65, 0x61, 0x72, 0x71, 0x69, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x39, 0x76, 0x35, 0x78, 0x64, 0x35, 0x6a, 0x64, 0x68, 0x37, 0x61, 0x63, 0x70, 0x69, 0x71, 0x67, 0x63, 0x6a, 0x6e, 0x71, 0x6d, 0x70, 0x66, 0x73, 0x53, 0x77, 0x32, 0x74, 0x56, 0x6a, 0x2f, 0x48, 0x59, 0x41, 0x6c, 0x44, 0x48, 0x61, 0x39}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: sSw2tVj/HYAlDHa9
				[]byte{0xb1, 0x2c, 0x36, 0xb5, 0x58, 0xff, 0x1d, 0x80, 0x25, 0x0c, 0x76, 0xbd},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: sSw2tVj/HYAlDHa9
				[]byte{0xb1, 0x2c, 0x36, 0xb5, 0x58, 0xff, 0x1d, 0x80, 0x25, 0x0c, 0x76, 0xbd},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndagy573mjx9vpu27tb4k3vxfnrsuy2qummmwuychy284rcr")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndagazwet9jezs2tik3f7b5qsavcfh82rwqm2av66ywc52di")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFnYXp3ZXQ5amV6czJ0aWszZjdiNXFzYXZjZmg4MnJ3cW0yYXY2Nnl3YzUyZGluZGFneTU3M21qeDl2cHUyN3RiNGszdnhmbnJzdXkycXVtbW13dXljaHkyODRyY3I=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x67, 0x61, 0x7a, 0x77, 0x65, 0x74, 0x39, 0x6a, 0x65, 0x7a, 0x73, 0x32, 0x74, 0x69, 0x6b, 0x33, 0x66, 0x37, 0x62, 0x35, 0x71, 0x73, 0x61, 0x76, 0x63, 0x66, 0x68, 0x38, 0x32, 0x72, 0x77, 0x71, 0x6d, 0x32, 0x61, 0x76, 0x36, 0x36, 0x79, 0x77, 0x63, 0x35, 0x32, 0x64, 0x69, 0x6e, 0x64, 0x61, 0x67, 0x79, 0x35, 0x37, 0x33, 0x6d, 0x6a, 0x78, 0x39, 0x76, 0x70, 0x75, 0x32, 0x37, 0x74, 0x62, 0x34, 0x6b, 0x33, 0x76, 0x78, 0x66, 0x6e, 0x72, 0x73, 0x75, 0x79, 0x32, 0x71, 0x75, 0x6d, 0x6d, 0x6d, 0x77, 0x75, 0x79, 0x63, 0x68, 0x79, 0x32, 0x38, 0x34, 0x72, 0x63, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndafy4k7hdza5fiv8i66qfb656cy7w93mcsd2ehfapyvvfns")
	require.NoError(t, err)

	// NG1sMkFTQXQzaVhiRlN4Mm5kYWZ5NGs3aGR6YTVmaXY4aTY2cWZiNjU2Y3k3dzkzbWNzZDJlaGZhcHl2dmZuc3N0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x34, 0x6d, 0x6c, 0x32, 0x41, 0x53, 0x41, 0x74, 0x33, 0x69, 0x58, 0x62, 0x46, 0x53, 0x78, 0x32, 0x6e, 0x64, 0x61, 0x66, 0x79, 0x34, 0x6b, 0x37, 0x68, 0x64, 0x7a, 0x61, 0x35, 0x66, 0x69, 0x76, 0x38, 0x69, 0x36, 0x36, 0x71, 0x66, 0x62, 0x36, 0x35, 0x36, 0x63, 0x79, 0x37, 0x77, 0x39, 0x33, 0x6d, 0x63, 0x73, 0x64, 0x32, 0x65, 0x68, 0x66, 0x61, 0x70, 0x79, 0x76, 0x76, 0x66, 0x6e, 0x73, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 4ml2ASAt3iXbFSx2
				[]byte{0xe2, 0x69, 0x76, 0x01, 0x20, 0x2d, 0xde, 0x25, 0xdb, 0x15, 0x2c, 0x76},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 4ml2ASAt3iXbFSx2
				[]byte{0xe2, 0x69, 0x76, 0x01, 0x20, 0x2d, 0xde, 0x25, 0xdb, 0x15, 0x2c, 0x76},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndab8yhdrx4iz4vizgc4xn2zknwaygxe79vc4ennmc54pdes")
	require.NoError(t, err)

	// bmRhYjh5aGRyeDRpejR2aXpnYzR4bjJ6a253YXlneGU3OXZjNGVubm1jNTRwZGVzAA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x62, 0x38, 0x79, 0x68, 0x64, 0x72, 0x78, 0x34, 0x69, 0x7a, 0x34, 0x76, 0x69, 0x7a, 0x67, 0x63, 0x34, 0x78, 0x6e, 0x32, 0x7a, 0x6b, 0x6e, 0x77, 0x61, 0x79, 0x67, 0x78, 0x65, 0x37, 0x39, 0x76, 0x63, 0x34, 0x65, 0x6e, 0x6e, 0x6d, 0x63, 0x35, 0x34, 0x70, 0x64, 0x65, 0x73, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndacnr4q6danemz6er6hrfgmrqp35exrdgvinrixkipn4zuh")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndaaskhk3k4hrahjri86bky4e9424pbays26yzgyh73etyk2")
	require.NoError(t, err)

	// bmRhYXNraGszazRocmFoanJpODZia3k0ZTk0MjRwYmF5czI2eXpneWg3M2V0eWsyMXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWNucjRxNmRhbmVtejZlcjZocmZnbXJxcDM1ZXhyZGd2aW5yaXhraXBuNHp1aA==
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x73, 0x6b, 0x68, 0x6b, 0x33, 0x6b, 0x34, 0x68, 0x72, 0x61, 0x68, 0x6a, 0x72, 0x69, 0x38, 0x36, 0x62, 0x6b, 0x79, 0x34, 0x65, 0x39, 0x34, 0x32, 0x34, 0x70, 0x62, 0x61, 0x79, 0x73, 0x32, 0x36, 0x79, 0x7a, 0x67, 0x79, 0x68, 0x37, 0x33, 0x65, 0x74, 0x79, 0x6b, 0x32, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x63, 0x6e, 0x72, 0x34, 0x71, 0x36, 0x64, 0x61, 0x6e, 0x65, 0x6d, 0x7a, 0x36, 0x65, 0x72, 0x36, 0x68, 0x72, 0x66, 0x67, 0x6d, 0x72, 0x71, 0x70, 0x33, 0x35, 0x65, 0x78, 0x72, 0x64, 0x67, 0x76, 0x69, 0x6e, 0x72, 0x69, 0x78, 0x6b, 0x69, 0x70, 0x6e, 0x34, 0x7a, 0x75, 0x68}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmotkOEdQWXNLWlo1Z3BWUktwAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x64, 0x38, 0x47, 0x50, 0x59, 0x73, 0x4b, 0x5a, 0x5a, 0x35, 0x67, 0x70, 0x56, 0x52, 0x4b, 0x70, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: d8GPYsKZZ5gpVRKp
				[]byte{0x77, 0xc1, 0x8f, 0x62, 0xc2, 0x99, 0x67, 0x98, 0x29, 0x55, 0x12, 0xa9},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: d8GPYsKZZ5gpVRKp
				[]byte{0x77, 0xc1, 0x8f, 0x62, 0xc2, 0x99, 0x67, 0x98, 0x29, 0x55, 0x12, 0xa9},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndapaw76v83fdj5z4u88nstnhrinrixj6uhn9475mey6y43e")
	require.NoError(t, err)

	// bmRhcGF3NzZ2ODNmZGo1ejR1ODhuc3RuaHJpbnJpeGo2dWhuOTQ3NW1leTZ5NDNlAAJeEXA5N5c=
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x61, 0x77, 0x37, 0x36, 0x76, 0x38, 0x33, 0x66, 0x64, 0x6a, 0x35, 0x7a, 0x34, 0x75, 0x38, 0x38, 0x6e, 0x73, 0x74, 0x6e, 0x68, 0x72, 0x69, 0x6e, 0x72, 0x69, 0x78, 0x6a, 0x36, 0x75, 0x68, 0x6e, 0x39, 0x34, 0x37, 0x35, 0x6d, 0x65, 0x79, 0x36, 0x79, 0x34, 0x33, 0x65, 0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndad76x5w4j6mnif3hsq58f4rqmietsmxfqnd6wzjfc3rww5")
	require.NoError(t, err)

	// ABP6yCVBcNBuZGFkNzZ4NXc0ajZtbmlmM2hzcTU4ZjRycW1pZXRzbXhmcW5kNnd6amZjM3J3dzU=
	expect := []byte{0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0, 0x6e, 0x64, 0x61, 0x64, 0x37, 0x36, 0x78, 0x35, 0x77, 0x34, 0x6a, 0x36, 0x6d, 0x6e, 0x69, 0x66, 0x33, 0x68, 0x73, 0x71, 0x35, 0x38, 0x66, 0x34, 0x72, 0x71, 0x6d, 0x69, 0x65, 0x74, 0x73, 0x6d, 0x78, 0x66, 0x71, 0x6e, 0x64, 0x36, 0x77, 0x7a, 0x6a, 0x66, 0x63, 0x33, 0x72, 0x77, 0x77, 0x35}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA2S+t7X5soACfdnZnjooQ==
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				3820780875409098,
				2805298263287969,
			),
		},
		{
			"with signature",
			NewIssue(
				3820780875409098,
				2805298263287969,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndamakmj53yjvhve8cyyj5i55tfjbv3atw776giaxr797fef")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndaqybtp2r7ze6vifbazkwras7q4epm2g99dakfqn7pu324s")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x29, 0x76, 0xb6, 0xb0, 0xdd, 0xac, 0x99, 0x50, 0xf6, 0x75, 0xb7, 0x36, 0x0a, 0xd7, 0xc5, 0x06, 0x55, 0x67, 0x40, 0x68, 0x27, 0x88, 0xf2, 0xeb, 0x00, 0x80, 0xa5, 0x51, 0x48, 0x0b, 0x39, 0x8a}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x29, 0x97, 0xdc, 0xb5, 0xd8, 0xb3, 0xcf, 0xbd, 0x86, 0x5e, 0x21, 0x15, 0xd8, 0x9a, 0x44, 0x78, 0xa4, 0xc2, 0x83, 0xb1, 0xb0, 0x93, 0x99, 0x53, 0xba, 0x7d, 0xca, 0xdb, 0x43, 0x71, 0x01, 0x73, 0xe6, 0xd6, 0x6e, 0x08, 0xff, 0x32, 0x18, 0x30, 0x67, 0x00, 0xb7, 0x60, 0x01, 0x38, 0xb7, 0x91, 0x04, 0x89, 0x0d, 0xff, 0xae, 0x4a, 0x61, 0xe5, 0xf8, 0x02, 0xd5, 0xa4, 0x2a, 0x18, 0x91, 0x5d})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x23, 0x6e, 0xba, 0x1d, 0xcf, 0xcc, 0x4a, 0x32, 0x68, 0x4a, 0x58, 0xb1, 0xe1, 0x8a, 0x06, 0x8e, 0x5d, 0x2c, 0x9f, 0x36, 0x3c, 0x6d, 0xc9, 0xb8, 0x17, 0x60, 0xca, 0x0b, 0x9b, 0x07, 0x94, 0xe9}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndaj8pva5ewitva6kebwygd3impejb2dvm2cenhjy9njzzrn")
	require.NoError(t, err)

	// bmRhcXlidHAycjd6ZTZ2aWZiYXprd3JhczdxNGVwbTJnOTlkYWtmcW43cHUzMjRzbmRhajhwdmE1ZXdpdHZhNmtlYnd5Z2QzaW1wZWpiMmR2bTJjZW5oank5bmp6enJubnB1YmE4amFkdGJiZWF3enBweHM1eXlqdXdoeXF5NXZuY3l6MndkZmszNGFwYXYydDZ6bWFjYWtrd2tpYm42Mnd6Zms3NTIzbjcyZTF5NG02ZHQ1aDIxbTQ2czM0MzczNHVzYTRqYWR0Y2FmZ203M3BxMnlyaDU1YnU4ZWVrN3RndWVyY3VuZmE3dHljajN1dzc0cnpmcHlzNXRhZjM4cHh2cWJkOXZlZ2JzbjZhbXEyYWJoYzUzY2JlamJ6OTQ2dXZiNno2YWZ4cGVmaW5qY3prM2lraTcyM2ZqbnB1YmE4amFkdGJiZWF0eTdxczczOWdld252aWpqbm1kMm5rYTRoZjRtZTlnMjhnNXVwMmM3c253YzY1YThrcXZ0aHM1ZjdoaWZueGh5MHZaVDdScjFhd3RPWmsAB4MDVqpvQW5kYW1ha21qNTN5anZodmU4Y3l5ajVpNTV0ZmpidjNhdHc3NzZnaWF4cjc5N2ZlZg==
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x79, 0x62, 0x74, 0x70, 0x32, 0x72, 0x37, 0x7a, 0x65, 0x36, 0x76, 0x69, 0x66, 0x62, 0x61, 0x7a, 0x6b, 0x77, 0x72, 0x61, 0x73, 0x37, 0x71, 0x34, 0x65, 0x70, 0x6d, 0x32, 0x67, 0x39, 0x39, 0x64, 0x61, 0x6b, 0x66, 0x71, 0x6e, 0x37, 0x70, 0x75, 0x33, 0x32, 0x34, 0x73, 0x6e, 0x64, 0x61, 0x6a, 0x38, 0x70, 0x76, 0x61, 0x35, 0x65, 0x77, 0x69, 0x74, 0x76, 0x61, 0x36, 0x6b, 0x65, 0x62, 0x77, 0x79, 0x67, 0x64, 0x33, 0x69, 0x6d, 0x70, 0x65, 0x6a, 0x62, 0x32, 0x64, 0x76, 0x6d, 0x32, 0x63, 0x65, 0x6e, 0x68, 0x6a, 0x79, 0x39, 0x6e, 0x6a, 0x7a, 0x7a, 0x72, 0x6e, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x77, 0x7a, 0x70, 0x70, 0x78, 0x73, 0x35, 0x79, 0x79, 0x6a, 0x75, 0x77, 0x68, 0x79, 0x71, 0x79, 0x35, 0x76, 0x6e, 0x63, 0x79, 0x7a, 0x32, 0x77, 0x64, 0x66, 0x6b, 0x33, 0x34, 0x61, 0x70, 0x61, 0x76, 0x32, 0x74, 0x36, 0x7a, 0x6d, 0x61, 0x63, 0x61, 0x6b, 0x6b, 0x77, 0x6b, 0x69, 0x62, 0x6e, 0x36, 0x32, 0x77, 0x7a, 0x66, 0x6b, 0x37, 0x35, 0x32, 0x33, 0x6e, 0x37, 0x32, 0x65, 0x31, 0x79, 0x34, 0x6d, 0x36, 0x64, 0x74, 0x35, 0x68, 0x32, 0x31, 0x6d, 0x34, 0x36, 0x73, 0x33, 0x34, 0x33, 0x37, 0x33, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x66, 0x67, 0x6d, 0x37, 0x33, 0x70, 0x71, 0x32, 0x79, 0x72, 0x68, 0x35, 0x35, 0x62, 0x75, 0x38, 0x65, 0x65, 0x6b, 0x37, 0x74, 0x67, 0x75, 0x65, 0x72, 0x63, 0x75, 0x6e, 0x66, 0x61, 0x37, 0x74, 0x79, 0x63, 0x6a, 0x33, 0x75, 0x77, 0x37, 0x34, 0x72, 0x7a, 0x66, 0x70, 0x79, 0x73, 0x35, 0x74, 0x61, 0x66, 0x33, 0x38, 0x70, 0x78, 0x76, 0x71, 0x62, 0x64, 0x39, 0x76, 0x65, 0x67, 0x62, 0x73, 0x6e, 0x36, 0x61, 0x6d, 0x71, 0x32, 0x61, 0x62, 0x68, 0x63, 0x35, 0x33, 0x63, 0x62, 0x65, 0x6a, 0x62, 0x7a, 0x39, 0x34, 0x36, 0x75, 0x76, 0x62, 0x36, 0x7a, 0x36, 0x61, 0x66, 0x78, 0x70, 0x65, 0x66, 0x69, 0x6e, 0x6a, 0x63, 0x7a, 0x6b, 0x33, 0x69, 0x6b, 0x69, 0x37, 0x32, 0x33, 0x66, 0x6a, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x74, 0x79, 0x37, 0x71, 0x73, 0x37, 0x33, 0x39, 0x67, 0x65, 0x77, 0x6e, 0x76, 0x69, 0x6a, 0x6a, 0x6e, 0x6d, 0x64, 0x32, 0x6e, 0x6b, 0x61, 0x34, 0x68, 0x66, 0x34, 0x6d, 0x65, 0x39, 0x67, 0x32, 0x38, 0x67, 0x35, 0x75, 0x70, 0x32, 0x63, 0x37, 0x73, 0x6e, 0x77, 0x63, 0x36, 0x35, 0x61, 0x38, 0x6b, 0x71, 0x76, 0x74, 0x68, 0x73, 0x35, 0x66, 0x37, 0x68, 0x69, 0x66, 0x6e, 0x78, 0x68, 0x79, 0x30, 0x76, 0x5a, 0x54, 0x37, 0x52, 0x72, 0x31, 0x61, 0x77, 0x74, 0x4f, 0x5a, 0x6b, 0x00, 0x07, 0x83, 0x03, 0x56, 0xaa, 0x6f, 0x41, 0x6e, 0x64, 0x61, 0x6d, 0x61, 0x6b, 0x6d, 0x6a, 0x35, 0x33, 0x79, 0x6a, 0x76, 0x68, 0x76, 0x65, 0x38, 0x63, 0x79, 0x79, 0x6a, 0x35, 0x69, 0x35, 0x35, 0x74, 0x66, 0x6a, 0x62, 0x76, 0x33, 0x61, 0x74, 0x77, 0x37, 0x37, 0x36, 0x67, 0x69, 0x61, 0x78, 0x72, 0x37, 0x39, 0x37, 0x66, 0x65, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: hy0vZT7Rr1awtOZk
				[]byte{0x87, 0x2d, 0x2f, 0x65, 0x3e, 0xd1, 0xaf, 0x56, 0xb0, 0xb4, 0xe6, 0x64},
				createchildaccountChildDelegationNode,
				2114375199125313,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: hy0vZT7Rr1awtOZk
				[]byte{0x87, 0x2d, 0x2f, 0x65, 0x3e, 0xd1, 0xaf, 0x56, 0xb0, 0xb4, 0xe6, 0x64},
				createchildaccountChildDelegationNode,
				2114375199125313,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABToHt5FZKQACPi9Ppmz3A==
	expect := []byte{0x00, 0x14, 0xe8, 0x1e, 0xde, 0x45, 0x64, 0xa4, 0x00, 0x08, 0xf8, 0xbd, 0x3e, 0x99, 0xb3, 0xdc}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBhcGUgcWxlcXloeXogeXdqanBqenAgcmYgZ21vIGFmZXQgc2J6cmp4IAAO73omlHmPUEdZdmE3T3VrdmJONERPMg==
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x61, 0x70, 0x65, 0x20, 0x71, 0x6c, 0x65, 0x71, 0x79, 0x68, 0x79, 0x7a, 0x20, 0x79, 0x77, 0x6a, 0x6a, 0x70, 0x6a, 0x7a, 0x70, 0x20, 0x72, 0x66, 0x20, 0x67, 0x6d, 0x6f, 0x20, 0x61, 0x66, 0x65, 0x74, 0x20, 0x73, 0x62, 0x7a, 0x72, 0x6a, 0x78, 0x20, 0x00, 0x0e, 0xef, 0x7a, 0x26, 0x94, 0x79, 0x8f, 0x50, 0x47, 0x59, 0x76, 0x61, 0x37, 0x4f, 0x75, 0x6b, 0x76, 0x62, 0x4e, 0x34, 0x44, 0x4f, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: PGYva7OukvbN4DO2
				[]byte{0x3c, 0x66, 0x2f, 0x6b, 0xb3, 0xae, 0x92, 0xf6, 0xcd, 0xe0, 0x33, 0xb6},
				4203957586262415,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: PGYva7OukvbN4DO2
				[]byte{0x3c, 0x66, 0x2f, 0x6b, 0xb3, 0xae, 0x92, 0xf6, 0xcd, 0xe0, 0x33, 0xb6},
				4203957586262415,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
