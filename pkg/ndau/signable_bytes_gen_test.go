package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndafh6kjjiahbqwx5fwx3wjktheg3n4p344ttdimdtmv5da4")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndagsk25davuqfnk9picvusppfdw38zkvbdrc4yzq5qy6epp")
	require.NoError(t, err)

	// bmRhZ3NrMjVkYXZ1cWZuazlwaWN2dXNwcGZkdzM4emt2YmRyYzR5enE1cXk2ZXBwAAWCIQf8/70AApoPXz8aEm5kYWZoNmtqamlhaGJxd3g1Znd4M3dqa3RoZWczbjRwMzQ0dHRkaW1kdG12NWRhNA==
	expect := []byte{0x6e, 0x64, 0x61, 0x67, 0x73, 0x6b, 0x32, 0x35, 0x64, 0x61, 0x76, 0x75, 0x71, 0x66, 0x6e, 0x6b, 0x39, 0x70, 0x69, 0x63, 0x76, 0x75, 0x73, 0x70, 0x70, 0x66, 0x64, 0x77, 0x33, 0x38, 0x7a, 0x6b, 0x76, 0x62, 0x64, 0x72, 0x63, 0x34, 0x79, 0x7a, 0x71, 0x35, 0x71, 0x79, 0x36, 0x65, 0x70, 0x70, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x66, 0x68, 0x36, 0x6b, 0x6a, 0x6a, 0x69, 0x61, 0x68, 0x62, 0x71, 0x77, 0x78, 0x35, 0x66, 0x77, 0x78, 0x33, 0x77, 0x6a, 0x6b, 0x74, 0x68, 0x65, 0x67, 0x33, 0x6e, 0x34, 0x70, 0x33, 0x34, 0x34, 0x74, 0x74, 0x64, 0x69, 0x6d, 0x64, 0x74, 0x6d, 0x76, 0x35, 0x64, 0x61, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndag5bi2ftrryv8skdnuz9b6g9wzsj6vh59r89ujt2ttv7q4")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x0d, 0xb2, 0xa2, 0x94, 0x50, 0x35, 0x96, 0x1a, 0xfa, 0x84, 0xcf, 0xed, 0xe9, 0x0f, 0x7e, 0xac, 0xc3, 0xd5, 0x0a, 0xd5, 0xca, 0xfa, 0x90, 0x45, 0x44, 0x35, 0x6f, 0x27, 0xbb, 0x84, 0x93, 0x46}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWFnNWZpd3drYTQzbmd6NHN2aDg1NGlycjR5bmh4aWs0emZyeGVjZmlzNHk4ajc1c3Vqd3BjbnNkeG10NHY3cwAQTcdmlXTFbmRhZzViaTJmdHJyeXY4c2tkbnV6OWI2Zzl3enNqNnZoNTlyODl1anQydHR2N3E0VnIzblVMQmoyWmEybjVjaA==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x67, 0x35, 0x66, 0x69, 0x77, 0x77, 0x6b, 0x61, 0x34, 0x33, 0x6e, 0x67, 0x7a, 0x34, 0x73, 0x76, 0x68, 0x38, 0x35, 0x34, 0x69, 0x72, 0x72, 0x34, 0x79, 0x6e, 0x68, 0x78, 0x69, 0x6b, 0x34, 0x7a, 0x66, 0x72, 0x78, 0x65, 0x63, 0x66, 0x69, 0x73, 0x34, 0x79, 0x38, 0x6a, 0x37, 0x35, 0x73, 0x75, 0x6a, 0x77, 0x70, 0x63, 0x6e, 0x73, 0x64, 0x78, 0x6d, 0x74, 0x34, 0x76, 0x37, 0x73, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x67, 0x35, 0x62, 0x69, 0x32, 0x66, 0x74, 0x72, 0x72, 0x79, 0x76, 0x38, 0x73, 0x6b, 0x64, 0x6e, 0x75, 0x7a, 0x39, 0x62, 0x36, 0x67, 0x39, 0x77, 0x7a, 0x73, 0x6a, 0x36, 0x76, 0x68, 0x35, 0x39, 0x72, 0x38, 0x39, 0x75, 0x6a, 0x74, 0x32, 0x74, 0x74, 0x76, 0x37, 0x71, 0x34, 0x56, 0x72, 0x33, 0x6e, 0x55, 0x4c, 0x42, 0x6a, 0x32, 0x5a, 0x61, 0x32, 0x6e, 0x35, 0x63, 0x68}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: Vr3nULBj2Za2n5ch
				[]byte{0x56, 0xbd, 0xe7, 0x50, 0xb0, 0x63, 0xd9, 0x96, 0xb6, 0x9f, 0x97, 0x21},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: Vr3nULBj2Za2n5ch
				[]byte{0x56, 0xbd, 0xe7, 0x50, 0xb0, 0x63, 0xd9, 0x96, 0xb6, 0x9f, 0x97, 0x21},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndac4rc2tzvmyqw3cmy868ftubfncvmvxzdvc5ib68deg5e6")
	require.NoError(t, err)

	// bmRhYzRyYzJ0enZteXF3M2NteTg2OGZ0dWJmbmN2bXZ4emR2YzVpYjY4ZGVnNWU2AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x34, 0x72, 0x63, 0x32, 0x74, 0x7a, 0x76, 0x6d, 0x79, 0x71, 0x77, 0x33, 0x63, 0x6d, 0x79, 0x38, 0x36, 0x38, 0x66, 0x74, 0x75, 0x62, 0x66, 0x6e, 0x63, 0x76, 0x6d, 0x76, 0x78, 0x7a, 0x64, 0x76, 0x63, 0x35, 0x69, 0x62, 0x36, 0x38, 0x64, 0x65, 0x67, 0x35, 0x65, 0x36, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndacekb9un2myctj2nft2j4zcsqxkwi5ieakg5anum8he83p")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFjZWtiOXVuMm15Y3RqMm5mdDJqNHpjc3F4a3dpNWllYWtnNWFudW04aGU4M3A=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x63, 0x65, 0x6b, 0x62, 0x39, 0x75, 0x6e, 0x32, 0x6d, 0x79, 0x63, 0x74, 0x6a, 0x32, 0x6e, 0x66, 0x74, 0x32, 0x6a, 0x34, 0x7a, 0x63, 0x73, 0x71, 0x78, 0x6b, 0x77, 0x69, 0x35, 0x69, 0x65, 0x61, 0x6b, 0x67, 0x35, 0x61, 0x6e, 0x75, 0x6d, 0x38, 0x68, 0x65, 0x38, 0x33, 0x70}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndait5dzjg2hriic8yeyegmbqenftzrz5bzm7nbr34tb6ehg")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaj3z9yvtj35qnffkwpy7spuiwb54nkqz9f3h44kx4et4w6")
	require.NoError(t, err)

	// bmRhajN6OXl2dGozNXFuZmZrd3B5N3NwdWl3YjU0bmtxejlmM2g0NGt4NGV0NHc2AAjSrCLE0zRuZGFpdDVkempnMmhyaWljOHlleWVnbWJxZW5mdHpyejViem03bmJyMzR0YjZlaGc=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x33, 0x7a, 0x39, 0x79, 0x76, 0x74, 0x6a, 0x33, 0x35, 0x71, 0x6e, 0x66, 0x66, 0x6b, 0x77, 0x70, 0x79, 0x37, 0x73, 0x70, 0x75, 0x69, 0x77, 0x62, 0x35, 0x34, 0x6e, 0x6b, 0x71, 0x7a, 0x39, 0x66, 0x33, 0x68, 0x34, 0x34, 0x6b, 0x78, 0x34, 0x65, 0x74, 0x34, 0x77, 0x36, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x69, 0x74, 0x35, 0x64, 0x7a, 0x6a, 0x67, 0x32, 0x68, 0x72, 0x69, 0x69, 0x63, 0x38, 0x79, 0x65, 0x79, 0x65, 0x67, 0x6d, 0x62, 0x71, 0x65, 0x6e, 0x66, 0x74, 0x7a, 0x72, 0x7a, 0x35, 0x62, 0x7a, 0x6d, 0x37, 0x6e, 0x62, 0x72, 0x33, 0x34, 0x74, 0x62, 0x36, 0x65, 0x68, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndakwz82hmdaysa9i748d8uyr77pvn4j555ys9v5vimr8kec")
	require.NoError(t, err)

	// bmRha3d6ODJobWRheXNhOWk3NDhkOHV5cjc3cHZuNGo1NTV5czl2NXZpbXI4a2VjAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x77, 0x7a, 0x38, 0x32, 0x68, 0x6d, 0x64, 0x61, 0x79, 0x73, 0x61, 0x39, 0x69, 0x37, 0x34, 0x38, 0x64, 0x38, 0x75, 0x79, 0x72, 0x37, 0x37, 0x70, 0x76, 0x6e, 0x34, 0x6a, 0x35, 0x35, 0x35, 0x79, 0x73, 0x39, 0x76, 0x35, 0x76, 0x69, 0x6d, 0x72, 0x38, 0x6b, 0x65, 0x63, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndabku8wh44ezvr6m59q9t8thppidcipg838xeen5mfhenet")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhYmt1OHdoNDRlenZyNm01OXE5dDh0aHBwaWRjaXBnODM4eGVlbjVtZmhlbmV0
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x62, 0x6b, 0x75, 0x38, 0x77, 0x68, 0x34, 0x34, 0x65, 0x7a, 0x76, 0x72, 0x36, 0x6d, 0x35, 0x39, 0x71, 0x39, 0x74, 0x38, 0x74, 0x68, 0x70, 0x70, 0x69, 0x64, 0x63, 0x69, 0x70, 0x67, 0x38, 0x33, 0x38, 0x78, 0x65, 0x65, 0x6e, 0x35, 0x6d, 0x66, 0x68, 0x65, 0x6e, 0x65, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndacnva893jg6e8atxnqxpgzzjfddz5bb6z78y472mp8c2x6")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFjbnZhODkzamc2ZThhdHhucXhwZ3p6amZkZHo1YmI2ejc4eTQ3Mm1wOGMyeDY=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x63, 0x6e, 0x76, 0x61, 0x38, 0x39, 0x33, 0x6a, 0x67, 0x36, 0x65, 0x38, 0x61, 0x74, 0x78, 0x6e, 0x71, 0x78, 0x70, 0x67, 0x7a, 0x7a, 0x6a, 0x66, 0x64, 0x64, 0x7a, 0x35, 0x62, 0x62, 0x36, 0x7a, 0x37, 0x38, 0x79, 0x34, 0x37, 0x32, 0x6d, 0x70, 0x38, 0x63, 0x32, 0x78, 0x36}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndakzff6jmrmyfu662evgy5tfq8ny5hu668nskp3jzw9da8u")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndae4syyn8mw32ga39y3gg6wzj9siqzewn8tgu9yvjck3gr2")
	require.NoError(t, err)

	// bmRhZTRzeXluOG13MzJnYTM5eTNnZzZ3emo5c2lxemV3bjh0Z3U5eXZqY2szZ3IyAAz/orpRehFuZGFremZmNmptcm15ZnU2NjJldmd5NXRmcThueTVodTY2OG5za3Azanp3OWRhOHU=
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x34, 0x73, 0x79, 0x79, 0x6e, 0x38, 0x6d, 0x77, 0x33, 0x32, 0x67, 0x61, 0x33, 0x39, 0x79, 0x33, 0x67, 0x67, 0x36, 0x77, 0x7a, 0x6a, 0x39, 0x73, 0x69, 0x71, 0x7a, 0x65, 0x77, 0x6e, 0x38, 0x74, 0x67, 0x75, 0x39, 0x79, 0x76, 0x6a, 0x63, 0x6b, 0x33, 0x67, 0x72, 0x32, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x6b, 0x7a, 0x66, 0x66, 0x36, 0x6a, 0x6d, 0x72, 0x6d, 0x79, 0x66, 0x75, 0x36, 0x36, 0x32, 0x65, 0x76, 0x67, 0x79, 0x35, 0x74, 0x66, 0x71, 0x38, 0x6e, 0x79, 0x35, 0x68, 0x75, 0x36, 0x36, 0x38, 0x6e, 0x73, 0x6b, 0x70, 0x33, 0x6a, 0x7a, 0x77, 0x39, 0x64, 0x61, 0x38, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndankib37uzxqtugnvmgwhp2gtnms4gddhx55dn6jf5m7h92")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x0c, 0xba, 0xb3, 0xed, 0xbf, 0xb7, 0x4f, 0x3b, 0xec, 0x4f, 0xba, 0x6b, 0xa6, 0x9a, 0xe1, 0x52, 0xb9, 0x71, 0xfb, 0x4d, 0x71, 0xf3, 0x0c, 0x90, 0x31, 0xb3, 0x1b, 0x73, 0x39, 0xf3, 0xe3, 0xbd}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x66, 0xf5, 0x8f, 0x30, 0x60, 0x09, 0x5c, 0x4e, 0xc9, 0x7b, 0xfe, 0x01, 0x2a, 0x25, 0x98, 0x14, 0xbd, 0x03, 0x5d, 0x47, 0x0d, 0x3d, 0x6e, 0xf1, 0x7b, 0x3d, 0x7b, 0x17, 0xed, 0x6a, 0x59, 0x7e}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWFnbXhuOXB6ODV3OHE5bmo4N2d6anc0NmZqbXU2cjVqeDI5Z2Rlc2dnM3R5NjMzOHJ0NTV0cnFkNXA4YngzdwAZX/GDxHNZbmRhbmtpYjM3dXp4cXR1Z252bWd3aHAyZ3RubXM0Z2RkaHg1NWRuNmpmNW03aDkybnB1YmE4amFkdGJiZWJ2cm1kM3NuYWV4MnZ5anJyOWFja3RmdmFrbTRhNDdpNmd2NDV6dHJuOHp5ZjlwcGpuejc3aTI1dGpoaW5nbnhXTEIvWEM2RFdtOGVyV1Q=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x67, 0x6d, 0x78, 0x6e, 0x39, 0x70, 0x7a, 0x38, 0x35, 0x77, 0x38, 0x71, 0x39, 0x6e, 0x6a, 0x38, 0x37, 0x67, 0x7a, 0x6a, 0x77, 0x34, 0x36, 0x66, 0x6a, 0x6d, 0x75, 0x36, 0x72, 0x35, 0x6a, 0x78, 0x32, 0x39, 0x67, 0x64, 0x65, 0x73, 0x67, 0x67, 0x33, 0x74, 0x79, 0x36, 0x33, 0x33, 0x38, 0x72, 0x74, 0x35, 0x35, 0x74, 0x72, 0x71, 0x64, 0x35, 0x70, 0x38, 0x62, 0x78, 0x33, 0x77, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x6e, 0x6b, 0x69, 0x62, 0x33, 0x37, 0x75, 0x7a, 0x78, 0x71, 0x74, 0x75, 0x67, 0x6e, 0x76, 0x6d, 0x67, 0x77, 0x68, 0x70, 0x32, 0x67, 0x74, 0x6e, 0x6d, 0x73, 0x34, 0x67, 0x64, 0x64, 0x68, 0x78, 0x35, 0x35, 0x64, 0x6e, 0x36, 0x6a, 0x66, 0x35, 0x6d, 0x37, 0x68, 0x39, 0x32, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x76, 0x72, 0x6d, 0x64, 0x33, 0x73, 0x6e, 0x61, 0x65, 0x78, 0x32, 0x76, 0x79, 0x6a, 0x72, 0x72, 0x39, 0x61, 0x63, 0x6b, 0x74, 0x66, 0x76, 0x61, 0x6b, 0x6d, 0x34, 0x61, 0x34, 0x37, 0x69, 0x36, 0x67, 0x76, 0x34, 0x35, 0x7a, 0x74, 0x72, 0x6e, 0x38, 0x7a, 0x79, 0x66, 0x39, 0x70, 0x70, 0x6a, 0x6e, 0x7a, 0x37, 0x37, 0x69, 0x32, 0x35, 0x74, 0x6a, 0x68, 0x69, 0x6e, 0x67, 0x6e, 0x78, 0x57, 0x4c, 0x42, 0x2f, 0x58, 0x43, 0x36, 0x44, 0x57, 0x6d, 0x38, 0x65, 0x72, 0x57, 0x54}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: xWLB/XC6DWm8erWT
				[]byte{0xc5, 0x62, 0xc1, 0xfd, 0x70, 0xba, 0x0d, 0x69, 0xbc, 0x7a, 0xb5, 0x93},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: xWLB/XC6DWm8erWT
				[]byte{0xc5, 0x62, 0xc1, 0xfd, 0x70, 0xba, 0x0d, 0x69, 0xbc, 0x7a, 0xb5, 0x93},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndakhtxrnv4ce9j7wwxds6zvpx4z3xp3zrnadnxqg4qyj8ez")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndamw9ykmf9b93i7siaw6yzr2xt6xz64hctbhbc72v7jxvds")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFtdzl5a21mOWI5M2k3c2lhdzZ5enIyeHQ2eHo2NGhjdGJoYmM3MnY3anh2ZHNuZGFraHR4cm52NGNlOWo3d3d4ZHM2enZweDR6M3hwM3pybmFkbnhxZzRxeWo4ZXo=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x6d, 0x77, 0x39, 0x79, 0x6b, 0x6d, 0x66, 0x39, 0x62, 0x39, 0x33, 0x69, 0x37, 0x73, 0x69, 0x61, 0x77, 0x36, 0x79, 0x7a, 0x72, 0x32, 0x78, 0x74, 0x36, 0x78, 0x7a, 0x36, 0x34, 0x68, 0x63, 0x74, 0x62, 0x68, 0x62, 0x63, 0x37, 0x32, 0x76, 0x37, 0x6a, 0x78, 0x76, 0x64, 0x73, 0x6e, 0x64, 0x61, 0x6b, 0x68, 0x74, 0x78, 0x72, 0x6e, 0x76, 0x34, 0x63, 0x65, 0x39, 0x6a, 0x37, 0x77, 0x77, 0x78, 0x64, 0x73, 0x36, 0x7a, 0x76, 0x70, 0x78, 0x34, 0x7a, 0x33, 0x78, 0x70, 0x33, 0x7a, 0x72, 0x6e, 0x61, 0x64, 0x6e, 0x78, 0x71, 0x67, 0x34, 0x71, 0x79, 0x6a, 0x38, 0x65, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndamvff8ktqw73u3ht6i7iwghhyejkp8ebaf8cwnzu542ghh")
	require.NoError(t, err)

	// NVVLSGVXUnFXTUpEVmdQL25kYW12ZmY4a3RxdzczdTNodDZpN2l3Z2hoeWVqa3A4ZWJhZjhjd256dTU0MmdoaHN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x35, 0x55, 0x4b, 0x48, 0x65, 0x57, 0x52, 0x71, 0x57, 0x4d, 0x4a, 0x44, 0x56, 0x67, 0x50, 0x2f, 0x6e, 0x64, 0x61, 0x6d, 0x76, 0x66, 0x66, 0x38, 0x6b, 0x74, 0x71, 0x77, 0x37, 0x33, 0x75, 0x33, 0x68, 0x74, 0x36, 0x69, 0x37, 0x69, 0x77, 0x67, 0x68, 0x68, 0x79, 0x65, 0x6a, 0x6b, 0x70, 0x38, 0x65, 0x62, 0x61, 0x66, 0x38, 0x63, 0x77, 0x6e, 0x7a, 0x75, 0x35, 0x34, 0x32, 0x67, 0x68, 0x68, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 5UKHeWRqWMJDVgP/
				[]byte{0xe5, 0x42, 0x87, 0x79, 0x64, 0x6a, 0x58, 0xc2, 0x43, 0x56, 0x03, 0xff},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 5UKHeWRqWMJDVgP/
				[]byte{0xe5, 0x42, 0x87, 0x79, 0x64, 0x6a, 0x58, 0xc2, 0x43, 0x56, 0x03, 0xff},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndapvix5hkkdnufsmxbdh7iwu2rs2yewptpggfma2vbadrue")
	require.NoError(t, err)

	// bmRhcHZpeDVoa2tkbnVmc214YmRoN2l3dTJyczJ5ZXdwdHBnZ2ZtYTJ2YmFkcnVlAA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x76, 0x69, 0x78, 0x35, 0x68, 0x6b, 0x6b, 0x64, 0x6e, 0x75, 0x66, 0x73, 0x6d, 0x78, 0x62, 0x64, 0x68, 0x37, 0x69, 0x77, 0x75, 0x32, 0x72, 0x73, 0x32, 0x79, 0x65, 0x77, 0x70, 0x74, 0x70, 0x67, 0x67, 0x66, 0x6d, 0x61, 0x32, 0x76, 0x62, 0x61, 0x64, 0x72, 0x75, 0x65, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndaejvmaw4y57vn4vvfiud4h6nt2bnn5h7zei9bq3udhcrtm")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndajnaezgxkceins8r8tb3dqmsvnxx95f2a7puikkdpbciy8")
	require.NoError(t, err)

	// bmRham5hZXpneGtjZWluczhyOHRiM2RxbXN2bnh4OTVmMmE3cHVpa2tkcGJjaXk4MXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWVqdm1hdzR5NTd2bjR2dmZpdWQ0aDZudDJibm41aDd6ZWk5YnEzdWRoY3J0bQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x6e, 0x61, 0x65, 0x7a, 0x67, 0x78, 0x6b, 0x63, 0x65, 0x69, 0x6e, 0x73, 0x38, 0x72, 0x38, 0x74, 0x62, 0x33, 0x64, 0x71, 0x6d, 0x73, 0x76, 0x6e, 0x78, 0x78, 0x39, 0x35, 0x66, 0x32, 0x61, 0x37, 0x70, 0x75, 0x69, 0x6b, 0x6b, 0x64, 0x70, 0x62, 0x63, 0x69, 0x79, 0x38, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x65, 0x6a, 0x76, 0x6d, 0x61, 0x77, 0x34, 0x79, 0x35, 0x37, 0x76, 0x6e, 0x34, 0x76, 0x76, 0x66, 0x69, 0x75, 0x64, 0x34, 0x68, 0x36, 0x6e, 0x74, 0x32, 0x62, 0x6e, 0x6e, 0x35, 0x68, 0x37, 0x7a, 0x65, 0x69, 0x39, 0x62, 0x71, 0x33, 0x75, 0x64, 0x68, 0x63, 0x72, 0x74, 0x6d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmotKT2w3Q1hqMStjbjNhYUdLAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x4a, 0x4f, 0x6c, 0x37, 0x43, 0x58, 0x6a, 0x31, 0x2b, 0x63, 0x6e, 0x33, 0x61, 0x61, 0x47, 0x4b, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: JOl7CXj1+cn3aaGK
				[]byte{0x24, 0xe9, 0x7b, 0x09, 0x78, 0xf5, 0xf9, 0xc9, 0xf7, 0x69, 0xa1, 0x8a},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: JOl7CXj1+cn3aaGK
				[]byte{0x24, 0xe9, 0x7b, 0x09, 0x78, 0xf5, 0xf9, 0xc9, 0xf7, 0x69, 0xa1, 0x8a},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndaced6h8qvmskn4858u2mfwagv86ipvwbjfdvr8d9td2h2h")
	require.NoError(t, err)

	// bmRhY2VkNmg4cXZtc2tuNDg1OHUybWZ3YWd2ODZpcHZ3YmpmZHZyOGQ5dGQyaDJoAAJeEXA5N5c=
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x65, 0x64, 0x36, 0x68, 0x38, 0x71, 0x76, 0x6d, 0x73, 0x6b, 0x6e, 0x34, 0x38, 0x35, 0x38, 0x75, 0x32, 0x6d, 0x66, 0x77, 0x61, 0x67, 0x76, 0x38, 0x36, 0x69, 0x70, 0x76, 0x77, 0x62, 0x6a, 0x66, 0x64, 0x76, 0x72, 0x38, 0x64, 0x39, 0x74, 0x64, 0x32, 0x68, 0x32, 0x68, 0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndaq76kz5wvdmgsut3tb7yvmcuebw78xf47wxagqp4u76rqh")
	require.NoError(t, err)

	// ABP6yCVBcNBuZGFxNzZrejV3dmRtZ3N1dDN0Yjd5dm1jdWVidzc4eGY0N3d4YWdxcDR1NzZycWg=
	expect := []byte{0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0, 0x6e, 0x64, 0x61, 0x71, 0x37, 0x36, 0x6b, 0x7a, 0x35, 0x77, 0x76, 0x64, 0x6d, 0x67, 0x73, 0x75, 0x74, 0x33, 0x74, 0x62, 0x37, 0x79, 0x76, 0x6d, 0x63, 0x75, 0x65, 0x62, 0x77, 0x37, 0x38, 0x78, 0x66, 0x34, 0x37, 0x77, 0x78, 0x61, 0x67, 0x71, 0x70, 0x34, 0x75, 0x37, 0x36, 0x72, 0x71, 0x68}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA2S+t7X5soACfdnZnjooQ==
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				3820780875409098,
				2805298263287969,
			),
		},
		{
			"with signature",
			NewIssue(
				3820780875409098,
				2805298263287969,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndah8zf7tds2a43nczhyy2c2pij2h3ig2n5bqmb5ewf79wu2")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndairxknkurshn7xhaz8ag29d5zwbqgcqn5j88mw786gzcn2")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xa7, 0xe4, 0xb5, 0x5b, 0x5a, 0x70, 0x11, 0x90, 0xbf, 0x07, 0xb1, 0x6f, 0xff, 0x77, 0x6d, 0x88, 0x0c, 0x51, 0xa1, 0xe9, 0xb8, 0x1f, 0x06, 0xcd, 0x23, 0x48, 0x6e, 0x9e, 0x7b, 0x67, 0x3a, 0x35}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x76, 0x87, 0x3a, 0x79, 0x6a, 0x17, 0xaf, 0x98, 0x9b, 0x86, 0xdb, 0x00, 0x57, 0xee, 0x91, 0x18, 0x0c, 0x5b, 0x6a, 0x3b, 0x55, 0x43, 0xb9, 0x4f, 0xec, 0x24, 0x5d, 0x59, 0x47, 0x92, 0xd8, 0x7a, 0xa9, 0x10, 0x37, 0x98, 0xe2, 0x7c, 0x7e, 0x6f, 0x40, 0x3e, 0x4c, 0xbd, 0x6b, 0x12, 0x96, 0x8e, 0x37, 0x9b, 0xcd, 0x72, 0xfa, 0x49, 0x99, 0x8c, 0x00, 0xe8, 0xf1, 0x0f, 0x8a, 0x3f, 0x72, 0xae})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xff, 0xaa, 0x4b, 0x59, 0x4e, 0x03, 0xad, 0xea, 0x2b, 0x6f, 0xb3, 0x3a, 0x91, 0x51, 0xdd, 0x05, 0x06, 0xc2, 0xf9, 0x03, 0x65, 0x35, 0xf1, 0xc3, 0x60, 0xa8, 0x4c, 0x3d, 0x12, 0x31, 0xcc, 0x68}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndakntdf2zdgdnjh3th3ewvd4ud3qn8xqcf52c8dbf92t4z5")
	require.NoError(t, err)

	// bmRhaXJ4a25rdXJzaG43eGhhejhhZzI5ZDV6d2JxZ2NxbjVqODhtdzc4Nmd6Y24ybmRha250ZGYyemRnZG5qaDN0aDNld3ZkNHVkM3FuOHhxY2Y1MmM4ZGJmOTJ0NHo1bnB1YmE4amFkdGJiZWN2OGpwazVtajJiZGVmOWE4Mnk5OTV6cHllYTJ3cGI3ZzZiOGJ5cGVwZWc3aHY1bjY3ZGt3eGd6Y3JwNW1lZTF5NG02ZHQ1aDIxbTQ2czM0MzczNHVzYTRqYWR0Y2FxNGR2dzhta2M4ejN0ZzZnNW5hZnI1d3RkYWdmeTR0NWt4YjV1djluZXRxeHV0NnU1YjdrdWVienZkdGgyOXZyaWE5ZTNybW1ja21pNnA2NTN4M3J3dW4zdHNhcXQ2aXJ0aTl6Zm14YnhyM3lyMm54bnB1YmE4amFkdGJiZWQ5NHd1NDNqMmI0NTR0bXA4M3Z4ZWt0NXdjc3BzejNhcHV2bTZxZG5jd2Uycml1Z2hnZ3NlMnJ4NWI2ZWN6aEplaDUvdiswYVQrYTVjbU0AB4MDVqpvQW5kYWg4emY3dGRzMmE0M25jemh5eTJjMnBpajJoM2lnMm41YnFtYjVld2Y3OXd1Mg==
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x72, 0x78, 0x6b, 0x6e, 0x6b, 0x75, 0x72, 0x73, 0x68, 0x6e, 0x37, 0x78, 0x68, 0x61, 0x7a, 0x38, 0x61, 0x67, 0x32, 0x39, 0x64, 0x35, 0x7a, 0x77, 0x62, 0x71, 0x67, 0x63, 0x71, 0x6e, 0x35, 0x6a, 0x38, 0x38, 0x6d, 0x77, 0x37, 0x38, 0x36, 0x67, 0x7a, 0x63, 0x6e, 0x32, 0x6e, 0x64, 0x61, 0x6b, 0x6e, 0x74, 0x64, 0x66, 0x32, 0x7a, 0x64, 0x67, 0x64, 0x6e, 0x6a, 0x68, 0x33, 0x74, 0x68, 0x33, 0x65, 0x77, 0x76, 0x64, 0x34, 0x75, 0x64, 0x33, 0x71, 0x6e, 0x38, 0x78, 0x71, 0x63, 0x66, 0x35, 0x32, 0x63, 0x38, 0x64, 0x62, 0x66, 0x39, 0x32, 0x74, 0x34, 0x7a, 0x35, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x76, 0x38, 0x6a, 0x70, 0x6b, 0x35, 0x6d, 0x6a, 0x32, 0x62, 0x64, 0x65, 0x66, 0x39, 0x61, 0x38, 0x32, 0x79, 0x39, 0x39, 0x35, 0x7a, 0x70, 0x79, 0x65, 0x61, 0x32, 0x77, 0x70, 0x62, 0x37, 0x67, 0x36, 0x62, 0x38, 0x62, 0x79, 0x70, 0x65, 0x70, 0x65, 0x67, 0x37, 0x68, 0x76, 0x35, 0x6e, 0x36, 0x37, 0x64, 0x6b, 0x77, 0x78, 0x67, 0x7a, 0x63, 0x72, 0x70, 0x35, 0x6d, 0x65, 0x65, 0x31, 0x79, 0x34, 0x6d, 0x36, 0x64, 0x74, 0x35, 0x68, 0x32, 0x31, 0x6d, 0x34, 0x36, 0x73, 0x33, 0x34, 0x33, 0x37, 0x33, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x71, 0x34, 0x64, 0x76, 0x77, 0x38, 0x6d, 0x6b, 0x63, 0x38, 0x7a, 0x33, 0x74, 0x67, 0x36, 0x67, 0x35, 0x6e, 0x61, 0x66, 0x72, 0x35, 0x77, 0x74, 0x64, 0x61, 0x67, 0x66, 0x79, 0x34, 0x74, 0x35, 0x6b, 0x78, 0x62, 0x35, 0x75, 0x76, 0x39, 0x6e, 0x65, 0x74, 0x71, 0x78, 0x75, 0x74, 0x36, 0x75, 0x35, 0x62, 0x37, 0x6b, 0x75, 0x65, 0x62, 0x7a, 0x76, 0x64, 0x74, 0x68, 0x32, 0x39, 0x76, 0x72, 0x69, 0x61, 0x39, 0x65, 0x33, 0x72, 0x6d, 0x6d, 0x63, 0x6b, 0x6d, 0x69, 0x36, 0x70, 0x36, 0x35, 0x33, 0x78, 0x33, 0x72, 0x77, 0x75, 0x6e, 0x33, 0x74, 0x73, 0x61, 0x71, 0x74, 0x36, 0x69, 0x72, 0x74, 0x69, 0x39, 0x7a, 0x66, 0x6d, 0x78, 0x62, 0x78, 0x72, 0x33, 0x79, 0x72, 0x32, 0x6e, 0x78, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x39, 0x34, 0x77, 0x75, 0x34, 0x33, 0x6a, 0x32, 0x62, 0x34, 0x35, 0x34, 0x74, 0x6d, 0x70, 0x38, 0x33, 0x76, 0x78, 0x65, 0x6b, 0x74, 0x35, 0x77, 0x63, 0x73, 0x70, 0x73, 0x7a, 0x33, 0x61, 0x70, 0x75, 0x76, 0x6d, 0x36, 0x71, 0x64, 0x6e, 0x63, 0x77, 0x65, 0x32, 0x72, 0x69, 0x75, 0x67, 0x68, 0x67, 0x67, 0x73, 0x65, 0x32, 0x72, 0x78, 0x35, 0x62, 0x36, 0x65, 0x63, 0x7a, 0x68, 0x4a, 0x65, 0x68, 0x35, 0x2f, 0x76, 0x2b, 0x30, 0x61, 0x54, 0x2b, 0x61, 0x35, 0x63, 0x6d, 0x4d, 0x00, 0x07, 0x83, 0x03, 0x56, 0xaa, 0x6f, 0x41, 0x6e, 0x64, 0x61, 0x68, 0x38, 0x7a, 0x66, 0x37, 0x74, 0x64, 0x73, 0x32, 0x61, 0x34, 0x33, 0x6e, 0x63, 0x7a, 0x68, 0x79, 0x79, 0x32, 0x63, 0x32, 0x70, 0x69, 0x6a, 0x32, 0x68, 0x33, 0x69, 0x67, 0x32, 0x6e, 0x35, 0x62, 0x71, 0x6d, 0x62, 0x35, 0x65, 0x77, 0x66, 0x37, 0x39, 0x77, 0x75, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: Jeh5/v+0aT+a5cmM
				[]byte{0x25, 0xe8, 0x79, 0xfe, 0xff, 0xb4, 0x69, 0x3f, 0x9a, 0xe5, 0xc9, 0x8c},
				createchildaccountChildDelegationNode,
				2114375199125313,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: Jeh5/v+0aT+a5cmM
				[]byte{0x25, 0xe8, 0x79, 0xfe, 0xff, 0xb4, 0x69, 0x3f, 0x9a, 0xe5, 0xc9, 0x8c},
				createchildaccountChildDelegationNode,
				2114375199125313,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABToHt5FZKQACPi9Ppmz3A==
	expect := []byte{0x00, 0x14, 0xe8, 0x1e, 0xde, 0x45, 0x64, 0xa4, 0x00, 0x08, 0xf8, 0xbd, 0x3e, 0x99, 0xb3, 0xdc}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBhcGUgcWxlcXloeXogeXdqanBqenAgcmYgZ21vIGFmZXQgc2J6cmp4IAAO73omlHmPUGUzZzJ2UVVEZnVBVXQweg==
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x61, 0x70, 0x65, 0x20, 0x71, 0x6c, 0x65, 0x71, 0x79, 0x68, 0x79, 0x7a, 0x20, 0x79, 0x77, 0x6a, 0x6a, 0x70, 0x6a, 0x7a, 0x70, 0x20, 0x72, 0x66, 0x20, 0x67, 0x6d, 0x6f, 0x20, 0x61, 0x66, 0x65, 0x74, 0x20, 0x73, 0x62, 0x7a, 0x72, 0x6a, 0x78, 0x20, 0x00, 0x0e, 0xef, 0x7a, 0x26, 0x94, 0x79, 0x8f, 0x50, 0x65, 0x33, 0x67, 0x32, 0x76, 0x51, 0x55, 0x44, 0x66, 0x75, 0x41, 0x55, 0x74, 0x30, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: Pe3g2vQUDfuAUt0z
				[]byte{0x3d, 0xed, 0xe0, 0xda, 0xf4, 0x14, 0x0d, 0xfb, 0x80, 0x52, 0xdd, 0x33},
				4203957586262415,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: Pe3g2vQUDfuAUt0z
				[]byte{0x3d, 0xed, 0xe0, 0xda, 0xf4, 0x14, 0x0d, 0xfb, 0x80, 0x52, 0xdd, 0x33},
				4203957586262415,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSchema_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiB3ZWtyYmUgAB0pKG8A8C0=
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x77, 0x65, 0x6b, 0x72, 0x62, 0x65, 0x20, 0x00, 0x1d, 0x29, 0x28, 0x6f, 0x00, 0xf0, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSchema
	}{
		{
			"no signatures",
			NewChangeSchema(
				"string: wekrbe ",
				8208027962372141,
			),
		},
		{
			"with signature",
			NewChangeSchema(
				"string: wekrbe ",
				8208027962372141,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
