package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndagcaisyu3ue5ednv9exm84tevrsufmzgcjk8y8izxz92nt")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndapxabfji3fr6xxz4csfxg7zrgd9y6r593j3d8h8gwa32rj")
	require.NoError(t, err)

	// bmRhcHhhYmZqaTNmcjZ4eHo0Y3NmeGc3enJnZDl5NnI1OTNqM2Q4aDhnd2EzMnJqAAWCIQf8/70AApoPXz8aEm5kYWdjYWlzeXUzdWU1ZWRudjlleG04NHRldnJzdWZtemdjams4eThpenh6OTJudA==
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x78, 0x61, 0x62, 0x66, 0x6a, 0x69, 0x33, 0x66, 0x72, 0x36, 0x78, 0x78, 0x7a, 0x34, 0x63, 0x73, 0x66, 0x78, 0x67, 0x37, 0x7a, 0x72, 0x67, 0x64, 0x39, 0x79, 0x36, 0x72, 0x35, 0x39, 0x33, 0x6a, 0x33, 0x64, 0x38, 0x68, 0x38, 0x67, 0x77, 0x61, 0x33, 0x32, 0x72, 0x6a, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x67, 0x63, 0x61, 0x69, 0x73, 0x79, 0x75, 0x33, 0x75, 0x65, 0x35, 0x65, 0x64, 0x6e, 0x76, 0x39, 0x65, 0x78, 0x6d, 0x38, 0x34, 0x74, 0x65, 0x76, 0x72, 0x73, 0x75, 0x66, 0x6d, 0x7a, 0x67, 0x63, 0x6a, 0x6b, 0x38, 0x79, 0x38, 0x69, 0x7a, 0x78, 0x7a, 0x39, 0x32, 0x6e, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndapzrpu7unqhg6323bvp82hrhptkng2cqgt2qexxz4bqb8b")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x5b, 0xd4, 0x93, 0x2c, 0xec, 0xe7, 0xae, 0xde, 0xa1, 0xb7, 0xd5, 0x3d, 0xb6, 0x15, 0xd0, 0xa1, 0x0e, 0x6f, 0x8b, 0x8b, 0xaa, 0x06, 0xd7, 0x0f, 0xb5, 0x25, 0x6f, 0x5e, 0xbc, 0x35, 0x95, 0x59}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWJwN2plM243dnY0N3p4Ynk5a3Y1cHN4NGNzczY1Nm10cXhhcHgycnl3dXk4eng2Z3lreHZjc3d0Y3Z2dmdtaQAQTcdmlXTFbmRhcHpycHU3dW5xaGc2MzIzYnZwODJocmhwdGtuZzJjcWd0MnFleHh6NGJxYjhicldhYTlhbUhiQmd3akplTg==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x70, 0x37, 0x6a, 0x65, 0x33, 0x6e, 0x37, 0x76, 0x76, 0x34, 0x37, 0x7a, 0x78, 0x62, 0x79, 0x39, 0x6b, 0x76, 0x35, 0x70, 0x73, 0x78, 0x34, 0x63, 0x73, 0x73, 0x36, 0x35, 0x36, 0x6d, 0x74, 0x71, 0x78, 0x61, 0x70, 0x78, 0x32, 0x72, 0x79, 0x77, 0x75, 0x79, 0x38, 0x7a, 0x78, 0x36, 0x67, 0x79, 0x6b, 0x78, 0x76, 0x63, 0x73, 0x77, 0x74, 0x63, 0x76, 0x76, 0x76, 0x67, 0x6d, 0x69, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x70, 0x7a, 0x72, 0x70, 0x75, 0x37, 0x75, 0x6e, 0x71, 0x68, 0x67, 0x36, 0x33, 0x32, 0x33, 0x62, 0x76, 0x70, 0x38, 0x32, 0x68, 0x72, 0x68, 0x70, 0x74, 0x6b, 0x6e, 0x67, 0x32, 0x63, 0x71, 0x67, 0x74, 0x32, 0x71, 0x65, 0x78, 0x78, 0x7a, 0x34, 0x62, 0x71, 0x62, 0x38, 0x62, 0x72, 0x57, 0x61, 0x61, 0x39, 0x61, 0x6d, 0x48, 0x62, 0x42, 0x67, 0x77, 0x6a, 0x4a, 0x65, 0x4e}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: rWaa9amHbBgwjJeN
				[]byte{0xad, 0x66, 0x9a, 0xf5, 0xa9, 0x87, 0x6c, 0x18, 0x30, 0x8c, 0x97, 0x8d},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: rWaa9amHbBgwjJeN
				[]byte{0xad, 0x66, 0x9a, 0xf5, 0xa9, 0x87, 0x6c, 0x18, 0x30, 0x8c, 0x97, 0x8d},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndaem35k9t2apa5y7smbmqptekdivy4n6f9pc3ne66b5etpw")
	require.NoError(t, err)

	// bmRhZW0zNWs5dDJhcGE1eTdzbWJtcXB0ZWtkaXZ5NG42ZjlwYzNuZTY2YjVldHB3AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x6d, 0x33, 0x35, 0x6b, 0x39, 0x74, 0x32, 0x61, 0x70, 0x61, 0x35, 0x79, 0x37, 0x73, 0x6d, 0x62, 0x6d, 0x71, 0x70, 0x74, 0x65, 0x6b, 0x64, 0x69, 0x76, 0x79, 0x34, 0x6e, 0x36, 0x66, 0x39, 0x70, 0x63, 0x33, 0x6e, 0x65, 0x36, 0x36, 0x62, 0x35, 0x65, 0x74, 0x70, 0x77, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndac8p6qts9v49kqhze7bm4uzukkachk2y9pduucx4ta4c6w")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFjOHA2cXRzOXY0OWtxaHplN2JtNHV6dWtrYWNoazJ5OXBkdXVjeDR0YTRjNnc=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x63, 0x38, 0x70, 0x36, 0x71, 0x74, 0x73, 0x39, 0x76, 0x34, 0x39, 0x6b, 0x71, 0x68, 0x7a, 0x65, 0x37, 0x62, 0x6d, 0x34, 0x75, 0x7a, 0x75, 0x6b, 0x6b, 0x61, 0x63, 0x68, 0x6b, 0x32, 0x79, 0x39, 0x70, 0x64, 0x75, 0x75, 0x63, 0x78, 0x34, 0x74, 0x61, 0x34, 0x63, 0x36, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndaqzjq7udebmnuuhdwkf664jdg7bhm7xmcp68xy6pckvjs5")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndadud86m4bex5jae94yvzymgj59p5v7qrsgd7g4zvnu8ajt")
	require.NoError(t, err)

	// bmRhZHVkODZtNGJleDVqYWU5NHl2enltZ2o1OXA1djdxcnNnZDdnNHp2bnU4YWp0AAjSrCLE0zRuZGFxempxN3VkZWJtbnV1aGR3a2Y2NjRqZGc3YmhtN3htY3A2OHh5NnBja3ZqczU=
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x75, 0x64, 0x38, 0x36, 0x6d, 0x34, 0x62, 0x65, 0x78, 0x35, 0x6a, 0x61, 0x65, 0x39, 0x34, 0x79, 0x76, 0x7a, 0x79, 0x6d, 0x67, 0x6a, 0x35, 0x39, 0x70, 0x35, 0x76, 0x37, 0x71, 0x72, 0x73, 0x67, 0x64, 0x37, 0x67, 0x34, 0x7a, 0x76, 0x6e, 0x75, 0x38, 0x61, 0x6a, 0x74, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x71, 0x7a, 0x6a, 0x71, 0x37, 0x75, 0x64, 0x65, 0x62, 0x6d, 0x6e, 0x75, 0x75, 0x68, 0x64, 0x77, 0x6b, 0x66, 0x36, 0x36, 0x34, 0x6a, 0x64, 0x67, 0x37, 0x62, 0x68, 0x6d, 0x37, 0x78, 0x6d, 0x63, 0x70, 0x36, 0x38, 0x78, 0x79, 0x36, 0x70, 0x63, 0x6b, 0x76, 0x6a, 0x73, 0x35}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndaf23ai8vfg9hparyhik3ywdr6ypun323f6im3j7guw5urj")
	require.NoError(t, err)

	// bmRhZjIzYWk4dmZnOWhwYXJ5aGlrM3l3ZHI2eXB1bjMyM2Y2aW0zajdndXc1dXJqAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x32, 0x33, 0x61, 0x69, 0x38, 0x76, 0x66, 0x67, 0x39, 0x68, 0x70, 0x61, 0x72, 0x79, 0x68, 0x69, 0x6b, 0x33, 0x79, 0x77, 0x64, 0x72, 0x36, 0x79, 0x70, 0x75, 0x6e, 0x33, 0x32, 0x33, 0x66, 0x36, 0x69, 0x6d, 0x33, 0x6a, 0x37, 0x67, 0x75, 0x77, 0x35, 0x75, 0x72, 0x6a, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndakcx37cqtqxjxzfhs4gfhsxkdyjyp4p66paag3ycjskqgs")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRha2N4MzdjcXRxeGp4emZoczRnZmhzeGtkeWp5cDRwNjZwYWFnM3ljanNrcWdz
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x6b, 0x63, 0x78, 0x33, 0x37, 0x63, 0x71, 0x74, 0x71, 0x78, 0x6a, 0x78, 0x7a, 0x66, 0x68, 0x73, 0x34, 0x67, 0x66, 0x68, 0x73, 0x78, 0x6b, 0x64, 0x79, 0x6a, 0x79, 0x70, 0x34, 0x70, 0x36, 0x36, 0x70, 0x61, 0x61, 0x67, 0x33, 0x79, 0x63, 0x6a, 0x73, 0x6b, 0x71, 0x67, 0x73}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndacp35fvruu6n2yaw8gv7zzbuwm8jue8rdkebubmxuj35zz")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFjcDM1ZnZydXU2bjJ5YXc4Z3Y3enpidXdtOGp1ZThyZGtlYnVibXh1ajM1eno=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x63, 0x70, 0x33, 0x35, 0x66, 0x76, 0x72, 0x75, 0x75, 0x36, 0x6e, 0x32, 0x79, 0x61, 0x77, 0x38, 0x67, 0x76, 0x37, 0x7a, 0x7a, 0x62, 0x75, 0x77, 0x6d, 0x38, 0x6a, 0x75, 0x65, 0x38, 0x72, 0x64, 0x6b, 0x65, 0x62, 0x75, 0x62, 0x6d, 0x78, 0x75, 0x6a, 0x33, 0x35, 0x7a, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndapdgp3tr4i74znn3nn3canfbntb92ns4pdte9pbv7cyxv2")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndan94m4ahdmt394kxdnvnxkduawx5pn9w5mrjr8xdciznjc")
	require.NoError(t, err)

	// bmRhbjk0bTRhaGRtdDM5NGt4ZG52bnhrZHVhd3g1cG45dzVtcmpyOHhkY2l6bmpjAAz/orpRehFuZGFwZGdwM3RyNGk3NHpubjNubjNjYW5mYm50YjkybnM0cGR0ZTlwYnY3Y3l4djI=
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x39, 0x34, 0x6d, 0x34, 0x61, 0x68, 0x64, 0x6d, 0x74, 0x33, 0x39, 0x34, 0x6b, 0x78, 0x64, 0x6e, 0x76, 0x6e, 0x78, 0x6b, 0x64, 0x75, 0x61, 0x77, 0x78, 0x35, 0x70, 0x6e, 0x39, 0x77, 0x35, 0x6d, 0x72, 0x6a, 0x72, 0x38, 0x78, 0x64, 0x63, 0x69, 0x7a, 0x6e, 0x6a, 0x63, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x70, 0x64, 0x67, 0x70, 0x33, 0x74, 0x72, 0x34, 0x69, 0x37, 0x34, 0x7a, 0x6e, 0x6e, 0x33, 0x6e, 0x6e, 0x33, 0x63, 0x61, 0x6e, 0x66, 0x62, 0x6e, 0x74, 0x62, 0x39, 0x32, 0x6e, 0x73, 0x34, 0x70, 0x64, 0x74, 0x65, 0x39, 0x70, 0x62, 0x76, 0x37, 0x63, 0x79, 0x78, 0x76, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndaatbfpqt8tezncwq5tgaq7dsv5granw4yasr35anev6iiw")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x23, 0x58, 0x72, 0x0a, 0x45, 0xf8, 0x34, 0x99, 0xb9, 0xcd, 0x5e, 0xa7, 0x4c, 0x92, 0xe2, 0xc9, 0xe1, 0x46, 0xde, 0xac, 0xf5, 0xe7, 0x45, 0x7f, 0xc0, 0x82, 0x8b, 0x29, 0x6e, 0x4d, 0xee, 0xf3}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xed, 0xc4, 0xf2, 0x6c, 0x1c, 0x71, 0x75, 0xfc, 0x6f, 0x34, 0xbc, 0x92, 0x40, 0x49, 0x4e, 0xf1, 0x71, 0x05, 0x65, 0x77, 0x5f, 0x5d, 0xf7, 0xe0, 0x65, 0xf4, 0x05, 0x26, 0x3b, 0xf1, 0xd6, 0x4a}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWF0eHM2c2tpejZkamdwMzN4cmtxdmV1Nm1lOGN0eTh4djQ4cXRtOTJjYml5a21xanp6cmdiaGU0MjY2MjhtMgAZX/GDxHNZbmRhYXRiZnBxdDh0ZXpuY3dxNXRnYXE3ZHN2NWdyYW53NHlhc3IzNWFuZXY2aWl3bnB1YmE4amFkdGJiZWR5Nmo2dm5kdDJ6bTlkcmd1OGplc2NqajUyemNibWZxN3J4NTc5YW56NGFranQ1OGhtZXg5Yms2N3BoM2J6dEFWQ1ZUbWhXSFB5NElqNDI=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x74, 0x78, 0x73, 0x36, 0x73, 0x6b, 0x69, 0x7a, 0x36, 0x64, 0x6a, 0x67, 0x70, 0x33, 0x33, 0x78, 0x72, 0x6b, 0x71, 0x76, 0x65, 0x75, 0x36, 0x6d, 0x65, 0x38, 0x63, 0x74, 0x79, 0x38, 0x78, 0x76, 0x34, 0x38, 0x71, 0x74, 0x6d, 0x39, 0x32, 0x63, 0x62, 0x69, 0x79, 0x6b, 0x6d, 0x71, 0x6a, 0x7a, 0x7a, 0x72, 0x67, 0x62, 0x68, 0x65, 0x34, 0x32, 0x36, 0x36, 0x32, 0x38, 0x6d, 0x32, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x61, 0x74, 0x62, 0x66, 0x70, 0x71, 0x74, 0x38, 0x74, 0x65, 0x7a, 0x6e, 0x63, 0x77, 0x71, 0x35, 0x74, 0x67, 0x61, 0x71, 0x37, 0x64, 0x73, 0x76, 0x35, 0x67, 0x72, 0x61, 0x6e, 0x77, 0x34, 0x79, 0x61, 0x73, 0x72, 0x33, 0x35, 0x61, 0x6e, 0x65, 0x76, 0x36, 0x69, 0x69, 0x77, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x79, 0x36, 0x6a, 0x36, 0x76, 0x6e, 0x64, 0x74, 0x32, 0x7a, 0x6d, 0x39, 0x64, 0x72, 0x67, 0x75, 0x38, 0x6a, 0x65, 0x73, 0x63, 0x6a, 0x6a, 0x35, 0x32, 0x7a, 0x63, 0x62, 0x6d, 0x66, 0x71, 0x37, 0x72, 0x78, 0x35, 0x37, 0x39, 0x61, 0x6e, 0x7a, 0x34, 0x61, 0x6b, 0x6a, 0x74, 0x35, 0x38, 0x68, 0x6d, 0x65, 0x78, 0x39, 0x62, 0x6b, 0x36, 0x37, 0x70, 0x68, 0x33, 0x62, 0x7a, 0x74, 0x41, 0x56, 0x43, 0x56, 0x54, 0x6d, 0x68, 0x57, 0x48, 0x50, 0x79, 0x34, 0x49, 0x6a, 0x34, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: AVCVTmhWHPy4Ij42
				[]byte{0x01, 0x50, 0x95, 0x4e, 0x68, 0x56, 0x1c, 0xfc, 0xb8, 0x22, 0x3e, 0x36},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: AVCVTmhWHPy4Ij42
				[]byte{0x01, 0x50, 0x95, 0x4e, 0x68, 0x56, 0x1c, 0xfc, 0xb8, 0x22, 0x3e, 0x36},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndacq9c8rd7z2jmkcvggyeisey9ueez8wkmn4jj546k6nj32")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndapts2ai5x2rfm92svec4b6fatfke2ekpxybhvtisgdbehk")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFwdHMyYWk1eDJyZm05MnN2ZWM0YjZmYXRma2UyZWtweHliaHZ0aXNnZGJlaGtuZGFjcTljOHJkN3oyam1rY3ZnZ3llaXNleTl1ZWV6OHdrbW40amo1NDZrNm5qMzI=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x70, 0x74, 0x73, 0x32, 0x61, 0x69, 0x35, 0x78, 0x32, 0x72, 0x66, 0x6d, 0x39, 0x32, 0x73, 0x76, 0x65, 0x63, 0x34, 0x62, 0x36, 0x66, 0x61, 0x74, 0x66, 0x6b, 0x65, 0x32, 0x65, 0x6b, 0x70, 0x78, 0x79, 0x62, 0x68, 0x76, 0x74, 0x69, 0x73, 0x67, 0x64, 0x62, 0x65, 0x68, 0x6b, 0x6e, 0x64, 0x61, 0x63, 0x71, 0x39, 0x63, 0x38, 0x72, 0x64, 0x37, 0x7a, 0x32, 0x6a, 0x6d, 0x6b, 0x63, 0x76, 0x67, 0x67, 0x79, 0x65, 0x69, 0x73, 0x65, 0x79, 0x39, 0x75, 0x65, 0x65, 0x7a, 0x38, 0x77, 0x6b, 0x6d, 0x6e, 0x34, 0x6a, 0x6a, 0x35, 0x34, 0x36, 0x6b, 0x36, 0x6e, 0x6a, 0x33, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndamf7bv276hijg3aqd7ktykkwcn3bkqcygjgq9uyux262qv")
	require.NoError(t, err)

	// Rk1SNEZtYTBOYTZmUk5xam5kYW1mN2J2Mjc2aGlqZzNhcWQ3a3R5a2t3Y24zYmtxY3lnamdxOXV5dXgyNjJxdnN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x46, 0x4d, 0x52, 0x34, 0x46, 0x6d, 0x61, 0x30, 0x4e, 0x61, 0x36, 0x66, 0x52, 0x4e, 0x71, 0x6a, 0x6e, 0x64, 0x61, 0x6d, 0x66, 0x37, 0x62, 0x76, 0x32, 0x37, 0x36, 0x68, 0x69, 0x6a, 0x67, 0x33, 0x61, 0x71, 0x64, 0x37, 0x6b, 0x74, 0x79, 0x6b, 0x6b, 0x77, 0x63, 0x6e, 0x33, 0x62, 0x6b, 0x71, 0x63, 0x79, 0x67, 0x6a, 0x67, 0x71, 0x39, 0x75, 0x79, 0x75, 0x78, 0x32, 0x36, 0x32, 0x71, 0x76, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: FMR4Fma0Na6fRNqj
				[]byte{0x14, 0xc4, 0x78, 0x16, 0x66, 0xb4, 0x35, 0xae, 0x9f, 0x44, 0xda, 0xa3},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: FMR4Fma0Na6fRNqj
				[]byte{0x14, 0xc4, 0x78, 0x16, 0x66, 0xb4, 0x35, 0xae, 0x9f, 0x44, 0xda, 0xa3},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndanzr2kbnzbizu4545zfudkwt8546j4772kd8pipx4hjp65")
	require.NoError(t, err)

	// bmRhbnpyMmtibnpiaXp1NDU0NXpmdWRrd3Q4NTQ2ajQ3NzJrZDhwaXB4NGhqcDY1AA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x7a, 0x72, 0x32, 0x6b, 0x62, 0x6e, 0x7a, 0x62, 0x69, 0x7a, 0x75, 0x34, 0x35, 0x34, 0x35, 0x7a, 0x66, 0x75, 0x64, 0x6b, 0x77, 0x74, 0x38, 0x35, 0x34, 0x36, 0x6a, 0x34, 0x37, 0x37, 0x32, 0x6b, 0x64, 0x38, 0x70, 0x69, 0x70, 0x78, 0x34, 0x68, 0x6a, 0x70, 0x36, 0x35, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndapnfj2a7dm9w28quats4wg2jpefru7vv4p8emegm4uq6vw")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndar9vinhvbkz28k9kwnipvi6p9yzbjjcb826umesjw6sf9p")
	require.NoError(t, err)

	// bmRhcjl2aW5odmJrejI4azlrd25pcHZpNnA5eXpiampjYjgyNnVtZXNqdzZzZjlwMXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYXBuZmoyYTdkbTl3MjhxdWF0czR3ZzJqcGVmcnU3dnY0cDhlbWVnbTR1cTZ2dw==
	expect := []byte{0x6e, 0x64, 0x61, 0x72, 0x39, 0x76, 0x69, 0x6e, 0x68, 0x76, 0x62, 0x6b, 0x7a, 0x32, 0x38, 0x6b, 0x39, 0x6b, 0x77, 0x6e, 0x69, 0x70, 0x76, 0x69, 0x36, 0x70, 0x39, 0x79, 0x7a, 0x62, 0x6a, 0x6a, 0x63, 0x62, 0x38, 0x32, 0x36, 0x75, 0x6d, 0x65, 0x73, 0x6a, 0x77, 0x36, 0x73, 0x66, 0x39, 0x70, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x70, 0x6e, 0x66, 0x6a, 0x32, 0x61, 0x37, 0x64, 0x6d, 0x39, 0x77, 0x32, 0x38, 0x71, 0x75, 0x61, 0x74, 0x73, 0x34, 0x77, 0x67, 0x32, 0x6a, 0x70, 0x65, 0x66, 0x72, 0x75, 0x37, 0x76, 0x76, 0x34, 0x70, 0x38, 0x65, 0x6d, 0x65, 0x67, 0x6d, 0x34, 0x75, 0x71, 0x36, 0x76, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmos0MUF3azJyV3hidFFEdDhiAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x34, 0x31, 0x41, 0x77, 0x6b, 0x32, 0x72, 0x57, 0x78, 0x62, 0x74, 0x51, 0x44, 0x74, 0x38, 0x62, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: 41Awk2rWxbtQDt8b
				[]byte{0xe3, 0x50, 0x30, 0x93, 0x6a, 0xd6, 0xc5, 0xbb, 0x50, 0x0e, 0xdf, 0x1b},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: 41Awk2rWxbtQDt8b
				[]byte{0xe3, 0x50, 0x30, 0x93, 0x6a, 0xd6, 0xc5, 0xbb, 0x50, 0x0e, 0xdf, 0x1b},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndafut55972prar3uiahk3qni9yv85vm5z3uk3gch9bs3sgt")
	require.NoError(t, err)

	// bmRhZnV0NTU5NzJwcmFyM3VpYWhrM3FuaTl5djg1dm01ejN1azNnY2g5YnMzc2d0AAJeEXA5N5c=
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x75, 0x74, 0x35, 0x35, 0x39, 0x37, 0x32, 0x70, 0x72, 0x61, 0x72, 0x33, 0x75, 0x69, 0x61, 0x68, 0x6b, 0x33, 0x71, 0x6e, 0x69, 0x39, 0x79, 0x76, 0x38, 0x35, 0x76, 0x6d, 0x35, 0x7a, 0x33, 0x75, 0x6b, 0x33, 0x67, 0x63, 0x68, 0x39, 0x62, 0x73, 0x33, 0x73, 0x67, 0x74, 0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndaj5hmspucupe2g8gsvhgvkpmda93q9ndheacukf8a72bbr")
	require.NoError(t, err)

	// ABP6yCVBcNBuZGFqNWhtc3B1Y3VwZTJnOGdzdmhndmtwbWRhOTNxOW5kaGVhY3VrZjhhNzJiYnI=
	expect := []byte{0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0, 0x6e, 0x64, 0x61, 0x6a, 0x35, 0x68, 0x6d, 0x73, 0x70, 0x75, 0x63, 0x75, 0x70, 0x65, 0x32, 0x67, 0x38, 0x67, 0x73, 0x76, 0x68, 0x67, 0x76, 0x6b, 0x70, 0x6d, 0x64, 0x61, 0x39, 0x33, 0x71, 0x39, 0x6e, 0x64, 0x68, 0x65, 0x61, 0x63, 0x75, 0x6b, 0x66, 0x38, 0x61, 0x37, 0x32, 0x62, 0x62, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA2S+t7X5soACfdnZnjooQ==
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				3820780875409098,
				2805298263287969,
			),
		},
		{
			"with signature",
			NewIssue(
				3820780875409098,
				2805298263287969,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndaf64wjsqi3h63hrnkje35w3dhgrxpfagumex66gz8bwu4m")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndaabw28fbqt5gkixv72sn3htms7pzaii6695ajv4rnyf8yp")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x65, 0xc5, 0x72, 0x00, 0x83, 0xa2, 0x5e, 0x5e, 0xb2, 0x0c, 0x63, 0x76, 0xcf, 0x98, 0x05, 0x07, 0x25, 0xf1, 0xa9, 0xc0, 0x06, 0x7c, 0xf7, 0xfd, 0xd8, 0xb1, 0x0a, 0x16, 0x5a, 0xc9, 0xfd, 0x56}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0xc4, 0x65, 0xf1, 0x81, 0x45, 0x23, 0xba, 0x9e, 0xc5, 0xe8, 0x42, 0x87, 0x39, 0x89, 0x6e, 0xf1, 0xe0, 0x83, 0x5e, 0x8b, 0x51, 0x0c, 0xf4, 0x21, 0x16, 0x06, 0x88, 0x35, 0x4a, 0x36, 0x1b, 0x96, 0x3c, 0xa1, 0x3a, 0x01, 0xbe, 0x98, 0x38, 0xe2, 0x34, 0x4c, 0x58, 0x53, 0xba, 0x1d, 0xc7, 0xab, 0xe5, 0x2d, 0x7b, 0x15, 0xec, 0xba, 0xc1, 0x12, 0x06, 0xb0, 0xbb, 0x1c, 0xcf, 0x06, 0x96, 0xee})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xe4, 0x7c, 0xcf, 0x00, 0x67, 0x1c, 0xbf, 0xd7, 0x36, 0x68, 0xbf, 0x8c, 0xb7, 0xe1, 0xd1, 0x2f, 0x5c, 0x38, 0x68, 0x29, 0x58, 0xc3, 0xfc, 0x54, 0x74, 0xac, 0x35, 0xa9, 0x44, 0x29, 0x26, 0xca}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndaitcdra6jsay9q7rbwd9fyiw4gyzpjskmfkyfpz82cg5x8")
	require.NoError(t, err)

	// bmRhYWJ3MjhmYnF0NWdraXh2NzJzbjNodG1zN3B6YWlpNjY5NWFqdjRybnlmOHlwbmRhaXRjZHJhNmpzYXk5cTdyYndkOWZ5aXc0Z3l6cGpza21ma3lmcHo4MmNnNXg4bnB1YmE4amFkdGJiZWJ1Nms2c2FzcXRmNnp4dWJ0dHpwdjYyYXdkdW02cGoyYWRoMzc5NzVjMnN3ZnU0M2g4eG54YzhtdjJ1aDQ3ZTF5NG02ZHQ1aDIxbTQ2czM0MzczNHVzYTRqYWR0Y2EydHU5ZGFrZmVxN2o3dHJpaWtkdnZjbXE4aHNpZ3p3bWtlZ3JpaWl5YTRlZGt1dHlkcW1kM2lqNGFnOWpzcWhjZ3RnZnN3NzRkemQ0ejNqcHJuazgzcXliY2lkbWJxMjYzNmRqcDV3dGV6dXZoZ21xbnB1YmE4amFkdGJiZWR1aDN2MmFuNnFtOXgzeXBjOTIzcDliNGV6eDJxZGlmZm5uaDljd3F1eWRta2tlZmV2bnc3OTh3ZXZ2dGVxaFB4eWFoSGZmaHY4eG9IUUYAB4MDVqpvQW5kYWY2NHdqc3FpM2g2M2hybmtqZTM1dzNkaGdyeHBmYWd1bWV4NjZnejhid3U0bQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x62, 0x77, 0x32, 0x38, 0x66, 0x62, 0x71, 0x74, 0x35, 0x67, 0x6b, 0x69, 0x78, 0x76, 0x37, 0x32, 0x73, 0x6e, 0x33, 0x68, 0x74, 0x6d, 0x73, 0x37, 0x70, 0x7a, 0x61, 0x69, 0x69, 0x36, 0x36, 0x39, 0x35, 0x61, 0x6a, 0x76, 0x34, 0x72, 0x6e, 0x79, 0x66, 0x38, 0x79, 0x70, 0x6e, 0x64, 0x61, 0x69, 0x74, 0x63, 0x64, 0x72, 0x61, 0x36, 0x6a, 0x73, 0x61, 0x79, 0x39, 0x71, 0x37, 0x72, 0x62, 0x77, 0x64, 0x39, 0x66, 0x79, 0x69, 0x77, 0x34, 0x67, 0x79, 0x7a, 0x70, 0x6a, 0x73, 0x6b, 0x6d, 0x66, 0x6b, 0x79, 0x66, 0x70, 0x7a, 0x38, 0x32, 0x63, 0x67, 0x35, 0x78, 0x38, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x75, 0x36, 0x6b, 0x36, 0x73, 0x61, 0x73, 0x71, 0x74, 0x66, 0x36, 0x7a, 0x78, 0x75, 0x62, 0x74, 0x74, 0x7a, 0x70, 0x76, 0x36, 0x32, 0x61, 0x77, 0x64, 0x75, 0x6d, 0x36, 0x70, 0x6a, 0x32, 0x61, 0x64, 0x68, 0x33, 0x37, 0x39, 0x37, 0x35, 0x63, 0x32, 0x73, 0x77, 0x66, 0x75, 0x34, 0x33, 0x68, 0x38, 0x78, 0x6e, 0x78, 0x63, 0x38, 0x6d, 0x76, 0x32, 0x75, 0x68, 0x34, 0x37, 0x65, 0x31, 0x79, 0x34, 0x6d, 0x36, 0x64, 0x74, 0x35, 0x68, 0x32, 0x31, 0x6d, 0x34, 0x36, 0x73, 0x33, 0x34, 0x33, 0x37, 0x33, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x32, 0x74, 0x75, 0x39, 0x64, 0x61, 0x6b, 0x66, 0x65, 0x71, 0x37, 0x6a, 0x37, 0x74, 0x72, 0x69, 0x69, 0x6b, 0x64, 0x76, 0x76, 0x63, 0x6d, 0x71, 0x38, 0x68, 0x73, 0x69, 0x67, 0x7a, 0x77, 0x6d, 0x6b, 0x65, 0x67, 0x72, 0x69, 0x69, 0x69, 0x79, 0x61, 0x34, 0x65, 0x64, 0x6b, 0x75, 0x74, 0x79, 0x64, 0x71, 0x6d, 0x64, 0x33, 0x69, 0x6a, 0x34, 0x61, 0x67, 0x39, 0x6a, 0x73, 0x71, 0x68, 0x63, 0x67, 0x74, 0x67, 0x66, 0x73, 0x77, 0x37, 0x34, 0x64, 0x7a, 0x64, 0x34, 0x7a, 0x33, 0x6a, 0x70, 0x72, 0x6e, 0x6b, 0x38, 0x33, 0x71, 0x79, 0x62, 0x63, 0x69, 0x64, 0x6d, 0x62, 0x71, 0x32, 0x36, 0x33, 0x36, 0x64, 0x6a, 0x70, 0x35, 0x77, 0x74, 0x65, 0x7a, 0x75, 0x76, 0x68, 0x67, 0x6d, 0x71, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x75, 0x68, 0x33, 0x76, 0x32, 0x61, 0x6e, 0x36, 0x71, 0x6d, 0x39, 0x78, 0x33, 0x79, 0x70, 0x63, 0x39, 0x32, 0x33, 0x70, 0x39, 0x62, 0x34, 0x65, 0x7a, 0x78, 0x32, 0x71, 0x64, 0x69, 0x66, 0x66, 0x6e, 0x6e, 0x68, 0x39, 0x63, 0x77, 0x71, 0x75, 0x79, 0x64, 0x6d, 0x6b, 0x6b, 0x65, 0x66, 0x65, 0x76, 0x6e, 0x77, 0x37, 0x39, 0x38, 0x77, 0x65, 0x76, 0x76, 0x74, 0x65, 0x71, 0x68, 0x50, 0x78, 0x79, 0x61, 0x68, 0x48, 0x66, 0x66, 0x68, 0x76, 0x38, 0x78, 0x6f, 0x48, 0x51, 0x46, 0x00, 0x07, 0x83, 0x03, 0x56, 0xaa, 0x6f, 0x41, 0x6e, 0x64, 0x61, 0x66, 0x36, 0x34, 0x77, 0x6a, 0x73, 0x71, 0x69, 0x33, 0x68, 0x36, 0x33, 0x68, 0x72, 0x6e, 0x6b, 0x6a, 0x65, 0x33, 0x35, 0x77, 0x33, 0x64, 0x68, 0x67, 0x72, 0x78, 0x70, 0x66, 0x61, 0x67, 0x75, 0x6d, 0x65, 0x78, 0x36, 0x36, 0x67, 0x7a, 0x38, 0x62, 0x77, 0x75, 0x34, 0x6d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: PxyahHffhv8xoHQF
				[]byte{0x3f, 0x1c, 0x9a, 0x84, 0x77, 0xdf, 0x86, 0xff, 0x31, 0xa0, 0x74, 0x05},
				createchildaccountChildDelegationNode,
				2114375199125313,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: PxyahHffhv8xoHQF
				[]byte{0x3f, 0x1c, 0x9a, 0x84, 0x77, 0xdf, 0x86, 0xff, 0x31, 0xa0, 0x74, 0x05},
				createchildaccountChildDelegationNode,
				2114375199125313,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABToHt5FZKQACPi9Ppmz3A==
	expect := []byte{0x00, 0x14, 0xe8, 0x1e, 0xde, 0x45, 0x64, 0xa4, 0x00, 0x08, 0xf8, 0xbd, 0x3e, 0x99, 0xb3, 0xdc}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBhcGUgcWxlcXloeXogeXdqanBqenAgcmYgZ21vIGFmZXQgc2J6cmp4IAAO73omlHmPTVJVOFdLVTlYeDJGRXVVLw==
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x61, 0x70, 0x65, 0x20, 0x71, 0x6c, 0x65, 0x71, 0x79, 0x68, 0x79, 0x7a, 0x20, 0x79, 0x77, 0x6a, 0x6a, 0x70, 0x6a, 0x7a, 0x70, 0x20, 0x72, 0x66, 0x20, 0x67, 0x6d, 0x6f, 0x20, 0x61, 0x66, 0x65, 0x74, 0x20, 0x73, 0x62, 0x7a, 0x72, 0x6a, 0x78, 0x20, 0x00, 0x0e, 0xef, 0x7a, 0x26, 0x94, 0x79, 0x8f, 0x4d, 0x52, 0x55, 0x38, 0x57, 0x4b, 0x55, 0x39, 0x58, 0x78, 0x32, 0x46, 0x45, 0x75, 0x55, 0x2f}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: MRU8WKU9Xx2FEuU/
				[]byte{0x31, 0x15, 0x3c, 0x58, 0xa5, 0x3d, 0x5f, 0x1d, 0x85, 0x12, 0xe5, 0x3f},
				4203957586262415,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: MRU8WKU9Xx2FEuU/
				[]byte{0x31, 0x15, 0x3c, 0x58, 0xa5, 0x3d, 0x5f, 0x1d, 0x85, 0x12, 0xe5, 0x3f},
				4203957586262415,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
