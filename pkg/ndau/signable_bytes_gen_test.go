package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndajhcpyzx8x2qj8pmchyjdd24nx8tdjqr5wui4pb4egy2u7")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndamxzajv68p8dyudb64qcacd4xvshmzxiq555mtngx3anbe")
	require.NoError(t, err)

	// bmRhbXh6YWp2NjhwOGR5dWRiNjRxY2FjZDR4dnNobXp4aXE1NTVtdG5neDNhbmJlAAWCIQf8/70AApoPXz8aEm5kYWpoY3B5eng4eDJxajhwbWNoeWpkZDI0bng4dGRqcXI1d3VpNHBiNGVneTJ1Nw==
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x78, 0x7a, 0x61, 0x6a, 0x76, 0x36, 0x38, 0x70, 0x38, 0x64, 0x79, 0x75, 0x64, 0x62, 0x36, 0x34, 0x71, 0x63, 0x61, 0x63, 0x64, 0x34, 0x78, 0x76, 0x73, 0x68, 0x6d, 0x7a, 0x78, 0x69, 0x71, 0x35, 0x35, 0x35, 0x6d, 0x74, 0x6e, 0x67, 0x78, 0x33, 0x61, 0x6e, 0x62, 0x65, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x6a, 0x68, 0x63, 0x70, 0x79, 0x7a, 0x78, 0x38, 0x78, 0x32, 0x71, 0x6a, 0x38, 0x70, 0x6d, 0x63, 0x68, 0x79, 0x6a, 0x64, 0x64, 0x32, 0x34, 0x6e, 0x78, 0x38, 0x74, 0x64, 0x6a, 0x71, 0x72, 0x35, 0x77, 0x75, 0x69, 0x34, 0x70, 0x62, 0x34, 0x65, 0x67, 0x79, 0x32, 0x75, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndaph7yqmn6w5cybnmy7igvntbjpa3j2d642q8kv2iuynayx")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x82, 0x4b, 0x0f, 0xcd, 0x92, 0x20, 0xd3, 0x88, 0xbf, 0xd1, 0xa8, 0x01, 0xba, 0x24, 0xbd, 0xaa, 0x57, 0x38, 0x02, 0xb4, 0x8d, 0xdb, 0x22, 0x8b, 0x8b, 0xf4, 0x83, 0x43, 0x12, 0x0f, 0x40, 0x5d}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWNiZXlkOHB1aXNwaGNmOTRnd2FkcXRlenl4ZnFxYWN5dWc3eWl3bXRyNGlnczJ1YjdhZjQzYXFyZjRkZXF6cAAQTcdmlXTFbmRhcGg3eXFtbjZ3NWN5Ym5teTdpZ3ZudGJqcGEzajJkNjQycThrdjJpdXluYXl4dkZ3MG5MUlhLcjIzSVY3Qg==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x62, 0x65, 0x79, 0x64, 0x38, 0x70, 0x75, 0x69, 0x73, 0x70, 0x68, 0x63, 0x66, 0x39, 0x34, 0x67, 0x77, 0x61, 0x64, 0x71, 0x74, 0x65, 0x7a, 0x79, 0x78, 0x66, 0x71, 0x71, 0x61, 0x63, 0x79, 0x75, 0x67, 0x37, 0x79, 0x69, 0x77, 0x6d, 0x74, 0x72, 0x34, 0x69, 0x67, 0x73, 0x32, 0x75, 0x62, 0x37, 0x61, 0x66, 0x34, 0x33, 0x61, 0x71, 0x72, 0x66, 0x34, 0x64, 0x65, 0x71, 0x7a, 0x70, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x70, 0x68, 0x37, 0x79, 0x71, 0x6d, 0x6e, 0x36, 0x77, 0x35, 0x63, 0x79, 0x62, 0x6e, 0x6d, 0x79, 0x37, 0x69, 0x67, 0x76, 0x6e, 0x74, 0x62, 0x6a, 0x70, 0x61, 0x33, 0x6a, 0x32, 0x64, 0x36, 0x34, 0x32, 0x71, 0x38, 0x6b, 0x76, 0x32, 0x69, 0x75, 0x79, 0x6e, 0x61, 0x79, 0x78, 0x76, 0x46, 0x77, 0x30, 0x6e, 0x4c, 0x52, 0x58, 0x4b, 0x72, 0x32, 0x33, 0x49, 0x56, 0x37, 0x42}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: vFw0nLRXKr23IV7B
				[]byte{0xbc, 0x5c, 0x34, 0x9c, 0xb4, 0x57, 0x2a, 0xbd, 0xb7, 0x21, 0x5e, 0xc1},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: vFw0nLRXKr23IV7B
				[]byte{0xbc, 0x5c, 0x34, 0x9c, 0xb4, 0x57, 0x2a, 0xbd, 0xb7, 0x21, 0x5e, 0xc1},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndah3h46qwhitrvicpqyi6s6d7m4n9ptx7bwe7njs36xchjx")
	require.NoError(t, err)

	// bmRhaDNoNDZxd2hpdHJ2aWNwcXlpNnM2ZDdtNG45cHR4N2J3ZTduanMzNnhjaGp4AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x68, 0x33, 0x68, 0x34, 0x36, 0x71, 0x77, 0x68, 0x69, 0x74, 0x72, 0x76, 0x69, 0x63, 0x70, 0x71, 0x79, 0x69, 0x36, 0x73, 0x36, 0x64, 0x37, 0x6d, 0x34, 0x6e, 0x39, 0x70, 0x74, 0x78, 0x37, 0x62, 0x77, 0x65, 0x37, 0x6e, 0x6a, 0x73, 0x33, 0x36, 0x78, 0x63, 0x68, 0x6a, 0x78, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndaeg4cywzedq9prpnbu2yhdq4uwxhrc9v62g2vrpinf3xp8")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFlZzRjeXd6ZWRxOXBycG5idTJ5aGRxNHV3eGhyYzl2NjJnMnZycGluZjN4cDg=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x65, 0x67, 0x34, 0x63, 0x79, 0x77, 0x7a, 0x65, 0x64, 0x71, 0x39, 0x70, 0x72, 0x70, 0x6e, 0x62, 0x75, 0x32, 0x79, 0x68, 0x64, 0x71, 0x34, 0x75, 0x77, 0x78, 0x68, 0x72, 0x63, 0x39, 0x76, 0x36, 0x32, 0x67, 0x32, 0x76, 0x72, 0x70, 0x69, 0x6e, 0x66, 0x33, 0x78, 0x70, 0x38}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndai37dse8qymavwbbzkw3jqg34zv7dc7qcktgh52f4pzzbj")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaiswy8hmargqbz7ncpdjimwnt3pj5xxfpk2ijq2uphxpd2")
	require.NoError(t, err)

	// bmRhaXN3eThobWFyZ3FiejduY3Bkamltd250M3BqNXh4ZnBrMmlqcTJ1cGh4cGQyAAjSrCLE0zRuZGFpMzdkc2U4cXltYXZ3YmJ6a3czanFnMzR6djdkYzdxY2t0Z2g1MmY0cHp6Ymo=
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x73, 0x77, 0x79, 0x38, 0x68, 0x6d, 0x61, 0x72, 0x67, 0x71, 0x62, 0x7a, 0x37, 0x6e, 0x63, 0x70, 0x64, 0x6a, 0x69, 0x6d, 0x77, 0x6e, 0x74, 0x33, 0x70, 0x6a, 0x35, 0x78, 0x78, 0x66, 0x70, 0x6b, 0x32, 0x69, 0x6a, 0x71, 0x32, 0x75, 0x70, 0x68, 0x78, 0x70, 0x64, 0x32, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x69, 0x33, 0x37, 0x64, 0x73, 0x65, 0x38, 0x71, 0x79, 0x6d, 0x61, 0x76, 0x77, 0x62, 0x62, 0x7a, 0x6b, 0x77, 0x33, 0x6a, 0x71, 0x67, 0x33, 0x34, 0x7a, 0x76, 0x37, 0x64, 0x63, 0x37, 0x71, 0x63, 0x6b, 0x74, 0x67, 0x68, 0x35, 0x32, 0x66, 0x34, 0x70, 0x7a, 0x7a, 0x62, 0x6a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndaqdejtqpdg2ppabq4nfzaiqq5aha72ywsm35yizvwb9tdk")
	require.NoError(t, err)

	// bmRhcWRlanRxcGRnMnBwYWJxNG5memFpcXE1YWhhNzJ5d3NtMzV5aXp2d2I5dGRrAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x64, 0x65, 0x6a, 0x74, 0x71, 0x70, 0x64, 0x67, 0x32, 0x70, 0x70, 0x61, 0x62, 0x71, 0x34, 0x6e, 0x66, 0x7a, 0x61, 0x69, 0x71, 0x71, 0x35, 0x61, 0x68, 0x61, 0x37, 0x32, 0x79, 0x77, 0x73, 0x6d, 0x33, 0x35, 0x79, 0x69, 0x7a, 0x76, 0x77, 0x62, 0x39, 0x74, 0x64, 0x6b, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndab5na5gvhszxu2y6ycfk39zagknkuuea2qrmtqyfaizqg5")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhYjVuYTVndmhzenh1Mnk2eWNmazM5emFna25rdXVlYTJxcm10cXlmYWl6cWc1
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x62, 0x35, 0x6e, 0x61, 0x35, 0x67, 0x76, 0x68, 0x73, 0x7a, 0x78, 0x75, 0x32, 0x79, 0x36, 0x79, 0x63, 0x66, 0x6b, 0x33, 0x39, 0x7a, 0x61, 0x67, 0x6b, 0x6e, 0x6b, 0x75, 0x75, 0x65, 0x61, 0x32, 0x71, 0x72, 0x6d, 0x74, 0x71, 0x79, 0x66, 0x61, 0x69, 0x7a, 0x71, 0x67, 0x35}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndakswf97ephh6ifsh96zbruddnm44k2nyupafw7m9zayjrm")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFrc3dmOTdlcGhoNmlmc2g5NnpicnVkZG5tNDRrMm55dXBhZnc3bTl6YXlqcm0=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x6b, 0x73, 0x77, 0x66, 0x39, 0x37, 0x65, 0x70, 0x68, 0x68, 0x36, 0x69, 0x66, 0x73, 0x68, 0x39, 0x36, 0x7a, 0x62, 0x72, 0x75, 0x64, 0x64, 0x6e, 0x6d, 0x34, 0x34, 0x6b, 0x32, 0x6e, 0x79, 0x75, 0x70, 0x61, 0x66, 0x77, 0x37, 0x6d, 0x39, 0x7a, 0x61, 0x79, 0x6a, 0x72, 0x6d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationSource, err := address.Validate("ndaagi5fuuitqxgmz8ciq34rnttb5garympbid6ac4pyxt5f")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndagh5rkj94pr8i7xpkg2ctgmg3c8qai9jdkn4tk77f92gcq")
	require.NoError(t, err)

	// bmRhZ2g1cmtqOTRwcjhpN3hwa2cyY3RnbWczYzhxYWk5amRrbjR0azc3ZjkyZ2NxAAz/orpRehFuZGFhZ2k1ZnV1aXRxeGdtejhjaXEzNHJudHRiNWdhcnltcGJpZDZhYzRweXh0NWY=
	expect := []byte{0x6e, 0x64, 0x61, 0x67, 0x68, 0x35, 0x72, 0x6b, 0x6a, 0x39, 0x34, 0x70, 0x72, 0x38, 0x69, 0x37, 0x78, 0x70, 0x6b, 0x67, 0x32, 0x63, 0x74, 0x67, 0x6d, 0x67, 0x33, 0x63, 0x38, 0x71, 0x61, 0x69, 0x39, 0x6a, 0x64, 0x6b, 0x6e, 0x34, 0x74, 0x6b, 0x37, 0x37, 0x66, 0x39, 0x32, 0x67, 0x63, 0x71, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x61, 0x67, 0x69, 0x35, 0x66, 0x75, 0x75, 0x69, 0x74, 0x71, 0x78, 0x67, 0x6d, 0x7a, 0x38, 0x63, 0x69, 0x71, 0x33, 0x34, 0x72, 0x6e, 0x74, 0x74, 0x62, 0x35, 0x67, 0x61, 0x72, 0x79, 0x6d, 0x70, 0x62, 0x69, 0x64, 0x36, 0x61, 0x63, 0x34, 0x70, 0x79, 0x78, 0x74, 0x35, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationSource,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationSource,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndahjhpj4wf7pnp4cejavkkjdhkn57b7uszsr5xm5ct8qbs8")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x14, 0x28, 0x55, 0xc0, 0x8a, 0xcf, 0x39, 0x7c, 0x4e, 0x95, 0x04, 0x88, 0x4f, 0x64, 0xce, 0xed, 0x32, 0x82, 0xfc, 0x48, 0x72, 0x9c, 0x44, 0xca, 0xeb, 0xdf, 0x91, 0x41, 0xf4, 0x80, 0x31, 0xfb}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x53, 0x8a, 0x00, 0xc4, 0x3d, 0x19, 0xeb, 0x75, 0xcf, 0x3f, 0xca, 0x82, 0xcd, 0x75, 0x01, 0x6e, 0x30, 0x22, 0xda, 0x11, 0x5e, 0x1e, 0x5d, 0x6d, 0xc5, 0xbe, 0x1a, 0xc5, 0x63, 0xcf, 0x70, 0x2c}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWFrY3N4cWF0bWh2dTljcXV3Y2lzdjVlMzV5dmZhejZqYjNqMnRnazdycjNjc3J3c2EyOXlobmVqaWoza2RmaAAZX/GDxHNZbmRhaGpocGo0d2Y3cG5wNGNlamF2a2tqZGhrbjU3Yjd1c3pzcjV4bTVjdDhxYnM4bnB1YmE4amFkdGJiZWJqMndhZ2Vod244eTdxcmg5Zmlmdm14YWZ6ZGFpeTRjZnJiNnptcDJ5OWJ4dG1kMzcyYzNlOGQzbWhhYTNnZ0RVS0plU013YzJsdWtIMmk=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x6b, 0x63, 0x73, 0x78, 0x71, 0x61, 0x74, 0x6d, 0x68, 0x76, 0x75, 0x39, 0x63, 0x71, 0x75, 0x77, 0x63, 0x69, 0x73, 0x76, 0x35, 0x65, 0x33, 0x35, 0x79, 0x76, 0x66, 0x61, 0x7a, 0x36, 0x6a, 0x62, 0x33, 0x6a, 0x32, 0x74, 0x67, 0x6b, 0x37, 0x72, 0x72, 0x33, 0x63, 0x73, 0x72, 0x77, 0x73, 0x61, 0x32, 0x39, 0x79, 0x68, 0x6e, 0x65, 0x6a, 0x69, 0x6a, 0x33, 0x6b, 0x64, 0x66, 0x68, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x68, 0x6a, 0x68, 0x70, 0x6a, 0x34, 0x77, 0x66, 0x37, 0x70, 0x6e, 0x70, 0x34, 0x63, 0x65, 0x6a, 0x61, 0x76, 0x6b, 0x6b, 0x6a, 0x64, 0x68, 0x6b, 0x6e, 0x35, 0x37, 0x62, 0x37, 0x75, 0x73, 0x7a, 0x73, 0x72, 0x35, 0x78, 0x6d, 0x35, 0x63, 0x74, 0x38, 0x71, 0x62, 0x73, 0x38, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x6a, 0x32, 0x77, 0x61, 0x67, 0x65, 0x68, 0x77, 0x6e, 0x38, 0x79, 0x37, 0x71, 0x72, 0x68, 0x39, 0x66, 0x69, 0x66, 0x76, 0x6d, 0x78, 0x61, 0x66, 0x7a, 0x64, 0x61, 0x69, 0x79, 0x34, 0x63, 0x66, 0x72, 0x62, 0x36, 0x7a, 0x6d, 0x70, 0x32, 0x79, 0x39, 0x62, 0x78, 0x74, 0x6d, 0x64, 0x33, 0x37, 0x32, 0x63, 0x33, 0x65, 0x38, 0x64, 0x33, 0x6d, 0x68, 0x61, 0x61, 0x33, 0x67, 0x67, 0x44, 0x55, 0x4b, 0x4a, 0x65, 0x53, 0x4d, 0x77, 0x63, 0x32, 0x6c, 0x75, 0x6b, 0x48, 0x32, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: DUKJeSMwc2lukH2i
				[]byte{0x0d, 0x42, 0x89, 0x79, 0x23, 0x30, 0x73, 0x69, 0x6e, 0x90, 0x7d, 0xa2},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: DUKJeSMwc2lukH2i
				[]byte{0x0d, 0x42, 0x89, 0x79, 0x23, 0x30, 0x73, 0x69, 0x6e, 0x90, 0x7d, 0xa2},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndafva7rwa2wivk93ttcrcujumxdr72htkifcupwxqv266aa")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndaf6a2jtaqvhnn988g2ez67kn7qn8qkb54qk5v8tjtzafjh")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFmNmEyanRhcXZobm45ODhnMmV6Njdrbjdxbjhxa2I1NHFrNXY4dGp0emFmamhuZGFmdmE3cndhMndpdms5M3R0Y3JjdWp1bXhkcjcyaHRraWZjdXB3eHF2MjY2YWE=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x66, 0x36, 0x61, 0x32, 0x6a, 0x74, 0x61, 0x71, 0x76, 0x68, 0x6e, 0x6e, 0x39, 0x38, 0x38, 0x67, 0x32, 0x65, 0x7a, 0x36, 0x37, 0x6b, 0x6e, 0x37, 0x71, 0x6e, 0x38, 0x71, 0x6b, 0x62, 0x35, 0x34, 0x71, 0x6b, 0x35, 0x76, 0x38, 0x74, 0x6a, 0x74, 0x7a, 0x61, 0x66, 0x6a, 0x68, 0x6e, 0x64, 0x61, 0x66, 0x76, 0x61, 0x37, 0x72, 0x77, 0x61, 0x32, 0x77, 0x69, 0x76, 0x6b, 0x39, 0x33, 0x74, 0x74, 0x63, 0x72, 0x63, 0x75, 0x6a, 0x75, 0x6d, 0x78, 0x64, 0x72, 0x37, 0x32, 0x68, 0x74, 0x6b, 0x69, 0x66, 0x63, 0x75, 0x70, 0x77, 0x78, 0x71, 0x76, 0x32, 0x36, 0x36, 0x61, 0x61}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndaifu5vhk8txuxad6v77rprccwsdqfiyuc4sddt955swxdt")
	require.NoError(t, err)

	// bWZoSjM5bG1BRG5sV002UW5kYWlmdTV2aGs4dHh1eGFkNnY3N3JwcmNjd3NkcWZpeXVjNHNkZHQ5NTVzd3hkdHN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x6d, 0x66, 0x68, 0x4a, 0x33, 0x39, 0x6c, 0x6d, 0x41, 0x44, 0x6e, 0x6c, 0x57, 0x4d, 0x36, 0x51, 0x6e, 0x64, 0x61, 0x69, 0x66, 0x75, 0x35, 0x76, 0x68, 0x6b, 0x38, 0x74, 0x78, 0x75, 0x78, 0x61, 0x64, 0x36, 0x76, 0x37, 0x37, 0x72, 0x70, 0x72, 0x63, 0x63, 0x77, 0x73, 0x64, 0x71, 0x66, 0x69, 0x79, 0x75, 0x63, 0x34, 0x73, 0x64, 0x64, 0x74, 0x39, 0x35, 0x35, 0x73, 0x77, 0x78, 0x64, 0x74, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: mfhJ39lmADnlWM6Q
				[]byte{0x99, 0xf8, 0x49, 0xdf, 0xd9, 0x66, 0x00, 0x39, 0xe5, 0x58, 0xce, 0x90},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: mfhJ39lmADnlWM6Q
				[]byte{0x99, 0xf8, 0x49, 0xdf, 0xd9, 0x66, 0x00, 0x39, 0xe5, 0x58, 0xce, 0x90},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndacznuvxmuvpqk4hsjw59nyc57fpw4vqesqa3jpjv3j2bd6")
	require.NoError(t, err)

	// bmRhY3pudXZ4bXV2cHFrNGhzanc1OW55YzU3ZnB3NHZxZXNxYTNqcGp2M2oyYmQ2AA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x7a, 0x6e, 0x75, 0x76, 0x78, 0x6d, 0x75, 0x76, 0x70, 0x71, 0x6b, 0x34, 0x68, 0x73, 0x6a, 0x77, 0x35, 0x39, 0x6e, 0x79, 0x63, 0x35, 0x37, 0x66, 0x70, 0x77, 0x34, 0x76, 0x71, 0x65, 0x73, 0x71, 0x61, 0x33, 0x6a, 0x70, 0x6a, 0x76, 0x33, 0x6a, 0x32, 0x62, 0x64, 0x36, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndarj9vynhzraz85fgbv3ahffst3j5akgvzjz7w76pg8gbqc")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndak8j38b5ihtpkzgwa2g79jhu7x3etcb6c9m4pce8qrkkm7")
	require.NoError(t, err)

	// bmRhazhqMzhiNWlodHBremd3YTJnNzlqaHU3eDNldGNiNmM5bTRwY2U4cXJra203MXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYXJqOXZ5bmh6cmF6ODVmZ2J2M2FoZmZzdDNqNWFrZ3Z6ano3dzc2cGc4Z2JxYw==
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x38, 0x6a, 0x33, 0x38, 0x62, 0x35, 0x69, 0x68, 0x74, 0x70, 0x6b, 0x7a, 0x67, 0x77, 0x61, 0x32, 0x67, 0x37, 0x39, 0x6a, 0x68, 0x75, 0x37, 0x78, 0x33, 0x65, 0x74, 0x63, 0x62, 0x36, 0x63, 0x39, 0x6d, 0x34, 0x70, 0x63, 0x65, 0x38, 0x71, 0x72, 0x6b, 0x6b, 0x6d, 0x37, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x72, 0x6a, 0x39, 0x76, 0x79, 0x6e, 0x68, 0x7a, 0x72, 0x61, 0x7a, 0x38, 0x35, 0x66, 0x67, 0x62, 0x76, 0x33, 0x61, 0x68, 0x66, 0x66, 0x73, 0x74, 0x33, 0x6a, 0x35, 0x61, 0x6b, 0x67, 0x76, 0x7a, 0x6a, 0x7a, 0x37, 0x77, 0x37, 0x36, 0x70, 0x67, 0x38, 0x67, 0x62, 0x71, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmotsRDU4V2QyMHcyUGdSRThzAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x6c, 0x44, 0x35, 0x38, 0x57, 0x64, 0x32, 0x30, 0x77, 0x32, 0x50, 0x67, 0x52, 0x45, 0x38, 0x73, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: lD58Wd20w2PgRE8s
				[]byte{0x94, 0x3e, 0x7c, 0x59, 0xdd, 0xb4, 0xc3, 0x63, 0xe0, 0x44, 0x4f, 0x2c},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: lD58Wd20w2PgRE8s
				[]byte{0x94, 0x3e, 0x7c, 0x59, 0xdd, 0xb4, 0xc3, 0x63, 0xe0, 0x44, 0x4f, 0x2c},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSidechainTx_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	sidechaintxSource, err := address.Validate("ndah4qwmg8wqbysr4jcfmzy9etzikrgigiu78dac5p2k488d")
	require.NoError(t, err)
	sidechaintxSidechainSignatures, err := signature.RawSignature(signature.Ed25519, []byte{0xf2, 0x05, 0x28, 0xab, 0x23, 0xf3, 0x12, 0xbf, 0xa5, 0xbd, 0x39, 0xf7, 0x25, 0xe9, 0x13, 0x2f, 0x6e, 0x4f, 0x4f, 0xdb, 0x3a, 0x7b, 0x2a, 0xe0, 0x70, 0xdb, 0xd5, 0x7e, 0xc2, 0x52, 0x1b, 0xcb, 0xd9, 0x2a, 0xdf, 0x57, 0x8d, 0x86, 0x4c, 0x71, 0x2e, 0x72, 0x41, 0xc0, 0x47, 0x3f, 0xac, 0x23, 0xaa, 0x2d, 0x05, 0x56, 0x2f, 0x6b, 0x1f, 0xa6, 0x0f, 0xff, 0x98, 0x62, 0x10, 0xc5, 0x9b, 0x68})
	require.NoError(t, err)

	// AAJeEXA5N5cAAAAAAAAAckdaM0lmMkpRbitJMUkrTmRhNGphZHRjYThpY3V0azNkOG5qbTlqcDdoaDV1bTRpdmY3emU4djg1aGo3dXgyZHM1cmt6N3N1dWRyZjd1a3k5azhnMm52ZHRmMzNlZHNjaGg4eWNoa3RwYXhtYzg0Mjl3Mmg5OWdkY2NkYzN5NGdpcjdlZnNpaGJuZGFoNHF3bWc4d3FieXNyNGpjZm16eTlldHppa3JnaWdpdTc4ZGFjNXAyazQ4OGQ=
	expect := []byte{0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x47, 0x5a, 0x33, 0x49, 0x66, 0x32, 0x4a, 0x51, 0x6e, 0x2b, 0x49, 0x31, 0x49, 0x2b, 0x4e, 0x64, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x38, 0x69, 0x63, 0x75, 0x74, 0x6b, 0x33, 0x64, 0x38, 0x6e, 0x6a, 0x6d, 0x39, 0x6a, 0x70, 0x37, 0x68, 0x68, 0x35, 0x75, 0x6d, 0x34, 0x69, 0x76, 0x66, 0x37, 0x7a, 0x65, 0x38, 0x76, 0x38, 0x35, 0x68, 0x6a, 0x37, 0x75, 0x78, 0x32, 0x64, 0x73, 0x35, 0x72, 0x6b, 0x7a, 0x37, 0x73, 0x75, 0x75, 0x64, 0x72, 0x66, 0x37, 0x75, 0x6b, 0x79, 0x39, 0x6b, 0x38, 0x67, 0x32, 0x6e, 0x76, 0x64, 0x74, 0x66, 0x33, 0x33, 0x65, 0x64, 0x73, 0x63, 0x68, 0x68, 0x38, 0x79, 0x63, 0x68, 0x6b, 0x74, 0x70, 0x61, 0x78, 0x6d, 0x63, 0x38, 0x34, 0x32, 0x39, 0x77, 0x32, 0x68, 0x39, 0x39, 0x67, 0x64, 0x63, 0x63, 0x64, 0x63, 0x33, 0x79, 0x34, 0x67, 0x69, 0x72, 0x37, 0x65, 0x66, 0x73, 0x69, 0x68, 0x62, 0x6e, 0x64, 0x61, 0x68, 0x34, 0x71, 0x77, 0x6d, 0x67, 0x38, 0x77, 0x71, 0x62, 0x79, 0x73, 0x72, 0x34, 0x6a, 0x63, 0x66, 0x6d, 0x7a, 0x79, 0x39, 0x65, 0x74, 0x7a, 0x69, 0x6b, 0x72, 0x67, 0x69, 0x67, 0x69, 0x75, 0x37, 0x38, 0x64, 0x61, 0x63, 0x35, 0x70, 0x32, 0x6b, 0x34, 0x38, 0x38, 0x64}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SidechainTx
	}{
		{
			"no signatures",
			NewSidechainTx(
				sidechaintxSource,
				114,
				// SidechainSignableBytes as b64: GZ3If2JQn+I1I+Nd
				[]byte{0x19, 0x9d, 0xc8, 0x7f, 0x62, 0x50, 0x9f, 0xe2, 0x35, 0x23, 0xe3, 0x5d},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
			),
		},
		{
			"with signature",
			NewSidechainTx(
				sidechaintxSource,
				114,
				// SidechainSignableBytes as b64: GZ3If2JQn+I1I+Nd
				[]byte{0x19, 0x9d, 0xc8, 0x7f, 0x62, 0x50, 0x9f, 0xe2, 0x35, 0x23, 0xe3, 0x5d},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndaahzykicu2auwuxshz4znbhek8qzya3ymgg87zr83fssxt")
	require.NoError(t, err)

	// bmRhYWh6eWtpY3UyYXV3dXhzaHo0em5iaGVrOHF6eWEzeW1nZzg3enI4M2Zzc3h0ABP6yCVBcNA=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x68, 0x7a, 0x79, 0x6b, 0x69, 0x63, 0x75, 0x32, 0x61, 0x75, 0x77, 0x75, 0x78, 0x73, 0x68, 0x7a, 0x34, 0x7a, 0x6e, 0x62, 0x68, 0x65, 0x6b, 0x38, 0x71, 0x7a, 0x79, 0x61, 0x33, 0x79, 0x6d, 0x67, 0x67, 0x38, 0x37, 0x7a, 0x72, 0x38, 0x33, 0x66, 0x73, 0x73, 0x78, 0x74, 0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndaiac27agjvktwa83hh7743ygiut2mvsjpckbfszv23489c")
	require.NoError(t, err)

	// AA2S+t7X5spuZGFpYWMyN2FnanZrdHdhODNoaDc3NDN5Z2l1dDJtdnNqcGNrYmZzenYyMzQ4OWM=
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x6e, 0x64, 0x61, 0x69, 0x61, 0x63, 0x32, 0x37, 0x61, 0x67, 0x6a, 0x76, 0x6b, 0x74, 0x77, 0x61, 0x38, 0x33, 0x68, 0x68, 0x37, 0x37, 0x34, 0x33, 0x79, 0x67, 0x69, 0x75, 0x74, 0x32, 0x6d, 0x76, 0x73, 0x6a, 0x70, 0x63, 0x6b, 0x62, 0x66, 0x73, 0x7a, 0x76, 0x32, 0x33, 0x34, 0x38, 0x39, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAn3Z2Z46KEAH/erJE/OdA==
	expect := []byte{0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1, 0x00, 0x1f, 0xf7, 0xab, 0x24, 0x4f, 0xce, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2805298263287969,
				8998038698708596,
			),
		},
		{
			"with signature",
			NewIssue(
				2805298263287969,
				8998038698708596,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
