package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndaht9p48wvhmq2cc237iu2djca9rzyhh3x9mg4viwcm2xue")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndafruz3uuryb4gkxtdbuirdi8zui7uznyi7wbvt3mbt8i24")
	require.NoError(t, err)

	// bmRhZnJ1ejN1dXJ5YjRna3h0ZGJ1aXJkaTh6dWk3dXpueWk3d2J2dDNtYnQ4aTI0AAWCIQf8/70AApoPXz8aEm5kYWh0OXA0OHd2aG1xMmNjMjM3aXUyZGpjYTlyenloaDN4OW1nNHZpd2NtMnh1ZQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x72, 0x75, 0x7a, 0x33, 0x75, 0x75, 0x72, 0x79, 0x62, 0x34, 0x67, 0x6b, 0x78, 0x74, 0x64, 0x62, 0x75, 0x69, 0x72, 0x64, 0x69, 0x38, 0x7a, 0x75, 0x69, 0x37, 0x75, 0x7a, 0x6e, 0x79, 0x69, 0x37, 0x77, 0x62, 0x76, 0x74, 0x33, 0x6d, 0x62, 0x74, 0x38, 0x69, 0x32, 0x34, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x68, 0x74, 0x39, 0x70, 0x34, 0x38, 0x77, 0x76, 0x68, 0x6d, 0x71, 0x32, 0x63, 0x63, 0x32, 0x33, 0x37, 0x69, 0x75, 0x32, 0x64, 0x6a, 0x63, 0x61, 0x39, 0x72, 0x7a, 0x79, 0x68, 0x68, 0x33, 0x78, 0x39, 0x6d, 0x67, 0x34, 0x76, 0x69, 0x77, 0x63, 0x6d, 0x32, 0x78, 0x75, 0x65}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndak6pjdpdwu2de2qygus9m399xe8qhjee7gbhjsvwz3suf8")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x5c, 0xfa, 0xe7, 0x95, 0x40, 0x25, 0x34, 0x7f, 0x84, 0x1a, 0x4a, 0x53, 0x29, 0x96, 0xc6, 0x06, 0x1c, 0x4f, 0x18, 0xea, 0x2f, 0x1f, 0x4c, 0xef, 0xcd, 0x44, 0xbd, 0x3a, 0x4f, 0x5b, 0x76, 0x29}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWJxcngzNnhpYXV2aTk2ZWRqZmZna255MjJkYjJ2MjI3aXp0OHZocjN4Y200cXVybXA1Y3Y0ejQyZjh6ZWl4YwAQTcdmlXTFbmRhazZwamRwZHd1MmRlMnF5Z3VzOW0zOTl4ZThxaGplZTdnYmhqc3Z3ejNzdWY4clBocStYSW93VXBNd1B1Ng==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x71, 0x72, 0x78, 0x33, 0x36, 0x78, 0x69, 0x61, 0x75, 0x76, 0x69, 0x39, 0x36, 0x65, 0x64, 0x6a, 0x66, 0x66, 0x67, 0x6b, 0x6e, 0x79, 0x32, 0x32, 0x64, 0x62, 0x32, 0x76, 0x32, 0x32, 0x37, 0x69, 0x7a, 0x74, 0x38, 0x76, 0x68, 0x72, 0x33, 0x78, 0x63, 0x6d, 0x34, 0x71, 0x75, 0x72, 0x6d, 0x70, 0x35, 0x63, 0x76, 0x34, 0x7a, 0x34, 0x32, 0x66, 0x38, 0x7a, 0x65, 0x69, 0x78, 0x63, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x6b, 0x36, 0x70, 0x6a, 0x64, 0x70, 0x64, 0x77, 0x75, 0x32, 0x64, 0x65, 0x32, 0x71, 0x79, 0x67, 0x75, 0x73, 0x39, 0x6d, 0x33, 0x39, 0x39, 0x78, 0x65, 0x38, 0x71, 0x68, 0x6a, 0x65, 0x65, 0x37, 0x67, 0x62, 0x68, 0x6a, 0x73, 0x76, 0x77, 0x7a, 0x33, 0x73, 0x75, 0x66, 0x38, 0x72, 0x50, 0x68, 0x71, 0x2b, 0x58, 0x49, 0x6f, 0x77, 0x55, 0x70, 0x4d, 0x77, 0x50, 0x75, 0x36}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: rPhq+XIowUpMwPu6
				[]byte{0xac, 0xf8, 0x6a, 0xf9, 0x72, 0x28, 0xc1, 0x4a, 0x4c, 0xc0, 0xfb, 0xba},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: rPhq+XIowUpMwPu6
				[]byte{0xac, 0xf8, 0x6a, 0xf9, 0x72, 0x28, 0xc1, 0x4a, 0x4c, 0xc0, 0xfb, 0xba},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndaeufcpazz5c6k2hwp2ndsdver68tyr4z9xpvac3rtpuaex")
	require.NoError(t, err)

	// bmRhZXVmY3Bheno1YzZrMmh3cDJuZHNkdmVyNjh0eXI0ejl4cHZhYzNydHB1YWV4AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x75, 0x66, 0x63, 0x70, 0x61, 0x7a, 0x7a, 0x35, 0x63, 0x36, 0x6b, 0x32, 0x68, 0x77, 0x70, 0x32, 0x6e, 0x64, 0x73, 0x64, 0x76, 0x65, 0x72, 0x36, 0x38, 0x74, 0x79, 0x72, 0x34, 0x7a, 0x39, 0x78, 0x70, 0x76, 0x61, 0x63, 0x33, 0x72, 0x74, 0x70, 0x75, 0x61, 0x65, 0x78, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndam9efki9pcyhsfr7ufwxyzv4rinb8yexcky4d3ed6wa3ci")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFtOWVma2k5cGN5aHNmcjd1Znd4eXp2NHJpbmI4eWV4Y2t5NGQzZWQ2d2EzY2k=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x6d, 0x39, 0x65, 0x66, 0x6b, 0x69, 0x39, 0x70, 0x63, 0x79, 0x68, 0x73, 0x66, 0x72, 0x37, 0x75, 0x66, 0x77, 0x78, 0x79, 0x7a, 0x76, 0x34, 0x72, 0x69, 0x6e, 0x62, 0x38, 0x79, 0x65, 0x78, 0x63, 0x6b, 0x79, 0x34, 0x64, 0x33, 0x65, 0x64, 0x36, 0x77, 0x61, 0x33, 0x63, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndah7eykrmuki5mwejb423vjb95hzcekyjf6kzszvyv5989r")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaaa4nw46evsfk3y3sdnnxgiyfstv57gawjc7ebnz6aa8y2")
	require.NoError(t, err)

	// bmRhYWE0bnc0NmV2c2ZrM3kzc2RubnhnaXlmc3R2NTdnYXdqYzdlYm56NmFhOHkyAAjSrCLE0zRuZGFoN2V5a3JtdWtpNW13ZWpiNDIzdmpiOTVoemNla3lqZjZrenN6dnl2NTk4OXI=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x61, 0x34, 0x6e, 0x77, 0x34, 0x36, 0x65, 0x76, 0x73, 0x66, 0x6b, 0x33, 0x79, 0x33, 0x73, 0x64, 0x6e, 0x6e, 0x78, 0x67, 0x69, 0x79, 0x66, 0x73, 0x74, 0x76, 0x35, 0x37, 0x67, 0x61, 0x77, 0x6a, 0x63, 0x37, 0x65, 0x62, 0x6e, 0x7a, 0x36, 0x61, 0x61, 0x38, 0x79, 0x32, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x68, 0x37, 0x65, 0x79, 0x6b, 0x72, 0x6d, 0x75, 0x6b, 0x69, 0x35, 0x6d, 0x77, 0x65, 0x6a, 0x62, 0x34, 0x32, 0x33, 0x76, 0x6a, 0x62, 0x39, 0x35, 0x68, 0x7a, 0x63, 0x65, 0x6b, 0x79, 0x6a, 0x66, 0x36, 0x6b, 0x7a, 0x73, 0x7a, 0x76, 0x79, 0x76, 0x35, 0x39, 0x38, 0x39, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndambc27fd3gt8bne3e6mwjpdyv5hcd66u5h5zg4x9rr8wzs")
	require.NoError(t, err)

	// bmRhbWJjMjdmZDNndDhibmUzZTZtd2pwZHl2NWhjZDY2dTVoNXpnNHg5cnI4d3pzAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x62, 0x63, 0x32, 0x37, 0x66, 0x64, 0x33, 0x67, 0x74, 0x38, 0x62, 0x6e, 0x65, 0x33, 0x65, 0x36, 0x6d, 0x77, 0x6a, 0x70, 0x64, 0x79, 0x76, 0x35, 0x68, 0x63, 0x64, 0x36, 0x36, 0x75, 0x35, 0x68, 0x35, 0x7a, 0x67, 0x34, 0x78, 0x39, 0x72, 0x72, 0x38, 0x77, 0x7a, 0x73, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndadr9yk33aza46577ben56pdz2ksbyv4i5h7kziz4pnfrnk")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhZHI5eWszM2F6YTQ2NTc3YmVuNTZwZHoya3NieXY0aTVoN2t6aXo0cG5mcm5r
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x64, 0x72, 0x39, 0x79, 0x6b, 0x33, 0x33, 0x61, 0x7a, 0x61, 0x34, 0x36, 0x35, 0x37, 0x37, 0x62, 0x65, 0x6e, 0x35, 0x36, 0x70, 0x64, 0x7a, 0x32, 0x6b, 0x73, 0x62, 0x79, 0x76, 0x34, 0x69, 0x35, 0x68, 0x37, 0x6b, 0x7a, 0x69, 0x7a, 0x34, 0x70, 0x6e, 0x66, 0x72, 0x6e, 0x6b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndabrk76u7p9puj9pbrn4stv2v3juuqvv6dt3sfecyhhn75r")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFicms3NnU3cDlwdWo5cGJybjRzdHYydjNqdXVxdnY2ZHQzc2ZlY3loaG43NXI=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x62, 0x72, 0x6b, 0x37, 0x36, 0x75, 0x37, 0x70, 0x39, 0x70, 0x75, 0x6a, 0x39, 0x70, 0x62, 0x72, 0x6e, 0x34, 0x73, 0x74, 0x76, 0x32, 0x76, 0x33, 0x6a, 0x75, 0x75, 0x71, 0x76, 0x76, 0x36, 0x64, 0x74, 0x33, 0x73, 0x66, 0x65, 0x63, 0x79, 0x68, 0x68, 0x6e, 0x37, 0x35, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndamt7yptcnefm3cu4qrrq4zqmdi6ji99rf8qbdptvberd4k")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndanh8juvt5juev448a936nhwjqgtbqwyq2tkavhtufq3ktv")
	require.NoError(t, err)

	// bmRhbmg4anV2dDVqdWV2NDQ4YTkzNm5od2pxZ3RicXd5cTJ0a2F2aHR1ZnEza3R2AAz/orpRehFuZGFtdDd5cHRjbmVmbTNjdTRxcnJxNHpxbWRpNmppOTlyZjhxYmRwdHZiZXJkNGs=
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x68, 0x38, 0x6a, 0x75, 0x76, 0x74, 0x35, 0x6a, 0x75, 0x65, 0x76, 0x34, 0x34, 0x38, 0x61, 0x39, 0x33, 0x36, 0x6e, 0x68, 0x77, 0x6a, 0x71, 0x67, 0x74, 0x62, 0x71, 0x77, 0x79, 0x71, 0x32, 0x74, 0x6b, 0x61, 0x76, 0x68, 0x74, 0x75, 0x66, 0x71, 0x33, 0x6b, 0x74, 0x76, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x6d, 0x74, 0x37, 0x79, 0x70, 0x74, 0x63, 0x6e, 0x65, 0x66, 0x6d, 0x33, 0x63, 0x75, 0x34, 0x71, 0x72, 0x72, 0x71, 0x34, 0x7a, 0x71, 0x6d, 0x64, 0x69, 0x36, 0x6a, 0x69, 0x39, 0x39, 0x72, 0x66, 0x38, 0x71, 0x62, 0x64, 0x70, 0x74, 0x76, 0x62, 0x65, 0x72, 0x64, 0x34, 0x6b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndaddu6n8umjvps7y8iptbx8bsguhd55mv42w964ria9e5cq")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xc8, 0xe3, 0xfb, 0x8a, 0x59, 0x15, 0x7d, 0x52, 0x59, 0x14, 0xdf, 0x6e, 0x98, 0xab, 0x3a, 0x2e, 0x43, 0x89, 0x45, 0x66, 0xd7, 0x0e, 0xb4, 0x89, 0x81, 0x91, 0x98, 0xe6, 0x31, 0x51, 0xba, 0x6d}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xb2, 0x82, 0x6a, 0x66, 0xee, 0x5c, 0x1f, 0x9a, 0x89, 0x72, 0xad, 0xa8, 0xfe, 0xe6, 0xea, 0x23, 0x6e, 0x5b, 0x1b, 0xc3, 0x3d, 0x99, 0x22, 0x4f, 0x5a, 0x0e, 0x2b, 0x23, 0xa5, 0x8a, 0x32, 0x25}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWRlcWg4NmttZWt6NHd1M2N2cnk3Z2ZtaGl6ZWhja2ZuNW1zN3BlanNnaTN0M3R0a2c3ZzR6N3VyemFramp6NAAZX/GDxHNZbmRhZGR1Nm44dW1qdnBzN3k4aXB0Yng4YnNndWhkNTVtdjQydzk2NHJpYTllNWNxbnB1YmE4amFkdGJiZWMzaWU0dmc3M3FiOWd3anFreTR0OXpnN2l0eTZ5MjUybjgzdWl1cm1paGN5aTdmdGkzY2tiamE2YXNuZHFmZXRPaUZuN0plYjJERVRRTis=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x65, 0x71, 0x68, 0x38, 0x36, 0x6b, 0x6d, 0x65, 0x6b, 0x7a, 0x34, 0x77, 0x75, 0x33, 0x63, 0x76, 0x72, 0x79, 0x37, 0x67, 0x66, 0x6d, 0x68, 0x69, 0x7a, 0x65, 0x68, 0x63, 0x6b, 0x66, 0x6e, 0x35, 0x6d, 0x73, 0x37, 0x70, 0x65, 0x6a, 0x73, 0x67, 0x69, 0x33, 0x74, 0x33, 0x74, 0x74, 0x6b, 0x67, 0x37, 0x67, 0x34, 0x7a, 0x37, 0x75, 0x72, 0x7a, 0x61, 0x6b, 0x6a, 0x6a, 0x7a, 0x34, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x64, 0x64, 0x75, 0x36, 0x6e, 0x38, 0x75, 0x6d, 0x6a, 0x76, 0x70, 0x73, 0x37, 0x79, 0x38, 0x69, 0x70, 0x74, 0x62, 0x78, 0x38, 0x62, 0x73, 0x67, 0x75, 0x68, 0x64, 0x35, 0x35, 0x6d, 0x76, 0x34, 0x32, 0x77, 0x39, 0x36, 0x34, 0x72, 0x69, 0x61, 0x39, 0x65, 0x35, 0x63, 0x71, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x33, 0x69, 0x65, 0x34, 0x76, 0x67, 0x37, 0x33, 0x71, 0x62, 0x39, 0x67, 0x77, 0x6a, 0x71, 0x6b, 0x79, 0x34, 0x74, 0x39, 0x7a, 0x67, 0x37, 0x69, 0x74, 0x79, 0x36, 0x79, 0x32, 0x35, 0x32, 0x6e, 0x38, 0x33, 0x75, 0x69, 0x75, 0x72, 0x6d, 0x69, 0x68, 0x63, 0x79, 0x69, 0x37, 0x66, 0x74, 0x69, 0x33, 0x63, 0x6b, 0x62, 0x6a, 0x61, 0x36, 0x61, 0x73, 0x6e, 0x64, 0x71, 0x66, 0x65, 0x74, 0x4f, 0x69, 0x46, 0x6e, 0x37, 0x4a, 0x65, 0x62, 0x32, 0x44, 0x45, 0x54, 0x51, 0x4e, 0x2b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: tOiFn7Jeb2DETQN+
				[]byte{0xb4, 0xe8, 0x85, 0x9f, 0xb2, 0x5e, 0x6f, 0x60, 0xc4, 0x4d, 0x03, 0x7e},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: tOiFn7Jeb2DETQN+
				[]byte{0xb4, 0xe8, 0x85, 0x9f, 0xb2, 0x5e, 0x6f, 0x60, 0xc4, 0x4d, 0x03, 0x7e},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndajj247v274ypdziktdtaqhf46zky588g3ifg8h8dm6u8ev")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndaejhh8tgs2umqe43u3ry2rx36iu2s3nw5masr2tki73g42")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFlamhoOHRnczJ1bXFlNDN1M3J5MnJ4MzZpdTJzM253NW1hc3IydGtpNzNnNDJuZGFqajI0N3YyNzR5cGR6aWt0ZHRhcWhmNDZ6a3k1ODhnM2lmZzhoOGRtNnU4ZXY=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x65, 0x6a, 0x68, 0x68, 0x38, 0x74, 0x67, 0x73, 0x32, 0x75, 0x6d, 0x71, 0x65, 0x34, 0x33, 0x75, 0x33, 0x72, 0x79, 0x32, 0x72, 0x78, 0x33, 0x36, 0x69, 0x75, 0x32, 0x73, 0x33, 0x6e, 0x77, 0x35, 0x6d, 0x61, 0x73, 0x72, 0x32, 0x74, 0x6b, 0x69, 0x37, 0x33, 0x67, 0x34, 0x32, 0x6e, 0x64, 0x61, 0x6a, 0x6a, 0x32, 0x34, 0x37, 0x76, 0x32, 0x37, 0x34, 0x79, 0x70, 0x64, 0x7a, 0x69, 0x6b, 0x74, 0x64, 0x74, 0x61, 0x71, 0x68, 0x66, 0x34, 0x36, 0x7a, 0x6b, 0x79, 0x35, 0x38, 0x38, 0x67, 0x33, 0x69, 0x66, 0x67, 0x38, 0x68, 0x38, 0x64, 0x6d, 0x36, 0x75, 0x38, 0x65, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndae58ijjrkqp2rpvgi6k25q7bstg86822c9rx2ek3vs2tkh")
	require.NoError(t, err)

	// emhPdVpjU0hYcm5oN3Jrc25kYWU1OGlqanJrcXAycnB2Z2k2azI1cTdic3RnODY4MjJjOXJ4MmVrM3ZzMnRraHN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x7a, 0x68, 0x4f, 0x75, 0x5a, 0x63, 0x53, 0x48, 0x58, 0x72, 0x6e, 0x68, 0x37, 0x72, 0x6b, 0x73, 0x6e, 0x64, 0x61, 0x65, 0x35, 0x38, 0x69, 0x6a, 0x6a, 0x72, 0x6b, 0x71, 0x70, 0x32, 0x72, 0x70, 0x76, 0x67, 0x69, 0x36, 0x6b, 0x32, 0x35, 0x71, 0x37, 0x62, 0x73, 0x74, 0x67, 0x38, 0x36, 0x38, 0x32, 0x32, 0x63, 0x39, 0x72, 0x78, 0x32, 0x65, 0x6b, 0x33, 0x76, 0x73, 0x32, 0x74, 0x6b, 0x68, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: zhOuZcSHXrnh7rks
				[]byte{0xce, 0x13, 0xae, 0x65, 0xc4, 0x87, 0x5e, 0xb9, 0xe1, 0xee, 0xb9, 0x2c},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: zhOuZcSHXrnh7rks
				[]byte{0xce, 0x13, 0xae, 0x65, 0xc4, 0x87, 0x5e, 0xb9, 0xe1, 0xee, 0xb9, 0x2c},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndabsrxuw7urk5aefm77n9bt4g3iunmymigk5dh8q82k3wgx")
	require.NoError(t, err)

	// bmRhYnNyeHV3N3VyazVhZWZtNzduOWJ0NGczaXVubXltaWdrNWRoOHE4Mmszd2d4AA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x62, 0x73, 0x72, 0x78, 0x75, 0x77, 0x37, 0x75, 0x72, 0x6b, 0x35, 0x61, 0x65, 0x66, 0x6d, 0x37, 0x37, 0x6e, 0x39, 0x62, 0x74, 0x34, 0x67, 0x33, 0x69, 0x75, 0x6e, 0x6d, 0x79, 0x6d, 0x69, 0x67, 0x6b, 0x35, 0x64, 0x68, 0x38, 0x71, 0x38, 0x32, 0x6b, 0x33, 0x77, 0x67, 0x78, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndaizh7w32tqjc4y8r9ndkv9nai7am5ph55zeegyv7se5fm6")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndadudhubbgvtv93bjh37z23m3uw7bsvhig2yid35c3wjfjy")
	require.NoError(t, err)

	// bmRhZHVkaHViYmd2dHY5M2JqaDM3ejIzbTN1dzdic3ZoaWcyeWlkMzVjM3dqZmp5MXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWl6aDd3MzJ0cWpjNHk4cjluZGt2OW5haTdhbTVwaDU1emVlZ3l2N3NlNWZtNg==
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x75, 0x64, 0x68, 0x75, 0x62, 0x62, 0x67, 0x76, 0x74, 0x76, 0x39, 0x33, 0x62, 0x6a, 0x68, 0x33, 0x37, 0x7a, 0x32, 0x33, 0x6d, 0x33, 0x75, 0x77, 0x37, 0x62, 0x73, 0x76, 0x68, 0x69, 0x67, 0x32, 0x79, 0x69, 0x64, 0x33, 0x35, 0x63, 0x33, 0x77, 0x6a, 0x66, 0x6a, 0x79, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x69, 0x7a, 0x68, 0x37, 0x77, 0x33, 0x32, 0x74, 0x71, 0x6a, 0x63, 0x34, 0x79, 0x38, 0x72, 0x39, 0x6e, 0x64, 0x6b, 0x76, 0x39, 0x6e, 0x61, 0x69, 0x37, 0x61, 0x6d, 0x35, 0x70, 0x68, 0x35, 0x35, 0x7a, 0x65, 0x65, 0x67, 0x79, 0x76, 0x37, 0x73, 0x65, 0x35, 0x66, 0x6d, 0x36}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmotjNmRwUjdVNGlZLzJnaWF3AAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x63, 0x36, 0x64, 0x70, 0x52, 0x37, 0x55, 0x34, 0x69, 0x59, 0x2f, 0x32, 0x67, 0x69, 0x61, 0x77, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: c6dpR7U4iY/2giaw
				[]byte{0x73, 0xa7, 0x69, 0x47, 0xb5, 0x38, 0x89, 0x8f, 0xf6, 0x82, 0x26, 0xb0},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: c6dpR7U4iY/2giaw
				[]byte{0x73, 0xa7, 0x69, 0x47, 0xb5, 0x38, 0x89, 0x8f, 0xf6, 0x82, 0x26, 0xb0},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSidechainTx_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	sidechaintxSource, err := address.Validate("ndafjqpsvtqdbb4s6ks5ym3kfw4fpr796rvhqvtmt6agcx7u")
	require.NoError(t, err)
	sidechaintxSidechainSignatures, err := signature.RawSignature(signature.Ed25519, []byte{0x72, 0x0b, 0x10, 0x8a, 0x89, 0xa5, 0xf4, 0x81, 0x08, 0xa0, 0x6e, 0xe2, 0xf9, 0xf2, 0x0f, 0x07, 0x38, 0xa4, 0x23, 0x92, 0xee, 0xb2, 0xb2, 0xf6, 0xcf, 0x45, 0xbb, 0x25, 0xe7, 0x0a, 0xd6, 0x08, 0xef, 0x30, 0x5d, 0xf6, 0x60, 0x56, 0xb4, 0xf8, 0xf0, 0xd8, 0xc6, 0x47, 0x58, 0x8b, 0x0b, 0x0a, 0xd4, 0x0a, 0xa1, 0xad, 0xbc, 0x0e, 0xb5, 0x5d, 0x93, 0xff, 0xe6, 0xca, 0xb7, 0x5c, 0x8e, 0x4d})
	require.NoError(t, err)

	// AAJeEXA5N5cAAAAAAAAAC0pWYXdyZ05odEoyY2RvRWFhNGphZHRjYXFpZnRiY3dqd3o0aWNjZmFwNXRydjZzcmE2NmtpaTZ1NzQzbWY3eXJpeTd1bTMyazQyZXE4bmM3ODNzZnBwaDI4ZG5ubnQ0MnRuZnN4eGFrd2d5NTJkeHhteWo5OTN5a3k3cWk2dm5mcWt4OHh5dGRuZGFmanFwc3Z0cWRiYjRzNmtzNXltM2tmdzRmcHI3OTZydmhxdnRtdDZhZ2N4N3U=
	expect := []byte{0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x4a, 0x56, 0x61, 0x77, 0x72, 0x67, 0x4e, 0x68, 0x74, 0x4a, 0x32, 0x63, 0x64, 0x6f, 0x45, 0x61, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x71, 0x69, 0x66, 0x74, 0x62, 0x63, 0x77, 0x6a, 0x77, 0x7a, 0x34, 0x69, 0x63, 0x63, 0x66, 0x61, 0x70, 0x35, 0x74, 0x72, 0x76, 0x36, 0x73, 0x72, 0x61, 0x36, 0x36, 0x6b, 0x69, 0x69, 0x36, 0x75, 0x37, 0x34, 0x33, 0x6d, 0x66, 0x37, 0x79, 0x72, 0x69, 0x79, 0x37, 0x75, 0x6d, 0x33, 0x32, 0x6b, 0x34, 0x32, 0x65, 0x71, 0x38, 0x6e, 0x63, 0x37, 0x38, 0x33, 0x73, 0x66, 0x70, 0x70, 0x68, 0x32, 0x38, 0x64, 0x6e, 0x6e, 0x6e, 0x74, 0x34, 0x32, 0x74, 0x6e, 0x66, 0x73, 0x78, 0x78, 0x61, 0x6b, 0x77, 0x67, 0x79, 0x35, 0x32, 0x64, 0x78, 0x78, 0x6d, 0x79, 0x6a, 0x39, 0x39, 0x33, 0x79, 0x6b, 0x79, 0x37, 0x71, 0x69, 0x36, 0x76, 0x6e, 0x66, 0x71, 0x6b, 0x78, 0x38, 0x78, 0x79, 0x74, 0x64, 0x6e, 0x64, 0x61, 0x66, 0x6a, 0x71, 0x70, 0x73, 0x76, 0x74, 0x71, 0x64, 0x62, 0x62, 0x34, 0x73, 0x36, 0x6b, 0x73, 0x35, 0x79, 0x6d, 0x33, 0x6b, 0x66, 0x77, 0x34, 0x66, 0x70, 0x72, 0x37, 0x39, 0x36, 0x72, 0x76, 0x68, 0x71, 0x76, 0x74, 0x6d, 0x74, 0x36, 0x61, 0x67, 0x63, 0x78, 0x37, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SidechainTx
	}{
		{
			"no signatures",
			NewSidechainTx(
				sidechaintxSource,
				11,
				// SidechainSignableBytes as b64: JVawrgNhtJ2cdoEa
				[]byte{0x25, 0x56, 0xb0, 0xae, 0x03, 0x61, 0xb4, 0x9d, 0x9c, 0x76, 0x81, 0x1a},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
			),
		},
		{
			"with signature",
			NewSidechainTx(
				sidechaintxSource,
				11,
				// SidechainSignableBytes as b64: JVawrgNhtJ2cdoEa
				[]byte{0x25, 0x56, 0xb0, 0xae, 0x03, 0x61, 0xb4, 0x9d, 0x9c, 0x76, 0x81, 0x1a},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndafi83dg9mwmfh87p92ff5h6jc45xwjtnbzdivqjgeu3ipv")
	require.NoError(t, err)

	// bmRhZmk4M2RnOW13bWZoODdwOTJmZjVoNmpjNDV4d2p0bmJ6ZGl2cWpnZXUzaXB2ABP6yCVBcNA=
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x69, 0x38, 0x33, 0x64, 0x67, 0x39, 0x6d, 0x77, 0x6d, 0x66, 0x68, 0x38, 0x37, 0x70, 0x39, 0x32, 0x66, 0x66, 0x35, 0x68, 0x36, 0x6a, 0x63, 0x34, 0x35, 0x78, 0x77, 0x6a, 0x74, 0x6e, 0x62, 0x7a, 0x64, 0x69, 0x76, 0x71, 0x6a, 0x67, 0x65, 0x75, 0x33, 0x69, 0x70, 0x76, 0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndai6dnyfkhznhb2cikicdp5csyujz68r57yp9hs2zutj7wd")
	require.NoError(t, err)

	// AA2S+t7X5spuZGFpNmRueWZraHpuaGIyY2lraWNkcDVjc3l1ano2OHI1N3lwOWhzMnp1dGo3d2Q=
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x6e, 0x64, 0x61, 0x69, 0x36, 0x64, 0x6e, 0x79, 0x66, 0x6b, 0x68, 0x7a, 0x6e, 0x68, 0x62, 0x32, 0x63, 0x69, 0x6b, 0x69, 0x63, 0x64, 0x70, 0x35, 0x63, 0x73, 0x79, 0x75, 0x6a, 0x7a, 0x36, 0x38, 0x72, 0x35, 0x37, 0x79, 0x70, 0x39, 0x68, 0x73, 0x32, 0x7a, 0x75, 0x74, 0x6a, 0x37, 0x77, 0x64}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAn3Z2Z46KEAH/erJE/OdA==
	expect := []byte{0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1, 0x00, 0x1f, 0xf7, 0xab, 0x24, 0x4f, 0xce, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2805298263287969,
				8998038698708596,
			),
		},
		{
			"with signature",
			NewIssue(
				2805298263287969,
				8998038698708596,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
