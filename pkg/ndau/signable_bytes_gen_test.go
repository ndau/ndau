package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndaq6j65292nd4v4sdfg5udfy8zswmegvqvfdnbxfm96iab5")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndadud8a33murdg8rqfh9jmhsuca99u59rdsvmh4c7fsxs3h")
	require.NoError(t, err)

	// bmRhZHVkOGEzM211cmRnOHJxZmg5am1oc3VjYTk5dTU5cmRzdm1oNGM3ZnN4czNoAAWCIQf8/70AApoPXz8aEm5kYXE2ajY1MjkybmQ0djRzZGZnNXVkZnk4enN3bWVndnF2ZmRuYnhmbTk2aWFiNQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x75, 0x64, 0x38, 0x61, 0x33, 0x33, 0x6d, 0x75, 0x72, 0x64, 0x67, 0x38, 0x72, 0x71, 0x66, 0x68, 0x39, 0x6a, 0x6d, 0x68, 0x73, 0x75, 0x63, 0x61, 0x39, 0x39, 0x75, 0x35, 0x39, 0x72, 0x64, 0x73, 0x76, 0x6d, 0x68, 0x34, 0x63, 0x37, 0x66, 0x73, 0x78, 0x73, 0x33, 0x68, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x71, 0x36, 0x6a, 0x36, 0x35, 0x32, 0x39, 0x32, 0x6e, 0x64, 0x34, 0x76, 0x34, 0x73, 0x64, 0x66, 0x67, 0x35, 0x75, 0x64, 0x66, 0x79, 0x38, 0x7a, 0x73, 0x77, 0x6d, 0x65, 0x67, 0x76, 0x71, 0x76, 0x66, 0x64, 0x6e, 0x62, 0x78, 0x66, 0x6d, 0x39, 0x36, 0x69, 0x61, 0x62, 0x35}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndag3kt3mxxc3vuitgb77amu5x6img88kisy97mqz9w9ptgj")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x7c, 0x2d, 0xbf, 0x38, 0x0d, 0xc8, 0xb1, 0xb1, 0xf7, 0x9a, 0x6b, 0x70, 0x09, 0x97, 0xb8, 0x66, 0xe6, 0x30, 0x21, 0x08, 0xbf, 0x44, 0xc9, 0x73, 0xfe, 0x64, 0x96, 0x1a, 0x29, 0xe3, 0x6b, 0x70}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWI4YzVyMzJiemVtZG5yenZqeHphY256emJ2cW5uYmJiYzl3anVtdjkzdWpuZ3RqNnB4emJkemVjcWhzcjN6cgAQTcdmlXTFbmRhZzNrdDNteHhjM3Z1aXRnYjc3YW11NXg2aW1nODhraXN5OTdtcXo5dzlwdGdqWEFZT2dZWlNMZ2MzS055Qw==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x38, 0x63, 0x35, 0x72, 0x33, 0x32, 0x62, 0x7a, 0x65, 0x6d, 0x64, 0x6e, 0x72, 0x7a, 0x76, 0x6a, 0x78, 0x7a, 0x61, 0x63, 0x6e, 0x7a, 0x7a, 0x62, 0x76, 0x71, 0x6e, 0x6e, 0x62, 0x62, 0x62, 0x63, 0x39, 0x77, 0x6a, 0x75, 0x6d, 0x76, 0x39, 0x33, 0x75, 0x6a, 0x6e, 0x67, 0x74, 0x6a, 0x36, 0x70, 0x78, 0x7a, 0x62, 0x64, 0x7a, 0x65, 0x63, 0x71, 0x68, 0x73, 0x72, 0x33, 0x7a, 0x72, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x67, 0x33, 0x6b, 0x74, 0x33, 0x6d, 0x78, 0x78, 0x63, 0x33, 0x76, 0x75, 0x69, 0x74, 0x67, 0x62, 0x37, 0x37, 0x61, 0x6d, 0x75, 0x35, 0x78, 0x36, 0x69, 0x6d, 0x67, 0x38, 0x38, 0x6b, 0x69, 0x73, 0x79, 0x39, 0x37, 0x6d, 0x71, 0x7a, 0x39, 0x77, 0x39, 0x70, 0x74, 0x67, 0x6a, 0x58, 0x41, 0x59, 0x4f, 0x67, 0x59, 0x5a, 0x53, 0x4c, 0x67, 0x63, 0x33, 0x4b, 0x4e, 0x79, 0x43}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: XAYOgYZSLgc3KNyC
				[]byte{0x5c, 0x06, 0x0e, 0x81, 0x86, 0x52, 0x2e, 0x07, 0x37, 0x28, 0xdc, 0x82},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: XAYOgYZSLgc3KNyC
				[]byte{0x5c, 0x06, 0x0e, 0x81, 0x86, 0x52, 0x2e, 0x07, 0x37, 0x28, 0xdc, 0x82},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndamtnfdh8dq7h3q7t6m4w4pi3zn6bmb6wmecy4kmmm2eq9i")
	require.NoError(t, err)

	// bmRhbXRuZmRoOGRxN2gzcTd0Nm00dzRwaTN6bjZibWI2d21lY3k0a21tbTJlcTlpAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x74, 0x6e, 0x66, 0x64, 0x68, 0x38, 0x64, 0x71, 0x37, 0x68, 0x33, 0x71, 0x37, 0x74, 0x36, 0x6d, 0x34, 0x77, 0x34, 0x70, 0x69, 0x33, 0x7a, 0x6e, 0x36, 0x62, 0x6d, 0x62, 0x36, 0x77, 0x6d, 0x65, 0x63, 0x79, 0x34, 0x6b, 0x6d, 0x6d, 0x6d, 0x32, 0x65, 0x71, 0x39, 0x69, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndakbeqd2tufa9ea7nbc86zvtajgp6jvqpzdq8bmuwaakpiq")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFrYmVxZDJ0dWZhOWVhN25iYzg2enZ0YWpncDZqdnFwemRxOGJtdXdhYWtwaXE=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x6b, 0x62, 0x65, 0x71, 0x64, 0x32, 0x74, 0x75, 0x66, 0x61, 0x39, 0x65, 0x61, 0x37, 0x6e, 0x62, 0x63, 0x38, 0x36, 0x7a, 0x76, 0x74, 0x61, 0x6a, 0x67, 0x70, 0x36, 0x6a, 0x76, 0x71, 0x70, 0x7a, 0x64, 0x71, 0x38, 0x62, 0x6d, 0x75, 0x77, 0x61, 0x61, 0x6b, 0x70, 0x69, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndakgmv3u3q8dpspu47w64tjxjhkacnfjnt2vvtzdqiuh343")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndakgnrrvkqeeqqvjggga7s2na6ieqq9wp8acpaezsjkyuwf")
	require.NoError(t, err)

	// bmRha2ducnJ2a3FlZXFxdmpnZ2dhN3MybmE2aWVxcTl3cDhhY3BhZXpzamt5dXdmAAjSrCLE0zRuZGFrZ212M3UzcThkcHNwdTQ3dzY0dGp4amhrYWNuZmpudDJ2dnR6ZHFpdWgzNDM=
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x67, 0x6e, 0x72, 0x72, 0x76, 0x6b, 0x71, 0x65, 0x65, 0x71, 0x71, 0x76, 0x6a, 0x67, 0x67, 0x67, 0x61, 0x37, 0x73, 0x32, 0x6e, 0x61, 0x36, 0x69, 0x65, 0x71, 0x71, 0x39, 0x77, 0x70, 0x38, 0x61, 0x63, 0x70, 0x61, 0x65, 0x7a, 0x73, 0x6a, 0x6b, 0x79, 0x75, 0x77, 0x66, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x6b, 0x67, 0x6d, 0x76, 0x33, 0x75, 0x33, 0x71, 0x38, 0x64, 0x70, 0x73, 0x70, 0x75, 0x34, 0x37, 0x77, 0x36, 0x34, 0x74, 0x6a, 0x78, 0x6a, 0x68, 0x6b, 0x61, 0x63, 0x6e, 0x66, 0x6a, 0x6e, 0x74, 0x32, 0x76, 0x76, 0x74, 0x7a, 0x64, 0x71, 0x69, 0x75, 0x68, 0x33, 0x34, 0x33}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndaebdrmgdzhg2kryj5py7sjq8vw9sgxi3eg9egumsxmcq2f")
	require.NoError(t, err)

	// bmRhZWJkcm1nZHpoZzJrcnlqNXB5N3NqcTh2dzlzZ3hpM2VnOWVndW1zeG1jcTJmAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x62, 0x64, 0x72, 0x6d, 0x67, 0x64, 0x7a, 0x68, 0x67, 0x32, 0x6b, 0x72, 0x79, 0x6a, 0x35, 0x70, 0x79, 0x37, 0x73, 0x6a, 0x71, 0x38, 0x76, 0x77, 0x39, 0x73, 0x67, 0x78, 0x69, 0x33, 0x65, 0x67, 0x39, 0x65, 0x67, 0x75, 0x6d, 0x73, 0x78, 0x6d, 0x63, 0x71, 0x32, 0x66, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndaahj3utjjtprjvs7rggga7pm2z6pni6j5h38sf6cgyzjrx")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhYWhqM3V0amp0cHJqdnM3cmdnZ2E3cG0yejZwbmk2ajVoMzhzZjZjZ3l6anJ4
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x61, 0x68, 0x6a, 0x33, 0x75, 0x74, 0x6a, 0x6a, 0x74, 0x70, 0x72, 0x6a, 0x76, 0x73, 0x37, 0x72, 0x67, 0x67, 0x67, 0x61, 0x37, 0x70, 0x6d, 0x32, 0x7a, 0x36, 0x70, 0x6e, 0x69, 0x36, 0x6a, 0x35, 0x68, 0x33, 0x38, 0x73, 0x66, 0x36, 0x63, 0x67, 0x79, 0x7a, 0x6a, 0x72, 0x78}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndar45zhqqdchxyuke2fwfnhcb56jxstimpzbynqj7kbkhma")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFyNDV6aHFxZGNoeHl1a2UyZndmbmhjYjU2anhzdGltcHpieW5xajdrYmtobWE=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x72, 0x34, 0x35, 0x7a, 0x68, 0x71, 0x71, 0x64, 0x63, 0x68, 0x78, 0x79, 0x75, 0x6b, 0x65, 0x32, 0x66, 0x77, 0x66, 0x6e, 0x68, 0x63, 0x62, 0x35, 0x36, 0x6a, 0x78, 0x73, 0x74, 0x69, 0x6d, 0x70, 0x7a, 0x62, 0x79, 0x6e, 0x71, 0x6a, 0x37, 0x6b, 0x62, 0x6b, 0x68, 0x6d, 0x61}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationSource, err := address.Validate("ndar99finczfsnhbxvivbwwdbrvyim8k78x4inmzz8aihqw2")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndagqmmjuthr79b3b4aptc2fwcv7v4hq7e2thh8v947i7p2x")
	require.NoError(t, err)

	// bmRhZ3FtbWp1dGhyNzliM2I0YXB0YzJmd2N2N3Y0aHE3ZTJ0aGg4djk0N2k3cDJ4AAz/orpRehFuZGFyOTlmaW5jemZzbmhieHZpdmJ3d2RicnZ5aW04azc4eDRpbm16ejhhaWhxdzI=
	expect := []byte{0x6e, 0x64, 0x61, 0x67, 0x71, 0x6d, 0x6d, 0x6a, 0x75, 0x74, 0x68, 0x72, 0x37, 0x39, 0x62, 0x33, 0x62, 0x34, 0x61, 0x70, 0x74, 0x63, 0x32, 0x66, 0x77, 0x63, 0x76, 0x37, 0x76, 0x34, 0x68, 0x71, 0x37, 0x65, 0x32, 0x74, 0x68, 0x68, 0x38, 0x76, 0x39, 0x34, 0x37, 0x69, 0x37, 0x70, 0x32, 0x78, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x72, 0x39, 0x39, 0x66, 0x69, 0x6e, 0x63, 0x7a, 0x66, 0x73, 0x6e, 0x68, 0x62, 0x78, 0x76, 0x69, 0x76, 0x62, 0x77, 0x77, 0x64, 0x62, 0x72, 0x76, 0x79, 0x69, 0x6d, 0x38, 0x6b, 0x37, 0x38, 0x78, 0x34, 0x69, 0x6e, 0x6d, 0x7a, 0x7a, 0x38, 0x61, 0x69, 0x68, 0x71, 0x77, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationSource,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationSource,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndakfmzfahfmftwkna9sbx4yfwr37793ypuhvvrjxiwcihgz")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xda, 0x7f, 0x73, 0x08, 0x8d, 0x29, 0x38, 0x1a, 0xdd, 0xb5, 0x8a, 0x5f, 0x62, 0x6d, 0x8b, 0xce, 0xc7, 0xa3, 0x6e, 0xae, 0x0d, 0xa3, 0xfe, 0x6d, 0x92, 0x64, 0xf1, 0x7b, 0x6f, 0x1a, 0xfb, 0xf4}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xb5, 0x5c, 0xd2, 0x40, 0x48, 0x62, 0x85, 0xf3, 0xa0, 0x97, 0x15, 0x09, 0xb3, 0xb0, 0x57, 0x12, 0xad, 0x95, 0xc8, 0xf3, 0x95, 0x41, 0xed, 0x6f, 0x98, 0x84, 0x8a, 0x33, 0xa7, 0xa6, 0x1d, 0x3d}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWRwaDg2Mml0d3d2c2d5N3l5ZmY4MnZwdHJobnJpNXF4Mmc0aDl2cHVqdXJjODVyZG03OWlyY2V3c3pqOXhrNQAZX/GDxHNZbmRha2ZtemZhaGZtZnR3a25hOXNieDR5ZndyMzc3OTN5cHVodnZyanhpd2NpaGd6bnB1YmE4amFkdGJiZWM0eDN3dWFqYnRpbTY3YXU2a3N2bjdzazZqazVmcWk4cWt3ZDVtcnZjY2l3bjdodzJxdjQ1ZmozMzdzdnZtNEwxWmRSdG8wTjRpeHV0bi8=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x70, 0x68, 0x38, 0x36, 0x32, 0x69, 0x74, 0x77, 0x77, 0x76, 0x73, 0x67, 0x79, 0x37, 0x79, 0x79, 0x66, 0x66, 0x38, 0x32, 0x76, 0x70, 0x74, 0x72, 0x68, 0x6e, 0x72, 0x69, 0x35, 0x71, 0x78, 0x32, 0x67, 0x34, 0x68, 0x39, 0x76, 0x70, 0x75, 0x6a, 0x75, 0x72, 0x63, 0x38, 0x35, 0x72, 0x64, 0x6d, 0x37, 0x39, 0x69, 0x72, 0x63, 0x65, 0x77, 0x73, 0x7a, 0x6a, 0x39, 0x78, 0x6b, 0x35, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x6b, 0x66, 0x6d, 0x7a, 0x66, 0x61, 0x68, 0x66, 0x6d, 0x66, 0x74, 0x77, 0x6b, 0x6e, 0x61, 0x39, 0x73, 0x62, 0x78, 0x34, 0x79, 0x66, 0x77, 0x72, 0x33, 0x37, 0x37, 0x39, 0x33, 0x79, 0x70, 0x75, 0x68, 0x76, 0x76, 0x72, 0x6a, 0x78, 0x69, 0x77, 0x63, 0x69, 0x68, 0x67, 0x7a, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x34, 0x78, 0x33, 0x77, 0x75, 0x61, 0x6a, 0x62, 0x74, 0x69, 0x6d, 0x36, 0x37, 0x61, 0x75, 0x36, 0x6b, 0x73, 0x76, 0x6e, 0x37, 0x73, 0x6b, 0x36, 0x6a, 0x6b, 0x35, 0x66, 0x71, 0x69, 0x38, 0x71, 0x6b, 0x77, 0x64, 0x35, 0x6d, 0x72, 0x76, 0x63, 0x63, 0x69, 0x77, 0x6e, 0x37, 0x68, 0x77, 0x32, 0x71, 0x76, 0x34, 0x35, 0x66, 0x6a, 0x33, 0x33, 0x37, 0x73, 0x76, 0x76, 0x6d, 0x34, 0x4c, 0x31, 0x5a, 0x64, 0x52, 0x74, 0x6f, 0x30, 0x4e, 0x34, 0x69, 0x78, 0x75, 0x74, 0x6e, 0x2f}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: L1ZdRto0N4ixutn/
				[]byte{0x2f, 0x56, 0x5d, 0x46, 0xda, 0x34, 0x37, 0x88, 0xb1, 0xba, 0xd9, 0xff},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: L1ZdRto0N4ixutn/
				[]byte{0x2f, 0x56, 0x5d, 0x46, 0xda, 0x34, 0x37, 0x88, 0xb1, 0xba, 0xd9, 0xff},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndadqkf77zp2bnx3pjqbt29h6inmt4gpjxjgh93gvfniei6u")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndar943w9st8ugntgehxfteq5xg8crbaxgqepbn2eij4wcfa")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFyOTQzdzlzdDh1Z250Z2VoeGZ0ZXE1eGc4Y3JiYXhncWVwYm4yZWlqNHdjZmFuZGFkcWtmNzd6cDJibngzcGpxYnQyOWg2aW5tdDRncGp4amdoOTNndmZuaWVpNnU=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x72, 0x39, 0x34, 0x33, 0x77, 0x39, 0x73, 0x74, 0x38, 0x75, 0x67, 0x6e, 0x74, 0x67, 0x65, 0x68, 0x78, 0x66, 0x74, 0x65, 0x71, 0x35, 0x78, 0x67, 0x38, 0x63, 0x72, 0x62, 0x61, 0x78, 0x67, 0x71, 0x65, 0x70, 0x62, 0x6e, 0x32, 0x65, 0x69, 0x6a, 0x34, 0x77, 0x63, 0x66, 0x61, 0x6e, 0x64, 0x61, 0x64, 0x71, 0x6b, 0x66, 0x37, 0x37, 0x7a, 0x70, 0x32, 0x62, 0x6e, 0x78, 0x33, 0x70, 0x6a, 0x71, 0x62, 0x74, 0x32, 0x39, 0x68, 0x36, 0x69, 0x6e, 0x6d, 0x74, 0x34, 0x67, 0x70, 0x6a, 0x78, 0x6a, 0x67, 0x68, 0x39, 0x33, 0x67, 0x76, 0x66, 0x6e, 0x69, 0x65, 0x69, 0x36, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndac9tqfrjcxp9m9hdbqfmsfe2m942kn9txyb2s34zdyuxzx")
	require.NoError(t, err)

	// VEFRblA1Y3Q3N25hbmFaVm5kYWM5dHFmcmpjeHA5bTloZGJxZm1zZmUybTk0MmtuOXR4eWIyczM0emR5dXh6eHN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x54, 0x41, 0x51, 0x6e, 0x50, 0x35, 0x63, 0x74, 0x37, 0x37, 0x6e, 0x61, 0x6e, 0x61, 0x5a, 0x56, 0x6e, 0x64, 0x61, 0x63, 0x39, 0x74, 0x71, 0x66, 0x72, 0x6a, 0x63, 0x78, 0x70, 0x39, 0x6d, 0x39, 0x68, 0x64, 0x62, 0x71, 0x66, 0x6d, 0x73, 0x66, 0x65, 0x32, 0x6d, 0x39, 0x34, 0x32, 0x6b, 0x6e, 0x39, 0x74, 0x78, 0x79, 0x62, 0x32, 0x73, 0x33, 0x34, 0x7a, 0x64, 0x79, 0x75, 0x78, 0x7a, 0x78, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: TAQnP5ct77nanaZV
				[]byte{0x4c, 0x04, 0x27, 0x3f, 0x97, 0x2d, 0xef, 0xb9, 0xda, 0x9d, 0xa6, 0x55},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: TAQnP5ct77nanaZV
				[]byte{0x4c, 0x04, 0x27, 0x3f, 0x97, 0x2d, 0xef, 0xb9, 0xda, 0x9d, 0xa6, 0x55},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndajnv4rhx8hy2itmviv4sg45vh7s4fs4zns3imiy4t4u6ri")
	require.NoError(t, err)

	// bmRham52NHJoeDhoeTJpdG12aXY0c2c0NXZoN3M0ZnM0em5zM2ltaXk0dDR1NnJpAA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x6e, 0x76, 0x34, 0x72, 0x68, 0x78, 0x38, 0x68, 0x79, 0x32, 0x69, 0x74, 0x6d, 0x76, 0x69, 0x76, 0x34, 0x73, 0x67, 0x34, 0x35, 0x76, 0x68, 0x37, 0x73, 0x34, 0x66, 0x73, 0x34, 0x7a, 0x6e, 0x73, 0x33, 0x69, 0x6d, 0x69, 0x79, 0x34, 0x74, 0x34, 0x75, 0x36, 0x72, 0x69, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndaje4j5anzxsxce4fhebqi3aucrgvz78pfewetmgu8kevkt")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndamrfrpp8rjzn2xxchvc4yqgkgxym7mvpnpqfwn8cgeq79a")
	require.NoError(t, err)

	// bmRhbXJmcnBwOHJqem4yeHhjaHZjNHlxZ2tneHltN212cG5wcWZ3bjhjZ2VxNzlhMXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWplNGo1YW56eHN4Y2U0ZmhlYnFpM2F1Y3Jndno3OHBmZXdldG1ndThrZXZrdA==
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x72, 0x66, 0x72, 0x70, 0x70, 0x38, 0x72, 0x6a, 0x7a, 0x6e, 0x32, 0x78, 0x78, 0x63, 0x68, 0x76, 0x63, 0x34, 0x79, 0x71, 0x67, 0x6b, 0x67, 0x78, 0x79, 0x6d, 0x37, 0x6d, 0x76, 0x70, 0x6e, 0x70, 0x71, 0x66, 0x77, 0x6e, 0x38, 0x63, 0x67, 0x65, 0x71, 0x37, 0x39, 0x61, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x6a, 0x65, 0x34, 0x6a, 0x35, 0x61, 0x6e, 0x7a, 0x78, 0x73, 0x78, 0x63, 0x65, 0x34, 0x66, 0x68, 0x65, 0x62, 0x71, 0x69, 0x33, 0x61, 0x75, 0x63, 0x72, 0x67, 0x76, 0x7a, 0x37, 0x38, 0x70, 0x66, 0x65, 0x77, 0x65, 0x74, 0x6d, 0x67, 0x75, 0x38, 0x6b, 0x65, 0x76, 0x6b, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmottWHF6eXh0WEV2NjBGZUdzAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x6d, 0x58, 0x71, 0x7a, 0x79, 0x78, 0x74, 0x58, 0x45, 0x76, 0x36, 0x30, 0x46, 0x65, 0x47, 0x73, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: mXqzyxtXEv60FeGs
				[]byte{0x99, 0x7a, 0xb3, 0xcb, 0x1b, 0x57, 0x12, 0xfe, 0xb4, 0x15, 0xe1, 0xac},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: mXqzyxtXEv60FeGs
				[]byte{0x99, 0x7a, 0xb3, 0xcb, 0x1b, 0x57, 0x12, 0xfe, 0xb4, 0x15, 0xe1, 0xac},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSidechainTx_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	sidechaintxSource, err := address.Validate("ndajgdqj8ahxdzgkc3a7ep2rc4ymzjhvgq896de434x2yfeb")
	require.NoError(t, err)
	sidechaintxSidechainSignatures, err := signature.RawSignature(signature.Ed25519, []byte{0xf5, 0x1c, 0xcf, 0x05, 0xa5, 0xf8, 0x76, 0x35, 0xf6, 0x6e, 0x34, 0x84, 0x77, 0xa8, 0xdd, 0x2e, 0x13, 0xc9, 0x85, 0x4f, 0x44, 0xa6, 0x3f, 0x4a, 0x58, 0xa1, 0xb1, 0xbb, 0x20, 0x4c, 0x89, 0xcd, 0xda, 0xdd, 0xd8, 0x8b, 0xe7, 0xc4, 0xf8, 0x31, 0x46, 0x2a, 0xb3, 0xca, 0xb7, 0xcc, 0x7e, 0xd3, 0xab, 0x3d, 0x03, 0x3c, 0x21, 0x97, 0x4b, 0xbc, 0xd2, 0xcc, 0x06, 0xed, 0xfb, 0xfb, 0xd5, 0xd9})
	require.NoError(t, err)

	// AAJeEXA5N5cAAAAAAAAAhTFGR2Rxa0kvZkkwU2RKeHhhNGphZHRjYTh3cW44YnBmOWI1ZG03dnFndWNocmtnN2YyajZ2YmtyaXV2ZDh1dTJ3ZzI1eWljbnRoZzd4enEydHJ2Nmo4YnRpMnhtaHV4ejN0OXBoazM3YW44Y2RmNG16dmpuMmJ6cDlyNzdteXAzeHZuYnE3NG1uZGFqZ2RxajhhaHhkemdrYzNhN2VwMnJjNHltempodmdxODk2ZGU0MzR4MnlmZWI=
	expect := []byte{0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x31, 0x46, 0x47, 0x64, 0x71, 0x6b, 0x49, 0x2f, 0x66, 0x49, 0x30, 0x53, 0x64, 0x4a, 0x78, 0x78, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x38, 0x77, 0x71, 0x6e, 0x38, 0x62, 0x70, 0x66, 0x39, 0x62, 0x35, 0x64, 0x6d, 0x37, 0x76, 0x71, 0x67, 0x75, 0x63, 0x68, 0x72, 0x6b, 0x67, 0x37, 0x66, 0x32, 0x6a, 0x36, 0x76, 0x62, 0x6b, 0x72, 0x69, 0x75, 0x76, 0x64, 0x38, 0x75, 0x75, 0x32, 0x77, 0x67, 0x32, 0x35, 0x79, 0x69, 0x63, 0x6e, 0x74, 0x68, 0x67, 0x37, 0x78, 0x7a, 0x71, 0x32, 0x74, 0x72, 0x76, 0x36, 0x6a, 0x38, 0x62, 0x74, 0x69, 0x32, 0x78, 0x6d, 0x68, 0x75, 0x78, 0x7a, 0x33, 0x74, 0x39, 0x70, 0x68, 0x6b, 0x33, 0x37, 0x61, 0x6e, 0x38, 0x63, 0x64, 0x66, 0x34, 0x6d, 0x7a, 0x76, 0x6a, 0x6e, 0x32, 0x62, 0x7a, 0x70, 0x39, 0x72, 0x37, 0x37, 0x6d, 0x79, 0x70, 0x33, 0x78, 0x76, 0x6e, 0x62, 0x71, 0x37, 0x34, 0x6d, 0x6e, 0x64, 0x61, 0x6a, 0x67, 0x64, 0x71, 0x6a, 0x38, 0x61, 0x68, 0x78, 0x64, 0x7a, 0x67, 0x6b, 0x63, 0x33, 0x61, 0x37, 0x65, 0x70, 0x32, 0x72, 0x63, 0x34, 0x79, 0x6d, 0x7a, 0x6a, 0x68, 0x76, 0x67, 0x71, 0x38, 0x39, 0x36, 0x64, 0x65, 0x34, 0x33, 0x34, 0x78, 0x32, 0x79, 0x66, 0x65, 0x62}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SidechainTx
	}{
		{
			"no signatures",
			NewSidechainTx(
				sidechaintxSource,
				133,
				// SidechainSignableBytes as b64: 1FGdqkI/fI0SdJxx
				[]byte{0xd4, 0x51, 0x9d, 0xaa, 0x42, 0x3f, 0x7c, 0x8d, 0x12, 0x74, 0x9c, 0x71},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
			),
		},
		{
			"with signature",
			NewSidechainTx(
				sidechaintxSource,
				133,
				// SidechainSignableBytes as b64: 1FGdqkI/fI0SdJxx
				[]byte{0xd4, 0x51, 0x9d, 0xaa, 0x42, 0x3f, 0x7c, 0x8d, 0x12, 0x74, 0x9c, 0x71},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndanav42fnxt3ribqsy52hn3k4uucbju4832jxnh4bbg2y7z")
	require.NoError(t, err)

	// bmRhbmF2NDJmbnh0M3JpYnFzeTUyaG4zazR1dWNianU0ODMyanhuaDRiYmcyeTd6ABP6yCVBcNA=
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x61, 0x76, 0x34, 0x32, 0x66, 0x6e, 0x78, 0x74, 0x33, 0x72, 0x69, 0x62, 0x71, 0x73, 0x79, 0x35, 0x32, 0x68, 0x6e, 0x33, 0x6b, 0x34, 0x75, 0x75, 0x63, 0x62, 0x6a, 0x75, 0x34, 0x38, 0x33, 0x32, 0x6a, 0x78, 0x6e, 0x68, 0x34, 0x62, 0x62, 0x67, 0x32, 0x79, 0x37, 0x7a, 0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndader9rept9ntcx8tn5dy8jqb6r3duu38hyenzkj3jkmhz3")
	require.NoError(t, err)

	// AA2S+t7X5spuZGFkZXI5cmVwdDludGN4OHRuNWR5OGpxYjZyM2R1dTM4aHllbnprajNqa21oejM=
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x6e, 0x64, 0x61, 0x64, 0x65, 0x72, 0x39, 0x72, 0x65, 0x70, 0x74, 0x39, 0x6e, 0x74, 0x63, 0x78, 0x38, 0x74, 0x6e, 0x35, 0x64, 0x79, 0x38, 0x6a, 0x71, 0x62, 0x36, 0x72, 0x33, 0x64, 0x75, 0x75, 0x33, 0x38, 0x68, 0x79, 0x65, 0x6e, 0x7a, 0x6b, 0x6a, 0x33, 0x6a, 0x6b, 0x6d, 0x68, 0x7a, 0x33}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
