package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndac78sajurqecq6ezjxbrtjuyybqnx8as656hk7rr4pik9i")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndafwmqv2evcgcdpjwjpr8m2uhypsitexi975yy3dcw7kxjn")
	require.NoError(t, err)

	// bmRhZndtcXYyZXZjZ2NkcGp3anByOG0ydWh5cHNpdGV4aTk3NXl5M2RjdzdreGpuAAWCIQf8/70AApoPXz8aEm5kYWM3OHNhanVycWVjcTZlemp4YnJ0anV5eWJxbng4YXM2NTZoazdycjRwaWs5aQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x77, 0x6d, 0x71, 0x76, 0x32, 0x65, 0x76, 0x63, 0x67, 0x63, 0x64, 0x70, 0x6a, 0x77, 0x6a, 0x70, 0x72, 0x38, 0x6d, 0x32, 0x75, 0x68, 0x79, 0x70, 0x73, 0x69, 0x74, 0x65, 0x78, 0x69, 0x39, 0x37, 0x35, 0x79, 0x79, 0x33, 0x64, 0x63, 0x77, 0x37, 0x6b, 0x78, 0x6a, 0x6e, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x63, 0x37, 0x38, 0x73, 0x61, 0x6a, 0x75, 0x72, 0x71, 0x65, 0x63, 0x71, 0x36, 0x65, 0x7a, 0x6a, 0x78, 0x62, 0x72, 0x74, 0x6a, 0x75, 0x79, 0x79, 0x62, 0x71, 0x6e, 0x78, 0x38, 0x61, 0x73, 0x36, 0x35, 0x36, 0x68, 0x6b, 0x37, 0x72, 0x72, 0x34, 0x70, 0x69, 0x6b, 0x39, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndaash5dc8xek5ev5vk469gxzeiyt9fgynsr279drxvcx658")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xd9, 0xf5, 0xcf, 0x1a, 0xa4, 0xd6, 0xd5, 0xb1, 0xdb, 0xe8, 0x51, 0xac, 0x7a, 0xc9, 0x4d, 0x04, 0x48, 0x4c, 0x4c, 0x6c, 0xf0, 0x84, 0xa3, 0x1a, 0x16, 0x6b, 0x3c, 0xcb, 0xff, 0xd4, 0x94, 0xa9}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWRuOW12MjR3dm1wbW5xNTdiaTQyOHlqandjZXN2Y25wdjJpamkyNGMzeHYzdTk5NHVra3ZzNGh3MmphajloegAQTcdmlXTFbmRhYXNoNWRjOHhlazVldjV2azQ2OWd4emVpeXQ5Zmd5bnNyMjc5ZHJ4dmN4NjU4a0ZVOFNlcjVQcTdpbjJOVA==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x6e, 0x39, 0x6d, 0x76, 0x32, 0x34, 0x77, 0x76, 0x6d, 0x70, 0x6d, 0x6e, 0x71, 0x35, 0x37, 0x62, 0x69, 0x34, 0x32, 0x38, 0x79, 0x6a, 0x6a, 0x77, 0x63, 0x65, 0x73, 0x76, 0x63, 0x6e, 0x70, 0x76, 0x32, 0x69, 0x6a, 0x69, 0x32, 0x34, 0x63, 0x33, 0x78, 0x76, 0x33, 0x75, 0x39, 0x39, 0x34, 0x75, 0x6b, 0x6b, 0x76, 0x73, 0x34, 0x68, 0x77, 0x32, 0x6a, 0x61, 0x6a, 0x39, 0x68, 0x7a, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x61, 0x73, 0x68, 0x35, 0x64, 0x63, 0x38, 0x78, 0x65, 0x6b, 0x35, 0x65, 0x76, 0x35, 0x76, 0x6b, 0x34, 0x36, 0x39, 0x67, 0x78, 0x7a, 0x65, 0x69, 0x79, 0x74, 0x39, 0x66, 0x67, 0x79, 0x6e, 0x73, 0x72, 0x32, 0x37, 0x39, 0x64, 0x72, 0x78, 0x76, 0x63, 0x78, 0x36, 0x35, 0x38, 0x6b, 0x46, 0x55, 0x38, 0x53, 0x65, 0x72, 0x35, 0x50, 0x71, 0x37, 0x69, 0x6e, 0x32, 0x4e, 0x54}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: kFU8Ser5Pq7in2NT
				[]byte{0x90, 0x55, 0x3c, 0x49, 0xea, 0xf9, 0x3e, 0xae, 0xe2, 0x9f, 0x63, 0x53},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: kFU8Ser5Pq7in2NT
				[]byte{0x90, 0x55, 0x3c, 0x49, 0xea, 0xf9, 0x3e, 0xae, 0xe2, 0x9f, 0x63, 0x53},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndadwvufu9r23pjbkamdtii7r9quqircqti3cxd58nmh532c")
	require.NoError(t, err)

	// bmRhZHd2dWZ1OXIyM3BqYmthbWR0aWk3cjlxdXFpcmNxdGkzY3hkNThubWg1MzJjAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x77, 0x76, 0x75, 0x66, 0x75, 0x39, 0x72, 0x32, 0x33, 0x70, 0x6a, 0x62, 0x6b, 0x61, 0x6d, 0x64, 0x74, 0x69, 0x69, 0x37, 0x72, 0x39, 0x71, 0x75, 0x71, 0x69, 0x72, 0x63, 0x71, 0x74, 0x69, 0x33, 0x63, 0x78, 0x64, 0x35, 0x38, 0x6e, 0x6d, 0x68, 0x35, 0x33, 0x32, 0x63, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndartxps3dgx4pnf28ypcvwawkighv2265wm6hs22dsffh5q")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFydHhwczNkZ3g0cG5mMjh5cGN2d2F3a2lnaHYyMjY1d202aHMyMmRzZmZoNXE=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x74, 0x78, 0x70, 0x73, 0x33, 0x64, 0x67, 0x78, 0x34, 0x70, 0x6e, 0x66, 0x32, 0x38, 0x79, 0x70, 0x63, 0x76, 0x77, 0x61, 0x77, 0x6b, 0x69, 0x67, 0x68, 0x76, 0x32, 0x32, 0x36, 0x35, 0x77, 0x6d, 0x36, 0x68, 0x73, 0x32, 0x32, 0x64, 0x73, 0x66, 0x66, 0x68, 0x35, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndanpqese6qq9ub68s75yp6cmwnc6zjxff5n3p4cg92axu78")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaadkhtatxtzekht77w29rn7fkp5f3c4rm4ck6pzdn2nrnz")
	require.NoError(t, err)

	// bmRhYWRraHRhdHh0emVraHQ3N3cyOXJuN2ZrcDVmM2M0cm00Y2s2cHpkbjJucm56AAjSrCLE0zRuZGFucHFlc2U2cXE5dWI2OHM3NXlwNmNtd25jNnpqeGZmNW4zcDRjZzkyYXh1Nzg=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x64, 0x6b, 0x68, 0x74, 0x61, 0x74, 0x78, 0x74, 0x7a, 0x65, 0x6b, 0x68, 0x74, 0x37, 0x37, 0x77, 0x32, 0x39, 0x72, 0x6e, 0x37, 0x66, 0x6b, 0x70, 0x35, 0x66, 0x33, 0x63, 0x34, 0x72, 0x6d, 0x34, 0x63, 0x6b, 0x36, 0x70, 0x7a, 0x64, 0x6e, 0x32, 0x6e, 0x72, 0x6e, 0x7a, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x6e, 0x70, 0x71, 0x65, 0x73, 0x65, 0x36, 0x71, 0x71, 0x39, 0x75, 0x62, 0x36, 0x38, 0x73, 0x37, 0x35, 0x79, 0x70, 0x36, 0x63, 0x6d, 0x77, 0x6e, 0x63, 0x36, 0x7a, 0x6a, 0x78, 0x66, 0x66, 0x35, 0x6e, 0x33, 0x70, 0x34, 0x63, 0x67, 0x39, 0x32, 0x61, 0x78, 0x75, 0x37, 0x38}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndapzy7tswbjfun78c6q5hzjxs73rrjcwzytc5xrza3xd2cd")
	require.NoError(t, err)

	// bmRhcHp5N3Rzd2JqZnVuNzhjNnE1aHpqeHM3M3JyamN3enl0YzV4cnphM3hkMmNkAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x7a, 0x79, 0x37, 0x74, 0x73, 0x77, 0x62, 0x6a, 0x66, 0x75, 0x6e, 0x37, 0x38, 0x63, 0x36, 0x71, 0x35, 0x68, 0x7a, 0x6a, 0x78, 0x73, 0x37, 0x33, 0x72, 0x72, 0x6a, 0x63, 0x77, 0x7a, 0x79, 0x74, 0x63, 0x35, 0x78, 0x72, 0x7a, 0x61, 0x33, 0x78, 0x64, 0x32, 0x63, 0x64, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndars5mz3xhwhceghr2akky9bmjhksbcx7jztuywe4m8usxg")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhcnM1bXozeGh3aGNlZ2hyMmFra3k5Ym1qaGtzYmN4N2p6dHV5d2U0bTh1c3hn
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x35, 0x6d, 0x7a, 0x33, 0x78, 0x68, 0x77, 0x68, 0x63, 0x65, 0x67, 0x68, 0x72, 0x32, 0x61, 0x6b, 0x6b, 0x79, 0x39, 0x62, 0x6d, 0x6a, 0x68, 0x6b, 0x73, 0x62, 0x63, 0x78, 0x37, 0x6a, 0x7a, 0x74, 0x75, 0x79, 0x77, 0x65, 0x34, 0x6d, 0x38, 0x75, 0x73, 0x78, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndad6uvjj7i7bfttpkm9nbquaes37bwgd2qmkxyjeef5rx75")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFkNnV2amo3aTdiZnR0cGttOW5icXVhZXMzN2J3Z2QycW1reHlqZWVmNXJ4NzU=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x64, 0x36, 0x75, 0x76, 0x6a, 0x6a, 0x37, 0x69, 0x37, 0x62, 0x66, 0x74, 0x74, 0x70, 0x6b, 0x6d, 0x39, 0x6e, 0x62, 0x71, 0x75, 0x61, 0x65, 0x73, 0x33, 0x37, 0x62, 0x77, 0x67, 0x64, 0x32, 0x71, 0x6d, 0x6b, 0x78, 0x79, 0x6a, 0x65, 0x65, 0x66, 0x35, 0x72, 0x78, 0x37, 0x35}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndafu8rpnq7ezmjs29fuf2wcdaa68siinrynpgtdfzswmd7q")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndacx5hsznt6vrauazd88tt6ex5wf6mc69a9u6nfybx9ivfw")
	require.NoError(t, err)

	// bmRhY3g1aHN6bnQ2dnJhdWF6ZDg4dHQ2ZXg1d2Y2bWM2OWE5dTZuZnlieDlpdmZ3AAz/orpRehFuZGFmdThycG5xN2V6bWpzMjlmdWYyd2NkYWE2OHNpaW5yeW5wZ3RkZnpzd21kN3E=
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x78, 0x35, 0x68, 0x73, 0x7a, 0x6e, 0x74, 0x36, 0x76, 0x72, 0x61, 0x75, 0x61, 0x7a, 0x64, 0x38, 0x38, 0x74, 0x74, 0x36, 0x65, 0x78, 0x35, 0x77, 0x66, 0x36, 0x6d, 0x63, 0x36, 0x39, 0x61, 0x39, 0x75, 0x36, 0x6e, 0x66, 0x79, 0x62, 0x78, 0x39, 0x69, 0x76, 0x66, 0x77, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x66, 0x75, 0x38, 0x72, 0x70, 0x6e, 0x71, 0x37, 0x65, 0x7a, 0x6d, 0x6a, 0x73, 0x32, 0x39, 0x66, 0x75, 0x66, 0x32, 0x77, 0x63, 0x64, 0x61, 0x61, 0x36, 0x38, 0x73, 0x69, 0x69, 0x6e, 0x72, 0x79, 0x6e, 0x70, 0x67, 0x74, 0x64, 0x66, 0x7a, 0x73, 0x77, 0x6d, 0x64, 0x37, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndadieh8szwmv5kep8qmysqpemf4hkn32zhthi4j7j4jruhs")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xbf, 0xe6, 0x4f, 0x3c, 0x96, 0x72, 0x8c, 0xaa, 0x5e, 0x40, 0x34, 0x74, 0x67, 0xe7, 0xb8, 0xb7, 0xdb, 0xef, 0xb2, 0x1f, 0x15, 0xe1, 0xf4, 0xd2, 0x1b, 0x2e, 0x72, 0xf3, 0x8c, 0x3e, 0x88, 0x7c}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x04, 0xc1, 0xa8, 0x80, 0xf4, 0x88, 0xd0, 0x30, 0xfc, 0x5f, 0x9f, 0x5b, 0x1c, 0x7a, 0x69, 0xb3, 0x09, 0xe0, 0xee, 0x14, 0x83, 0x11, 0x7e, 0xbf, 0x0b, 0xf8, 0x8f, 0xb6, 0x37, 0xc5, 0xa9, 0x55}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWM5OG52MzZ1MzNpM2t1OGlhNGhpMzloemM1N3o1N3VkNms4ZDdndWRuemhmNjZuaDRlaDJpcXN5bXgzOWo5cAAZX/GDxHNZbmRhZGllaDhzendtdjVrZXA4cW15c3FwZW1mNGhrbjMyemh0aGk0ajdqNGpydWhzbnB1YmE4amFkdGJiZWFjbmRrZWE4dWVwYW5oNm04cnh5aGQ0cGczc3YyaHFjdWJ0Yzl4OWJyNmk5cHR6Mnl3eGtpYTJmYm5hcWg1ZXh4cEZ4REd0M1YwYWt3czA=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x39, 0x38, 0x6e, 0x76, 0x33, 0x36, 0x75, 0x33, 0x33, 0x69, 0x33, 0x6b, 0x75, 0x38, 0x69, 0x61, 0x34, 0x68, 0x69, 0x33, 0x39, 0x68, 0x7a, 0x63, 0x35, 0x37, 0x7a, 0x35, 0x37, 0x75, 0x64, 0x36, 0x6b, 0x38, 0x64, 0x37, 0x67, 0x75, 0x64, 0x6e, 0x7a, 0x68, 0x66, 0x36, 0x36, 0x6e, 0x68, 0x34, 0x65, 0x68, 0x32, 0x69, 0x71, 0x73, 0x79, 0x6d, 0x78, 0x33, 0x39, 0x6a, 0x39, 0x70, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x64, 0x69, 0x65, 0x68, 0x38, 0x73, 0x7a, 0x77, 0x6d, 0x76, 0x35, 0x6b, 0x65, 0x70, 0x38, 0x71, 0x6d, 0x79, 0x73, 0x71, 0x70, 0x65, 0x6d, 0x66, 0x34, 0x68, 0x6b, 0x6e, 0x33, 0x32, 0x7a, 0x68, 0x74, 0x68, 0x69, 0x34, 0x6a, 0x37, 0x6a, 0x34, 0x6a, 0x72, 0x75, 0x68, 0x73, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x63, 0x6e, 0x64, 0x6b, 0x65, 0x61, 0x38, 0x75, 0x65, 0x70, 0x61, 0x6e, 0x68, 0x36, 0x6d, 0x38, 0x72, 0x78, 0x79, 0x68, 0x64, 0x34, 0x70, 0x67, 0x33, 0x73, 0x76, 0x32, 0x68, 0x71, 0x63, 0x75, 0x62, 0x74, 0x63, 0x39, 0x78, 0x39, 0x62, 0x72, 0x36, 0x69, 0x39, 0x70, 0x74, 0x7a, 0x32, 0x79, 0x77, 0x78, 0x6b, 0x69, 0x61, 0x32, 0x66, 0x62, 0x6e, 0x61, 0x71, 0x68, 0x35, 0x65, 0x78, 0x78, 0x70, 0x46, 0x78, 0x44, 0x47, 0x74, 0x33, 0x56, 0x30, 0x61, 0x6b, 0x77, 0x73, 0x30}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: xxpFxDGt3V0akws0
				[]byte{0xc7, 0x1a, 0x45, 0xc4, 0x31, 0xad, 0xdd, 0x5d, 0x1a, 0x93, 0x0b, 0x34},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: xxpFxDGt3V0akws0
				[]byte{0xc7, 0x1a, 0x45, 0xc4, 0x31, 0xad, 0xdd, 0x5d, 0x1a, 0x93, 0x0b, 0x34},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndarbtx9padgmrhkiggsykvqxhmg6jx2jb64tbfjgtm6xudb")
	require.NoError(t, err)
	stakeRules, err := address.Validate("ndafhtgyg2pn6pbga2zvj64jhr6fqbqh2jnj32cj6h8x9j5b")
	require.NoError(t, err)
	stakeStakeTo, err := address.Validate("ndae9h37syui88ensh8nu4rmie644cmafmg5fb2tuuzkkqwd")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFmaHRneWcycG42cGJnYTJ6dmo2NGpocjZmcWJxaDJqbmozMmNqNmg4eDlqNWIABJUapCZXuW5kYWU5aDM3c3l1aTg4ZW5zaDhudTRybWllNjQ0Y21hZm1nNWZiMnR1dXpra3F3ZG5kYXJidHg5cGFkZ21yaGtpZ2dzeWt2cXhobWc2angyamI2NHRiZmpndG02eHVkYg==
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x66, 0x68, 0x74, 0x67, 0x79, 0x67, 0x32, 0x70, 0x6e, 0x36, 0x70, 0x62, 0x67, 0x61, 0x32, 0x7a, 0x76, 0x6a, 0x36, 0x34, 0x6a, 0x68, 0x72, 0x36, 0x66, 0x71, 0x62, 0x71, 0x68, 0x32, 0x6a, 0x6e, 0x6a, 0x33, 0x32, 0x63, 0x6a, 0x36, 0x68, 0x38, 0x78, 0x39, 0x6a, 0x35, 0x62, 0x00, 0x04, 0x95, 0x1a, 0xa4, 0x26, 0x57, 0xb9, 0x6e, 0x64, 0x61, 0x65, 0x39, 0x68, 0x33, 0x37, 0x73, 0x79, 0x75, 0x69, 0x38, 0x38, 0x65, 0x6e, 0x73, 0x68, 0x38, 0x6e, 0x75, 0x34, 0x72, 0x6d, 0x69, 0x65, 0x36, 0x34, 0x34, 0x63, 0x6d, 0x61, 0x66, 0x6d, 0x67, 0x35, 0x66, 0x62, 0x32, 0x74, 0x75, 0x75, 0x7a, 0x6b, 0x6b, 0x71, 0x77, 0x64, 0x6e, 0x64, 0x61, 0x72, 0x62, 0x74, 0x78, 0x39, 0x70, 0x61, 0x64, 0x67, 0x6d, 0x72, 0x68, 0x6b, 0x69, 0x67, 0x67, 0x73, 0x79, 0x6b, 0x76, 0x71, 0x78, 0x68, 0x6d, 0x67, 0x36, 0x6a, 0x78, 0x32, 0x6a, 0x62, 0x36, 0x34, 0x74, 0x62, 0x66, 0x6a, 0x67, 0x74, 0x6d, 0x36, 0x78, 0x75, 0x64, 0x62}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndaijzsizumwxqxz9x2j8vc7mut5che9vvn9tjebpf5qk4zr")
	require.NoError(t, err)
	registernodeOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xdd, 0x20, 0x1c, 0x95, 0xef, 0x66, 0xb9, 0x2c, 0x5d, 0x03, 0x8b, 0xce, 0xee, 0x7a, 0x4b, 0xb2, 0x66, 0x30, 0x46, 0xcf, 0x0c, 0x04, 0xd1, 0x8d, 0x59, 0x04, 0xb5, 0xec, 0x2a, 0x72, 0x35, 0x05}, nil)
	require.NoError(t, err)

	// NkJoK1g0ZjZMQXp5MXc3Zm5kYWlqenNpenVtd3hxeHo5eDJqOHZjN211dDVjaGU5dnZuOXRqZWJwZjVxazR6cm5wdWJhOGphZHRiYmVkcXVhaGV4Nzd2bXVtYzdhcWY2NzV2NGpxM2dubmNnMzZnYWp3bnBtZWNtbTVia3FpNHNrbmE5OWRnejhmOGgAGnaLfE4MiQ==
	expect := []byte{0x36, 0x42, 0x68, 0x2b, 0x58, 0x34, 0x66, 0x36, 0x4c, 0x41, 0x7a, 0x79, 0x31, 0x77, 0x37, 0x66, 0x6e, 0x64, 0x61, 0x69, 0x6a, 0x7a, 0x73, 0x69, 0x7a, 0x75, 0x6d, 0x77, 0x78, 0x71, 0x78, 0x7a, 0x39, 0x78, 0x32, 0x6a, 0x38, 0x76, 0x63, 0x37, 0x6d, 0x75, 0x74, 0x35, 0x63, 0x68, 0x65, 0x39, 0x76, 0x76, 0x6e, 0x39, 0x74, 0x6a, 0x65, 0x62, 0x70, 0x66, 0x35, 0x71, 0x6b, 0x34, 0x7a, 0x72, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x71, 0x75, 0x61, 0x68, 0x65, 0x78, 0x37, 0x37, 0x76, 0x6d, 0x75, 0x6d, 0x63, 0x37, 0x61, 0x71, 0x66, 0x36, 0x37, 0x35, 0x76, 0x34, 0x6a, 0x71, 0x33, 0x67, 0x6e, 0x6e, 0x63, 0x67, 0x33, 0x36, 0x67, 0x61, 0x6a, 0x77, 0x6e, 0x70, 0x6d, 0x65, 0x63, 0x6d, 0x6d, 0x35, 0x62, 0x6b, 0x71, 0x69, 0x34, 0x73, 0x6b, 0x6e, 0x61, 0x39, 0x39, 0x64, 0x67, 0x7a, 0x38, 0x66, 0x38, 0x68, 0x00, 0x1a, 0x76, 0x8b, 0x7c, 0x4e, 0x0c, 0x89}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 6Bh+X4f6LAzy1w7f
				[]byte{0xe8, 0x18, 0x7e, 0x5f, 0x87, 0xfa, 0x2c, 0x0c, 0xf2, 0xd7, 0x0e, 0xdf},
				*registernodeOwnership,
				7448690852498569,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 6Bh+X4f6LAzy1w7f
				[]byte{0xe8, 0x18, 0x7e, 0x5f, 0x87, 0xfa, 0x2c, 0x0c, 0xf2, 0xd7, 0x0e, 0xdf},
				*registernodeOwnership,
				7448690852498569,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AARcldRJHkcADD8lJWMkPQ==
	expect := []byte{0x00, 0x04, 0x5c, 0x95, 0xd4, 0x49, 0x1e, 0x47, 0x00, 0x0c, 0x3f, 0x25, 0x25, 0x63, 0x24, 0x3d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				1227698488286791,
				3447128494122045,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				1227698488286791,
				3447128494122045,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndams5kzf7jb8qikrxvhamnw3knvubtjbqdxf378b4bj4yq7")
	require.NoError(t, err)

	// bmRhbXM1a3pmN2piOHFpa3J4dmhhbW53M2tudnVidGpicWR4ZjM3OGI0Ymo0eXE3ABmL4qnXjlI=
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x73, 0x35, 0x6b, 0x7a, 0x66, 0x37, 0x6a, 0x62, 0x38, 0x71, 0x69, 0x6b, 0x72, 0x78, 0x76, 0x68, 0x61, 0x6d, 0x6e, 0x77, 0x33, 0x6b, 0x6e, 0x76, 0x75, 0x62, 0x74, 0x6a, 0x62, 0x71, 0x64, 0x78, 0x66, 0x33, 0x37, 0x38, 0x62, 0x34, 0x62, 0x6a, 0x34, 0x79, 0x71, 0x37, 0x00, 0x19, 0x8b, 0xe2, 0xa9, 0xd7, 0x8e, 0x52}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				7190680046112338,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				7190680046112338,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndamzggszm3hyqj6xnccs2x9zh77j8yhiht9wk7hsrtt55sv")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndae34pkvjqm7gi28nzcwe2p6xggi7eckweuw2ra3w4eshps")
	require.NoError(t, err)

	// bmRhZTM0cGt2anFtN2dpMjhuemN3ZTJwNnhnZ2k3ZWNrd2V1dzJyYTN3NGVzaHBzNHk2bTJkdDdoMThtNThzMTQ5OTU2dXMAAgcPFpwR8QAL0mi2jmyHbmRhbXpnZ3N6bTNoeXFqNnhuY2NzMng5emg3N2o4eWhpaHQ5d2s3aHNydHQ1NXN2
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x33, 0x34, 0x70, 0x6b, 0x76, 0x6a, 0x71, 0x6d, 0x37, 0x67, 0x69, 0x32, 0x38, 0x6e, 0x7a, 0x63, 0x77, 0x65, 0x32, 0x70, 0x36, 0x78, 0x67, 0x67, 0x69, 0x37, 0x65, 0x63, 0x6b, 0x77, 0x65, 0x75, 0x77, 0x32, 0x72, 0x61, 0x33, 0x77, 0x34, 0x65, 0x73, 0x68, 0x70, 0x73, 0x34, 0x79, 0x36, 0x6d, 0x32, 0x64, 0x74, 0x37, 0x68, 0x31, 0x38, 0x6d, 0x35, 0x38, 0x73, 0x31, 0x34, 0x39, 0x39, 0x35, 0x36, 0x75, 0x73, 0x00, 0x02, 0x07, 0x0f, 0x16, 0x9c, 0x11, 0xf1, 0x00, 0x0b, 0xd2, 0x68, 0xb6, 0x8e, 0x6c, 0x87, 0x6e, 0x64, 0x61, 0x6d, 0x7a, 0x67, 0x67, 0x73, 0x7a, 0x6d, 0x33, 0x68, 0x79, 0x71, 0x6a, 0x36, 0x78, 0x6e, 0x63, 0x63, 0x73, 0x32, 0x78, 0x39, 0x7a, 0x68, 0x37, 0x37, 0x6a, 0x38, 0x79, 0x68, 0x69, 0x68, 0x74, 0x39, 0x77, 0x6b, 0x37, 0x68, 0x73, 0x72, 0x74, 0x74, 0x35, 0x35, 0x73, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				570711338652145,
				141895138149956,
				3327571925036167,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				570711338652145,
				141895138149956,
				3327571925036167,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	commandvalidatorchangeNode, err := address.Validate("ndafas4tt9r2hbw8rma6c58emax6gm44gvhrx9iv5dn83423")
	require.NoError(t, err)

	// bmRhZmFzNHR0OXIyaGJ3OHJtYTZjNThlbWF4NmdtNDRndmhyeDlpdjVkbjgzNDIzAAYeknWYCWgABMR/LN9ctg==
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x61, 0x73, 0x34, 0x74, 0x74, 0x39, 0x72, 0x32, 0x68, 0x62, 0x77, 0x38, 0x72, 0x6d, 0x61, 0x36, 0x63, 0x35, 0x38, 0x65, 0x6d, 0x61, 0x78, 0x36, 0x67, 0x6d, 0x34, 0x34, 0x67, 0x76, 0x68, 0x72, 0x78, 0x39, 0x69, 0x76, 0x35, 0x64, 0x6e, 0x38, 0x33, 0x34, 0x32, 0x33, 0x00, 0x06, 0x1e, 0x92, 0x75, 0x98, 0x09, 0x68, 0x00, 0x04, 0xc4, 0x7f, 0x2c, 0xdf, 0x5c, 0xb6}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				commandvalidatorchangeNode,
				1722464247220584,
				1341950399569078,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				commandvalidatorchangeNode,
				1722464247220584,
				1341950399569078,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndag5huzkr4v397bkkeuw64n5hk2d9je7nwztqanbiej7fm9")
	require.NoError(t, err)

	// bmRhZzVodXprcjR2Mzk3YmtrZXV3NjRuNWhrMmQ5amU3bnd6dHFhbmJpZWo3Zm05AAbNK1fSk3U=
	expect := []byte{0x6e, 0x64, 0x61, 0x67, 0x35, 0x68, 0x75, 0x7a, 0x6b, 0x72, 0x34, 0x76, 0x33, 0x39, 0x37, 0x62, 0x6b, 0x6b, 0x65, 0x75, 0x77, 0x36, 0x34, 0x6e, 0x35, 0x68, 0x6b, 0x32, 0x64, 0x39, 0x6a, 0x65, 0x37, 0x6e, 0x77, 0x7a, 0x74, 0x71, 0x61, 0x6e, 0x62, 0x69, 0x65, 0x6a, 0x37, 0x66, 0x6d, 0x39, 0x00, 0x06, 0xcd, 0x2b, 0x57, 0xd2, 0x93, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				1914435900969845,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				1914435900969845,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndae2ww5cwu4524ydbt9zhgicudz5ic3mawdajnvdgvz9i75")
	require.NoError(t, err)
	unstakeRules, err := address.Validate("ndaiyf3ci4vagbnvpbwkj2jvwxnbfzciyzghhhecyegymmp8")
	require.NoError(t, err)
	unstakeStakeTo, err := address.Validate("ndab8usu2szn3ja5v9ttactetpzwxgwsbrbsjjtgu9ty5qn6")
	require.NoError(t, err)

	// ABRQL8XW1WpuZGFpeWYzY2k0dmFnYm52cGJ3a2oyanZ3eG5iZnpjaXl6Z2hoaGVjeWVneW1tcDgAEUz4a4PRtW5kYWI4dXN1MnN6bjNqYTV2OXR0YWN0ZXRwend4Z3dzYnJic2pqdGd1OXR5NXFuNm5kYWUyd3c1Y3d1NDUyNHlkYnQ5emhnaWN1ZHo1aWMzbWF3ZGFqbnZkZ3Z6OWk3NQ==
	expect := []byte{0x00, 0x14, 0x50, 0x2f, 0xc5, 0xd6, 0xd5, 0x6a, 0x6e, 0x64, 0x61, 0x69, 0x79, 0x66, 0x33, 0x63, 0x69, 0x34, 0x76, 0x61, 0x67, 0x62, 0x6e, 0x76, 0x70, 0x62, 0x77, 0x6b, 0x6a, 0x32, 0x6a, 0x76, 0x77, 0x78, 0x6e, 0x62, 0x66, 0x7a, 0x63, 0x69, 0x79, 0x7a, 0x67, 0x68, 0x68, 0x68, 0x65, 0x63, 0x79, 0x65, 0x67, 0x79, 0x6d, 0x6d, 0x70, 0x38, 0x00, 0x11, 0x4c, 0xf8, 0x6b, 0x83, 0xd1, 0xb5, 0x6e, 0x64, 0x61, 0x62, 0x38, 0x75, 0x73, 0x75, 0x32, 0x73, 0x7a, 0x6e, 0x33, 0x6a, 0x61, 0x35, 0x76, 0x39, 0x74, 0x74, 0x61, 0x63, 0x74, 0x65, 0x74, 0x70, 0x7a, 0x77, 0x78, 0x67, 0x77, 0x73, 0x62, 0x72, 0x62, 0x73, 0x6a, 0x6a, 0x74, 0x67, 0x75, 0x39, 0x74, 0x79, 0x35, 0x71, 0x6e, 0x36, 0x6e, 0x64, 0x61, 0x65, 0x32, 0x77, 0x77, 0x35, 0x63, 0x77, 0x75, 0x34, 0x35, 0x32, 0x34, 0x79, 0x64, 0x62, 0x74, 0x39, 0x7a, 0x68, 0x67, 0x69, 0x63, 0x75, 0x64, 0x7a, 0x35, 0x69, 0x63, 0x33, 0x6d, 0x61, 0x77, 0x64, 0x61, 0x6a, 0x6e, 0x76, 0x64, 0x67, 0x76, 0x7a, 0x39, 0x69, 0x37, 0x35}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				5717665647089002,
				4869704443482549,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				5717665647089002,
				4869704443482549,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AANMNnZ0zuoADhf3sGjcpA==
	expect := []byte{0x00, 0x03, 0x4c, 0x36, 0x76, 0x74, 0xce, 0xea, 0x00, 0x0e, 0x17, 0xf7, 0xb0, 0x68, 0xdc, 0xa4}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				928221729443562,
				3967002257972388,
			),
		},
		{
			"with signature",
			NewIssue(
				928221729443562,
				3967002257972388,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndae3smsqv9ibcchbxntfuq9a7bd6bizkkquf9du7vttd3ji")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndafnxwragbupccanracass3qd6r8zn7aadz7hvvcyseyzc2")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x78, 0x3a, 0x2c, 0x85, 0x78, 0xba, 0x39, 0x05, 0x1c, 0x6b, 0x9d, 0xd0, 0x8f, 0x0d, 0x38, 0xf7, 0x8e, 0x59, 0xfe, 0x76, 0xc8, 0x35, 0xbb, 0xbb, 0xbc, 0x44, 0xe0, 0xd7, 0xe4, 0x96, 0xa1, 0xac}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x5b, 0x46, 0x49, 0x1a, 0xce, 0x36, 0x2f, 0x37, 0x49, 0x46, 0xff, 0x80, 0xdb, 0x9f, 0xf7, 0x6a, 0x04, 0x26, 0xe7, 0x25, 0x48, 0x06, 0xa5, 0x82, 0x45, 0x5d, 0xb8, 0x71, 0x0c, 0x83, 0x7d, 0xe2, 0xec, 0x58, 0x34, 0x7c, 0x06, 0x6f, 0x0b, 0x70, 0xa8, 0x3a, 0x89, 0x13, 0xda, 0xbf, 0xd6, 0x86, 0x63, 0x78, 0x88, 0x99, 0x35, 0xe4, 0xc1, 0xbb, 0x05, 0xf8, 0xed, 0xd2, 0xba, 0x6a, 0x5c, 0x47})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xaa, 0x84, 0xe8, 0x27, 0xbf, 0x7b, 0x91, 0x56, 0xda, 0x15, 0x13, 0xd8, 0xd3, 0x91, 0xb6, 0xd7, 0x29, 0x32, 0xeb, 0x64, 0x3d, 0x4b, 0xe7, 0x9b, 0x41, 0x30, 0x14, 0xb6, 0x27, 0x51, 0x33, 0xf4}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndap3x4krvqh7ip7z7kahiwwe2wdr6zpx5dhzazddzydqy7s")
	require.NoError(t, err)

	// bmRhZm54d3JhZ2J1cGNjYW5yYWNhc3MzcWQ2cjh6bjdhYWR6N2h2dmN5c2V5emMybmRhcDN4NGtydnFoN2lwN3o3a2FoaXd3ZTJ3ZHI2enB4NWRoemF6ZGR6eWRxeTdzbnB1YmE4amFkdGJiZWI2ZHdtZWZyYzdkdWJpNnBxcTdiZDJwaGQ1MjZ5cjhxNWVkbXE3NXp0Y3FieDlldTRzNDNrZjRwa2p1Ym4ydjJ5NG0xMGR0MTZoMjVtNThzMjg4MzQ0dXNhNGphZHRjYW1wZGV1Z3lxZzJ6dnF1a2c5OGFwemg5enBpY2NwMzNmamFka21hdWZteTZoY2RlZHJ6dHEyeWJ3cnNkZzhjNXN4YTdpdWU4NHo5bWluMjUydGNudm0zZ2J6bmM5dDVxdXpqeGYydDZ2cGlpcmgyYTlucHViYThqYWR0YmJlY3hpajRiaHo3NzNjeHk0Y3dqN3R3NnR5NW11dW56bW5zOHd6MzY1aWUyYmpwdGhrZTM5amhyNHY4cjR2NzdoOEk2d25NZHVZNFVuYjdoUAAfb3ihXVJXbmRhZTNzbXNxdjlpYmNjaGJ4bnRmdXE5YTdiZDZiaXpra3F1ZjlkdTd2dHRkM2pp
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x6e, 0x78, 0x77, 0x72, 0x61, 0x67, 0x62, 0x75, 0x70, 0x63, 0x63, 0x61, 0x6e, 0x72, 0x61, 0x63, 0x61, 0x73, 0x73, 0x33, 0x71, 0x64, 0x36, 0x72, 0x38, 0x7a, 0x6e, 0x37, 0x61, 0x61, 0x64, 0x7a, 0x37, 0x68, 0x76, 0x76, 0x63, 0x79, 0x73, 0x65, 0x79, 0x7a, 0x63, 0x32, 0x6e, 0x64, 0x61, 0x70, 0x33, 0x78, 0x34, 0x6b, 0x72, 0x76, 0x71, 0x68, 0x37, 0x69, 0x70, 0x37, 0x7a, 0x37, 0x6b, 0x61, 0x68, 0x69, 0x77, 0x77, 0x65, 0x32, 0x77, 0x64, 0x72, 0x36, 0x7a, 0x70, 0x78, 0x35, 0x64, 0x68, 0x7a, 0x61, 0x7a, 0x64, 0x64, 0x7a, 0x79, 0x64, 0x71, 0x79, 0x37, 0x73, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x36, 0x64, 0x77, 0x6d, 0x65, 0x66, 0x72, 0x63, 0x37, 0x64, 0x75, 0x62, 0x69, 0x36, 0x70, 0x71, 0x71, 0x37, 0x62, 0x64, 0x32, 0x70, 0x68, 0x64, 0x35, 0x32, 0x36, 0x79, 0x72, 0x38, 0x71, 0x35, 0x65, 0x64, 0x6d, 0x71, 0x37, 0x35, 0x7a, 0x74, 0x63, 0x71, 0x62, 0x78, 0x39, 0x65, 0x75, 0x34, 0x73, 0x34, 0x33, 0x6b, 0x66, 0x34, 0x70, 0x6b, 0x6a, 0x75, 0x62, 0x6e, 0x32, 0x76, 0x32, 0x79, 0x34, 0x6d, 0x31, 0x30, 0x64, 0x74, 0x31, 0x36, 0x68, 0x32, 0x35, 0x6d, 0x35, 0x38, 0x73, 0x32, 0x38, 0x38, 0x33, 0x34, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x6d, 0x70, 0x64, 0x65, 0x75, 0x67, 0x79, 0x71, 0x67, 0x32, 0x7a, 0x76, 0x71, 0x75, 0x6b, 0x67, 0x39, 0x38, 0x61, 0x70, 0x7a, 0x68, 0x39, 0x7a, 0x70, 0x69, 0x63, 0x63, 0x70, 0x33, 0x33, 0x66, 0x6a, 0x61, 0x64, 0x6b, 0x6d, 0x61, 0x75, 0x66, 0x6d, 0x79, 0x36, 0x68, 0x63, 0x64, 0x65, 0x64, 0x72, 0x7a, 0x74, 0x71, 0x32, 0x79, 0x62, 0x77, 0x72, 0x73, 0x64, 0x67, 0x38, 0x63, 0x35, 0x73, 0x78, 0x61, 0x37, 0x69, 0x75, 0x65, 0x38, 0x34, 0x7a, 0x39, 0x6d, 0x69, 0x6e, 0x32, 0x35, 0x32, 0x74, 0x63, 0x6e, 0x76, 0x6d, 0x33, 0x67, 0x62, 0x7a, 0x6e, 0x63, 0x39, 0x74, 0x35, 0x71, 0x75, 0x7a, 0x6a, 0x78, 0x66, 0x32, 0x74, 0x36, 0x76, 0x70, 0x69, 0x69, 0x72, 0x68, 0x32, 0x61, 0x39, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x78, 0x69, 0x6a, 0x34, 0x62, 0x68, 0x7a, 0x37, 0x37, 0x33, 0x63, 0x78, 0x79, 0x34, 0x63, 0x77, 0x6a, 0x37, 0x74, 0x77, 0x36, 0x74, 0x79, 0x35, 0x6d, 0x75, 0x75, 0x6e, 0x7a, 0x6d, 0x6e, 0x73, 0x38, 0x77, 0x7a, 0x33, 0x36, 0x35, 0x69, 0x65, 0x32, 0x62, 0x6a, 0x70, 0x74, 0x68, 0x6b, 0x65, 0x33, 0x39, 0x6a, 0x68, 0x72, 0x34, 0x76, 0x38, 0x72, 0x34, 0x76, 0x37, 0x37, 0x68, 0x38, 0x49, 0x36, 0x77, 0x6e, 0x4d, 0x64, 0x75, 0x59, 0x34, 0x55, 0x6e, 0x62, 0x37, 0x68, 0x50, 0x00, 0x1f, 0x6f, 0x78, 0xa1, 0x5d, 0x52, 0x57, 0x6e, 0x64, 0x61, 0x65, 0x33, 0x73, 0x6d, 0x73, 0x71, 0x76, 0x39, 0x69, 0x62, 0x63, 0x63, 0x68, 0x62, 0x78, 0x6e, 0x74, 0x66, 0x75, 0x71, 0x39, 0x61, 0x37, 0x62, 0x64, 0x36, 0x62, 0x69, 0x7a, 0x6b, 0x6b, 0x71, 0x75, 0x66, 0x39, 0x64, 0x75, 0x37, 0x76, 0x74, 0x74, 0x64, 0x33, 0x6a, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				74363158288344,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: 8I6wnMduY4Unb7hP
				[]byte{0xf0, 0x8e, 0xb0, 0x9c, 0xc7, 0x6e, 0x63, 0x85, 0x27, 0x6f, 0xb8, 0x4f},
				createchildaccountChildDelegationNode,
				8848288172036695,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				74363158288344,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: 8I6wnMduY4Unb7hP
				[]byte{0xf0, 0x8e, 0xb0, 0x9c, 0xc7, 0x6e, 0x63, 0x85, 0x27, 0x6f, 0xb8, 0x4f},
				createchildaccountChildDelegationNode,
				8848288172036695,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAQZ23lCCqEAGnsPnaHaWA==
	expect := []byte{0x00, 0x04, 0x19, 0xdb, 0x79, 0x42, 0x0a, 0xa1, 0x00, 0x1a, 0x7b, 0x0f, 0x9d, 0xa1, 0xda, 0x58}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				1154330329746081,
				7453656393833048,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				1154330329746081,
				7453656393833048,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBqZmJjeCBlZmYgc3d4cCBkbmpvYmMgbnZsIHRlbWFwZXogbGVxIGh5enJ5d2ogcGogcGYgAABHk2ycZ0tobk1EYm1JNlpZOWFWK0Jj
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x6a, 0x66, 0x62, 0x63, 0x78, 0x20, 0x65, 0x66, 0x66, 0x20, 0x73, 0x77, 0x78, 0x70, 0x20, 0x64, 0x6e, 0x6a, 0x6f, 0x62, 0x63, 0x20, 0x6e, 0x76, 0x6c, 0x20, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x65, 0x7a, 0x20, 0x6c, 0x65, 0x71, 0x20, 0x68, 0x79, 0x7a, 0x72, 0x79, 0x77, 0x6a, 0x20, 0x70, 0x6a, 0x20, 0x70, 0x66, 0x20, 0x00, 0x00, 0x47, 0x93, 0x6c, 0x9c, 0x67, 0x4b, 0x68, 0x6e, 0x4d, 0x44, 0x62, 0x6d, 0x49, 0x36, 0x5a, 0x59, 0x39, 0x61, 0x56, 0x2b, 0x42, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: jfbcx eff swxp dnjobc nvl temapez leq hyzrywj pj pf ",
				// Value as b64: hnMDbmI6ZY9aV+Bc
				[]byte{0x86, 0x73, 0x03, 0x6e, 0x62, 0x3a, 0x65, 0x8f, 0x5a, 0x57, 0xe0, 0x5c},
				78698507953995,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: jfbcx eff swxp dnjobc nvl temapez leq hyzrywj pj pf ",
				// Value as b64: hnMDbmI6ZY9aV+Bc
				[]byte{0x86, 0x73, 0x03, 0x6e, 0x62, 0x3a, 0x65, 0x8f, 0x5a, 0x57, 0xe0, 0x5c},
				78698507953995,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetStakeRules_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setstakerulesTarget, err := address.Validate("ndaqrfbi52ar8snkqpwc5ec4ra2qcxaimpvszdzjmf6p8k3u")
	require.NoError(t, err)

	// ABJWA4PReWBhOXQ0MjVrWWZaRFlTSlRabmRhcXJmYmk1MmFyOHNua3Fwd2M1ZWM0cmEycWN4YWltcHZzemR6am1mNnA4azN1
	expect := []byte{0x00, 0x12, 0x56, 0x03, 0x83, 0xd1, 0x79, 0x60, 0x61, 0x39, 0x74, 0x34, 0x32, 0x35, 0x6b, 0x59, 0x66, 0x5a, 0x44, 0x59, 0x53, 0x4a, 0x54, 0x5a, 0x6e, 0x64, 0x61, 0x71, 0x72, 0x66, 0x62, 0x69, 0x35, 0x32, 0x61, 0x72, 0x38, 0x73, 0x6e, 0x6b, 0x71, 0x70, 0x77, 0x63, 0x35, 0x65, 0x63, 0x34, 0x72, 0x61, 0x32, 0x71, 0x63, 0x78, 0x61, 0x69, 0x6d, 0x70, 0x76, 0x73, 0x7a, 0x64, 0x7a, 0x6a, 0x6d, 0x66, 0x36, 0x70, 0x38, 0x6b, 0x33, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetStakeRules
	}{
		{
			"no signatures",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: a9t425kYfZDYSJTZ
				[]byte{0x6b, 0xdb, 0x78, 0xdb, 0x99, 0x18, 0x7d, 0x90, 0xd8, 0x48, 0x94, 0xd9},
				5161122677225824,
			),
		},
		{
			"with signature",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: a9t425kYfZDYSJTZ
				[]byte{0x6b, 0xdb, 0x78, 0xdb, 0x99, 0x18, 0x7d, 0x90, 0xd8, 0x48, 0x94, 0xd9},
				5161122677225824,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordEndowmentNAV_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABSksuo9T1IAFY++r2NfxA==
	expect := []byte{0x00, 0x14, 0xa4, 0xb2, 0xea, 0x3d, 0x4f, 0x52, 0x00, 0x15, 0x8f, 0xbe, 0xaf, 0x63, 0x5f, 0xc4}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordEndowmentNAV
	}{
		{
			"no signatures",
			NewRecordEndowmentNAV(
				5810587875233618,
				6069023660007364,
			),
		},
		{
			"with signature",
			NewRecordEndowmentNAV(
				5810587875233618,
				6069023660007364,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestResolveStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	resolvestakeTarget, err := address.Validate("ndaeaqgx2jbnzn7462882g387jjbzuqe7pd849bedzpjggd5")
	require.NoError(t, err)
	resolvestakeRules, err := address.Validate("ndak664sxre2uynq3w9q4zxnq27eh6vakedfptee4pgg3hwd")
	require.NoError(t, err)

	// AAAAAAAAABVuZGFrNjY0c3hyZTJ1eW5xM3c5cTR6eG5xMjdlaDZ2YWtlZGZwdGVlNHBnZzNod2QAEhhYf8eI425kYWVhcWd4MmpibnpuNzQ2Mjg4MmczODdqamJ6dXFlN3BkODQ5YmVkenBqZ2dkNQ==
	expect := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x6e, 0x64, 0x61, 0x6b, 0x36, 0x36, 0x34, 0x73, 0x78, 0x72, 0x65, 0x32, 0x75, 0x79, 0x6e, 0x71, 0x33, 0x77, 0x39, 0x71, 0x34, 0x7a, 0x78, 0x6e, 0x71, 0x32, 0x37, 0x65, 0x68, 0x36, 0x76, 0x61, 0x6b, 0x65, 0x64, 0x66, 0x70, 0x74, 0x65, 0x65, 0x34, 0x70, 0x67, 0x67, 0x33, 0x68, 0x77, 0x64, 0x00, 0x12, 0x18, 0x58, 0x7f, 0xc7, 0x88, 0xe3, 0x6e, 0x64, 0x61, 0x65, 0x61, 0x71, 0x67, 0x78, 0x32, 0x6a, 0x62, 0x6e, 0x7a, 0x6e, 0x37, 0x34, 0x36, 0x32, 0x38, 0x38, 0x32, 0x67, 0x33, 0x38, 0x37, 0x6a, 0x6a, 0x62, 0x7a, 0x75, 0x71, 0x65, 0x37, 0x70, 0x64, 0x38, 0x34, 0x39, 0x62, 0x65, 0x64, 0x7a, 0x70, 0x6a, 0x67, 0x67, 0x64, 0x35}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ResolveStake
	}{
		{
			"no signatures",
			NewResolveStake(
				resolvestakeTarget,
				resolvestakeRules,
				21,
				5093317960763619,
			),
		},
		{
			"with signature",
			NewResolveStake(
				resolvestakeTarget,
				resolvestakeRules,
				21,
				5093317960763619,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSchema_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBhZmV0IHNienJqeCB3bncgayBiZSBmIHpkY2UgABI56gyNxHo=
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x61, 0x66, 0x65, 0x74, 0x20, 0x73, 0x62, 0x7a, 0x72, 0x6a, 0x78, 0x20, 0x77, 0x6e, 0x77, 0x20, 0x6b, 0x20, 0x62, 0x65, 0x20, 0x66, 0x20, 0x7a, 0x64, 0x63, 0x65, 0x20, 0x00, 0x12, 0x39, 0xea, 0x0c, 0x8d, 0xc4, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSchema
	}{
		{
			"no signatures",
			NewChangeSchema(
				"string: afet sbzrjx wnw k be f zdce ",
				5130226976539770,
			),
		},
		{
			"with signature",
			NewChangeSchema(
				"string: afet sbzrjx wnw k be f zdce ",
				5130226976539770,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
