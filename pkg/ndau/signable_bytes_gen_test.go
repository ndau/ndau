package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	math "github.com/oneiro-ndev/ndaumath/pkg/types"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndaiyccdinz5ddtxhbphyst2ducksjcu9evcj7znixv54gsa")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndaanwim6n9qjpdgkg34ctpvrfzzyu9tjawpeqwh9jva232t")
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
		want []byte
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				math.Ndau(9616287113937),
				uint64(2949882636),
			),
			[]byte{0x6e, 0x64, 0x61, 0x61, 0x6e, 0x77, 0x69, 0x6d, 0x36, 0x6e, 0x39, 0x71, 0x6a, 0x70, 0x64, 0x67, 0x6b, 0x67, 0x33, 0x34, 0x63, 0x74, 0x70, 0x76, 0x72, 0x66, 0x7a, 0x7a, 0x79, 0x75, 0x39, 0x74, 0x6a, 0x61, 0x77, 0x70, 0x65, 0x71, 0x77, 0x68, 0x39, 0x6a, 0x76, 0x61, 0x32, 0x33, 0x32, 0x74, 0x0, 0x0, 0x8, 0xbe, 0xf7, 0x60, 0xa2, 0xd1, 0x0, 0x0, 0x0, 0x0, 0xaf, 0xd3, 0xa3, 0xc, 0x6e, 0x64, 0x61, 0x69, 0x79, 0x63, 0x63, 0x64, 0x69, 0x6e, 0x7a, 0x35, 0x64, 0x64, 0x74, 0x78, 0x68, 0x62, 0x70, 0x68, 0x79, 0x73, 0x74, 0x32, 0x64, 0x75, 0x63, 0x6b, 0x73, 0x6a, 0x63, 0x75, 0x39, 0x65, 0x76, 0x63, 0x6a, 0x37, 0x7a, 0x6e, 0x69, 0x78, 0x76, 0x35, 0x34, 0x67, 0x73, 0x61},
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				math.Ndau(9616287113937),
				uint64(2949882636),
				private,
			),
			[]byte{0x6e, 0x64, 0x61, 0x61, 0x6e, 0x77, 0x69, 0x6d, 0x36, 0x6e, 0x39, 0x71, 0x6a, 0x70, 0x64, 0x67, 0x6b, 0x67, 0x33, 0x34, 0x63, 0x74, 0x70, 0x76, 0x72, 0x66, 0x7a, 0x7a, 0x79, 0x75, 0x39, 0x74, 0x6a, 0x61, 0x77, 0x70, 0x65, 0x71, 0x77, 0x68, 0x39, 0x6a, 0x76, 0x61, 0x32, 0x33, 0x32, 0x74, 0x0, 0x0, 0x8, 0xbe, 0xf7, 0x60, 0xa2, 0xd1, 0x0, 0x0, 0x0, 0x0, 0xaf, 0xd3, 0xa3, 0xc, 0x6e, 0x64, 0x61, 0x69, 0x79, 0x63, 0x63, 0x64, 0x69, 0x6e, 0x7a, 0x35, 0x64, 0x64, 0x74, 0x78, 0x68, 0x62, 0x70, 0x68, 0x79, 0x73, 0x74, 0x32, 0x64, 0x75, 0x63, 0x6b, 0x73, 0x6a, 0x63, 0x75, 0x39, 0x65, 0x76, 0x63, 0x6a, 0x37, 0x7a, 0x6e, 0x69, 0x78, 0x76, 0x35, 0x34, 0x67, 0x73, 0x61},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndam56kpchu7ngmp6nt4fx7bg6v23xfuvew6ds4sxqw8p7p6")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x4e, 0x7c, 0x8b, 0x76, 0x3a, 0x1b, 0x1d, 0x49, 0xd4, 0x95, 0x5c, 0x84, 0x86, 0x21, 0x63, 0x25, 0x25, 0x3f, 0xec, 0x73, 0x8d, 0xd7, 0xa9, 0xe2, 0x8b, 0xf9, 0x21, 0x11, 0x9c, 0x16, 0x0f, 0x07}, nil)
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
		want []byte
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				[]byte{0x02, 0x44, 0x86, 0x15, 0xbb, 0xda, 0x08, 0x31, 0x3f, 0x6a, 0x8e, 0xb6},
				uint64(3704372516),
			),
			[]byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x68, 0x68, 0x33, 0x63, 0x35, 0x79, 0x68, 0x69, 0x70, 0x74, 0x34, 0x75, 0x71, 0x77, 0x75, 0x78, 0x71, 0x69, 0x6a, 0x62, 0x74, 0x62, 0x6e, 0x6e, 0x75, 0x75, 0x6b, 0x72, 0x39, 0x6e, 0x71, 0x71, 0x67, 0x37, 0x72, 0x6b, 0x72, 0x63, 0x74, 0x72, 0x36, 0x75, 0x63, 0x65, 0x6e, 0x36, 0x63, 0x32, 0x68, 0x73, 0x72, 0x68, 0x78, 0x39, 0x64, 0x39, 0x76, 0x33, 0x77, 0x38, 0x74, 0x38, 0x0, 0x0, 0x0, 0x0, 0xdc, 0xcc, 0x3d, 0x24, 0x6e, 0x64, 0x61, 0x6d, 0x35, 0x36, 0x6b, 0x70, 0x63, 0x68, 0x75, 0x37, 0x6e, 0x67, 0x6d, 0x70, 0x36, 0x6e, 0x74, 0x34, 0x66, 0x78, 0x37, 0x62, 0x67, 0x36, 0x76, 0x32, 0x33, 0x78, 0x66, 0x75, 0x76, 0x65, 0x77, 0x36, 0x64, 0x73, 0x34, 0x73, 0x78, 0x71, 0x77, 0x38, 0x70, 0x37, 0x70, 0x36, 0x41, 0x6b, 0x53, 0x47, 0x46, 0x62, 0x76, 0x61, 0x43, 0x44, 0x45, 0x2f, 0x61, 0x6f, 0x36, 0x32},
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				[]byte{0x02, 0x44, 0x86, 0x15, 0xbb, 0xda, 0x08, 0x31, 0x3f, 0x6a, 0x8e, 0xb6},
				uint64(3704372516),
				private,
			),
			[]byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x68, 0x68, 0x33, 0x63, 0x35, 0x79, 0x68, 0x69, 0x70, 0x74, 0x34, 0x75, 0x71, 0x77, 0x75, 0x78, 0x71, 0x69, 0x6a, 0x62, 0x74, 0x62, 0x6e, 0x6e, 0x75, 0x75, 0x6b, 0x72, 0x39, 0x6e, 0x71, 0x71, 0x67, 0x37, 0x72, 0x6b, 0x72, 0x63, 0x74, 0x72, 0x36, 0x75, 0x63, 0x65, 0x6e, 0x36, 0x63, 0x32, 0x68, 0x73, 0x72, 0x68, 0x78, 0x39, 0x64, 0x39, 0x76, 0x33, 0x77, 0x38, 0x74, 0x38, 0x0, 0x0, 0x0, 0x0, 0xdc, 0xcc, 0x3d, 0x24, 0x6e, 0x64, 0x61, 0x6d, 0x35, 0x36, 0x6b, 0x70, 0x63, 0x68, 0x75, 0x37, 0x6e, 0x67, 0x6d, 0x70, 0x36, 0x6e, 0x74, 0x34, 0x66, 0x78, 0x37, 0x62, 0x67, 0x36, 0x76, 0x32, 0x33, 0x78, 0x66, 0x75, 0x76, 0x65, 0x77, 0x36, 0x64, 0x73, 0x34, 0x73, 0x78, 0x71, 0x77, 0x38, 0x70, 0x37, 0x70, 0x36, 0x41, 0x6b, 0x53, 0x47, 0x46, 0x62, 0x76, 0x61, 0x43, 0x44, 0x45, 0x2f, 0x61, 0x6f, 0x36, 0x32},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndaihv7t8hjwyybp22nadt3ucgjtty5gtvuw9pf2p5kmg6tc")
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
		want []byte
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				math.Ndau(328053361739),
				uint64(2554683474),
			),
			[]byte{0x6e, 0x64, 0x61, 0x69, 0x68, 0x76, 0x37, 0x74, 0x38, 0x68, 0x6a, 0x77, 0x79, 0x79, 0x62, 0x70, 0x32, 0x32, 0x6e, 0x61, 0x64, 0x74, 0x33, 0x75, 0x63, 0x67, 0x6a, 0x74, 0x74, 0x79, 0x35, 0x67, 0x74, 0x76, 0x75, 0x77, 0x39, 0x70, 0x66, 0x32, 0x70, 0x35, 0x6b, 0x6d, 0x67, 0x36, 0x74, 0x63, 0x0, 0x0, 0x0, 0x4c, 0x61, 0x81, 0xc, 0x4b, 0x0, 0x0, 0x0, 0x0, 0x98, 0x45, 0x60, 0x52},
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				math.Ndau(328053361739),
				uint64(2554683474),
				private,
			),
			[]byte{0x6e, 0x64, 0x61, 0x69, 0x68, 0x76, 0x37, 0x74, 0x38, 0x68, 0x6a, 0x77, 0x79, 0x79, 0x62, 0x70, 0x32, 0x32, 0x6e, 0x61, 0x64, 0x74, 0x33, 0x75, 0x63, 0x67, 0x6a, 0x74, 0x74, 0x79, 0x35, 0x67, 0x74, 0x76, 0x75, 0x77, 0x39, 0x70, 0x66, 0x32, 0x70, 0x35, 0x6b, 0x6d, 0x67, 0x36, 0x74, 0x63, 0x0, 0x0, 0x0, 0x4c, 0x61, 0x81, 0xc, 0x4b, 0x0, 0x0, 0x0, 0x0, 0x98, 0x45, 0x60, 0x52},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndaqh89mpundc8zsjhzycvvxbdi2s9xcb4y3fh29822d27qu")
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
		want []byte
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				math.Duration(133481315663110),
				uint64(1553942706),
			),
			[]byte{0x34, 0x79, 0x32, 0x6d, 0x32, 0x34, 0x64, 0x74, 0x32, 0x32, 0x68, 0x38, 0x6d, 0x33, 0x35, 0x73, 0x36, 0x36, 0x33, 0x31, 0x31, 0x30, 0xce, 0xbc, 0x73, 0x0, 0x0, 0x0, 0x0, 0x5c, 0x9f, 0x48, 0xb2, 0x6e, 0x64, 0x61, 0x71, 0x68, 0x38, 0x39, 0x6d, 0x70, 0x75, 0x6e, 0x64, 0x63, 0x38, 0x7a, 0x73, 0x6a, 0x68, 0x7a, 0x79, 0x63, 0x76, 0x76, 0x78, 0x62, 0x64, 0x69, 0x32, 0x73, 0x39, 0x78, 0x63, 0x62, 0x34, 0x79, 0x33, 0x66, 0x68, 0x32, 0x39, 0x38, 0x32, 0x32, 0x64, 0x32, 0x37, 0x71, 0x75},
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				math.Duration(133481315663110),
				uint64(1553942706),
				private,
			),
			[]byte{0x34, 0x79, 0x32, 0x6d, 0x32, 0x34, 0x64, 0x74, 0x32, 0x32, 0x68, 0x38, 0x6d, 0x33, 0x35, 0x73, 0x36, 0x36, 0x33, 0x31, 0x31, 0x30, 0xce, 0xbc, 0x73, 0x0, 0x0, 0x0, 0x0, 0x5c, 0x9f, 0x48, 0xb2, 0x6e, 0x64, 0x61, 0x71, 0x68, 0x38, 0x39, 0x6d, 0x70, 0x75, 0x6e, 0x64, 0x63, 0x38, 0x7a, 0x73, 0x6a, 0x68, 0x7a, 0x79, 0x63, 0x76, 0x76, 0x78, 0x62, 0x64, 0x69, 0x32, 0x73, 0x39, 0x78, 0x63, 0x62, 0x34, 0x79, 0x33, 0x66, 0x68, 0x32, 0x39, 0x38, 0x32, 0x32, 0x64, 0x32, 0x37, 0x71, 0x75},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndac7ruwpnz99s7rm6zrgb3h2uexrgbwynz6jpvdhs7aqzmq")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndakqa7kjq6muwhxe37gu4nqxtq2u8xn7da3yykjv2ifw9fs")
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
		want []byte
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				uint64(3440505210),
			),
			[]byte{0x6e, 0x64, 0x61, 0x6b, 0x71, 0x61, 0x37, 0x6b, 0x6a, 0x71, 0x36, 0x6d, 0x75, 0x77, 0x68, 0x78, 0x65, 0x33, 0x37, 0x67, 0x75, 0x34, 0x6e, 0x71, 0x78, 0x74, 0x71, 0x32, 0x75, 0x38, 0x78, 0x6e, 0x37, 0x64, 0x61, 0x33, 0x79, 0x79, 0x6b, 0x6a, 0x76, 0x32, 0x69, 0x66, 0x77, 0x39, 0x66, 0x73, 0x0, 0x0, 0x0, 0x0, 0xcd, 0x11, 0xf1, 0x7a, 0x6e, 0x64, 0x61, 0x63, 0x37, 0x72, 0x75, 0x77, 0x70, 0x6e, 0x7a, 0x39, 0x39, 0x73, 0x37, 0x72, 0x6d, 0x36, 0x7a, 0x72, 0x67, 0x62, 0x33, 0x68, 0x32, 0x75, 0x65, 0x78, 0x72, 0x67, 0x62, 0x77, 0x79, 0x6e, 0x7a, 0x36, 0x6a, 0x70, 0x76, 0x64, 0x68, 0x73, 0x37, 0x61, 0x71, 0x7a, 0x6d, 0x71},
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				uint64(3440505210),
				private,
			),
			[]byte{0x6e, 0x64, 0x61, 0x6b, 0x71, 0x61, 0x37, 0x6b, 0x6a, 0x71, 0x36, 0x6d, 0x75, 0x77, 0x68, 0x78, 0x65, 0x33, 0x37, 0x67, 0x75, 0x34, 0x6e, 0x71, 0x78, 0x74, 0x71, 0x32, 0x75, 0x38, 0x78, 0x6e, 0x37, 0x64, 0x61, 0x33, 0x79, 0x79, 0x6b, 0x6a, 0x76, 0x32, 0x69, 0x66, 0x77, 0x39, 0x66, 0x73, 0x0, 0x0, 0x0, 0x0, 0xcd, 0x11, 0xf1, 0x7a, 0x6e, 0x64, 0x61, 0x63, 0x37, 0x72, 0x75, 0x77, 0x70, 0x6e, 0x7a, 0x39, 0x39, 0x73, 0x37, 0x72, 0x6d, 0x36, 0x7a, 0x72, 0x67, 0x62, 0x33, 0x68, 0x32, 0x75, 0x65, 0x78, 0x72, 0x67, 0x62, 0x77, 0x79, 0x6e, 0x7a, 0x36, 0x6a, 0x70, 0x76, 0x64, 0x68, 0x73, 0x37, 0x61, 0x71, 0x7a, 0x6d, 0x71},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndajbycti6dy4uabdkycp2kx3tdr85rmizacjwhz2985sasd")
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
		want []byte
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				uint64(1494450894),
			),
			[]byte{0x6e, 0x64, 0x61, 0x6a, 0x62, 0x79, 0x63, 0x74, 0x69, 0x36, 0x64, 0x79, 0x34, 0x75, 0x61, 0x62, 0x64, 0x6b, 0x79, 0x63, 0x70, 0x32, 0x6b, 0x78, 0x33, 0x74, 0x64, 0x72, 0x38, 0x35, 0x72, 0x6d, 0x69, 0x7a, 0x61, 0x63, 0x6a, 0x77, 0x68, 0x7a, 0x32, 0x39, 0x38, 0x35, 0x73, 0x61, 0x73, 0x64, 0x0, 0x0, 0x0, 0x0, 0x59, 0x13, 0x82, 0xce},
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				uint64(1494450894),
				private,
			),
			[]byte{0x6e, 0x64, 0x61, 0x6a, 0x62, 0x79, 0x63, 0x74, 0x69, 0x36, 0x64, 0x79, 0x34, 0x75, 0x61, 0x62, 0x64, 0x6b, 0x79, 0x63, 0x70, 0x32, 0x6b, 0x78, 0x33, 0x74, 0x64, 0x72, 0x38, 0x35, 0x72, 0x6d, 0x69, 0x7a, 0x61, 0x63, 0x6a, 0x77, 0x68, 0x7a, 0x32, 0x39, 0x38, 0x35, 0x73, 0x61, 0x73, 0x64, 0x0, 0x0, 0x0, 0x0, 0x59, 0x13, 0x82, 0xce},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndagi8xct8dsatyz8876sszf4vcddbekyjgry9jzy4mh5bjm")
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
		want []byte
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				math.Duration(156371918424343),
				uint64(2768277286),
			),
			[]byte{0x34, 0x79, 0x31, 0x31, 0x6d, 0x31, 0x39, 0x64, 0x74, 0x32, 0x30, 0x68, 0x33, 0x38, 0x6d, 0x33, 0x38, 0x73, 0x34, 0x32, 0x34, 0x33, 0x34, 0x33, 0xce, 0xbc, 0x73, 0x0, 0x0, 0x0, 0x0, 0xa5, 0x0, 0x8f, 0x26, 0x6e, 0x64, 0x61, 0x67, 0x69, 0x38, 0x78, 0x63, 0x74, 0x38, 0x64, 0x73, 0x61, 0x74, 0x79, 0x7a, 0x38, 0x38, 0x37, 0x36, 0x73, 0x73, 0x7a, 0x66, 0x34, 0x76, 0x63, 0x64, 0x64, 0x62, 0x65, 0x6b, 0x79, 0x6a, 0x67, 0x72, 0x79, 0x39, 0x6a, 0x7a, 0x79, 0x34, 0x6d, 0x68, 0x35, 0x62, 0x6a, 0x6d},
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				math.Duration(156371918424343),
				uint64(2768277286),
				private,
			),
			[]byte{0x34, 0x79, 0x31, 0x31, 0x6d, 0x31, 0x39, 0x64, 0x74, 0x32, 0x30, 0x68, 0x33, 0x38, 0x6d, 0x33, 0x38, 0x73, 0x34, 0x32, 0x34, 0x33, 0x34, 0x33, 0xce, 0xbc, 0x73, 0x0, 0x0, 0x0, 0x0, 0xa5, 0x0, 0x8f, 0x26, 0x6e, 0x64, 0x61, 0x67, 0x69, 0x38, 0x78, 0x63, 0x74, 0x38, 0x64, 0x73, 0x61, 0x74, 0x79, 0x7a, 0x38, 0x38, 0x37, 0x36, 0x73, 0x73, 0x7a, 0x66, 0x34, 0x76, 0x63, 0x64, 0x64, 0x62, 0x65, 0x6b, 0x79, 0x6a, 0x67, 0x72, 0x79, 0x39, 0x6a, 0x7a, 0x79, 0x34, 0x6d, 0x68, 0x35, 0x62, 0x6a, 0x6d},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndadza68h3mgim9kuvtpg79h4xrv7bimr4utt9j62urhqgag")
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
		want []byte
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				uint64(1762323197),
			),
			[]byte{0x0, 0x0, 0x0, 0x0, 0x69, 0xa, 0xea, 0xfd, 0x6e, 0x64, 0x61, 0x64, 0x7a, 0x61, 0x36, 0x38, 0x68, 0x33, 0x6d, 0x67, 0x69, 0x6d, 0x39, 0x6b, 0x75, 0x76, 0x74, 0x70, 0x67, 0x37, 0x39, 0x68, 0x34, 0x78, 0x72, 0x76, 0x37, 0x62, 0x69, 0x6d, 0x72, 0x34, 0x75, 0x74, 0x74, 0x39, 0x6a, 0x36, 0x32, 0x75, 0x72, 0x68, 0x71, 0x67, 0x61, 0x67},
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				uint64(1762323197),
				private,
			),
			[]byte{0x0, 0x0, 0x0, 0x0, 0x69, 0xa, 0xea, 0xfd, 0x6e, 0x64, 0x61, 0x64, 0x7a, 0x61, 0x36, 0x38, 0x68, 0x33, 0x6d, 0x67, 0x69, 0x6d, 0x39, 0x6b, 0x75, 0x76, 0x74, 0x70, 0x67, 0x37, 0x39, 0x68, 0x34, 0x78, 0x72, 0x76, 0x37, 0x62, 0x69, 0x6d, 0x72, 0x34, 0x75, 0x74, 0x74, 0x39, 0x6a, 0x36, 0x32, 0x75, 0x72, 0x68, 0x71, 0x67, 0x61, 0x67},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationSource, err := address.Validate("ndaa5e8tn9mnan46wj856vmy923dd32bsesxaqavjphnrvy9")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndajn4psyixt2b2k7pn897p6n4rwzzjpxrv8atat7p3dt3ra")
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
		want []byte
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationSource,
				setrewardsdestinationDestination,
				uint64(127437182),
			),
			[]byte{0x6e, 0x64, 0x61, 0x6a, 0x6e, 0x34, 0x70, 0x73, 0x79, 0x69, 0x78, 0x74, 0x32, 0x62, 0x32, 0x6b, 0x37, 0x70, 0x6e, 0x38, 0x39, 0x37, 0x70, 0x36, 0x6e, 0x34, 0x72, 0x77, 0x7a, 0x7a, 0x6a, 0x70, 0x78, 0x72, 0x76, 0x38, 0x61, 0x74, 0x61, 0x74, 0x37, 0x70, 0x33, 0x64, 0x74, 0x33, 0x72, 0x61, 0x0, 0x0, 0x0, 0x0, 0x7, 0x98, 0x89, 0x7e, 0x6e, 0x64, 0x61, 0x61, 0x35, 0x65, 0x38, 0x74, 0x6e, 0x39, 0x6d, 0x6e, 0x61, 0x6e, 0x34, 0x36, 0x77, 0x6a, 0x38, 0x35, 0x36, 0x76, 0x6d, 0x79, 0x39, 0x32, 0x33, 0x64, 0x64, 0x33, 0x32, 0x62, 0x73, 0x65, 0x73, 0x78, 0x61, 0x71, 0x61, 0x76, 0x6a, 0x70, 0x68, 0x6e, 0x72, 0x76, 0x79, 0x39},
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationSource,
				setrewardsdestinationDestination,
				uint64(127437182),
				private,
			),
			[]byte{0x6e, 0x64, 0x61, 0x6a, 0x6e, 0x34, 0x70, 0x73, 0x79, 0x69, 0x78, 0x74, 0x32, 0x62, 0x32, 0x6b, 0x37, 0x70, 0x6e, 0x38, 0x39, 0x37, 0x70, 0x36, 0x6e, 0x34, 0x72, 0x77, 0x7a, 0x7a, 0x6a, 0x70, 0x78, 0x72, 0x76, 0x38, 0x61, 0x74, 0x61, 0x74, 0x37, 0x70, 0x33, 0x64, 0x74, 0x33, 0x72, 0x61, 0x0, 0x0, 0x0, 0x0, 0x7, 0x98, 0x89, 0x7e, 0x6e, 0x64, 0x61, 0x61, 0x35, 0x65, 0x38, 0x74, 0x6e, 0x39, 0x6d, 0x6e, 0x61, 0x6e, 0x34, 0x36, 0x77, 0x6a, 0x38, 0x35, 0x36, 0x76, 0x6d, 0x79, 0x39, 0x32, 0x33, 0x64, 0x64, 0x33, 0x32, 0x62, 0x73, 0x65, 0x73, 0x78, 0x61, 0x71, 0x61, 0x76, 0x6a, 0x70, 0x68, 0x6e, 0x72, 0x76, 0x79, 0x39},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndaizm7ng3ivxuu8upe8nx2huw9dggzakt6tsajkeiszbvau")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x44, 0xc6, 0xc6, 0xef, 0x83, 0x62, 0xf2, 0xf5, 0x4f, 0xc0, 0x0e, 0x09, 0xd6, 0xfc, 0x25, 0x64, 0x08, 0x54, 0xc1, 0x5d, 0xfc, 0xac, 0xaa, 0x8a, 0x2c, 0xec, 0xce, 0x5a, 0x3a, 0xba, 0x53, 0xab}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x70, 0x5b, 0x18, 0xdb, 0x94, 0xb4, 0xd3, 0x38, 0xa5, 0x14, 0x3e, 0x63, 0x40, 0x8d, 0x87, 0x24, 0xb0, 0xcf, 0x3f, 0xae, 0x17, 0xa3, 0xf7, 0x9b, 0xe1, 0x07, 0x2f, 0xb6, 0x3c, 0x35, 0xd6, 0x04}, nil)
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
		want []byte
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				[]byte{0x2c, 0x41, 0x60, 0xf3, 0x8e, 0xe9, 0xe2, 0xa9, 0xf3, 0xfb, 0x4f, 0xfb},
				uint64(1262747498),
			),
			[]byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x63, 0x6e, 0x70, 0x74, 0x7a, 0x72, 0x73, 0x70, 0x74, 0x72, 0x66, 0x37, 0x6b, 0x72, 0x32, 0x61, 0x68, 0x61, 0x76, 0x78, 0x7a, 0x36, 0x65, 0x78, 0x75, 0x61, 0x73, 0x78, 0x67, 0x62, 0x6d, 0x7a, 0x38, 0x6b, 0x33, 0x6b, 0x77, 0x6b, 0x66, 0x76, 0x79, 0x6e, 0x36, 0x79, 0x74, 0x34, 0x7a, 0x6a, 0x6a, 0x34, 0x79, 0x61, 0x78, 0x68, 0x67, 0x33, 0x71, 0x69, 0x73, 0x38, 0x33, 0x32, 0x0, 0x0, 0x0, 0x0, 0x4b, 0x43, 0xff, 0x6a, 0x6e, 0x64, 0x61, 0x69, 0x7a, 0x6d, 0x37, 0x6e, 0x67, 0x33, 0x69, 0x76, 0x78, 0x75, 0x75, 0x38, 0x75, 0x70, 0x65, 0x38, 0x6e, 0x78, 0x32, 0x68, 0x75, 0x77, 0x39, 0x64, 0x67, 0x67, 0x7a, 0x61, 0x6b, 0x74, 0x36, 0x74, 0x73, 0x61, 0x6a, 0x6b, 0x65, 0x69, 0x73, 0x7a, 0x62, 0x76, 0x61, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x32, 0x66, 0x79, 0x67, 0x67, 0x35, 0x75, 0x75, 0x34, 0x70, 0x67, 0x71, 0x66, 0x66, 0x63, 0x73, 0x39, 0x67, 0x67, 0x73, 0x65, 0x70, 0x73, 0x36, 0x75, 0x6d, 0x62, 0x76, 0x33, 0x39, 0x78, 0x32, 0x6d, 0x34, 0x68, 0x37, 0x36, 0x35, 0x36, 0x65, 0x64, 0x75, 0x39, 0x70, 0x74, 0x36, 0x67, 0x7a, 0x6d, 0x61, 0x69, 0x7a, 0x74, 0x69, 0x67, 0x79, 0x77, 0x61, 0x71, 0x32, 0x7a, 0x36, 0x4c, 0x45, 0x46, 0x67, 0x38, 0x34, 0x37, 0x70, 0x34, 0x71, 0x6e, 0x7a, 0x2b, 0x30, 0x2f, 0x37},
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				[]byte{0x2c, 0x41, 0x60, 0xf3, 0x8e, 0xe9, 0xe2, 0xa9, 0xf3, 0xfb, 0x4f, 0xfb},
				uint64(1262747498),
				private,
			),
			[]byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x63, 0x6e, 0x70, 0x74, 0x7a, 0x72, 0x73, 0x70, 0x74, 0x72, 0x66, 0x37, 0x6b, 0x72, 0x32, 0x61, 0x68, 0x61, 0x76, 0x78, 0x7a, 0x36, 0x65, 0x78, 0x75, 0x61, 0x73, 0x78, 0x67, 0x62, 0x6d, 0x7a, 0x38, 0x6b, 0x33, 0x6b, 0x77, 0x6b, 0x66, 0x76, 0x79, 0x6e, 0x36, 0x79, 0x74, 0x34, 0x7a, 0x6a, 0x6a, 0x34, 0x79, 0x61, 0x78, 0x68, 0x67, 0x33, 0x71, 0x69, 0x73, 0x38, 0x33, 0x32, 0x0, 0x0, 0x0, 0x0, 0x4b, 0x43, 0xff, 0x6a, 0x6e, 0x64, 0x61, 0x69, 0x7a, 0x6d, 0x37, 0x6e, 0x67, 0x33, 0x69, 0x76, 0x78, 0x75, 0x75, 0x38, 0x75, 0x70, 0x65, 0x38, 0x6e, 0x78, 0x32, 0x68, 0x75, 0x77, 0x39, 0x64, 0x67, 0x67, 0x7a, 0x61, 0x6b, 0x74, 0x36, 0x74, 0x73, 0x61, 0x6a, 0x6b, 0x65, 0x69, 0x73, 0x7a, 0x62, 0x76, 0x61, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x32, 0x66, 0x79, 0x67, 0x67, 0x35, 0x75, 0x75, 0x34, 0x70, 0x67, 0x71, 0x66, 0x66, 0x63, 0x73, 0x39, 0x67, 0x67, 0x73, 0x65, 0x70, 0x73, 0x36, 0x75, 0x6d, 0x62, 0x76, 0x33, 0x39, 0x78, 0x32, 0x6d, 0x34, 0x68, 0x37, 0x36, 0x35, 0x36, 0x65, 0x64, 0x75, 0x39, 0x70, 0x74, 0x36, 0x67, 0x7a, 0x6d, 0x61, 0x69, 0x7a, 0x74, 0x69, 0x67, 0x79, 0x77, 0x61, 0x71, 0x32, 0x7a, 0x36, 0x4c, 0x45, 0x46, 0x67, 0x38, 0x34, 0x37, 0x70, 0x34, 0x71, 0x6e, 0x7a, 0x2b, 0x30, 0x2f, 0x37},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndagzs5vi99vidp43qjz6t6yfbmmzm4sfaz5guf3hv55qc6k")
	require.NoError(t, err)
	stakeNode, err := address.Validate("ndab4ed58kjxh8btgwqt69jf5x9pdgs3t7755m7jat4j4seq")
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
		want []byte
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeNode,
				uint64(2527916153),
			),
			[]byte{0x6e, 0x64, 0x61, 0x62, 0x34, 0x65, 0x64, 0x35, 0x38, 0x6b, 0x6a, 0x78, 0x68, 0x38, 0x62, 0x74, 0x67, 0x77, 0x71, 0x74, 0x36, 0x39, 0x6a, 0x66, 0x35, 0x78, 0x39, 0x70, 0x64, 0x67, 0x73, 0x33, 0x74, 0x37, 0x37, 0x35, 0x35, 0x6d, 0x37, 0x6a, 0x61, 0x74, 0x34, 0x6a, 0x34, 0x73, 0x65, 0x71, 0x0, 0x0, 0x0, 0x0, 0x96, 0xac, 0xf0, 0x79, 0x6e, 0x64, 0x61, 0x67, 0x7a, 0x73, 0x35, 0x76, 0x69, 0x39, 0x39, 0x76, 0x69, 0x64, 0x70, 0x34, 0x33, 0x71, 0x6a, 0x7a, 0x36, 0x74, 0x36, 0x79, 0x66, 0x62, 0x6d, 0x6d, 0x7a, 0x6d, 0x34, 0x73, 0x66, 0x61, 0x7a, 0x35, 0x67, 0x75, 0x66, 0x33, 0x68, 0x76, 0x35, 0x35, 0x71, 0x63, 0x36, 0x6b},
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeNode,
				uint64(2527916153),
				private,
			),
			[]byte{0x6e, 0x64, 0x61, 0x62, 0x34, 0x65, 0x64, 0x35, 0x38, 0x6b, 0x6a, 0x78, 0x68, 0x38, 0x62, 0x74, 0x67, 0x77, 0x71, 0x74, 0x36, 0x39, 0x6a, 0x66, 0x35, 0x78, 0x39, 0x70, 0x64, 0x67, 0x73, 0x33, 0x74, 0x37, 0x37, 0x35, 0x35, 0x6d, 0x37, 0x6a, 0x61, 0x74, 0x34, 0x6a, 0x34, 0x73, 0x65, 0x71, 0x0, 0x0, 0x0, 0x0, 0x96, 0xac, 0xf0, 0x79, 0x6e, 0x64, 0x61, 0x67, 0x7a, 0x73, 0x35, 0x76, 0x69, 0x39, 0x39, 0x76, 0x69, 0x64, 0x70, 0x34, 0x33, 0x71, 0x6a, 0x7a, 0x36, 0x74, 0x36, 0x79, 0x66, 0x62, 0x6d, 0x6d, 0x7a, 0x6d, 0x34, 0x73, 0x66, 0x61, 0x7a, 0x35, 0x67, 0x75, 0x66, 0x33, 0x68, 0x76, 0x35, 0x35, 0x71, 0x63, 0x36, 0x6b},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndaqjkumjd32ns4meb9abqnrcjpgd5k6mxtenxuvsndd4bv4")
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
		want []byte
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				[]byte{0x53, 0xaf, 0x19, 0x77, 0x9c, 0xb2, 0x94, 0x8b, 0x65, 0x70, 0xff, 0xa0},
				"string: yns r s vmaozfz sbojifqg snwtksmv igl pbuop dku ",
				uint64(2773833222),
			),
			[]byte{0x55, 0x36, 0x38, 0x5a, 0x64, 0x35, 0x79, 0x79, 0x6c, 0x49, 0x74, 0x6c, 0x63, 0x50, 0x2b, 0x67, 0x6e, 0x64, 0x61, 0x71, 0x6a, 0x6b, 0x75, 0x6d, 0x6a, 0x64, 0x33, 0x32, 0x6e, 0x73, 0x34, 0x6d, 0x65, 0x62, 0x39, 0x61, 0x62, 0x71, 0x6e, 0x72, 0x63, 0x6a, 0x70, 0x67, 0x64, 0x35, 0x6b, 0x36, 0x6d, 0x78, 0x74, 0x65, 0x6e, 0x78, 0x75, 0x76, 0x73, 0x6e, 0x64, 0x64, 0x34, 0x62, 0x76, 0x34, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x79, 0x6e, 0x73, 0x20, 0x72, 0x20, 0x73, 0x20, 0x76, 0x6d, 0x61, 0x6f, 0x7a, 0x66, 0x7a, 0x20, 0x73, 0x62, 0x6f, 0x6a, 0x69, 0x66, 0x71, 0x67, 0x20, 0x73, 0x6e, 0x77, 0x74, 0x6b, 0x73, 0x6d, 0x76, 0x20, 0x69, 0x67, 0x6c, 0x20, 0x70, 0x62, 0x75, 0x6f, 0x70, 0x20, 0x64, 0x6b, 0x75, 0x20, 0x0, 0x0, 0x0, 0x0, 0xa5, 0x55, 0x56, 0x6},
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				[]byte{0x53, 0xaf, 0x19, 0x77, 0x9c, 0xb2, 0x94, 0x8b, 0x65, 0x70, 0xff, 0xa0},
				"string: yns r s vmaozfz sbojifqg snwtksmv igl pbuop dku ",
				uint64(2773833222),
				private,
			),
			[]byte{0x55, 0x36, 0x38, 0x5a, 0x64, 0x35, 0x79, 0x79, 0x6c, 0x49, 0x74, 0x6c, 0x63, 0x50, 0x2b, 0x67, 0x6e, 0x64, 0x61, 0x71, 0x6a, 0x6b, 0x75, 0x6d, 0x6a, 0x64, 0x33, 0x32, 0x6e, 0x73, 0x34, 0x6d, 0x65, 0x62, 0x39, 0x61, 0x62, 0x71, 0x6e, 0x72, 0x63, 0x6a, 0x70, 0x67, 0x64, 0x35, 0x6b, 0x36, 0x6d, 0x78, 0x74, 0x65, 0x6e, 0x78, 0x75, 0x76, 0x73, 0x6e, 0x64, 0x64, 0x34, 0x62, 0x76, 0x34, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x79, 0x6e, 0x73, 0x20, 0x72, 0x20, 0x73, 0x20, 0x76, 0x6d, 0x61, 0x6f, 0x7a, 0x66, 0x7a, 0x20, 0x73, 0x62, 0x6f, 0x6a, 0x69, 0x66, 0x71, 0x67, 0x20, 0x73, 0x6e, 0x77, 0x74, 0x6b, 0x73, 0x6d, 0x76, 0x20, 0x69, 0x67, 0x6c, 0x20, 0x70, 0x62, 0x75, 0x6f, 0x70, 0x20, 0x64, 0x6b, 0x75, 0x20, 0x0, 0x0, 0x0, 0x0, 0xa5, 0x55, 0x56, 0x6},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
		want []byte
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				int64(4606018198686923411),
				uint64(1719843706),
			),
			[]byte{0x3f, 0xeb, 0xdd, 0x25, 0xe1, 0xb7, 0xfa, 0x93, 0x0, 0x0, 0x0, 0x0, 0x66, 0x82, 0xbb, 0x7a},
		},
		{
			"with signature",
			NewNominateNodeReward(
				int64(4606018198686923411),
				uint64(1719843706),
				private,
			),
			[]byte{0x3f, 0xeb, 0xdd, 0x25, 0xe1, 0xb7, 0xfa, 0x93, 0x0, 0x0, 0x0, 0x0, 0x66, 0x82, 0xbb, 0x7a},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndadaczc4np23vn2vr4c7mh5b27ejeiwmwz6chu3bh47btn8")
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
		want []byte
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				uint64(311163323),
			),
			[]byte{0x6e, 0x64, 0x61, 0x64, 0x61, 0x63, 0x7a, 0x63, 0x34, 0x6e, 0x70, 0x32, 0x33, 0x76, 0x6e, 0x32, 0x76, 0x72, 0x34, 0x63, 0x37, 0x6d, 0x68, 0x35, 0x62, 0x32, 0x37, 0x65, 0x6a, 0x65, 0x69, 0x77, 0x6d, 0x77, 0x7a, 0x36, 0x63, 0x68, 0x75, 0x33, 0x62, 0x68, 0x34, 0x37, 0x62, 0x74, 0x6e, 0x38, 0x0, 0x0, 0x0, 0x0, 0x12, 0x8b, 0xf9, 0xbb},
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				uint64(311163323),
				private,
			),
			[]byte{0x6e, 0x64, 0x61, 0x64, 0x61, 0x63, 0x7a, 0x63, 0x34, 0x6e, 0x70, 0x32, 0x33, 0x76, 0x6e, 0x32, 0x76, 0x72, 0x34, 0x63, 0x37, 0x6d, 0x68, 0x35, 0x62, 0x32, 0x37, 0x65, 0x6a, 0x65, 0x69, 0x77, 0x6d, 0x77, 0x7a, 0x36, 0x63, 0x68, 0x75, 0x33, 0x62, 0x68, 0x34, 0x37, 0x62, 0x74, 0x6e, 0x38, 0x0, 0x0, 0x0, 0x0, 0x12, 0x8b, 0xf9, 0xbb},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndarvx3248smkd5bp3xxxczbzezvq229iqpntwcdxs2ivyct")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndaivizufn8u6jqv67ka7yg9r2s9uy3mbi82pscfxsg92rhc")
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
		want []byte
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				math.Ndau(8345179157480),
				math.Duration(153032239196514),
				uint64(295305609),
			),
			[]byte{0x6e, 0x64, 0x61, 0x69, 0x76, 0x69, 0x7a, 0x75, 0x66, 0x6e, 0x38, 0x75, 0x36, 0x6a, 0x71, 0x76, 0x36, 0x37, 0x6b, 0x61, 0x37, 0x79, 0x67, 0x39, 0x72, 0x32, 0x73, 0x39, 0x75, 0x79, 0x33, 0x6d, 0x62, 0x69, 0x38, 0x32, 0x70, 0x73, 0x63, 0x66, 0x78, 0x73, 0x67, 0x39, 0x32, 0x72, 0x68, 0x63, 0x34, 0x79, 0x31, 0x30, 0x6d, 0x31, 0x31, 0x64, 0x74, 0x34, 0x68, 0x35, 0x37, 0x6d, 0x31, 0x39, 0x73, 0x31, 0x39, 0x36, 0x35, 0x31, 0x34, 0xce, 0xbc, 0x73, 0x0, 0x0, 0x7, 0x97, 0x3, 0x70, 0x73, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x11, 0x9a, 0x1, 0x89, 0x6e, 0x64, 0x61, 0x72, 0x76, 0x78, 0x33, 0x32, 0x34, 0x38, 0x73, 0x6d, 0x6b, 0x64, 0x35, 0x62, 0x70, 0x33, 0x78, 0x78, 0x78, 0x63, 0x7a, 0x62, 0x7a, 0x65, 0x7a, 0x76, 0x71, 0x32, 0x32, 0x39, 0x69, 0x71, 0x70, 0x6e, 0x74, 0x77, 0x63, 0x64, 0x78, 0x73, 0x32, 0x69, 0x76, 0x79, 0x63, 0x74},
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				math.Ndau(8345179157480),
				math.Duration(153032239196514),
				uint64(295305609),
				private,
			),
			[]byte{0x6e, 0x64, 0x61, 0x69, 0x76, 0x69, 0x7a, 0x75, 0x66, 0x6e, 0x38, 0x75, 0x36, 0x6a, 0x71, 0x76, 0x36, 0x37, 0x6b, 0x61, 0x37, 0x79, 0x67, 0x39, 0x72, 0x32, 0x73, 0x39, 0x75, 0x79, 0x33, 0x6d, 0x62, 0x69, 0x38, 0x32, 0x70, 0x73, 0x63, 0x66, 0x78, 0x73, 0x67, 0x39, 0x32, 0x72, 0x68, 0x63, 0x34, 0x79, 0x31, 0x30, 0x6d, 0x31, 0x31, 0x64, 0x74, 0x34, 0x68, 0x35, 0x37, 0x6d, 0x31, 0x39, 0x73, 0x31, 0x39, 0x36, 0x35, 0x31, 0x34, 0xce, 0xbc, 0x73, 0x0, 0x0, 0x7, 0x97, 0x3, 0x70, 0x73, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x11, 0x9a, 0x1, 0x89, 0x6e, 0x64, 0x61, 0x72, 0x76, 0x78, 0x33, 0x32, 0x34, 0x38, 0x73, 0x6d, 0x6b, 0x64, 0x35, 0x62, 0x70, 0x33, 0x78, 0x78, 0x78, 0x63, 0x7a, 0x62, 0x7a, 0x65, 0x7a, 0x76, 0x71, 0x32, 0x32, 0x39, 0x69, 0x71, 0x70, 0x6e, 0x74, 0x77, 0x63, 0x64, 0x78, 0x73, 0x32, 0x69, 0x76, 0x79, 0x63, 0x74},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
		want []byte
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				[]byte{0x40, 0x1d, 0x9a, 0x2b, 0x7f, 0x51, 0x2b, 0x54, 0xbf, 0xc9, 0xd0, 0x05},
				int64(2855080522645481923),
				uint64(3461192886),
			),
			[]byte{0x27, 0x9f, 0x48, 0x9b, 0xc5, 0x6b, 0xa9, 0xc3, 0x51, 0x42, 0x32, 0x61, 0x4b, 0x33, 0x39, 0x52, 0x4b, 0x31, 0x53, 0x2f, 0x79, 0x64, 0x41, 0x46, 0x0, 0x0, 0x0, 0x0, 0xce, 0x4d, 0x9c, 0xb6},
		},
		{
			"with signature",
			NewCommandValidatorChange(
				[]byte{0x40, 0x1d, 0x9a, 0x2b, 0x7f, 0x51, 0x2b, 0x54, 0xbf, 0xc9, 0xd0, 0x05},
				int64(2855080522645481923),
				uint64(3461192886),
				private,
			),
			[]byte{0x27, 0x9f, 0x48, 0x9b, 0xc5, 0x6b, 0xa9, 0xc3, 0x51, 0x42, 0x32, 0x61, 0x4b, 0x33, 0x39, 0x52, 0x4b, 0x31, 0x53, 0x2f, 0x79, 0x64, 0x41, 0x46, 0x0, 0x0, 0x0, 0x0, 0xce, 0x4d, 0x9c, 0xb6},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}
func TestSidechainTx_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	sidechaintxSource, err := address.Validate("ndap65dgvcw99bsqk68jh2hvnpnrpjzts9e2hwne7ya852qz")
	require.NoError(t, err)
	sidechaintxSidechainSignatures, err := signature.RawSignature(signature.Ed25519, []byte{0xd4, 0x63, 0x0f, 0xb8, 0xd4, 0x74, 0x7e, 0xad, 0x6e, 0xb8, 0x2a, 0xcd, 0x1c, 0x5b, 0x07, 0x81, 0x43, 0xee, 0x26, 0xa5, 0x86, 0xad, 0x23, 0x13, 0x9d, 0x50, 0x41, 0x72, 0x34, 0x70, 0xbf, 0x24, 0xa8, 0x65, 0x83, 0x7c, 0x91, 0x23, 0x46, 0x1c, 0x41, 0xf5, 0xff, 0x99, 0xaa, 0x99, 0xce, 0x24, 0xeb, 0x4d, 0x78, 0x85, 0x76, 0xe3, 0x33, 0x6e, 0x65, 0x49, 0x16, 0x22, 0x55, 0x8f, 0xdf, 0x29})
	require.NoError(t, err)

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SidechainTx
		want []byte
	}{
		{
			"no signatures",
			NewSidechainTx(
				sidechaintxSource,
				0x23,
				[]byte{0x98, 0x32, 0x2e, 0xb5, 0xcf, 0x43, 0xd7, 0x2b, 0xd2, 0xe5, 0xb8, 0x87},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				uint64(32990530),
			),
			[]byte{0x0, 0x0, 0x0, 0x0, 0x1, 0xf7, 0x65, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x23, 0x6d, 0x44, 0x49, 0x75, 0x74, 0x63, 0x39, 0x44, 0x31, 0x79, 0x76, 0x53, 0x35, 0x62, 0x69, 0x48, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x34, 0x74, 0x74, 0x73, 0x39, 0x71, 0x67, 0x77, 0x71, 0x74, 0x39, 0x6b, 0x34, 0x35, 0x78, 0x32, 0x66, 0x6d, 0x67, 0x74, 0x32, 0x79, 0x32, 0x68, 0x73, 0x66, 0x62, 0x38, 0x36, 0x6a, 0x78, 0x66, 0x73, 0x34, 0x79, 0x75, 0x67, 0x65, 0x36, 0x37, 0x6b, 0x62, 0x61, 0x7a, 0x65, 0x70, 0x64, 0x73, 0x7a, 0x36, 0x75, 0x6b, 0x73, 0x33, 0x6e, 0x64, 0x72, 0x75, 0x69, 0x75, 0x67, 0x74, 0x73, 0x36, 0x69, 0x68, 0x34, 0x39, 0x39, 0x67, 0x70, 0x6b, 0x76, 0x68, 0x68, 0x63, 0x6a, 0x34, 0x34, 0x70, 0x72, 0x63, 0x63, 0x7a, 0x70, 0x32, 0x33, 0x76, 0x70, 0x33, 0x75, 0x77, 0x75, 0x66, 0x74, 0x63, 0x6b, 0x79, 0x68, 0x37, 0x38, 0x6b, 0x6a, 0x79, 0x75, 0x38, 0x7a, 0x76, 0x68, 0x35, 0x38, 0x37, 0x6e, 0x64, 0x61, 0x70, 0x36, 0x35, 0x64, 0x67, 0x76, 0x63, 0x77, 0x39, 0x39, 0x62, 0x73, 0x71, 0x6b, 0x36, 0x38, 0x6a, 0x68, 0x32, 0x68, 0x76, 0x6e, 0x70, 0x6e, 0x72, 0x70, 0x6a, 0x7a, 0x74, 0x73, 0x39, 0x65, 0x32, 0x68, 0x77, 0x6e, 0x65, 0x37, 0x79, 0x61, 0x38, 0x35, 0x32, 0x71, 0x7a},
		},
		{
			"with signature",
			NewSidechainTx(
				sidechaintxSource,
				0x23,
				[]byte{0x98, 0x32, 0x2e, 0xb5, 0xcf, 0x43, 0xd7, 0x2b, 0xd2, 0xe5, 0xb8, 0x87},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				uint64(32990530),
				private,
			),
			[]byte{0x0, 0x0, 0x0, 0x0, 0x1, 0xf7, 0x65, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x23, 0x6d, 0x44, 0x49, 0x75, 0x74, 0x63, 0x39, 0x44, 0x31, 0x79, 0x76, 0x53, 0x35, 0x62, 0x69, 0x48, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x34, 0x74, 0x74, 0x73, 0x39, 0x71, 0x67, 0x77, 0x71, 0x74, 0x39, 0x6b, 0x34, 0x35, 0x78, 0x32, 0x66, 0x6d, 0x67, 0x74, 0x32, 0x79, 0x32, 0x68, 0x73, 0x66, 0x62, 0x38, 0x36, 0x6a, 0x78, 0x66, 0x73, 0x34, 0x79, 0x75, 0x67, 0x65, 0x36, 0x37, 0x6b, 0x62, 0x61, 0x7a, 0x65, 0x70, 0x64, 0x73, 0x7a, 0x36, 0x75, 0x6b, 0x73, 0x33, 0x6e, 0x64, 0x72, 0x75, 0x69, 0x75, 0x67, 0x74, 0x73, 0x36, 0x69, 0x68, 0x34, 0x39, 0x39, 0x67, 0x70, 0x6b, 0x76, 0x68, 0x68, 0x63, 0x6a, 0x34, 0x34, 0x70, 0x72, 0x63, 0x63, 0x7a, 0x70, 0x32, 0x33, 0x76, 0x70, 0x33, 0x75, 0x77, 0x75, 0x66, 0x74, 0x63, 0x6b, 0x79, 0x68, 0x37, 0x38, 0x6b, 0x6a, 0x79, 0x75, 0x38, 0x7a, 0x76, 0x68, 0x35, 0x38, 0x37, 0x6e, 0x64, 0x61, 0x70, 0x36, 0x35, 0x64, 0x67, 0x76, 0x63, 0x77, 0x39, 0x39, 0x62, 0x73, 0x71, 0x6b, 0x36, 0x38, 0x6a, 0x68, 0x32, 0x68, 0x76, 0x6e, 0x70, 0x6e, 0x72, 0x70, 0x6a, 0x7a, 0x74, 0x73, 0x39, 0x65, 0x32, 0x68, 0x77, 0x6e, 0x65, 0x37, 0x79, 0x61, 0x38, 0x35, 0x32, 0x71, 0x7a},
		},
	}
	t.Run("want equivalence", func(t *testing.T) {
		require.Equal(t, tests[0].want, tests[1].want)
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.want, tt.tx.SignableBytes())
			require.NotEmpty(t, tt.want, "test not properly set up")
		})
	}
}

