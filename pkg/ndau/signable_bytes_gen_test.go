package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndaquhqm568rxtfremxi676tinacevujfd6m8mznjxeuk6i4")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndacv9niqzikwsd7qffcw8b7nj9xekn22jgubervdsr2emkx")
	require.NoError(t, err)

	// bmRhY3Y5bmlxemlrd3NkN3FmZmN3OGI3bmo5eGVrbjIyamd1YmVydmRzcjJlbWt4AAWCIQf8/70AApoPXz8aEm5kYXF1aHFtNTY4cnh0ZnJlbXhpNjc2dGluYWNldnVqZmQ2bThtem5qeGV1azZpNA==
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x76, 0x39, 0x6e, 0x69, 0x71, 0x7a, 0x69, 0x6b, 0x77, 0x73, 0x64, 0x37, 0x71, 0x66, 0x66, 0x63, 0x77, 0x38, 0x62, 0x37, 0x6e, 0x6a, 0x39, 0x78, 0x65, 0x6b, 0x6e, 0x32, 0x32, 0x6a, 0x67, 0x75, 0x62, 0x65, 0x72, 0x76, 0x64, 0x73, 0x72, 0x32, 0x65, 0x6d, 0x6b, 0x78, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x71, 0x75, 0x68, 0x71, 0x6d, 0x35, 0x36, 0x38, 0x72, 0x78, 0x74, 0x66, 0x72, 0x65, 0x6d, 0x78, 0x69, 0x36, 0x37, 0x36, 0x74, 0x69, 0x6e, 0x61, 0x63, 0x65, 0x76, 0x75, 0x6a, 0x66, 0x64, 0x36, 0x6d, 0x38, 0x6d, 0x7a, 0x6e, 0x6a, 0x78, 0x65, 0x75, 0x6b, 0x36, 0x69, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndan8ku92ctuq8paiww4xknh7mia38hmutkdrks2tjir93z6")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x48, 0x2c, 0xd0, 0xbb, 0xcd, 0xc2, 0x4a, 0x4e, 0x7f, 0x61, 0x45, 0xf7, 0xb4, 0x51, 0xfe, 0xc6, 0x8c, 0xff, 0xaf, 0x25, 0x81, 0x20, 0xd1, 0xfc, 0xbd, 0xa9, 0x98, 0xa0, 0x06, 0xd8, 0xbb, 0x38}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWJlYzN3ZjUzemJld3Z2OW5mYzlycGN0OTVkaTM5N3JleWF1YndyNnp5dzN0aWFnNWM3dnRxdHd6bXZpcmpqagAQTcdmlXTFbmRhbjhrdTkyY3R1cThwYWl3dzR4a25oN21pYTM4aG11dGtkcmtzMnRqaXI5M3o2cy8vVUJwSjEzdFpydzhESA==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x65, 0x63, 0x33, 0x77, 0x66, 0x35, 0x33, 0x7a, 0x62, 0x65, 0x77, 0x76, 0x76, 0x39, 0x6e, 0x66, 0x63, 0x39, 0x72, 0x70, 0x63, 0x74, 0x39, 0x35, 0x64, 0x69, 0x33, 0x39, 0x37, 0x72, 0x65, 0x79, 0x61, 0x75, 0x62, 0x77, 0x72, 0x36, 0x7a, 0x79, 0x77, 0x33, 0x74, 0x69, 0x61, 0x67, 0x35, 0x63, 0x37, 0x76, 0x74, 0x71, 0x74, 0x77, 0x7a, 0x6d, 0x76, 0x69, 0x72, 0x6a, 0x6a, 0x6a, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x6e, 0x38, 0x6b, 0x75, 0x39, 0x32, 0x63, 0x74, 0x75, 0x71, 0x38, 0x70, 0x61, 0x69, 0x77, 0x77, 0x34, 0x78, 0x6b, 0x6e, 0x68, 0x37, 0x6d, 0x69, 0x61, 0x33, 0x38, 0x68, 0x6d, 0x75, 0x74, 0x6b, 0x64, 0x72, 0x6b, 0x73, 0x32, 0x74, 0x6a, 0x69, 0x72, 0x39, 0x33, 0x7a, 0x36, 0x73, 0x2f, 0x2f, 0x55, 0x42, 0x70, 0x4a, 0x31, 0x33, 0x74, 0x5a, 0x72, 0x77, 0x38, 0x44, 0x48}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: s//UBpJ13tZrw8DH
				[]byte{0xb3, 0xff, 0xd4, 0x06, 0x92, 0x75, 0xde, 0xd6, 0x6b, 0xc3, 0xc0, 0xc7},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: s//UBpJ13tZrw8DH
				[]byte{0xb3, 0xff, 0xd4, 0x06, 0x92, 0x75, 0xde, 0xd6, 0x6b, 0xc3, 0xc0, 0xc7},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndapgse77asamzkn3jsa52ik3naifhfjtffrxpu9nq3faxfc")
	require.NoError(t, err)

	// bmRhcGdzZTc3YXNhbXprbjNqc2E1MmlrM25haWZoZmp0ZmZyeHB1OW5xM2ZheGZjAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x67, 0x73, 0x65, 0x37, 0x37, 0x61, 0x73, 0x61, 0x6d, 0x7a, 0x6b, 0x6e, 0x33, 0x6a, 0x73, 0x61, 0x35, 0x32, 0x69, 0x6b, 0x33, 0x6e, 0x61, 0x69, 0x66, 0x68, 0x66, 0x6a, 0x74, 0x66, 0x66, 0x72, 0x78, 0x70, 0x75, 0x39, 0x6e, 0x71, 0x33, 0x66, 0x61, 0x78, 0x66, 0x63, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndadfjnmpk4tp54qmd4feiyaicpv92pvn8m8z3x3gx6r465f")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFkZmpubXBrNHRwNTRxbWQ0ZmVpeWFpY3B2OTJwdm44bTh6M3gzZ3g2cjQ2NWY=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x64, 0x66, 0x6a, 0x6e, 0x6d, 0x70, 0x6b, 0x34, 0x74, 0x70, 0x35, 0x34, 0x71, 0x6d, 0x64, 0x34, 0x66, 0x65, 0x69, 0x79, 0x61, 0x69, 0x63, 0x70, 0x76, 0x39, 0x32, 0x70, 0x76, 0x6e, 0x38, 0x6d, 0x38, 0x7a, 0x33, 0x78, 0x33, 0x67, 0x78, 0x36, 0x72, 0x34, 0x36, 0x35, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndabav94xr4j2qqch3fptbge4gbxwh4k8h8wpq5jjnvmakxp")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndair493m6re9zxnxxcnkj5yyhhvhbc9dm6agfydsxcr8qg2")
	require.NoError(t, err)

	// bmRhaXI0OTNtNnJlOXp4bnh4Y25rajV5eWhodmhiYzlkbTZhZ2Z5ZHN4Y3I4cWcyAAjSrCLE0zRuZGFiYXY5NHhyNGoycXFjaDNmcHRiZ2U0Z2J4d2g0azhoOHdwcTVqam52bWFreHA=
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x72, 0x34, 0x39, 0x33, 0x6d, 0x36, 0x72, 0x65, 0x39, 0x7a, 0x78, 0x6e, 0x78, 0x78, 0x63, 0x6e, 0x6b, 0x6a, 0x35, 0x79, 0x79, 0x68, 0x68, 0x76, 0x68, 0x62, 0x63, 0x39, 0x64, 0x6d, 0x36, 0x61, 0x67, 0x66, 0x79, 0x64, 0x73, 0x78, 0x63, 0x72, 0x38, 0x71, 0x67, 0x32, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x62, 0x61, 0x76, 0x39, 0x34, 0x78, 0x72, 0x34, 0x6a, 0x32, 0x71, 0x71, 0x63, 0x68, 0x33, 0x66, 0x70, 0x74, 0x62, 0x67, 0x65, 0x34, 0x67, 0x62, 0x78, 0x77, 0x68, 0x34, 0x6b, 0x38, 0x68, 0x38, 0x77, 0x70, 0x71, 0x35, 0x6a, 0x6a, 0x6e, 0x76, 0x6d, 0x61, 0x6b, 0x78, 0x70}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndaqitddqbwdscp8r5ziagbj7pjuvikt2s5nps3qgmmy8vi5")
	require.NoError(t, err)

	// bmRhcWl0ZGRxYndkc2NwOHI1emlhZ2JqN3BqdXZpa3QyczVucHMzcWdtbXk4dmk1AAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x69, 0x74, 0x64, 0x64, 0x71, 0x62, 0x77, 0x64, 0x73, 0x63, 0x70, 0x38, 0x72, 0x35, 0x7a, 0x69, 0x61, 0x67, 0x62, 0x6a, 0x37, 0x70, 0x6a, 0x75, 0x76, 0x69, 0x6b, 0x74, 0x32, 0x73, 0x35, 0x6e, 0x70, 0x73, 0x33, 0x71, 0x67, 0x6d, 0x6d, 0x79, 0x38, 0x76, 0x69, 0x35, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndagy54b72gi7gwv8xtk9dgj3pk8um5n39w83zq572pbd5tr")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhZ3k1NGI3MmdpN2d3djh4dGs5ZGdqM3BrOHVtNW4zOXc4M3pxNTcycGJkNXRy
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x67, 0x79, 0x35, 0x34, 0x62, 0x37, 0x32, 0x67, 0x69, 0x37, 0x67, 0x77, 0x76, 0x38, 0x78, 0x74, 0x6b, 0x39, 0x64, 0x67, 0x6a, 0x33, 0x70, 0x6b, 0x38, 0x75, 0x6d, 0x35, 0x6e, 0x33, 0x39, 0x77, 0x38, 0x33, 0x7a, 0x71, 0x35, 0x37, 0x32, 0x70, 0x62, 0x64, 0x35, 0x74, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndaifqy4ggnxdcssf9wvgrq6vi7yrs4tnifpcw7f3iex4ii3")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFpZnF5NGdnbnhkY3NzZjl3dmdycTZ2aTd5cnM0dG5pZnBjdzdmM2lleDRpaTM=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x69, 0x66, 0x71, 0x79, 0x34, 0x67, 0x67, 0x6e, 0x78, 0x64, 0x63, 0x73, 0x73, 0x66, 0x39, 0x77, 0x76, 0x67, 0x72, 0x71, 0x36, 0x76, 0x69, 0x37, 0x79, 0x72, 0x73, 0x34, 0x74, 0x6e, 0x69, 0x66, 0x70, 0x63, 0x77, 0x37, 0x66, 0x33, 0x69, 0x65, 0x78, 0x34, 0x69, 0x69, 0x33}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndajtv5hbefc2y57uyiwwz9qkvcr6kkz7v2wpx6emiiejmpk")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndah34vns79ibk44mif4unhrzmaw33q97v9teqq4jxxdmdzd")
	require.NoError(t, err)

	// bmRhaDM0dm5zNzlpYms0NG1pZjR1bmhyem1hdzMzcTk3djl0ZXFxNGp4eGRtZHpkAAz/orpRehFuZGFqdHY1aGJlZmMyeTU3dXlpd3d6OXFrdmNyNmtrejd2MndweDZlbWlpZWptcGs=
	expect := []byte{0x6e, 0x64, 0x61, 0x68, 0x33, 0x34, 0x76, 0x6e, 0x73, 0x37, 0x39, 0x69, 0x62, 0x6b, 0x34, 0x34, 0x6d, 0x69, 0x66, 0x34, 0x75, 0x6e, 0x68, 0x72, 0x7a, 0x6d, 0x61, 0x77, 0x33, 0x33, 0x71, 0x39, 0x37, 0x76, 0x39, 0x74, 0x65, 0x71, 0x71, 0x34, 0x6a, 0x78, 0x78, 0x64, 0x6d, 0x64, 0x7a, 0x64, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x6a, 0x74, 0x76, 0x35, 0x68, 0x62, 0x65, 0x66, 0x63, 0x32, 0x79, 0x35, 0x37, 0x75, 0x79, 0x69, 0x77, 0x77, 0x7a, 0x39, 0x71, 0x6b, 0x76, 0x63, 0x72, 0x36, 0x6b, 0x6b, 0x7a, 0x37, 0x76, 0x32, 0x77, 0x70, 0x78, 0x36, 0x65, 0x6d, 0x69, 0x69, 0x65, 0x6a, 0x6d, 0x70, 0x6b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndahbmqu5cp6i9byh2kggfxxbu28vvw8qzdqjdn6j4xiuzi8")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x48, 0xc6, 0x40, 0x02, 0x5b, 0x67, 0xc5, 0x6d, 0x2c, 0xe4, 0x24, 0xfd, 0x85, 0x53, 0x4d, 0xee, 0xc4, 0x82, 0xe9, 0x9c, 0xd7, 0xc6, 0xdb, 0x81, 0x5c, 0xa7, 0x9b, 0x8e, 0xdf, 0x37, 0x9a, 0xa1}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x01, 0xe5, 0xf8, 0xfc, 0x2c, 0x8d, 0x60, 0xe5, 0xb7, 0xa7, 0xab, 0x3c, 0x00, 0x93, 0xae, 0xd4, 0xb3, 0xe7, 0x9e, 0x43, 0x84, 0x7e, 0xde, 0x97, 0xe2, 0xdc, 0x81, 0xb2, 0x37, 0xfe, 0x69, 0x60}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWJlbm5zYWNtcHY2azVqbjZzdXI1Ymt2anp6bmphemp2dm02cHk2Ym11djN6ZHk5Zzhwa2Q1c2J6MmJqeWdodgAZX/GDxHNZbmRhaGJtcXU1Y3A2aTlieWgya2dnZnh4YnUyOHZ2dzhxemRxamRuNmo0eGl1emk4bnB1YmE4amFkdGJiZWFhOG04aDZmdWd5YjNwenc4eHYyYWV2eDVrbWgzNjhpcWNoN3p3ejZtcWlkbnR6OTN3eWE5ZzhjYXVkYnVhc1AvSkE3V1ZqMEhzalFXYjk=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x65, 0x6e, 0x6e, 0x73, 0x61, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x6b, 0x35, 0x6a, 0x6e, 0x36, 0x73, 0x75, 0x72, 0x35, 0x62, 0x6b, 0x76, 0x6a, 0x7a, 0x7a, 0x6e, 0x6a, 0x61, 0x7a, 0x6a, 0x76, 0x76, 0x6d, 0x36, 0x70, 0x79, 0x36, 0x62, 0x6d, 0x75, 0x76, 0x33, 0x7a, 0x64, 0x79, 0x39, 0x67, 0x38, 0x70, 0x6b, 0x64, 0x35, 0x73, 0x62, 0x7a, 0x32, 0x62, 0x6a, 0x79, 0x67, 0x68, 0x76, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x68, 0x62, 0x6d, 0x71, 0x75, 0x35, 0x63, 0x70, 0x36, 0x69, 0x39, 0x62, 0x79, 0x68, 0x32, 0x6b, 0x67, 0x67, 0x66, 0x78, 0x78, 0x62, 0x75, 0x32, 0x38, 0x76, 0x76, 0x77, 0x38, 0x71, 0x7a, 0x64, 0x71, 0x6a, 0x64, 0x6e, 0x36, 0x6a, 0x34, 0x78, 0x69, 0x75, 0x7a, 0x69, 0x38, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x61, 0x38, 0x6d, 0x38, 0x68, 0x36, 0x66, 0x75, 0x67, 0x79, 0x62, 0x33, 0x70, 0x7a, 0x77, 0x38, 0x78, 0x76, 0x32, 0x61, 0x65, 0x76, 0x78, 0x35, 0x6b, 0x6d, 0x68, 0x33, 0x36, 0x38, 0x69, 0x71, 0x63, 0x68, 0x37, 0x7a, 0x77, 0x7a, 0x36, 0x6d, 0x71, 0x69, 0x64, 0x6e, 0x74, 0x7a, 0x39, 0x33, 0x77, 0x79, 0x61, 0x39, 0x67, 0x38, 0x63, 0x61, 0x75, 0x64, 0x62, 0x75, 0x61, 0x73, 0x50, 0x2f, 0x4a, 0x41, 0x37, 0x57, 0x56, 0x6a, 0x30, 0x48, 0x73, 0x6a, 0x51, 0x57, 0x62, 0x39}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: P/JA7WVj0HsjQWb9
				[]byte{0x3f, 0xf2, 0x40, 0xed, 0x65, 0x63, 0xd0, 0x7b, 0x23, 0x41, 0x66, 0xfd},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: P/JA7WVj0HsjQWb9
				[]byte{0x3f, 0xf2, 0x40, 0xed, 0x65, 0x63, 0xd0, 0x7b, 0x23, 0x41, 0x66, 0xfd},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndahqma2cpj3ce3mktixd2aqem92h84xbynpm4uqi6csgus7")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndamtgjdewcvt2sfb88g9vdwr9ynihkfi9wu8ipjx7azxrme")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFtdGdqZGV3Y3Z0MnNmYjg4Zzl2ZHdyOXluaWhrZmk5d3U4aXBqeDdhenhybWVuZGFocW1hMmNwajNjZTNta3RpeGQyYXFlbTkyaDg0eGJ5bnBtNHVxaTZjc2d1czc=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x6d, 0x74, 0x67, 0x6a, 0x64, 0x65, 0x77, 0x63, 0x76, 0x74, 0x32, 0x73, 0x66, 0x62, 0x38, 0x38, 0x67, 0x39, 0x76, 0x64, 0x77, 0x72, 0x39, 0x79, 0x6e, 0x69, 0x68, 0x6b, 0x66, 0x69, 0x39, 0x77, 0x75, 0x38, 0x69, 0x70, 0x6a, 0x78, 0x37, 0x61, 0x7a, 0x78, 0x72, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x68, 0x71, 0x6d, 0x61, 0x32, 0x63, 0x70, 0x6a, 0x33, 0x63, 0x65, 0x33, 0x6d, 0x6b, 0x74, 0x69, 0x78, 0x64, 0x32, 0x61, 0x71, 0x65, 0x6d, 0x39, 0x32, 0x68, 0x38, 0x34, 0x78, 0x62, 0x79, 0x6e, 0x70, 0x6d, 0x34, 0x75, 0x71, 0x69, 0x36, 0x63, 0x73, 0x67, 0x75, 0x73, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndadxce86e9jgb26jqvvf6b73vvpg9uagy8yzjpzubenbhdb")
	require.NoError(t, err)

	// SEhRSnA5ZEowN2owcXp5MG5kYWR4Y2U4NmU5amdiMjZqcXZ2ZjZiNzN2dnBnOXVhZ3k4eXpqcHp1YmVuYmhkYnN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x48, 0x48, 0x51, 0x4a, 0x70, 0x39, 0x64, 0x4a, 0x30, 0x37, 0x6a, 0x30, 0x71, 0x7a, 0x79, 0x30, 0x6e, 0x64, 0x61, 0x64, 0x78, 0x63, 0x65, 0x38, 0x36, 0x65, 0x39, 0x6a, 0x67, 0x62, 0x32, 0x36, 0x6a, 0x71, 0x76, 0x76, 0x66, 0x36, 0x62, 0x37, 0x33, 0x76, 0x76, 0x70, 0x67, 0x39, 0x75, 0x61, 0x67, 0x79, 0x38, 0x79, 0x7a, 0x6a, 0x70, 0x7a, 0x75, 0x62, 0x65, 0x6e, 0x62, 0x68, 0x64, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: HHQJp9dJ07j0qzy0
				[]byte{0x1c, 0x74, 0x09, 0xa7, 0xd7, 0x49, 0xd3, 0xb8, 0xf4, 0xab, 0x3c, 0xb4},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: HHQJp9dJ07j0qzy0
				[]byte{0x1c, 0x74, 0x09, 0xa7, 0xd7, 0x49, 0xd3, 0xb8, 0xf4, 0xab, 0x3c, 0xb4},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndai4r6if7rn4s3d8pgm25f2apfmucuvi7gdp2qgncdzrb36")
	require.NoError(t, err)

	// bmRhaTRyNmlmN3JuNHMzZDhwZ20yNWYyYXBmbXVjdXZpN2dkcDJxZ25jZHpyYjM2AA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x34, 0x72, 0x36, 0x69, 0x66, 0x37, 0x72, 0x6e, 0x34, 0x73, 0x33, 0x64, 0x38, 0x70, 0x67, 0x6d, 0x32, 0x35, 0x66, 0x32, 0x61, 0x70, 0x66, 0x6d, 0x75, 0x63, 0x75, 0x76, 0x69, 0x37, 0x67, 0x64, 0x70, 0x32, 0x71, 0x67, 0x6e, 0x63, 0x64, 0x7a, 0x72, 0x62, 0x33, 0x36, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndaravhpfimk96yynwdhajm7gcarn9rkj7txzz4udsuqqpgc")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndamy6zj3iakigvizjbr6twa8hr32znhpp2wk55ujxrtpf9t")
	require.NoError(t, err)

	// bmRhbXk2emozaWFraWd2aXpqYnI2dHdhOGhyMzJ6bmhwcDJ3azU1dWp4cnRwZjl0MXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYXJhdmhwZmltazk2eXlud2RoYWptN2djYXJuOXJrajd0eHp6NHVkc3VxcXBnYw==
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x79, 0x36, 0x7a, 0x6a, 0x33, 0x69, 0x61, 0x6b, 0x69, 0x67, 0x76, 0x69, 0x7a, 0x6a, 0x62, 0x72, 0x36, 0x74, 0x77, 0x61, 0x38, 0x68, 0x72, 0x33, 0x32, 0x7a, 0x6e, 0x68, 0x70, 0x70, 0x32, 0x77, 0x6b, 0x35, 0x35, 0x75, 0x6a, 0x78, 0x72, 0x74, 0x70, 0x66, 0x39, 0x74, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x72, 0x61, 0x76, 0x68, 0x70, 0x66, 0x69, 0x6d, 0x6b, 0x39, 0x36, 0x79, 0x79, 0x6e, 0x77, 0x64, 0x68, 0x61, 0x6a, 0x6d, 0x37, 0x67, 0x63, 0x61, 0x72, 0x6e, 0x39, 0x72, 0x6b, 0x6a, 0x37, 0x74, 0x78, 0x7a, 0x7a, 0x34, 0x75, 0x64, 0x73, 0x75, 0x71, 0x71, 0x70, 0x67, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmot1YmlXd0NhZFRsSU5jSVBXAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x75, 0x62, 0x69, 0x57, 0x77, 0x43, 0x61, 0x64, 0x54, 0x6c, 0x49, 0x4e, 0x63, 0x49, 0x50, 0x57, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: ubiWwCadTlINcIPW
				[]byte{0xb9, 0xb8, 0x96, 0xc0, 0x26, 0x9d, 0x4e, 0x52, 0x0d, 0x70, 0x83, 0xd6},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: ubiWwCadTlINcIPW
				[]byte{0xb9, 0xb8, 0x96, 0xc0, 0x26, 0x9d, 0x4e, 0x52, 0x0d, 0x70, 0x83, 0xd6},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndangjfie4chaxehdxfb94nz7ufkrid5jmhrip2zmkdapzzi")
	require.NoError(t, err)

	// bmRhbmdqZmllNGNoYXhlaGR4ZmI5NG56N3Vma3JpZDVqbWhyaXAyem1rZGFwenppAAJeEXA5N5c=
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x67, 0x6a, 0x66, 0x69, 0x65, 0x34, 0x63, 0x68, 0x61, 0x78, 0x65, 0x68, 0x64, 0x78, 0x66, 0x62, 0x39, 0x34, 0x6e, 0x7a, 0x37, 0x75, 0x66, 0x6b, 0x72, 0x69, 0x64, 0x35, 0x6a, 0x6d, 0x68, 0x72, 0x69, 0x70, 0x32, 0x7a, 0x6d, 0x6b, 0x64, 0x61, 0x70, 0x7a, 0x7a, 0x69, 0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndaqnevg7ptgggkzbiz6b6c6irvykm37ihb9ph2fxpeah9ct")
	require.NoError(t, err)

	// ABP6yCVBcNBuZGFxbmV2ZzdwdGdnZ2t6Yml6NmI2YzZpcnZ5a20zN2loYjlwaDJmeHBlYWg5Y3Q=
	expect := []byte{0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0, 0x6e, 0x64, 0x61, 0x71, 0x6e, 0x65, 0x76, 0x67, 0x37, 0x70, 0x74, 0x67, 0x67, 0x67, 0x6b, 0x7a, 0x62, 0x69, 0x7a, 0x36, 0x62, 0x36, 0x63, 0x36, 0x69, 0x72, 0x76, 0x79, 0x6b, 0x6d, 0x33, 0x37, 0x69, 0x68, 0x62, 0x39, 0x70, 0x68, 0x32, 0x66, 0x78, 0x70, 0x65, 0x61, 0x68, 0x39, 0x63, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA2S+t7X5soACfdnZnjooQ==
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				3820780875409098,
				2805298263287969,
			),
		},
		{
			"with signature",
			NewIssue(
				3820780875409098,
				2805298263287969,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimchildaccountTarget, err := address.Validate("ndarunt5gm6zdjrmuf8iyv82mdcsrue3ndmf7tyc5zkbxgjd")
	require.NoError(t, err)
	claimchildaccountChild, err := address.Validate("ndaqmqq8s3b4rty2y2mk25fcdhm3b3ni5nb2b9sbg6ghj77e")
	require.NoError(t, err)
	claimchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x8d, 0xf6, 0x22, 0xee, 0xc7, 0x5e, 0x3a, 0x6a, 0x1f, 0x14, 0x10, 0xef, 0x02, 0xa0, 0xf4, 0x12, 0xa4, 0xef, 0x55, 0xdb, 0x3b, 0x73, 0x9c, 0xe3, 0x09, 0x9c, 0x54, 0xba, 0x61, 0x24, 0x83, 0xb7}, nil)
	require.NoError(t, err)
	claimchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0xcd, 0x67, 0x4e, 0x25, 0xd8, 0x0f, 0x12, 0xa8, 0x3f, 0x6d, 0xf5, 0xec, 0xba, 0x10, 0x32, 0x7d, 0xdd, 0x39, 0xa4, 0x5f, 0x6f, 0x5f, 0x2b, 0x0d, 0x00, 0xbc, 0x52, 0xfe, 0x36, 0xdd, 0x47, 0x8e, 0xd8, 0xb9, 0x31, 0x4d, 0x87, 0xe0, 0xdf, 0x4b, 0x2f, 0xe4, 0xa5, 0x2f, 0xf6, 0xb3, 0x14, 0xf6, 0x4d, 0xf9, 0x33, 0x7b, 0x4b, 0x6e, 0x18, 0x07, 0x68, 0xa0, 0x95, 0xe0, 0xd4, 0xfe, 0xe2, 0x8e})
	require.NoError(t, err)
	claimchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x5f, 0x77, 0x07, 0xae, 0x3d, 0xe2, 0xe2, 0x4c, 0x4d, 0x7b, 0x70, 0xe8, 0xb4, 0x6e, 0x30, 0x50, 0xd5, 0x29, 0xd7, 0x1b, 0x5d, 0xb8, 0xab, 0x31, 0xdb, 0xf2, 0x4f, 0x3e, 0xc2, 0x10, 0x60, 0xe0}, nil)
	require.NoError(t, err)

	// bmRhcW1xcThzM2I0cnR5MnkybWsyNWZjZGhtM2Izbmk1bmIyYjlzYmc2Z2hqNzdlbnB1YmE4amFkdGJiZWNnOW5penEyN3JkdzRzOWNzaXE4YXhhOHNqa2o1NHg1bjd6aGhoZGJncWZqcXZiZXViNXJna2U1Z2dmNXA1NjF5NG02ZHQ1aDIxbTQ2czM0MzczNHVzYTRqYWR0Y2EzeHZ3NmpxMmI2amtzcjVwOHp5bXdlYnVyenF2dmpjOXA3cnV5ZGlhenRqcjZweTdpOGhwdHFqdGp5ZDhiejRtZjl1a2ttOXl5bmtybnZyM2dwN3d5NXMyYTd3a2JmcmE0djlxZmRzYzV5NjJkbm5hbnB1YmE4amFkdGJiZWJyenFiN3FoenRxZXZjcHJwMnF0cGRxZ2JpcGtrcXpkcHE1dGszdDVyM2U4cnljY2JzcWF6YjNndGp4eHJlZFJmM2NsRG1mQ2s5cVhjUDcAB4MDVqpvQW5kYXJ1bnQ1Z202emRqcm11ZjhpeXY4Mm1kY3NydWUzbmRtZjd0eWM1emtieGdqZA==
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x6d, 0x71, 0x71, 0x38, 0x73, 0x33, 0x62, 0x34, 0x72, 0x74, 0x79, 0x32, 0x79, 0x32, 0x6d, 0x6b, 0x32, 0x35, 0x66, 0x63, 0x64, 0x68, 0x6d, 0x33, 0x62, 0x33, 0x6e, 0x69, 0x35, 0x6e, 0x62, 0x32, 0x62, 0x39, 0x73, 0x62, 0x67, 0x36, 0x67, 0x68, 0x6a, 0x37, 0x37, 0x65, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x67, 0x39, 0x6e, 0x69, 0x7a, 0x71, 0x32, 0x37, 0x72, 0x64, 0x77, 0x34, 0x73, 0x39, 0x63, 0x73, 0x69, 0x71, 0x38, 0x61, 0x78, 0x61, 0x38, 0x73, 0x6a, 0x6b, 0x6a, 0x35, 0x34, 0x78, 0x35, 0x6e, 0x37, 0x7a, 0x68, 0x68, 0x68, 0x64, 0x62, 0x67, 0x71, 0x66, 0x6a, 0x71, 0x76, 0x62, 0x65, 0x75, 0x62, 0x35, 0x72, 0x67, 0x6b, 0x65, 0x35, 0x67, 0x67, 0x66, 0x35, 0x70, 0x35, 0x36, 0x31, 0x79, 0x34, 0x6d, 0x36, 0x64, 0x74, 0x35, 0x68, 0x32, 0x31, 0x6d, 0x34, 0x36, 0x73, 0x33, 0x34, 0x33, 0x37, 0x33, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x33, 0x78, 0x76, 0x77, 0x36, 0x6a, 0x71, 0x32, 0x62, 0x36, 0x6a, 0x6b, 0x73, 0x72, 0x35, 0x70, 0x38, 0x7a, 0x79, 0x6d, 0x77, 0x65, 0x62, 0x75, 0x72, 0x7a, 0x71, 0x76, 0x76, 0x6a, 0x63, 0x39, 0x70, 0x37, 0x72, 0x75, 0x79, 0x64, 0x69, 0x61, 0x7a, 0x74, 0x6a, 0x72, 0x36, 0x70, 0x79, 0x37, 0x69, 0x38, 0x68, 0x70, 0x74, 0x71, 0x6a, 0x74, 0x6a, 0x79, 0x64, 0x38, 0x62, 0x7a, 0x34, 0x6d, 0x66, 0x39, 0x75, 0x6b, 0x6b, 0x6d, 0x39, 0x79, 0x79, 0x6e, 0x6b, 0x72, 0x6e, 0x76, 0x72, 0x33, 0x67, 0x70, 0x37, 0x77, 0x79, 0x35, 0x73, 0x32, 0x61, 0x37, 0x77, 0x6b, 0x62, 0x66, 0x72, 0x61, 0x34, 0x76, 0x39, 0x71, 0x66, 0x64, 0x73, 0x63, 0x35, 0x79, 0x36, 0x32, 0x64, 0x6e, 0x6e, 0x61, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x72, 0x7a, 0x71, 0x62, 0x37, 0x71, 0x68, 0x7a, 0x74, 0x71, 0x65, 0x76, 0x63, 0x70, 0x72, 0x70, 0x32, 0x71, 0x74, 0x70, 0x64, 0x71, 0x67, 0x62, 0x69, 0x70, 0x6b, 0x6b, 0x71, 0x7a, 0x64, 0x70, 0x71, 0x35, 0x74, 0x6b, 0x33, 0x74, 0x35, 0x72, 0x33, 0x65, 0x38, 0x72, 0x79, 0x63, 0x63, 0x62, 0x73, 0x71, 0x61, 0x7a, 0x62, 0x33, 0x67, 0x74, 0x6a, 0x78, 0x78, 0x72, 0x65, 0x64, 0x52, 0x66, 0x33, 0x63, 0x6c, 0x44, 0x6d, 0x66, 0x43, 0x6b, 0x39, 0x71, 0x58, 0x63, 0x50, 0x37, 0x00, 0x07, 0x83, 0x03, 0x56, 0xaa, 0x6f, 0x41, 0x6e, 0x64, 0x61, 0x72, 0x75, 0x6e, 0x74, 0x35, 0x67, 0x6d, 0x36, 0x7a, 0x64, 0x6a, 0x72, 0x6d, 0x75, 0x66, 0x38, 0x69, 0x79, 0x76, 0x38, 0x32, 0x6d, 0x64, 0x63, 0x73, 0x72, 0x75, 0x65, 0x33, 0x6e, 0x64, 0x6d, 0x66, 0x37, 0x74, 0x79, 0x63, 0x35, 0x7a, 0x6b, 0x62, 0x78, 0x67, 0x6a, 0x64}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimChildAccount
	}{
		{
			"no signatures",
			NewClaimChildAccount(
				claimchildaccountTarget,
				claimchildaccountChild,
				*claimchildaccountChildOwnership,
				*claimchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*claimchildaccountChildValidationKeys},
				// ChildValidationScript as b64: Rf3clDmfCk9qXcP7
				[]byte{0x45, 0xfd, 0xdc, 0x94, 0x39, 0x9f, 0x0a, 0x4f, 0x6a, 0x5d, 0xc3, 0xfb},
				2114375199125313,
			),
		},
		{
			"with signature",
			NewClaimChildAccount(
				claimchildaccountTarget,
				claimchildaccountChild,
				*claimchildaccountChildOwnership,
				*claimchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*claimchildaccountChildValidationKeys},
				// ChildValidationScript as b64: Rf3clDmfCk9qXcP7
				[]byte{0x45, 0xfd, 0xdc, 0x94, 0x39, 0x9f, 0x0a, 0x4f, 0x6a, 0x5d, 0xc3, 0xfb},
				2114375199125313,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABToHt5FZKQACPi9Ppmz3A==
	expect := []byte{0x00, 0x14, 0xe8, 0x1e, 0xde, 0x45, 0x64, 0xa4, 0x00, 0x08, 0xf8, 0xbd, 0x3e, 0x99, 0xb3, 0xdc}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
