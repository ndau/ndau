package ndau

import (
	"testing"

	"github.com/ndau/ndaumath/pkg/address"
	"github.com/ndau/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndabt6ewtgn9u3x9qsbs7se2wnb592gw72rdidnchh554s4g")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndaae4cft654sxzzkviqzh57ckpzanrqudunb4zwj6q4iefc")
	require.NoError(t, err)

	// bmRhYWU0Y2Z0NjU0c3h6emt2aXF6aDU3Y2twemFucnF1ZHVuYjR6d2o2cTRpZWZjAAWCIQf8/70AApoPXz8aEm5kYWJ0NmV3dGduOXUzeDlxc2JzN3NlMnduYjU5Mmd3NzJyZGlkbmNoaDU1NHM0Zw==
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x65, 0x34, 0x63, 0x66, 0x74, 0x36, 0x35, 0x34, 0x73, 0x78, 0x7a, 0x7a, 0x6b, 0x76, 0x69, 0x71, 0x7a, 0x68, 0x35, 0x37, 0x63, 0x6b, 0x70, 0x7a, 0x61, 0x6e, 0x72, 0x71, 0x75, 0x64, 0x75, 0x6e, 0x62, 0x34, 0x7a, 0x77, 0x6a, 0x36, 0x71, 0x34, 0x69, 0x65, 0x66, 0x63, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x62, 0x74, 0x36, 0x65, 0x77, 0x74, 0x67, 0x6e, 0x39, 0x75, 0x33, 0x78, 0x39, 0x71, 0x73, 0x62, 0x73, 0x37, 0x73, 0x65, 0x32, 0x77, 0x6e, 0x62, 0x35, 0x39, 0x32, 0x67, 0x77, 0x37, 0x32, 0x72, 0x64, 0x69, 0x64, 0x6e, 0x63, 0x68, 0x68, 0x35, 0x35, 0x34, 0x73, 0x34, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndahq8wnn2qwdzn84rg2q9jghap9u8hz8bw2x4jaja2ic7dh")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x82, 0x72, 0x85, 0xd8, 0x65, 0xf6, 0x91, 0xa3, 0x73, 0x9e, 0x36, 0x0e, 0x15, 0x61, 0x4d, 0x76, 0xf4, 0x0b, 0x29, 0xa2, 0x0a, 0x9d, 0x0f, 0x90, 0xab, 0x71, 0xa6, 0xa8, 0xcb, 0xbd, 0x45, 0x5b}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWNiaGZicTJuejVqZGk1dnYyNWE2Zm1iang1cmljM2p3aWZqNGQ2c3hwMjRwa2dtenhjeHpjOWkyY3I0NmczNAAQTcdmlXTFbmRhaHE4d25uMnF3ZHpuODRyZzJxOWpnaGFwOXU4aHo4YncyeDRqYWphMmljN2RoWVV5cnNySXlIUnVTWVFiWg==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x62, 0x68, 0x66, 0x62, 0x71, 0x32, 0x6e, 0x7a, 0x35, 0x6a, 0x64, 0x69, 0x35, 0x76, 0x76, 0x32, 0x35, 0x61, 0x36, 0x66, 0x6d, 0x62, 0x6a, 0x78, 0x35, 0x72, 0x69, 0x63, 0x33, 0x6a, 0x77, 0x69, 0x66, 0x6a, 0x34, 0x64, 0x36, 0x73, 0x78, 0x70, 0x32, 0x34, 0x70, 0x6b, 0x67, 0x6d, 0x7a, 0x78, 0x63, 0x78, 0x7a, 0x63, 0x39, 0x69, 0x32, 0x63, 0x72, 0x34, 0x36, 0x67, 0x33, 0x34, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x68, 0x71, 0x38, 0x77, 0x6e, 0x6e, 0x32, 0x71, 0x77, 0x64, 0x7a, 0x6e, 0x38, 0x34, 0x72, 0x67, 0x32, 0x71, 0x39, 0x6a, 0x67, 0x68, 0x61, 0x70, 0x39, 0x75, 0x38, 0x68, 0x7a, 0x38, 0x62, 0x77, 0x32, 0x78, 0x34, 0x6a, 0x61, 0x6a, 0x61, 0x32, 0x69, 0x63, 0x37, 0x64, 0x68, 0x59, 0x55, 0x79, 0x72, 0x73, 0x72, 0x49, 0x79, 0x48, 0x52, 0x75, 0x53, 0x59, 0x51, 0x62, 0x5a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: YUyrsrIyHRuSYQbZ
				[]byte{0x61, 0x4c, 0xab, 0xb2, 0xb2, 0x32, 0x1d, 0x1b, 0x92, 0x61, 0x06, 0xd9},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: YUyrsrIyHRuSYQbZ
				[]byte{0x61, 0x4c, 0xab, 0xb2, 0xb2, 0x32, 0x1d, 0x1b, 0x92, 0x61, 0x06, 0xd9},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndars6dtrj9m2cn989729cjjxbut92smwwfduiq4dtssb7f2")
	require.NoError(t, err)

	// bmRhcnM2ZHRyajltMmNuOTg5NzI5Y2pqeGJ1dDkyc213d2ZkdWlxNGR0c3NiN2YyAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x72, 0x73, 0x36, 0x64, 0x74, 0x72, 0x6a, 0x39, 0x6d, 0x32, 0x63, 0x6e, 0x39, 0x38, 0x39, 0x37, 0x32, 0x39, 0x63, 0x6a, 0x6a, 0x78, 0x62, 0x75, 0x74, 0x39, 0x32, 0x73, 0x6d, 0x77, 0x77, 0x66, 0x64, 0x75, 0x69, 0x71, 0x34, 0x64, 0x74, 0x73, 0x73, 0x62, 0x37, 0x66, 0x32, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndapd5e2xkdjwqwhycu2qshvr8kemde59d3sipa98fxyuk2a")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFwZDVlMnhrZGp3cXdoeWN1MnFzaHZyOGtlbWRlNTlkM3NpcGE5OGZ4eXVrMmE=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x70, 0x64, 0x35, 0x65, 0x32, 0x78, 0x6b, 0x64, 0x6a, 0x77, 0x71, 0x77, 0x68, 0x79, 0x63, 0x75, 0x32, 0x71, 0x73, 0x68, 0x76, 0x72, 0x38, 0x6b, 0x65, 0x6d, 0x64, 0x65, 0x35, 0x39, 0x64, 0x33, 0x73, 0x69, 0x70, 0x61, 0x39, 0x38, 0x66, 0x78, 0x79, 0x75, 0x6b, 0x32, 0x61}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndah42aicufccrq7y2c6xhvbe5tr48mtxv8xbe3sr4fbftku")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndae9vd829rqjs482xs4qpkdkv62mrgfxfrng8ahq8anmnjs")
	require.NoError(t, err)

	// bmRhZTl2ZDgyOXJxanM0ODJ4czRxcGtka3Y2Mm1yZ2Z4ZnJuZzhhaHE4YW5tbmpzAAjSrCLE0zRuZGFoNDJhaWN1ZmNjcnE3eTJjNnhodmJlNXRyNDhtdHh2OHhiZTNzcjRmYmZ0a3U=
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x39, 0x76, 0x64, 0x38, 0x32, 0x39, 0x72, 0x71, 0x6a, 0x73, 0x34, 0x38, 0x32, 0x78, 0x73, 0x34, 0x71, 0x70, 0x6b, 0x64, 0x6b, 0x76, 0x36, 0x32, 0x6d, 0x72, 0x67, 0x66, 0x78, 0x66, 0x72, 0x6e, 0x67, 0x38, 0x61, 0x68, 0x71, 0x38, 0x61, 0x6e, 0x6d, 0x6e, 0x6a, 0x73, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x68, 0x34, 0x32, 0x61, 0x69, 0x63, 0x75, 0x66, 0x63, 0x63, 0x72, 0x71, 0x37, 0x79, 0x32, 0x63, 0x36, 0x78, 0x68, 0x76, 0x62, 0x65, 0x35, 0x74, 0x72, 0x34, 0x38, 0x6d, 0x74, 0x78, 0x76, 0x38, 0x78, 0x62, 0x65, 0x33, 0x73, 0x72, 0x34, 0x66, 0x62, 0x66, 0x74, 0x6b, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndacxanqu4f9pvw4tk6pjefhnpa6rr4j4awi76yi6jwvikue")
	require.NoError(t, err)

	// bmRhY3hhbnF1NGY5cHZ3NHRrNnBqZWZobnBhNnJyNGo0YXdpNzZ5aTZqd3Zpa3VlAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x78, 0x61, 0x6e, 0x71, 0x75, 0x34, 0x66, 0x39, 0x70, 0x76, 0x77, 0x34, 0x74, 0x6b, 0x36, 0x70, 0x6a, 0x65, 0x66, 0x68, 0x6e, 0x70, 0x61, 0x36, 0x72, 0x72, 0x34, 0x6a, 0x34, 0x61, 0x77, 0x69, 0x37, 0x36, 0x79, 0x69, 0x36, 0x6a, 0x77, 0x76, 0x69, 0x6b, 0x75, 0x65, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndae7fq8p5k6s6dw5pf8demgm8yck47567hqxr2zt75xj6uh")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhZTdmcThwNWs2czZkdzVwZjhkZW1nbTh5Y2s0NzU2N2hxeHIyenQ3NXhqNnVo
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x65, 0x37, 0x66, 0x71, 0x38, 0x70, 0x35, 0x6b, 0x36, 0x73, 0x36, 0x64, 0x77, 0x35, 0x70, 0x66, 0x38, 0x64, 0x65, 0x6d, 0x67, 0x6d, 0x38, 0x79, 0x63, 0x6b, 0x34, 0x37, 0x35, 0x36, 0x37, 0x68, 0x71, 0x78, 0x72, 0x32, 0x7a, 0x74, 0x37, 0x35, 0x78, 0x6a, 0x36, 0x75, 0x68}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndaq4894fcptrycndzmdnx4xn6yxq8kb2i5y87a8cncnx3i7")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFxNDg5NGZjcHRyeWNuZHptZG54NHhuNnl4cThrYjJpNXk4N2E4Y25jbngzaTc=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x71, 0x34, 0x38, 0x39, 0x34, 0x66, 0x63, 0x70, 0x74, 0x72, 0x79, 0x63, 0x6e, 0x64, 0x7a, 0x6d, 0x64, 0x6e, 0x78, 0x34, 0x78, 0x6e, 0x36, 0x79, 0x78, 0x71, 0x38, 0x6b, 0x62, 0x32, 0x69, 0x35, 0x79, 0x38, 0x37, 0x61, 0x38, 0x63, 0x6e, 0x63, 0x6e, 0x78, 0x33, 0x69, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndar6sz8pp57n6xnz2pqdcstjvgert7wrkgcsedaimbmjqk2")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndaikaxgz4452kdmde7zbzeb2gkwk45d9ec38rchbf9htx5a")
	require.NoError(t, err)

	// bmRhaWtheGd6NDQ1MmtkbWRlN3piemViMmdrd2s0NWQ5ZWMzOHJjaGJmOWh0eDVhAAz/orpRehFuZGFyNnN6OHBwNTduNnhuejJwcWRjc3RqdmdlcnQ3d3JrZ2NzZWRhaW1ibWpxazI=
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x6b, 0x61, 0x78, 0x67, 0x7a, 0x34, 0x34, 0x35, 0x32, 0x6b, 0x64, 0x6d, 0x64, 0x65, 0x37, 0x7a, 0x62, 0x7a, 0x65, 0x62, 0x32, 0x67, 0x6b, 0x77, 0x6b, 0x34, 0x35, 0x64, 0x39, 0x65, 0x63, 0x33, 0x38, 0x72, 0x63, 0x68, 0x62, 0x66, 0x39, 0x68, 0x74, 0x78, 0x35, 0x61, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x72, 0x36, 0x73, 0x7a, 0x38, 0x70, 0x70, 0x35, 0x37, 0x6e, 0x36, 0x78, 0x6e, 0x7a, 0x32, 0x70, 0x71, 0x64, 0x63, 0x73, 0x74, 0x6a, 0x76, 0x67, 0x65, 0x72, 0x74, 0x37, 0x77, 0x72, 0x6b, 0x67, 0x63, 0x73, 0x65, 0x64, 0x61, 0x69, 0x6d, 0x62, 0x6d, 0x6a, 0x71, 0x6b, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndanx53tvja8jpqs2qem5ww8bbbhay4s9utdfx7r5a6qaanw")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xbd, 0x7f, 0x27, 0x10, 0xd6, 0xfd, 0x17, 0x98, 0x2f, 0x03, 0x93, 0xf6, 0xd3, 0x25, 0x8b, 0x9b, 0xf8, 0x09, 0x88, 0xd4, 0x84, 0x1d, 0x76, 0x2e, 0xbb, 0x3a, 0xd3, 0xcf, 0x1e, 0x32, 0x78, 0xb3}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xd1, 0xc6, 0xd7, 0xa7, 0x08, 0x09, 0x7f, 0x1e, 0x20, 0x91, 0x54, 0xda, 0xd1, 0x0f, 0x17, 0x07, 0x4e, 0x96, 0x24, 0x5c, 0x7d, 0xc3, 0x3d, 0xec, 0xe9, 0x0c, 0x12, 0xca, 0xf0, 0xd6, 0x92, 0x9b}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWM4ejhqMnM0NTh0cmdicmFxajlwdzNmdHFwOXNjbmk0dWNiNDd0cXpuN3BodjI4Z2o2bWhyY3p4dHUycmg5OAAZX/GDxHNZbmRhbng1M3R2amE4anBxczJxZW01d3c4YmJiaGF5NHM5dXRkZng3cjVhNnFhYW53bnB1YmE4amFkdGJiZWRpNnB4N2hiYWV6OGh0YXVma3B4d2lyYzZkdzdmdGVtdDg2Z3JybjdlZ2JmdXpzNDRqanlzZnNlMjdxeDkzbmFmbXdsTmI2NzBFWmcxUXE=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x38, 0x7a, 0x38, 0x6a, 0x32, 0x73, 0x34, 0x35, 0x38, 0x74, 0x72, 0x67, 0x62, 0x72, 0x61, 0x71, 0x6a, 0x39, 0x70, 0x77, 0x33, 0x66, 0x74, 0x71, 0x70, 0x39, 0x73, 0x63, 0x6e, 0x69, 0x34, 0x75, 0x63, 0x62, 0x34, 0x37, 0x74, 0x71, 0x7a, 0x6e, 0x37, 0x70, 0x68, 0x76, 0x32, 0x38, 0x67, 0x6a, 0x36, 0x6d, 0x68, 0x72, 0x63, 0x7a, 0x78, 0x74, 0x75, 0x32, 0x72, 0x68, 0x39, 0x38, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x6e, 0x78, 0x35, 0x33, 0x74, 0x76, 0x6a, 0x61, 0x38, 0x6a, 0x70, 0x71, 0x73, 0x32, 0x71, 0x65, 0x6d, 0x35, 0x77, 0x77, 0x38, 0x62, 0x62, 0x62, 0x68, 0x61, 0x79, 0x34, 0x73, 0x39, 0x75, 0x74, 0x64, 0x66, 0x78, 0x37, 0x72, 0x35, 0x61, 0x36, 0x71, 0x61, 0x61, 0x6e, 0x77, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x69, 0x36, 0x70, 0x78, 0x37, 0x68, 0x62, 0x61, 0x65, 0x7a, 0x38, 0x68, 0x74, 0x61, 0x75, 0x66, 0x6b, 0x70, 0x78, 0x77, 0x69, 0x72, 0x63, 0x36, 0x64, 0x77, 0x37, 0x66, 0x74, 0x65, 0x6d, 0x74, 0x38, 0x36, 0x67, 0x72, 0x72, 0x6e, 0x37, 0x65, 0x67, 0x62, 0x66, 0x75, 0x7a, 0x73, 0x34, 0x34, 0x6a, 0x6a, 0x79, 0x73, 0x66, 0x73, 0x65, 0x32, 0x37, 0x71, 0x78, 0x39, 0x33, 0x6e, 0x61, 0x66, 0x6d, 0x77, 0x6c, 0x4e, 0x62, 0x36, 0x37, 0x30, 0x45, 0x5a, 0x67, 0x31, 0x51, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: afmwlNb670EZg1Qq
				[]byte{0x69, 0xf9, 0xb0, 0x94, 0xd6, 0xfa, 0xef, 0x41, 0x19, 0x83, 0x54, 0x2a},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: afmwlNb670EZg1Qq
				[]byte{0x69, 0xf9, 0xb0, 0x94, 0xd6, 0xfa, 0xef, 0x41, 0x19, 0x83, 0x54, 0x2a},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndaqzujz46kmg55das2dtagvmivkqup6zicvz4wund89njsf")
	require.NoError(t, err)
	stakeRules, err := address.Validate("ndanme795acvvv939egj35ncy7wajdf5yytbp6p9552yecka")
	require.NoError(t, err)
	stakeStakeTo, err := address.Validate("ndann2mwc4js72ztje9nmm9p2ag32763p645ncbvmkes5h6k")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFubWU3OTVhY3Z2djkzOWVnajM1bmN5N3dhamRmNXl5dGJwNnA5NTUyeWVja2EABJUapCZXuW5kYW5uMm13YzRqczcyenRqZTlubW05cDJhZzMyNzYzcDY0NW5jYnZta2VzNWg2a25kYXF6dWp6NDZrbWc1NWRhczJkdGFndm1pdmtxdXA2emljdno0d3VuZDg5bmpzZg==
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x6e, 0x6d, 0x65, 0x37, 0x39, 0x35, 0x61, 0x63, 0x76, 0x76, 0x76, 0x39, 0x33, 0x39, 0x65, 0x67, 0x6a, 0x33, 0x35, 0x6e, 0x63, 0x79, 0x37, 0x77, 0x61, 0x6a, 0x64, 0x66, 0x35, 0x79, 0x79, 0x74, 0x62, 0x70, 0x36, 0x70, 0x39, 0x35, 0x35, 0x32, 0x79, 0x65, 0x63, 0x6b, 0x61, 0x00, 0x04, 0x95, 0x1a, 0xa4, 0x26, 0x57, 0xb9, 0x6e, 0x64, 0x61, 0x6e, 0x6e, 0x32, 0x6d, 0x77, 0x63, 0x34, 0x6a, 0x73, 0x37, 0x32, 0x7a, 0x74, 0x6a, 0x65, 0x39, 0x6e, 0x6d, 0x6d, 0x39, 0x70, 0x32, 0x61, 0x67, 0x33, 0x32, 0x37, 0x36, 0x33, 0x70, 0x36, 0x34, 0x35, 0x6e, 0x63, 0x62, 0x76, 0x6d, 0x6b, 0x65, 0x73, 0x35, 0x68, 0x36, 0x6b, 0x6e, 0x64, 0x61, 0x71, 0x7a, 0x75, 0x6a, 0x7a, 0x34, 0x36, 0x6b, 0x6d, 0x67, 0x35, 0x35, 0x64, 0x61, 0x73, 0x32, 0x64, 0x74, 0x61, 0x67, 0x76, 0x6d, 0x69, 0x76, 0x6b, 0x71, 0x75, 0x70, 0x36, 0x7a, 0x69, 0x63, 0x76, 0x7a, 0x34, 0x77, 0x75, 0x6e, 0x64, 0x38, 0x39, 0x6e, 0x6a, 0x73, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndadf6a5a6ke3wc5jsy7mtfhmjkaxswf3czf2xuarvyagqxp")
	require.NoError(t, err)
	registernodeOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x79, 0x4b, 0x78, 0x6b, 0x2f, 0x8e, 0x27, 0x9c, 0xa8, 0x43, 0x24, 0x65, 0x6e, 0x21, 0xa1, 0x4a, 0x28, 0x35, 0x92, 0xe4, 0xde, 0x3c, 0x61, 0x17, 0xbf, 0x56, 0x16, 0xc8, 0xb4, 0xa8, 0xf4, 0xd5}, nil)
	require.NoError(t, err)

	// M1U1Ym9yV3I0MXhDYktCN25kYWRmNmE1YTZrZTN3YzVqc3k3bXRmaG1qa2F4c3dmM2N6ZjJ4dWFydnlhZ3F4cG5wdWJhOGphZHRiYmViNnd5OGRtZjhoY3JoZmlpbnVnazV0YndmZmNzcG51NnZyZDIyaXp6N21icHVmd3hkNHBtdWVtZ2g0aGVqNXAAGnaLfE4MiQ==
	expect := []byte{0x33, 0x55, 0x35, 0x62, 0x6f, 0x72, 0x57, 0x72, 0x34, 0x31, 0x78, 0x43, 0x62, 0x4b, 0x42, 0x37, 0x6e, 0x64, 0x61, 0x64, 0x66, 0x36, 0x61, 0x35, 0x61, 0x36, 0x6b, 0x65, 0x33, 0x77, 0x63, 0x35, 0x6a, 0x73, 0x79, 0x37, 0x6d, 0x74, 0x66, 0x68, 0x6d, 0x6a, 0x6b, 0x61, 0x78, 0x73, 0x77, 0x66, 0x33, 0x63, 0x7a, 0x66, 0x32, 0x78, 0x75, 0x61, 0x72, 0x76, 0x79, 0x61, 0x67, 0x71, 0x78, 0x70, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x36, 0x77, 0x79, 0x38, 0x64, 0x6d, 0x66, 0x38, 0x68, 0x63, 0x72, 0x68, 0x66, 0x69, 0x69, 0x6e, 0x75, 0x67, 0x6b, 0x35, 0x74, 0x62, 0x77, 0x66, 0x66, 0x63, 0x73, 0x70, 0x6e, 0x75, 0x36, 0x76, 0x72, 0x64, 0x32, 0x32, 0x69, 0x7a, 0x7a, 0x37, 0x6d, 0x62, 0x70, 0x75, 0x66, 0x77, 0x78, 0x64, 0x34, 0x70, 0x6d, 0x75, 0x65, 0x6d, 0x67, 0x68, 0x34, 0x68, 0x65, 0x6a, 0x35, 0x70, 0x00, 0x1a, 0x76, 0x8b, 0x7c, 0x4e, 0x0c, 0x89}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 3U5borWr41xCbKB7
				[]byte{0xdd, 0x4e, 0x5b, 0xa2, 0xb5, 0xab, 0xe3, 0x5c, 0x42, 0x6c, 0xa0, 0x7b},
				*registernodeOwnership,
				7448690852498569,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 3U5borWr41xCbKB7
				[]byte{0xdd, 0x4e, 0x5b, 0xa2, 0xb5, 0xab, 0xe3, 0x5c, 0x42, 0x6c, 0xa0, 0x7b},
				*registernodeOwnership,
				7448690852498569,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AARcldRJHkcADD8lJWMkPQ==
	expect := []byte{0x00, 0x04, 0x5c, 0x95, 0xd4, 0x49, 0x1e, 0x47, 0x00, 0x0c, 0x3f, 0x25, 0x25, 0x63, 0x24, 0x3d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				1227698488286791,
				3447128494122045,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				1227698488286791,
				3447128494122045,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndaaqyinwqiwdnzag8384evs5w835pvmts2jp6es32mpahs5")
	require.NoError(t, err)

	// bmRhYXF5aW53cWl3ZG56YWc4Mzg0ZXZzNXc4MzVwdm10czJqcDZlczMybXBhaHM1ABmL4qnXjlI=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x71, 0x79, 0x69, 0x6e, 0x77, 0x71, 0x69, 0x77, 0x64, 0x6e, 0x7a, 0x61, 0x67, 0x38, 0x33, 0x38, 0x34, 0x65, 0x76, 0x73, 0x35, 0x77, 0x38, 0x33, 0x35, 0x70, 0x76, 0x6d, 0x74, 0x73, 0x32, 0x6a, 0x70, 0x36, 0x65, 0x73, 0x33, 0x32, 0x6d, 0x70, 0x61, 0x68, 0x73, 0x35, 0x00, 0x19, 0x8b, 0xe2, 0xa9, 0xd7, 0x8e, 0x52}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				7190680046112338,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				7190680046112338,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndabfjd8ipcawmh3w9kx2yes3xirmbjr5en2ruv4inddgq58")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndaidryce5hz78yxskmnhwti7f8fcsxwr69zz2uy2u3cs7dw")
	require.NoError(t, err)

	// bmRhaWRyeWNlNWh6Nzh5eHNrbW5od3RpN2Y4ZmNzeHdyNjl6ejJ1eTJ1M2NzN2R3NHk2bTJkdDdoMThtNThzMTQ5OTU2dXMAAgcPFpwR8QAL0mi2jmyHbmRhYmZqZDhpcGNhd21oM3c5a3gyeWVzM3hpcm1ianI1ZW4ycnV2NGluZGRncTU4
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x64, 0x72, 0x79, 0x63, 0x65, 0x35, 0x68, 0x7a, 0x37, 0x38, 0x79, 0x78, 0x73, 0x6b, 0x6d, 0x6e, 0x68, 0x77, 0x74, 0x69, 0x37, 0x66, 0x38, 0x66, 0x63, 0x73, 0x78, 0x77, 0x72, 0x36, 0x39, 0x7a, 0x7a, 0x32, 0x75, 0x79, 0x32, 0x75, 0x33, 0x63, 0x73, 0x37, 0x64, 0x77, 0x34, 0x79, 0x36, 0x6d, 0x32, 0x64, 0x74, 0x37, 0x68, 0x31, 0x38, 0x6d, 0x35, 0x38, 0x73, 0x31, 0x34, 0x39, 0x39, 0x35, 0x36, 0x75, 0x73, 0x00, 0x02, 0x07, 0x0f, 0x16, 0x9c, 0x11, 0xf1, 0x00, 0x0b, 0xd2, 0x68, 0xb6, 0x8e, 0x6c, 0x87, 0x6e, 0x64, 0x61, 0x62, 0x66, 0x6a, 0x64, 0x38, 0x69, 0x70, 0x63, 0x61, 0x77, 0x6d, 0x68, 0x33, 0x77, 0x39, 0x6b, 0x78, 0x32, 0x79, 0x65, 0x73, 0x33, 0x78, 0x69, 0x72, 0x6d, 0x62, 0x6a, 0x72, 0x35, 0x65, 0x6e, 0x32, 0x72, 0x75, 0x76, 0x34, 0x69, 0x6e, 0x64, 0x64, 0x67, 0x71, 0x35, 0x38}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				570711338652145,
				141895138149956,
				3327571925036167,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				570711338652145,
				141895138149956,
				3327571925036167,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	commandvalidatorchangeNode, err := address.Validate("ndapysqufh8iviijw52kjg4pmp8h45x4trvht45nrht7firr")
	require.NoError(t, err)

	// bmRhcHlzcXVmaDhpdmlpanc1MmtqZzRwbXA4aDQ1eDR0cnZodDQ1bnJodDdmaXJyAAYeknWYCWgABMR/LN9ctg==
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x79, 0x73, 0x71, 0x75, 0x66, 0x68, 0x38, 0x69, 0x76, 0x69, 0x69, 0x6a, 0x77, 0x35, 0x32, 0x6b, 0x6a, 0x67, 0x34, 0x70, 0x6d, 0x70, 0x38, 0x68, 0x34, 0x35, 0x78, 0x34, 0x74, 0x72, 0x76, 0x68, 0x74, 0x34, 0x35, 0x6e, 0x72, 0x68, 0x74, 0x37, 0x66, 0x69, 0x72, 0x72, 0x00, 0x06, 0x1e, 0x92, 0x75, 0x98, 0x09, 0x68, 0x00, 0x04, 0xc4, 0x7f, 0x2c, 0xdf, 0x5c, 0xb6}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				commandvalidatorchangeNode,
				1722464247220584,
				1341950399569078,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				commandvalidatorchangeNode,
				1722464247220584,
				1341950399569078,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndab96pb33w86xvv2yzjxpqsiiypchex7g3cid4zv98a2tnd")
	require.NoError(t, err)

	// bmRhYjk2cGIzM3c4Nnh2djJ5emp4cHFzaWl5cGNoZXg3ZzNjaWQ0enY5OGEydG5kAAbNK1fSk3U=
	expect := []byte{0x6e, 0x64, 0x61, 0x62, 0x39, 0x36, 0x70, 0x62, 0x33, 0x33, 0x77, 0x38, 0x36, 0x78, 0x76, 0x76, 0x32, 0x79, 0x7a, 0x6a, 0x78, 0x70, 0x71, 0x73, 0x69, 0x69, 0x79, 0x70, 0x63, 0x68, 0x65, 0x78, 0x37, 0x67, 0x33, 0x63, 0x69, 0x64, 0x34, 0x7a, 0x76, 0x39, 0x38, 0x61, 0x32, 0x74, 0x6e, 0x64, 0x00, 0x06, 0xcd, 0x2b, 0x57, 0xd2, 0x93, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				1914435900969845,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				1914435900969845,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndak6z7gy7zvp7sngserhsn3msrezxvzjxwrpai23u9ibzpy")
	require.NoError(t, err)
	unstakeRules, err := address.Validate("ndam5tx37rp97azn8h85rkfxkp4kjm94rf7eeswsjmrzd6tj")
	require.NoError(t, err)
	unstakeStakeTo, err := address.Validate("ndaasddag68vcbmufr6pfsggqdatscidyx8qpbffpg6dccn2")
	require.NoError(t, err)

	// ABRQL8XW1WpuZGFtNXR4MzdycDk3YXpuOGg4NXJrZnhrcDRram05NHJmN2Vlc3dzam1yemQ2dGoAEUz4a4PRtW5kYWFzZGRhZzY4dmNibXVmcjZwZnNnZ3FkYXRzY2lkeXg4cXBiZmZwZzZkY2NuMm5kYWs2ejdneTd6dnA3c25nc2VyaHNuM21zcmV6eHZ6anh3cnBhaTIzdTlpYnpweQ==
	expect := []byte{0x00, 0x14, 0x50, 0x2f, 0xc5, 0xd6, 0xd5, 0x6a, 0x6e, 0x64, 0x61, 0x6d, 0x35, 0x74, 0x78, 0x33, 0x37, 0x72, 0x70, 0x39, 0x37, 0x61, 0x7a, 0x6e, 0x38, 0x68, 0x38, 0x35, 0x72, 0x6b, 0x66, 0x78, 0x6b, 0x70, 0x34, 0x6b, 0x6a, 0x6d, 0x39, 0x34, 0x72, 0x66, 0x37, 0x65, 0x65, 0x73, 0x77, 0x73, 0x6a, 0x6d, 0x72, 0x7a, 0x64, 0x36, 0x74, 0x6a, 0x00, 0x11, 0x4c, 0xf8, 0x6b, 0x83, 0xd1, 0xb5, 0x6e, 0x64, 0x61, 0x61, 0x73, 0x64, 0x64, 0x61, 0x67, 0x36, 0x38, 0x76, 0x63, 0x62, 0x6d, 0x75, 0x66, 0x72, 0x36, 0x70, 0x66, 0x73, 0x67, 0x67, 0x71, 0x64, 0x61, 0x74, 0x73, 0x63, 0x69, 0x64, 0x79, 0x78, 0x38, 0x71, 0x70, 0x62, 0x66, 0x66, 0x70, 0x67, 0x36, 0x64, 0x63, 0x63, 0x6e, 0x32, 0x6e, 0x64, 0x61, 0x6b, 0x36, 0x7a, 0x37, 0x67, 0x79, 0x37, 0x7a, 0x76, 0x70, 0x37, 0x73, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x68, 0x73, 0x6e, 0x33, 0x6d, 0x73, 0x72, 0x65, 0x7a, 0x78, 0x76, 0x7a, 0x6a, 0x78, 0x77, 0x72, 0x70, 0x61, 0x69, 0x32, 0x33, 0x75, 0x39, 0x69, 0x62, 0x7a, 0x70, 0x79}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				5717665647089002,
				4869704443482549,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				5717665647089002,
				4869704443482549,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AANMNnZ0zuoADhf3sGjcpA==
	expect := []byte{0x00, 0x03, 0x4c, 0x36, 0x76, 0x74, 0xce, 0xea, 0x00, 0x0e, 0x17, 0xf7, 0xb0, 0x68, 0xdc, 0xa4}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				928221729443562,
				3967002257972388,
			),
		},
		{
			"with signature",
			NewIssue(
				928221729443562,
				3967002257972388,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndamapteqtivdeyp7yg2iuq3jvhdd4c2igwikzihpjhwufbg")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndahspbfxu73yh988cq8u8ddf26539du95tamssyeep9uc8w")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x49, 0x45, 0xfa, 0x00, 0xed, 0x65, 0xcb, 0xbc, 0x4f, 0x89, 0x1b, 0x42, 0x47, 0xb6, 0xfa, 0x8e, 0x3e, 0x74, 0x04, 0x34, 0x30, 0x46, 0xc9, 0xf0, 0xe2, 0x8d, 0xb7, 0x88, 0x8c, 0xd7, 0xf3, 0xfd}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x45, 0xaf, 0x1f, 0x3f, 0x48, 0x79, 0xd4, 0xf9, 0x63, 0xf4, 0x0f, 0xed, 0x6c, 0x5f, 0x94, 0x36, 0xd5, 0xfb, 0x6c, 0xd1, 0xc0, 0x4f, 0x65, 0x01, 0xcd, 0xd0, 0xd8, 0x32, 0x1f, 0x88, 0x50, 0x65, 0xd6, 0x67, 0x58, 0xb6, 0x55, 0x8a, 0x09, 0xda, 0x88, 0x8c, 0x6d, 0x0d, 0x36, 0xa9, 0xf7, 0x17, 0xe5, 0x42, 0xf3, 0x8c, 0xcc, 0xa0, 0x98, 0x59, 0xd8, 0x3c, 0x8a, 0x33, 0x8e, 0xbc, 0xcf, 0x8b})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xd8, 0xcd, 0x3e, 0xc0, 0x34, 0x34, 0x10, 0x0e, 0x7f, 0x96, 0xae, 0x8d, 0x46, 0xc5, 0xca, 0xed, 0xc6, 0xa4, 0xae, 0x69, 0x83, 0xf6, 0xd7, 0x15, 0xd5, 0x74, 0x5f, 0x45, 0x53, 0x9c, 0x01, 0x0d}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndaa6y9p346viznpmij4ggti4rynf29e7n8jx3bgbyhz3k98")
	require.NoError(t, err)

	// bmRhaHNwYmZ4dTczeWg5ODhjcTh1OGRkZjI2NTM5ZHU5NXRhbXNzeWVlcDl1Yzh3bmRhYTZ5OXAzNDZ2aXpucG1pajRnZ3RpNHJ5bmYyOWU3bjhqeDNiZ2J5aHozazk4bnB1YmE4amFkdGJiZWJld204c2E3eHU2enJjcnRlcHdldDd5OWtoZDY3YWVnczJlcHVyczZrZzVyY2VuNDkzOTR6cnl1ODNyemJmZzJ5NG0xMGR0MTZoMjVtNThzMjg4MzQ0dXNhNGphZHRjYWl5enQ4cjRpcmhrcnUyOXdiOXl5Mno2d2c1azl5NWd0MmJoeWthcXA0ZG5kZWg2aWtidTduMzQyeTNrMndjcTR0Y2dnNGRqeXhoNXRyM2tjOHFnbjNpZTJtaG5kM2N0dnQ0OG45YzhocWk0bTU0d3NucHViYThqYWR0YmJlZG5uNHJ5YWdzNGJhZHY5dTR6aTR0eWYzbXk2cGpmcXBnYjlweDJ4NHg0Zjh0a3Z2c2FzNDZtcTk2d2NldWVheFNkUEJKQzk2bnA1Y2RDSgAfb3ihXVJXbmRhbWFwdGVxdGl2ZGV5cDd5ZzJpdXEzanZoZGQ0YzJpZ3dpa3ppaHBqaHd1ZmJn
	expect := []byte{0x6e, 0x64, 0x61, 0x68, 0x73, 0x70, 0x62, 0x66, 0x78, 0x75, 0x37, 0x33, 0x79, 0x68, 0x39, 0x38, 0x38, 0x63, 0x71, 0x38, 0x75, 0x38, 0x64, 0x64, 0x66, 0x32, 0x36, 0x35, 0x33, 0x39, 0x64, 0x75, 0x39, 0x35, 0x74, 0x61, 0x6d, 0x73, 0x73, 0x79, 0x65, 0x65, 0x70, 0x39, 0x75, 0x63, 0x38, 0x77, 0x6e, 0x64, 0x61, 0x61, 0x36, 0x79, 0x39, 0x70, 0x33, 0x34, 0x36, 0x76, 0x69, 0x7a, 0x6e, 0x70, 0x6d, 0x69, 0x6a, 0x34, 0x67, 0x67, 0x74, 0x69, 0x34, 0x72, 0x79, 0x6e, 0x66, 0x32, 0x39, 0x65, 0x37, 0x6e, 0x38, 0x6a, 0x78, 0x33, 0x62, 0x67, 0x62, 0x79, 0x68, 0x7a, 0x33, 0x6b, 0x39, 0x38, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x65, 0x77, 0x6d, 0x38, 0x73, 0x61, 0x37, 0x78, 0x75, 0x36, 0x7a, 0x72, 0x63, 0x72, 0x74, 0x65, 0x70, 0x77, 0x65, 0x74, 0x37, 0x79, 0x39, 0x6b, 0x68, 0x64, 0x36, 0x37, 0x61, 0x65, 0x67, 0x73, 0x32, 0x65, 0x70, 0x75, 0x72, 0x73, 0x36, 0x6b, 0x67, 0x35, 0x72, 0x63, 0x65, 0x6e, 0x34, 0x39, 0x33, 0x39, 0x34, 0x7a, 0x72, 0x79, 0x75, 0x38, 0x33, 0x72, 0x7a, 0x62, 0x66, 0x67, 0x32, 0x79, 0x34, 0x6d, 0x31, 0x30, 0x64, 0x74, 0x31, 0x36, 0x68, 0x32, 0x35, 0x6d, 0x35, 0x38, 0x73, 0x32, 0x38, 0x38, 0x33, 0x34, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x69, 0x79, 0x7a, 0x74, 0x38, 0x72, 0x34, 0x69, 0x72, 0x68, 0x6b, 0x72, 0x75, 0x32, 0x39, 0x77, 0x62, 0x39, 0x79, 0x79, 0x32, 0x7a, 0x36, 0x77, 0x67, 0x35, 0x6b, 0x39, 0x79, 0x35, 0x67, 0x74, 0x32, 0x62, 0x68, 0x79, 0x6b, 0x61, 0x71, 0x70, 0x34, 0x64, 0x6e, 0x64, 0x65, 0x68, 0x36, 0x69, 0x6b, 0x62, 0x75, 0x37, 0x6e, 0x33, 0x34, 0x32, 0x79, 0x33, 0x6b, 0x32, 0x77, 0x63, 0x71, 0x34, 0x74, 0x63, 0x67, 0x67, 0x34, 0x64, 0x6a, 0x79, 0x78, 0x68, 0x35, 0x74, 0x72, 0x33, 0x6b, 0x63, 0x38, 0x71, 0x67, 0x6e, 0x33, 0x69, 0x65, 0x32, 0x6d, 0x68, 0x6e, 0x64, 0x33, 0x63, 0x74, 0x76, 0x74, 0x34, 0x38, 0x6e, 0x39, 0x63, 0x38, 0x68, 0x71, 0x69, 0x34, 0x6d, 0x35, 0x34, 0x77, 0x73, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x6e, 0x6e, 0x34, 0x72, 0x79, 0x61, 0x67, 0x73, 0x34, 0x62, 0x61, 0x64, 0x76, 0x39, 0x75, 0x34, 0x7a, 0x69, 0x34, 0x74, 0x79, 0x66, 0x33, 0x6d, 0x79, 0x36, 0x70, 0x6a, 0x66, 0x71, 0x70, 0x67, 0x62, 0x39, 0x70, 0x78, 0x32, 0x78, 0x34, 0x78, 0x34, 0x66, 0x38, 0x74, 0x6b, 0x76, 0x76, 0x73, 0x61, 0x73, 0x34, 0x36, 0x6d, 0x71, 0x39, 0x36, 0x77, 0x63, 0x65, 0x75, 0x65, 0x61, 0x78, 0x53, 0x64, 0x50, 0x42, 0x4a, 0x43, 0x39, 0x36, 0x6e, 0x70, 0x35, 0x63, 0x64, 0x43, 0x4a, 0x00, 0x1f, 0x6f, 0x78, 0xa1, 0x5d, 0x52, 0x57, 0x6e, 0x64, 0x61, 0x6d, 0x61, 0x70, 0x74, 0x65, 0x71, 0x74, 0x69, 0x76, 0x64, 0x65, 0x79, 0x70, 0x37, 0x79, 0x67, 0x32, 0x69, 0x75, 0x71, 0x33, 0x6a, 0x76, 0x68, 0x64, 0x64, 0x34, 0x63, 0x32, 0x69, 0x67, 0x77, 0x69, 0x6b, 0x7a, 0x69, 0x68, 0x70, 0x6a, 0x68, 0x77, 0x75, 0x66, 0x62, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				74363158288344,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: xSdPBJC96np5cdCJ
				[]byte{0xc5, 0x27, 0x4f, 0x04, 0x90, 0xbd, 0xea, 0x7a, 0x79, 0x71, 0xd0, 0x89},
				createchildaccountChildDelegationNode,
				8848288172036695,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				74363158288344,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: xSdPBJC96np5cdCJ
				[]byte{0xc5, 0x27, 0x4f, 0x04, 0x90, 0xbd, 0xea, 0x7a, 0x79, 0x71, 0xd0, 0x89},
				createchildaccountChildDelegationNode,
				8848288172036695,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAQZ23lCCqEAGnsPnaHaWA==
	expect := []byte{0x00, 0x04, 0x19, 0xdb, 0x79, 0x42, 0x0a, 0xa1, 0x00, 0x1a, 0x7b, 0x0f, 0x9d, 0xa1, 0xda, 0x58}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				1154330329746081,
				7453656393833048,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				1154330329746081,
				7453656393833048,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBqZmJjeCBlZmYgc3d4cCBkbmpvYmMgbnZsIHRlbWFwZXogbGVxIGh5enJ5d2ogcGogcGYgAABHk2ycZ0s5aStqY0pTVHNScS83WFV2
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x6a, 0x66, 0x62, 0x63, 0x78, 0x20, 0x65, 0x66, 0x66, 0x20, 0x73, 0x77, 0x78, 0x70, 0x20, 0x64, 0x6e, 0x6a, 0x6f, 0x62, 0x63, 0x20, 0x6e, 0x76, 0x6c, 0x20, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x65, 0x7a, 0x20, 0x6c, 0x65, 0x71, 0x20, 0x68, 0x79, 0x7a, 0x72, 0x79, 0x77, 0x6a, 0x20, 0x70, 0x6a, 0x20, 0x70, 0x66, 0x20, 0x00, 0x00, 0x47, 0x93, 0x6c, 0x9c, 0x67, 0x4b, 0x39, 0x69, 0x2b, 0x6a, 0x63, 0x4a, 0x53, 0x54, 0x73, 0x52, 0x71, 0x2f, 0x37, 0x58, 0x55, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: jfbcx eff swxp dnjobc nvl temapez leq hyzrywj pj pf ",
				// Value as b64: 9i+jcJSTsRq/7XUv
				[]byte{0xf6, 0x2f, 0xa3, 0x70, 0x94, 0x93, 0xb1, 0x1a, 0xbf, 0xed, 0x75, 0x2f},
				78698507953995,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: jfbcx eff swxp dnjobc nvl temapez leq hyzrywj pj pf ",
				// Value as b64: 9i+jcJSTsRq/7XUv
				[]byte{0xf6, 0x2f, 0xa3, 0x70, 0x94, 0x93, 0xb1, 0x1a, 0xbf, 0xed, 0x75, 0x2f},
				78698507953995,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetStakeRules_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setstakerulesTarget, err := address.Validate("ndair72gjq56xmazcsq2nrxuggss45q5td2wgfstegts2n2w")
	require.NoError(t, err)

	// ABJWA4PReWBqN3JWcWt5clJ5TUhrU1pybmRhaXI3MmdqcTU2eG1hemNzcTJucnh1Z2dzczQ1cTV0ZDJ3Z2ZzdGVndHMybjJ3
	expect := []byte{0x00, 0x12, 0x56, 0x03, 0x83, 0xd1, 0x79, 0x60, 0x6a, 0x37, 0x72, 0x56, 0x71, 0x6b, 0x79, 0x72, 0x52, 0x79, 0x4d, 0x48, 0x6b, 0x53, 0x5a, 0x72, 0x6e, 0x64, 0x61, 0x69, 0x72, 0x37, 0x32, 0x67, 0x6a, 0x71, 0x35, 0x36, 0x78, 0x6d, 0x61, 0x7a, 0x63, 0x73, 0x71, 0x32, 0x6e, 0x72, 0x78, 0x75, 0x67, 0x67, 0x73, 0x73, 0x34, 0x35, 0x71, 0x35, 0x74, 0x64, 0x32, 0x77, 0x67, 0x66, 0x73, 0x74, 0x65, 0x67, 0x74, 0x73, 0x32, 0x6e, 0x32, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetStakeRules
	}{
		{
			"no signatures",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: j7rVqkyrRyMHkSZr
				[]byte{0x8f, 0xba, 0xd5, 0xaa, 0x4c, 0xab, 0x47, 0x23, 0x07, 0x91, 0x26, 0x6b},
				5161122677225824,
			),
		},
		{
			"with signature",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: j7rVqkyrRyMHkSZr
				[]byte{0x8f, 0xba, 0xd5, 0xaa, 0x4c, 0xab, 0x47, 0x23, 0x07, 0x91, 0x26, 0x6b},
				5161122677225824,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordEndowmentNAV_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABSksuo9T1IAFY++r2NfxA==
	expect := []byte{0x00, 0x14, 0xa4, 0xb2, 0xea, 0x3d, 0x4f, 0x52, 0x00, 0x15, 0x8f, 0xbe, 0xaf, 0x63, 0x5f, 0xc4}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordEndowmentNAV
	}{
		{
			"no signatures",
			NewRecordEndowmentNAV(
				5810587875233618,
				6069023660007364,
			),
		},
		{
			"with signature",
			NewRecordEndowmentNAV(
				5810587875233618,
				6069023660007364,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestResolveStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	resolvestakeTarget, err := address.Validate("ndakw3ug8w47a42hiwe6nepuhfjex3jtk8v3fntqawa2bvj7")
	require.NoError(t, err)
	resolvestakeRules, err := address.Validate("ndagf8wifspfuyr2da8gry5mp6r4h4jj4gywfyf5zzz8tk2t")
	require.NoError(t, err)

	// AAAAAAAAANhuZGFnZjh3aWZzcGZ1eXIyZGE4Z3J5NW1wNnI0aDRqajRneXdmeWY1enp6OHRrMnQAEhhYf8eI425kYWt3M3VnOHc0N2E0Mmhpd2U2bmVwdWhmamV4M2p0azh2M2ZudHFhd2EyYnZqNw==
	expect := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6e, 0x64, 0x61, 0x67, 0x66, 0x38, 0x77, 0x69, 0x66, 0x73, 0x70, 0x66, 0x75, 0x79, 0x72, 0x32, 0x64, 0x61, 0x38, 0x67, 0x72, 0x79, 0x35, 0x6d, 0x70, 0x36, 0x72, 0x34, 0x68, 0x34, 0x6a, 0x6a, 0x34, 0x67, 0x79, 0x77, 0x66, 0x79, 0x66, 0x35, 0x7a, 0x7a, 0x7a, 0x38, 0x74, 0x6b, 0x32, 0x74, 0x00, 0x12, 0x18, 0x58, 0x7f, 0xc7, 0x88, 0xe3, 0x6e, 0x64, 0x61, 0x6b, 0x77, 0x33, 0x75, 0x67, 0x38, 0x77, 0x34, 0x37, 0x61, 0x34, 0x32, 0x68, 0x69, 0x77, 0x65, 0x36, 0x6e, 0x65, 0x70, 0x75, 0x68, 0x66, 0x6a, 0x65, 0x78, 0x33, 0x6a, 0x74, 0x6b, 0x38, 0x76, 0x33, 0x66, 0x6e, 0x74, 0x71, 0x61, 0x77, 0x61, 0x32, 0x62, 0x76, 0x6a, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ResolveStake
	}{
		{
			"no signatures",
			NewResolveStake(
				resolvestakeTarget,
				resolvestakeRules,
				216,
				5093317960763619,
			),
		},
		{
			"with signature",
			NewResolveStake(
				resolvestakeTarget,
				resolvestakeRules,
				216,
				5093317960763619,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestBurn_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	burnTarget, err := address.Validate("ndar6uausk7v7w8be6yzqpk2sj9unmzjknmpdhhu4tmqvzd8")
	require.NoError(t, err)

	// ABAzgr4UGWEABB3zNTm0Dm5kYXI2dWF1c2s3djd3OGJlNnl6cXBrMnNqOXVubXpqa25tcGRoaHU0dG1xdnpkOA==
	expect := []byte{0x00, 0x10, 0x33, 0x82, 0xbe, 0x14, 0x19, 0x61, 0x00, 0x04, 0x1d, 0xf3, 0x35, 0x39, 0xb4, 0x0e, 0x6e, 0x64, 0x61, 0x72, 0x36, 0x75, 0x61, 0x75, 0x73, 0x6b, 0x37, 0x76, 0x37, 0x77, 0x38, 0x62, 0x65, 0x36, 0x79, 0x7a, 0x71, 0x70, 0x6b, 0x32, 0x73, 0x6a, 0x39, 0x75, 0x6e, 0x6d, 0x7a, 0x6a, 0x6b, 0x6e, 0x6d, 0x70, 0x64, 0x68, 0x68, 0x75, 0x34, 0x74, 0x6d, 0x71, 0x76, 0x7a, 0x64, 0x38}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Burn
	}{
		{
			"no signatures",
			NewBurn(
				burnTarget,
				4560236255123809,
				"",
				1158830314075150,
			),
		},
		{
			"with signature",
			NewBurn(
				burnTarget,
				4560236255123809,
				"",
				1158830314075150,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSchema_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBldGhzYnpyaiAAFctHGUHoFA==
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x65, 0x74, 0x68, 0x73, 0x62, 0x7a, 0x72, 0x6a, 0x20, 0x00, 0x15, 0xcb, 0x47, 0x19, 0x41, 0xe8, 0x14}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSchema
	}{
		{
			"no signatures",
			NewChangeSchema(
				"string: ethsbzrj ",
				6134480737789972,
			),
		},
		{
			"with signature",
			NewChangeSchema(
				"string: ethsbzrj ",
				6134480737789972,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
