package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndafjt9yfs5j5bz7rztxmsdqzqidwt8hu464w9p9539s4pvp")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndajbqvnfne63iebtzyp9ktcdzyskmf9xmvc4xgheuv9kxjw")
	require.NoError(t, err)

	// bmRhamJxdm5mbmU2M2llYnR6eXA5a3RjZHp5c2ttZjl4bXZjNHhnaGV1djlreGp3AAWCIQf8/70AApoPXz8aEm5kYWZqdDl5ZnM1ajViejdyenR4bXNkcXpxaWR3dDhodTQ2NHc5cDk1MzlzNHB2cA==
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x62, 0x71, 0x76, 0x6e, 0x66, 0x6e, 0x65, 0x36, 0x33, 0x69, 0x65, 0x62, 0x74, 0x7a, 0x79, 0x70, 0x39, 0x6b, 0x74, 0x63, 0x64, 0x7a, 0x79, 0x73, 0x6b, 0x6d, 0x66, 0x39, 0x78, 0x6d, 0x76, 0x63, 0x34, 0x78, 0x67, 0x68, 0x65, 0x75, 0x76, 0x39, 0x6b, 0x78, 0x6a, 0x77, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x66, 0x6a, 0x74, 0x39, 0x79, 0x66, 0x73, 0x35, 0x6a, 0x35, 0x62, 0x7a, 0x37, 0x72, 0x7a, 0x74, 0x78, 0x6d, 0x73, 0x64, 0x71, 0x7a, 0x71, 0x69, 0x64, 0x77, 0x74, 0x38, 0x68, 0x75, 0x34, 0x36, 0x34, 0x77, 0x39, 0x70, 0x39, 0x35, 0x33, 0x39, 0x73, 0x34, 0x70, 0x76, 0x70}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndaa3fbtaez6e6893z3psaf78ieu4fzzsnyer2mt4ai2irtp")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x32, 0xd8, 0x1c, 0xd5, 0xde, 0x68, 0x10, 0x71, 0x51, 0xec, 0x00, 0xc6, 0xb0, 0x44, 0xa7, 0x8c, 0x71, 0x87, 0xb8, 0xc2, 0xf2, 0x22, 0x0d, 0x03, 0x33, 0x05, 0x6b, 0xdf, 0x2c, 0xc4, 0xb7, 0x00}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWEzcHNoZ3g1M3diYTZrdDdzYW5wbmNldzhnaGRiNzIybTNjZWRpZGduY3l6ejNuMnU1c2JicDhwcnczZDd1NgAQTcdmlXTFbmRhYTNmYnRhZXo2ZTY4OTN6M3BzYWY3OGlldTRmenpzbnllcjJtdDRhaTJpcnRwaDUvUnJsc2xzSFNvL3BFUg==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x33, 0x70, 0x73, 0x68, 0x67, 0x78, 0x35, 0x33, 0x77, 0x62, 0x61, 0x36, 0x6b, 0x74, 0x37, 0x73, 0x61, 0x6e, 0x70, 0x6e, 0x63, 0x65, 0x77, 0x38, 0x67, 0x68, 0x64, 0x62, 0x37, 0x32, 0x32, 0x6d, 0x33, 0x63, 0x65, 0x64, 0x69, 0x64, 0x67, 0x6e, 0x63, 0x79, 0x7a, 0x7a, 0x33, 0x6e, 0x32, 0x75, 0x35, 0x73, 0x62, 0x62, 0x70, 0x38, 0x70, 0x72, 0x77, 0x33, 0x64, 0x37, 0x75, 0x36, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x61, 0x33, 0x66, 0x62, 0x74, 0x61, 0x65, 0x7a, 0x36, 0x65, 0x36, 0x38, 0x39, 0x33, 0x7a, 0x33, 0x70, 0x73, 0x61, 0x66, 0x37, 0x38, 0x69, 0x65, 0x75, 0x34, 0x66, 0x7a, 0x7a, 0x73, 0x6e, 0x79, 0x65, 0x72, 0x32, 0x6d, 0x74, 0x34, 0x61, 0x69, 0x32, 0x69, 0x72, 0x74, 0x70, 0x68, 0x35, 0x2f, 0x52, 0x72, 0x6c, 0x73, 0x6c, 0x73, 0x48, 0x53, 0x6f, 0x2f, 0x70, 0x45, 0x52}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: h5/RrlslsHSo/pER
				[]byte{0x87, 0x9f, 0xd1, 0xae, 0x5b, 0x25, 0xb0, 0x74, 0xa8, 0xfe, 0x91, 0x11},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: h5/RrlslsHSo/pER
				[]byte{0x87, 0x9f, 0xd1, 0xae, 0x5b, 0x25, 0xb0, 0x74, 0xa8, 0xfe, 0x91, 0x11},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndaqavhegi5nk7fmc5d3h3im45hkbca5kzbtz6na86ah9ggx")
	require.NoError(t, err)

	// bmRhcWF2aGVnaTVuazdmbWM1ZDNoM2ltNDVoa2JjYTVremJ0ejZuYTg2YWg5Z2d4AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x61, 0x76, 0x68, 0x65, 0x67, 0x69, 0x35, 0x6e, 0x6b, 0x37, 0x66, 0x6d, 0x63, 0x35, 0x64, 0x33, 0x68, 0x33, 0x69, 0x6d, 0x34, 0x35, 0x68, 0x6b, 0x62, 0x63, 0x61, 0x35, 0x6b, 0x7a, 0x62, 0x74, 0x7a, 0x36, 0x6e, 0x61, 0x38, 0x36, 0x61, 0x68, 0x39, 0x67, 0x67, 0x78, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndapq7wpk4uyuex8c2gxew6cnqbie8qertqexptqrkse6dwf")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFwcTd3cGs0dXl1ZXg4YzJneGV3NmNucWJpZThxZXJ0cWV4cHRxcmtzZTZkd2Y=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x70, 0x71, 0x37, 0x77, 0x70, 0x6b, 0x34, 0x75, 0x79, 0x75, 0x65, 0x78, 0x38, 0x63, 0x32, 0x67, 0x78, 0x65, 0x77, 0x36, 0x63, 0x6e, 0x71, 0x62, 0x69, 0x65, 0x38, 0x71, 0x65, 0x72, 0x74, 0x71, 0x65, 0x78, 0x70, 0x74, 0x71, 0x72, 0x6b, 0x73, 0x65, 0x36, 0x64, 0x77, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndadaxd4599mvnk9n3vvd3a9ezi2gdiry3fvuk6rshd5e8v6")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndaabpzmze44eev7cck23kwn83ufchqnm2xc8jhqzexasgar")
	require.NoError(t, err)

	// bmRhYWJwem16ZTQ0ZWV2N2NjazIza3duODN1ZmNocW5tMnhjOGpocXpleGFzZ2FyAAjSrCLE0zRuZGFkYXhkNDU5OW12bms5bjN2dmQzYTllemkyZ2RpcnkzZnZ1azZyc2hkNWU4djY=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x62, 0x70, 0x7a, 0x6d, 0x7a, 0x65, 0x34, 0x34, 0x65, 0x65, 0x76, 0x37, 0x63, 0x63, 0x6b, 0x32, 0x33, 0x6b, 0x77, 0x6e, 0x38, 0x33, 0x75, 0x66, 0x63, 0x68, 0x71, 0x6e, 0x6d, 0x32, 0x78, 0x63, 0x38, 0x6a, 0x68, 0x71, 0x7a, 0x65, 0x78, 0x61, 0x73, 0x67, 0x61, 0x72, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x64, 0x61, 0x78, 0x64, 0x34, 0x35, 0x39, 0x39, 0x6d, 0x76, 0x6e, 0x6b, 0x39, 0x6e, 0x33, 0x76, 0x76, 0x64, 0x33, 0x61, 0x39, 0x65, 0x7a, 0x69, 0x32, 0x67, 0x64, 0x69, 0x72, 0x79, 0x33, 0x66, 0x76, 0x75, 0x6b, 0x36, 0x72, 0x73, 0x68, 0x64, 0x35, 0x65, 0x38, 0x76, 0x36}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndacfdg5a5dhajthd3ae6xtxwe954x7b44gmnxq8wd3fim2i")
	require.NoError(t, err)

	// bmRhY2ZkZzVhNWRoYWp0aGQzYWU2eHR4d2U5NTR4N2I0NGdtbnhxOHdkM2ZpbTJpAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x66, 0x64, 0x67, 0x35, 0x61, 0x35, 0x64, 0x68, 0x61, 0x6a, 0x74, 0x68, 0x64, 0x33, 0x61, 0x65, 0x36, 0x78, 0x74, 0x78, 0x77, 0x65, 0x39, 0x35, 0x34, 0x78, 0x37, 0x62, 0x34, 0x34, 0x67, 0x6d, 0x6e, 0x78, 0x71, 0x38, 0x77, 0x64, 0x33, 0x66, 0x69, 0x6d, 0x32, 0x69, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndahur8atu3z7w7jmiguh4gn4h4vtvgpch889xvvxvimczmz")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhaHVyOGF0dTN6N3c3am1pZ3VoNGduNGg0dnR2Z3BjaDg4OXh2dnh2aW1jem16
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x68, 0x75, 0x72, 0x38, 0x61, 0x74, 0x75, 0x33, 0x7a, 0x37, 0x77, 0x37, 0x6a, 0x6d, 0x69, 0x67, 0x75, 0x68, 0x34, 0x67, 0x6e, 0x34, 0x68, 0x34, 0x76, 0x74, 0x76, 0x67, 0x70, 0x63, 0x68, 0x38, 0x38, 0x39, 0x78, 0x76, 0x76, 0x78, 0x76, 0x69, 0x6d, 0x63, 0x7a, 0x6d, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndaasm5ibcp3h77msdtncmuckwbwyr3yrg7kinu2zuf7iirn")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFhc201aWJjcDNoNzdtc2R0bmNtdWNrd2J3eXIzeXJnN2tpbnUyenVmN2lpcm4=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x61, 0x73, 0x6d, 0x35, 0x69, 0x62, 0x63, 0x70, 0x33, 0x68, 0x37, 0x37, 0x6d, 0x73, 0x64, 0x74, 0x6e, 0x63, 0x6d, 0x75, 0x63, 0x6b, 0x77, 0x62, 0x77, 0x79, 0x72, 0x33, 0x79, 0x72, 0x67, 0x37, 0x6b, 0x69, 0x6e, 0x75, 0x32, 0x7a, 0x75, 0x66, 0x37, 0x69, 0x69, 0x72, 0x6e}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndaqjkiamg76agphhhrkpr5cxv2dypjnfjramgbkc9ajwyzq")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndaj7kmzu39mhps9wzmepi82p8ikbkhhp2674hhekpwe4mit")
	require.NoError(t, err)

	// bmRhajdrbXp1MzltaHBzOXd6bWVwaTgycDhpa2JraGhwMjY3NGhoZWtwd2U0bWl0AAz/orpRehFuZGFxamtpYW1nNzZhZ3BoaGhya3ByNWN4djJkeXBqbmZqcmFtZ2JrYzlhand5enE=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x37, 0x6b, 0x6d, 0x7a, 0x75, 0x33, 0x39, 0x6d, 0x68, 0x70, 0x73, 0x39, 0x77, 0x7a, 0x6d, 0x65, 0x70, 0x69, 0x38, 0x32, 0x70, 0x38, 0x69, 0x6b, 0x62, 0x6b, 0x68, 0x68, 0x70, 0x32, 0x36, 0x37, 0x34, 0x68, 0x68, 0x65, 0x6b, 0x70, 0x77, 0x65, 0x34, 0x6d, 0x69, 0x74, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x71, 0x6a, 0x6b, 0x69, 0x61, 0x6d, 0x67, 0x37, 0x36, 0x61, 0x67, 0x70, 0x68, 0x68, 0x68, 0x72, 0x6b, 0x70, 0x72, 0x35, 0x63, 0x78, 0x76, 0x32, 0x64, 0x79, 0x70, 0x6a, 0x6e, 0x66, 0x6a, 0x72, 0x61, 0x6d, 0x67, 0x62, 0x6b, 0x63, 0x39, 0x61, 0x6a, 0x77, 0x79, 0x7a, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndac7kk8hnrubmf2rmyfwt9t9h2bi8mkjdxatf6m24w65e9y")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x09, 0x1a, 0xb5, 0x77, 0xa6, 0x59, 0x3a, 0x81, 0x53, 0x47, 0x8e, 0x76, 0x43, 0x3b, 0xde, 0x12, 0xea, 0x79, 0xf7, 0x3f, 0xe8, 0x86, 0xec, 0xcf, 0xb5, 0x41, 0x9b, 0x05, 0x27, 0x69, 0x28, 0x3b}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x43, 0x0f, 0x0a, 0xc3, 0x7d, 0xa1, 0xfb, 0x75, 0xa8, 0xab, 0x2e, 0x46, 0x97, 0x48, 0x6a, 0x01, 0x0c, 0xd0, 0xb7, 0x07, 0xe3, 0xef, 0x84, 0xea, 0x99, 0x2d, 0xdf, 0xb0, 0x0c, 0x0f, 0x38, 0x03}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWFldHhwbXp3M252eGFrdmk4aGhuczM1NTJqcXc4cnpoOXdpcDVncnl4YTN5YmpocGV3ZHo0czVuanZxOTVuYgAZX/GDxHNZbmRhYzdrazhobnJ1Ym1mMnJteWZ3dDl0OWgyYmk4bWtqZHhhdGY2bTI0dzY1ZTl5bnB1YmE4amFkdGJiZWJiczhjeWRyeXM5eTdwaXhuemVwZjRpcGlhczN3ZnphOXQ4OWJoa3ZleTc5bmFuYjY2YWdydDd5bWlhZm1oZHMxNGJpUEk1ZkdWeWJtRXc=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x65, 0x74, 0x78, 0x70, 0x6d, 0x7a, 0x77, 0x33, 0x6e, 0x76, 0x78, 0x61, 0x6b, 0x76, 0x69, 0x38, 0x68, 0x68, 0x6e, 0x73, 0x33, 0x35, 0x35, 0x32, 0x6a, 0x71, 0x77, 0x38, 0x72, 0x7a, 0x68, 0x39, 0x77, 0x69, 0x70, 0x35, 0x67, 0x72, 0x79, 0x78, 0x61, 0x33, 0x79, 0x62, 0x6a, 0x68, 0x70, 0x65, 0x77, 0x64, 0x7a, 0x34, 0x73, 0x35, 0x6e, 0x6a, 0x76, 0x71, 0x39, 0x35, 0x6e, 0x62, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x63, 0x37, 0x6b, 0x6b, 0x38, 0x68, 0x6e, 0x72, 0x75, 0x62, 0x6d, 0x66, 0x32, 0x72, 0x6d, 0x79, 0x66, 0x77, 0x74, 0x39, 0x74, 0x39, 0x68, 0x32, 0x62, 0x69, 0x38, 0x6d, 0x6b, 0x6a, 0x64, 0x78, 0x61, 0x74, 0x66, 0x36, 0x6d, 0x32, 0x34, 0x77, 0x36, 0x35, 0x65, 0x39, 0x79, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x62, 0x73, 0x38, 0x63, 0x79, 0x64, 0x72, 0x79, 0x73, 0x39, 0x79, 0x37, 0x70, 0x69, 0x78, 0x6e, 0x7a, 0x65, 0x70, 0x66, 0x34, 0x69, 0x70, 0x69, 0x61, 0x73, 0x33, 0x77, 0x66, 0x7a, 0x61, 0x39, 0x74, 0x38, 0x39, 0x62, 0x68, 0x6b, 0x76, 0x65, 0x79, 0x37, 0x39, 0x6e, 0x61, 0x6e, 0x62, 0x36, 0x36, 0x61, 0x67, 0x72, 0x74, 0x37, 0x79, 0x6d, 0x69, 0x61, 0x66, 0x6d, 0x68, 0x64, 0x73, 0x31, 0x34, 0x62, 0x69, 0x50, 0x49, 0x35, 0x66, 0x47, 0x56, 0x79, 0x62, 0x6d, 0x45, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: s14biPI5fGVybmEw
				[]byte{0xb3, 0x5e, 0x1b, 0x88, 0xf2, 0x39, 0x7c, 0x65, 0x72, 0x6e, 0x61, 0x30},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: s14biPI5fGVybmEw
				[]byte{0xb3, 0x5e, 0x1b, 0x88, 0xf2, 0x39, 0x7c, 0x65, 0x72, 0x6e, 0x61, 0x30},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndamfxthx8rtfcunpidhb4qnvbf7pgqnnnfyqx6r47cv2b65")
	require.NoError(t, err)
	stakeRules, err := address.Validate("ndam4mfmaa39c26dcu7xmtjtu45i95x4p6sghzu94tgmjwcr")
	require.NoError(t, err)
	stakeStakeTo, err := address.Validate("ndaa5b7ctbjsv4b9p7vdz67pyaqjnw5vzehwgwwh2mb7axc2")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFtNG1mbWFhMzljMjZkY3U3eG10anR1NDVpOTV4NHA2c2doenU5NHRnbWp3Y3IABJUapCZXuW5kYWE1YjdjdGJqc3Y0YjlwN3ZkejY3cHlhcWpudzV2emVod2d3d2gybWI3YXhjMm5kYW1meHRoeDhydGZjdW5waWRoYjRxbnZiZjdwZ3Fubm5meXF4NnI0N2N2MmI2NQ==
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x6d, 0x34, 0x6d, 0x66, 0x6d, 0x61, 0x61, 0x33, 0x39, 0x63, 0x32, 0x36, 0x64, 0x63, 0x75, 0x37, 0x78, 0x6d, 0x74, 0x6a, 0x74, 0x75, 0x34, 0x35, 0x69, 0x39, 0x35, 0x78, 0x34, 0x70, 0x36, 0x73, 0x67, 0x68, 0x7a, 0x75, 0x39, 0x34, 0x74, 0x67, 0x6d, 0x6a, 0x77, 0x63, 0x72, 0x00, 0x04, 0x95, 0x1a, 0xa4, 0x26, 0x57, 0xb9, 0x6e, 0x64, 0x61, 0x61, 0x35, 0x62, 0x37, 0x63, 0x74, 0x62, 0x6a, 0x73, 0x76, 0x34, 0x62, 0x39, 0x70, 0x37, 0x76, 0x64, 0x7a, 0x36, 0x37, 0x70, 0x79, 0x61, 0x71, 0x6a, 0x6e, 0x77, 0x35, 0x76, 0x7a, 0x65, 0x68, 0x77, 0x67, 0x77, 0x77, 0x68, 0x32, 0x6d, 0x62, 0x37, 0x61, 0x78, 0x63, 0x32, 0x6e, 0x64, 0x61, 0x6d, 0x66, 0x78, 0x74, 0x68, 0x78, 0x38, 0x72, 0x74, 0x66, 0x63, 0x75, 0x6e, 0x70, 0x69, 0x64, 0x68, 0x62, 0x34, 0x71, 0x6e, 0x76, 0x62, 0x66, 0x37, 0x70, 0x67, 0x71, 0x6e, 0x6e, 0x6e, 0x66, 0x79, 0x71, 0x78, 0x36, 0x72, 0x34, 0x37, 0x63, 0x76, 0x32, 0x62, 0x36, 0x35}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndaim4djcn94c4vf9dmmcxzkw7bguvm8nwskga7s8vw9mhrx")
	require.NoError(t, err)
	registernodeOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x04, 0x31, 0x59, 0xcb, 0x10, 0x4b, 0x67, 0x32, 0x9f, 0x6f, 0xee, 0x8a, 0x34, 0xd2, 0x98, 0x6d, 0x51, 0x88, 0x85, 0x95, 0xdf, 0xbc, 0xce, 0x2c, 0xbf, 0xa0, 0xd3, 0xc0, 0x56, 0xaf, 0xe9, 0xf0}, nil)
	require.NoError(t, err)

	// eCtmUGVxaFZ0N3kwM0k0UW5kYWltNGRqY245NGM0dmY5ZG1tY3h6a3c3Ymd1dm04bndza2dhN3M4dnc5bWhyeG5wdWJhOGphZHRiYmVhY2RjeXFtY2JmeXFudzlwOXppd3BndXZieXhkY2VmdXpyNTN2dG56OHNwaHNjeXg5dzlhem1wdTY1eGtkcXgAGnaLfE4MiQ==
	expect := []byte{0x78, 0x2b, 0x66, 0x50, 0x65, 0x71, 0x68, 0x56, 0x74, 0x37, 0x79, 0x30, 0x33, 0x49, 0x34, 0x51, 0x6e, 0x64, 0x61, 0x69, 0x6d, 0x34, 0x64, 0x6a, 0x63, 0x6e, 0x39, 0x34, 0x63, 0x34, 0x76, 0x66, 0x39, 0x64, 0x6d, 0x6d, 0x63, 0x78, 0x7a, 0x6b, 0x77, 0x37, 0x62, 0x67, 0x75, 0x76, 0x6d, 0x38, 0x6e, 0x77, 0x73, 0x6b, 0x67, 0x61, 0x37, 0x73, 0x38, 0x76, 0x77, 0x39, 0x6d, 0x68, 0x72, 0x78, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x63, 0x64, 0x63, 0x79, 0x71, 0x6d, 0x63, 0x62, 0x66, 0x79, 0x71, 0x6e, 0x77, 0x39, 0x70, 0x39, 0x7a, 0x69, 0x77, 0x70, 0x67, 0x75, 0x76, 0x62, 0x79, 0x78, 0x64, 0x63, 0x65, 0x66, 0x75, 0x7a, 0x72, 0x35, 0x33, 0x76, 0x74, 0x6e, 0x7a, 0x38, 0x73, 0x70, 0x68, 0x73, 0x63, 0x79, 0x78, 0x39, 0x77, 0x39, 0x61, 0x7a, 0x6d, 0x70, 0x75, 0x36, 0x35, 0x78, 0x6b, 0x64, 0x71, 0x78, 0x00, 0x1a, 0x76, 0x8b, 0x7c, 0x4e, 0x0c, 0x89}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: x+fPeqhVt7y03I4Q
				[]byte{0xc7, 0xe7, 0xcf, 0x7a, 0xa8, 0x55, 0xb7, 0xbc, 0xb4, 0xdc, 0x8e, 0x10},
				*registernodeOwnership,
				7448690852498569,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: x+fPeqhVt7y03I4Q
				[]byte{0xc7, 0xe7, 0xcf, 0x7a, 0xa8, 0x55, 0xb7, 0xbc, 0xb4, 0xdc, 0x8e, 0x10},
				*registernodeOwnership,
				7448690852498569,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AARcldRJHkcADD8lJWMkPQ==
	expect := []byte{0x00, 0x04, 0x5c, 0x95, 0xd4, 0x49, 0x1e, 0x47, 0x00, 0x0c, 0x3f, 0x25, 0x25, 0x63, 0x24, 0x3d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				1227698488286791,
				3447128494122045,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				1227698488286791,
				3447128494122045,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndadvbkiesxg8n3tt4zgq9d23dihia56zvkdpp3dez7nnfhq")
	require.NoError(t, err)

	// bmRhZHZia2llc3hnOG4zdHQ0emdxOWQyM2RpaGlhNTZ6dmtkcHAzZGV6N25uZmhxABmL4qnXjlI=
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x76, 0x62, 0x6b, 0x69, 0x65, 0x73, 0x78, 0x67, 0x38, 0x6e, 0x33, 0x74, 0x74, 0x34, 0x7a, 0x67, 0x71, 0x39, 0x64, 0x32, 0x33, 0x64, 0x69, 0x68, 0x69, 0x61, 0x35, 0x36, 0x7a, 0x76, 0x6b, 0x64, 0x70, 0x70, 0x33, 0x64, 0x65, 0x7a, 0x37, 0x6e, 0x6e, 0x66, 0x68, 0x71, 0x00, 0x19, 0x8b, 0xe2, 0xa9, 0xd7, 0x8e, 0x52}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				7190680046112338,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				7190680046112338,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndaatyvp9ne3894mmchccy94hkrgyn2dv8qbrzpkg8z3r6ed")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndam9nyesehcntrb4umm7kkkjsyc9e5njwk4sf5esaak9tv6")
	require.NoError(t, err)

	// bmRhbTlueWVzZWhjbnRyYjR1bW03a2tranN5YzllNW5qd2s0c2Y1ZXNhYWs5dHY2NHk2bTJkdDdoMThtNThzMTQ5OTU2dXMAAgcPFpwR8QAL0mi2jmyHbmRhYXR5dnA5bmUzODk0bW1jaGNjeTk0aGtyZ3luMmR2OHFicnpwa2c4ejNyNmVk
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x39, 0x6e, 0x79, 0x65, 0x73, 0x65, 0x68, 0x63, 0x6e, 0x74, 0x72, 0x62, 0x34, 0x75, 0x6d, 0x6d, 0x37, 0x6b, 0x6b, 0x6b, 0x6a, 0x73, 0x79, 0x63, 0x39, 0x65, 0x35, 0x6e, 0x6a, 0x77, 0x6b, 0x34, 0x73, 0x66, 0x35, 0x65, 0x73, 0x61, 0x61, 0x6b, 0x39, 0x74, 0x76, 0x36, 0x34, 0x79, 0x36, 0x6d, 0x32, 0x64, 0x74, 0x37, 0x68, 0x31, 0x38, 0x6d, 0x35, 0x38, 0x73, 0x31, 0x34, 0x39, 0x39, 0x35, 0x36, 0x75, 0x73, 0x00, 0x02, 0x07, 0x0f, 0x16, 0x9c, 0x11, 0xf1, 0x00, 0x0b, 0xd2, 0x68, 0xb6, 0x8e, 0x6c, 0x87, 0x6e, 0x64, 0x61, 0x61, 0x74, 0x79, 0x76, 0x70, 0x39, 0x6e, 0x65, 0x33, 0x38, 0x39, 0x34, 0x6d, 0x6d, 0x63, 0x68, 0x63, 0x63, 0x79, 0x39, 0x34, 0x68, 0x6b, 0x72, 0x67, 0x79, 0x6e, 0x32, 0x64, 0x76, 0x38, 0x71, 0x62, 0x72, 0x7a, 0x70, 0x6b, 0x67, 0x38, 0x7a, 0x33, 0x72, 0x36, 0x65, 0x64}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				570711338652145,
				141895138149956,
				3327571925036167,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				570711338652145,
				141895138149956,
				3327571925036167,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	commandvalidatorchangeNode, err := address.Validate("ndaf4xgcb2fmdnhjxpjjnyexv3d4decaibe4qbeeq3fqc4ws")
	require.NoError(t, err)

	// bmRhZjR4Z2NiMmZtZG5oanhwampueWV4djNkNGRlY2FpYmU0cWJlZXEzZnFjNHdzAAYeknWYCWgABMR/LN9ctg==
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x34, 0x78, 0x67, 0x63, 0x62, 0x32, 0x66, 0x6d, 0x64, 0x6e, 0x68, 0x6a, 0x78, 0x70, 0x6a, 0x6a, 0x6e, 0x79, 0x65, 0x78, 0x76, 0x33, 0x64, 0x34, 0x64, 0x65, 0x63, 0x61, 0x69, 0x62, 0x65, 0x34, 0x71, 0x62, 0x65, 0x65, 0x71, 0x33, 0x66, 0x71, 0x63, 0x34, 0x77, 0x73, 0x00, 0x06, 0x1e, 0x92, 0x75, 0x98, 0x09, 0x68, 0x00, 0x04, 0xc4, 0x7f, 0x2c, 0xdf, 0x5c, 0xb6}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				commandvalidatorchangeNode,
				1722464247220584,
				1341950399569078,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				commandvalidatorchangeNode,
				1722464247220584,
				1341950399569078,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndaahbbvr72v3t8ektqryhv3ng9rkh3zj56ejvramqq4b8vf")
	require.NoError(t, err)

	// bmRhYWhiYnZyNzJ2M3Q4ZWt0cXJ5aHYzbmc5cmtoM3pqNTZlanZyYW1xcTRiOHZmAAbNK1fSk3U=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x68, 0x62, 0x62, 0x76, 0x72, 0x37, 0x32, 0x76, 0x33, 0x74, 0x38, 0x65, 0x6b, 0x74, 0x71, 0x72, 0x79, 0x68, 0x76, 0x33, 0x6e, 0x67, 0x39, 0x72, 0x6b, 0x68, 0x33, 0x7a, 0x6a, 0x35, 0x36, 0x65, 0x6a, 0x76, 0x72, 0x61, 0x6d, 0x71, 0x71, 0x34, 0x62, 0x38, 0x76, 0x66, 0x00, 0x06, 0xcd, 0x2b, 0x57, 0xd2, 0x93, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				1914435900969845,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				1914435900969845,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndajfdam8wfc4jegv8xd27nz8b4ugu5zwxh5gkn2wk8m2m9q")
	require.NoError(t, err)
	unstakeRules, err := address.Validate("ndag89984t6evbamrzeuv6knhwv4zfpajtfe2ava836g9pw6")
	require.NoError(t, err)
	unstakeStakeTo, err := address.Validate("ndae4683cq9ufeqni2auatp7bzf58j5pzhys8xtyenbmwp3y")
	require.NoError(t, err)

	// ABRQL8XW1WpuZGFnODk5ODR0NmV2YmFtcnpldXY2a25od3Y0emZwYWp0ZmUyYXZhODM2ZzlwdzYAEUz4a4PRtW5kYWU0NjgzY3E5dWZlcW5pMmF1YXRwN2J6ZjU4ajVwemh5czh4dHllbmJtd3AzeW5kYWpmZGFtOHdmYzRqZWd2OHhkMjduejhiNHVndTV6d3hoNWdrbjJ3azhtMm05cQ==
	expect := []byte{0x00, 0x14, 0x50, 0x2f, 0xc5, 0xd6, 0xd5, 0x6a, 0x6e, 0x64, 0x61, 0x67, 0x38, 0x39, 0x39, 0x38, 0x34, 0x74, 0x36, 0x65, 0x76, 0x62, 0x61, 0x6d, 0x72, 0x7a, 0x65, 0x75, 0x76, 0x36, 0x6b, 0x6e, 0x68, 0x77, 0x76, 0x34, 0x7a, 0x66, 0x70, 0x61, 0x6a, 0x74, 0x66, 0x65, 0x32, 0x61, 0x76, 0x61, 0x38, 0x33, 0x36, 0x67, 0x39, 0x70, 0x77, 0x36, 0x00, 0x11, 0x4c, 0xf8, 0x6b, 0x83, 0xd1, 0xb5, 0x6e, 0x64, 0x61, 0x65, 0x34, 0x36, 0x38, 0x33, 0x63, 0x71, 0x39, 0x75, 0x66, 0x65, 0x71, 0x6e, 0x69, 0x32, 0x61, 0x75, 0x61, 0x74, 0x70, 0x37, 0x62, 0x7a, 0x66, 0x35, 0x38, 0x6a, 0x35, 0x70, 0x7a, 0x68, 0x79, 0x73, 0x38, 0x78, 0x74, 0x79, 0x65, 0x6e, 0x62, 0x6d, 0x77, 0x70, 0x33, 0x79, 0x6e, 0x64, 0x61, 0x6a, 0x66, 0x64, 0x61, 0x6d, 0x38, 0x77, 0x66, 0x63, 0x34, 0x6a, 0x65, 0x67, 0x76, 0x38, 0x78, 0x64, 0x32, 0x37, 0x6e, 0x7a, 0x38, 0x62, 0x34, 0x75, 0x67, 0x75, 0x35, 0x7a, 0x77, 0x78, 0x68, 0x35, 0x67, 0x6b, 0x6e, 0x32, 0x77, 0x6b, 0x38, 0x6d, 0x32, 0x6d, 0x39, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				5717665647089002,
				4869704443482549,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				5717665647089002,
				4869704443482549,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AANMNnZ0zuoADhf3sGjcpA==
	expect := []byte{0x00, 0x03, 0x4c, 0x36, 0x76, 0x74, 0xce, 0xea, 0x00, 0x0e, 0x17, 0xf7, 0xb0, 0x68, 0xdc, 0xa4}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				928221729443562,
				3967002257972388,
			),
		},
		{
			"with signature",
			NewIssue(
				928221729443562,
				3967002257972388,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndabfgmndu44vx9qfr47z97tzbfwxwgkmxq54jguqh8rf8f5")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndadt96fxypmaeuwh9wukvxudcty458wikrgivk5s9hbrjjm")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x9a, 0xd5, 0x0a, 0xd7, 0x90, 0x45, 0x28, 0xc0, 0x70, 0x4c, 0x6a, 0xe8, 0x2e, 0x00, 0x7e, 0x00, 0x42, 0x6d, 0x5a, 0x45, 0xf6, 0x4e, 0x5a, 0xa8, 0x7d, 0x15, 0xc4, 0x42, 0x3a, 0x37, 0x51, 0xaf}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x0a, 0xf0, 0xdf, 0x44, 0xff, 0x71, 0x63, 0x86, 0xa2, 0x6a, 0x34, 0x56, 0x6f, 0xb6, 0xee, 0x28, 0x5c, 0xc9, 0x74, 0x18, 0x2e, 0xd3, 0xcc, 0x87, 0x3e, 0x23, 0x9e, 0xbb, 0x33, 0xc7, 0xf1, 0x39, 0xe3, 0x6a, 0x59, 0x9a, 0xcd, 0x64, 0xd3, 0xf5, 0x00, 0x41, 0xa3, 0xec, 0x75, 0x8b, 0x11, 0x8c, 0x34, 0x39, 0x18, 0xb3, 0x36, 0x69, 0x33, 0x78, 0xa5, 0x05, 0x45, 0xde, 0xf1, 0x3f, 0xc6, 0xf9})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x4d, 0xde, 0x69, 0xf5, 0x11, 0x33, 0xd0, 0xe1, 0xb4, 0xb5, 0x75, 0x9f, 0x30, 0xa2, 0x2a, 0xa4, 0x79, 0x2a, 0x1c, 0x36, 0x6c, 0x40, 0xcd, 0xe4, 0xe2, 0x81, 0xec, 0x5e, 0xc6, 0x11, 0xe6, 0x3a}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndaac5xfvd45m8aaaw77jatn66ttfhvvjzwuag8ip9bh2c36")
	require.NoError(t, err)

	// bmRhZHQ5NmZ4eXBtYWV1d2g5d3Vrdnh1ZGN0eTQ1OHdpa3JnaXZrNXM5aGJyamptbmRhYWM1eGZ2ZDQ1bThhYWF3NzdqYXRuNjZ0dGZodnZqend1YWc4aXA5YmgyYzM2bnB1YmE4amFkdGJiZWNwcGtjeXp1YmN1dHNkc2p0eHFzbXNhcjJhZWU1azRpejVlNnl4aXJ3azZpc3Q0ZzdpNDlxdWJ0ZHc1ZnBtOTJ5NG0xMGR0MTZoMjVtNThzMjg4MzQ0dXNhNGphZHRjYWJtMnA4dGg5cWZ0MnBpdmtndG1nOXB6cWZicW51N2EyZjVqNjNiMzhlcXJteW44aDhlNjhnNHUzdm1neWp3OXhhYmE0aDVkeHRuaTIycGIzZGMzdm40anZyY3Vza3RxODhlOTZwOHJtcDd5d2s1bWducHViYThqYWR0YmJlYmc3NjRyeGNlMzdiMnB3eXg0MzhuZmNma3VodWtzNmczeWVidnJlNmthODJ6eWdjaHZkd2tuZTZ3Zjk2aTU0dlkyVUl3N2pncWVHcjNuRAAfb3ihXVJXbmRhYmZnbW5kdTQ0dng5cWZyNDd6OTd0emJmd3h3Z2tteHE1NGpndXFoOHJmOGY1
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x74, 0x39, 0x36, 0x66, 0x78, 0x79, 0x70, 0x6d, 0x61, 0x65, 0x75, 0x77, 0x68, 0x39, 0x77, 0x75, 0x6b, 0x76, 0x78, 0x75, 0x64, 0x63, 0x74, 0x79, 0x34, 0x35, 0x38, 0x77, 0x69, 0x6b, 0x72, 0x67, 0x69, 0x76, 0x6b, 0x35, 0x73, 0x39, 0x68, 0x62, 0x72, 0x6a, 0x6a, 0x6d, 0x6e, 0x64, 0x61, 0x61, 0x63, 0x35, 0x78, 0x66, 0x76, 0x64, 0x34, 0x35, 0x6d, 0x38, 0x61, 0x61, 0x61, 0x77, 0x37, 0x37, 0x6a, 0x61, 0x74, 0x6e, 0x36, 0x36, 0x74, 0x74, 0x66, 0x68, 0x76, 0x76, 0x6a, 0x7a, 0x77, 0x75, 0x61, 0x67, 0x38, 0x69, 0x70, 0x39, 0x62, 0x68, 0x32, 0x63, 0x33, 0x36, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x70, 0x70, 0x6b, 0x63, 0x79, 0x7a, 0x75, 0x62, 0x63, 0x75, 0x74, 0x73, 0x64, 0x73, 0x6a, 0x74, 0x78, 0x71, 0x73, 0x6d, 0x73, 0x61, 0x72, 0x32, 0x61, 0x65, 0x65, 0x35, 0x6b, 0x34, 0x69, 0x7a, 0x35, 0x65, 0x36, 0x79, 0x78, 0x69, 0x72, 0x77, 0x6b, 0x36, 0x69, 0x73, 0x74, 0x34, 0x67, 0x37, 0x69, 0x34, 0x39, 0x71, 0x75, 0x62, 0x74, 0x64, 0x77, 0x35, 0x66, 0x70, 0x6d, 0x39, 0x32, 0x79, 0x34, 0x6d, 0x31, 0x30, 0x64, 0x74, 0x31, 0x36, 0x68, 0x32, 0x35, 0x6d, 0x35, 0x38, 0x73, 0x32, 0x38, 0x38, 0x33, 0x34, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x62, 0x6d, 0x32, 0x70, 0x38, 0x74, 0x68, 0x39, 0x71, 0x66, 0x74, 0x32, 0x70, 0x69, 0x76, 0x6b, 0x67, 0x74, 0x6d, 0x67, 0x39, 0x70, 0x7a, 0x71, 0x66, 0x62, 0x71, 0x6e, 0x75, 0x37, 0x61, 0x32, 0x66, 0x35, 0x6a, 0x36, 0x33, 0x62, 0x33, 0x38, 0x65, 0x71, 0x72, 0x6d, 0x79, 0x6e, 0x38, 0x68, 0x38, 0x65, 0x36, 0x38, 0x67, 0x34, 0x75, 0x33, 0x76, 0x6d, 0x67, 0x79, 0x6a, 0x77, 0x39, 0x78, 0x61, 0x62, 0x61, 0x34, 0x68, 0x35, 0x64, 0x78, 0x74, 0x6e, 0x69, 0x32, 0x32, 0x70, 0x62, 0x33, 0x64, 0x63, 0x33, 0x76, 0x6e, 0x34, 0x6a, 0x76, 0x72, 0x63, 0x75, 0x73, 0x6b, 0x74, 0x71, 0x38, 0x38, 0x65, 0x39, 0x36, 0x70, 0x38, 0x72, 0x6d, 0x70, 0x37, 0x79, 0x77, 0x6b, 0x35, 0x6d, 0x67, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x67, 0x37, 0x36, 0x34, 0x72, 0x78, 0x63, 0x65, 0x33, 0x37, 0x62, 0x32, 0x70, 0x77, 0x79, 0x78, 0x34, 0x33, 0x38, 0x6e, 0x66, 0x63, 0x66, 0x6b, 0x75, 0x68, 0x75, 0x6b, 0x73, 0x36, 0x67, 0x33, 0x79, 0x65, 0x62, 0x76, 0x72, 0x65, 0x36, 0x6b, 0x61, 0x38, 0x32, 0x7a, 0x79, 0x67, 0x63, 0x68, 0x76, 0x64, 0x77, 0x6b, 0x6e, 0x65, 0x36, 0x77, 0x66, 0x39, 0x36, 0x69, 0x35, 0x34, 0x76, 0x59, 0x32, 0x55, 0x49, 0x77, 0x37, 0x6a, 0x67, 0x71, 0x65, 0x47, 0x72, 0x33, 0x6e, 0x44, 0x00, 0x1f, 0x6f, 0x78, 0xa1, 0x5d, 0x52, 0x57, 0x6e, 0x64, 0x61, 0x62, 0x66, 0x67, 0x6d, 0x6e, 0x64, 0x75, 0x34, 0x34, 0x76, 0x78, 0x39, 0x71, 0x66, 0x72, 0x34, 0x37, 0x7a, 0x39, 0x37, 0x74, 0x7a, 0x62, 0x66, 0x77, 0x78, 0x77, 0x67, 0x6b, 0x6d, 0x78, 0x71, 0x35, 0x34, 0x6a, 0x67, 0x75, 0x71, 0x68, 0x38, 0x72, 0x66, 0x38, 0x66, 0x35}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				74363158288344,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: vY2UIw7jgqeGr3nD
				[]byte{0xbd, 0x8d, 0x94, 0x23, 0x0e, 0xe3, 0x82, 0xa7, 0x86, 0xaf, 0x79, 0xc3},
				createchildaccountChildDelegationNode,
				8848288172036695,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				74363158288344,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: vY2UIw7jgqeGr3nD
				[]byte{0xbd, 0x8d, 0x94, 0x23, 0x0e, 0xe3, 0x82, 0xa7, 0x86, 0xaf, 0x79, 0xc3},
				createchildaccountChildDelegationNode,
				8848288172036695,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAQZ23lCCqEAGnsPnaHaWA==
	expect := []byte{0x00, 0x04, 0x19, 0xdb, 0x79, 0x42, 0x0a, 0xa1, 0x00, 0x1a, 0x7b, 0x0f, 0x9d, 0xa1, 0xda, 0x58}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				1154330329746081,
				7453656393833048,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				1154330329746081,
				7453656393833048,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBqZmJjeCBlZmYgc3d4cCBkbmpvYmMgbnZsIHRlbWFwZXogbGVxIGh5enJ5d2ogcGogcGYgAABHk2ycZ0taajZmOWJhQnZOQXVVaGsr
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x6a, 0x66, 0x62, 0x63, 0x78, 0x20, 0x65, 0x66, 0x66, 0x20, 0x73, 0x77, 0x78, 0x70, 0x20, 0x64, 0x6e, 0x6a, 0x6f, 0x62, 0x63, 0x20, 0x6e, 0x76, 0x6c, 0x20, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x65, 0x7a, 0x20, 0x6c, 0x65, 0x71, 0x20, 0x68, 0x79, 0x7a, 0x72, 0x79, 0x77, 0x6a, 0x20, 0x70, 0x6a, 0x20, 0x70, 0x66, 0x20, 0x00, 0x00, 0x47, 0x93, 0x6c, 0x9c, 0x67, 0x4b, 0x5a, 0x6a, 0x36, 0x66, 0x39, 0x62, 0x61, 0x42, 0x76, 0x4e, 0x41, 0x75, 0x55, 0x68, 0x6b, 0x2b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: jfbcx eff swxp dnjobc nvl temapez leq hyzrywj pj pf ",
				// Value as b64: Zj6f9baBvNAuUhk+
				[]byte{0x66, 0x3e, 0x9f, 0xf5, 0xb6, 0x81, 0xbc, 0xd0, 0x2e, 0x52, 0x19, 0x3e},
				78698507953995,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: jfbcx eff swxp dnjobc nvl temapez leq hyzrywj pj pf ",
				// Value as b64: Zj6f9baBvNAuUhk+
				[]byte{0x66, 0x3e, 0x9f, 0xf5, 0xb6, 0x81, 0xbc, 0xd0, 0x2e, 0x52, 0x19, 0x3e},
				78698507953995,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetStakeRules_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setstakerulesTarget, err := address.Validate("ndacn874uy9syqdyszeendswf9366p3fjtskzgt83n3qbxug")
	require.NoError(t, err)

	// ABJWA4PReWB6dEEwak1zeWpPUFEzTVo0bmRhY244NzR1eTlzeXFkeXN6ZWVuZHN3ZjkzNjZwM2ZqdHNremd0ODNuM3FieHVn
	expect := []byte{0x00, 0x12, 0x56, 0x03, 0x83, 0xd1, 0x79, 0x60, 0x7a, 0x74, 0x41, 0x30, 0x6a, 0x4d, 0x73, 0x79, 0x6a, 0x4f, 0x50, 0x51, 0x33, 0x4d, 0x5a, 0x34, 0x6e, 0x64, 0x61, 0x63, 0x6e, 0x38, 0x37, 0x34, 0x75, 0x79, 0x39, 0x73, 0x79, 0x71, 0x64, 0x79, 0x73, 0x7a, 0x65, 0x65, 0x6e, 0x64, 0x73, 0x77, 0x66, 0x39, 0x33, 0x36, 0x36, 0x70, 0x33, 0x66, 0x6a, 0x74, 0x73, 0x6b, 0x7a, 0x67, 0x74, 0x38, 0x33, 0x6e, 0x33, 0x71, 0x62, 0x78, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetStakeRules
	}{
		{
			"no signatures",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: ztA0jMsyjOPQ3MZ4
				[]byte{0xce, 0xd0, 0x34, 0x8c, 0xcb, 0x32, 0x8c, 0xe3, 0xd0, 0xdc, 0xc6, 0x78},
				5161122677225824,
			),
		},
		{
			"with signature",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: ztA0jMsyjOPQ3MZ4
				[]byte{0xce, 0xd0, 0x34, 0x8c, 0xcb, 0x32, 0x8c, 0xe3, 0xd0, 0xdc, 0xc6, 0x78},
				5161122677225824,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordEndowmentNAV_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABSksuo9T1IAFY++r2NfxA==
	expect := []byte{0x00, 0x14, 0xa4, 0xb2, 0xea, 0x3d, 0x4f, 0x52, 0x00, 0x15, 0x8f, 0xbe, 0xaf, 0x63, 0x5f, 0xc4}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordEndowmentNAV
	}{
		{
			"no signatures",
			NewRecordEndowmentNAV(
				5810587875233618,
				6069023660007364,
			),
		},
		{
			"with signature",
			NewRecordEndowmentNAV(
				5810587875233618,
				6069023660007364,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestResolveStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	resolvestakeTarget, err := address.Validate("ndacr9wuqtru4wsg6egkd73tsktnnja8h4igfmd38tnat3hd")
	require.NoError(t, err)
	resolvestakeRules, err := address.Validate("ndagfkd5sqgpy98vbzk2mwvewsq79qz4t4i9dmer3aqgd37b")
	require.NoError(t, err)

	// AAAAAAAAAARuZGFnZmtkNXNxZ3B5OTh2YnprMm13dmV3c3E3OXF6NHQ0aTlkbWVyM2FxZ2QzN2IAEhhYf8eI425kYWNyOXd1cXRydTR3c2c2ZWdrZDczdHNrdG5uamE4aDRpZ2ZtZDM4dG5hdDNoZA==
	expect := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6e, 0x64, 0x61, 0x67, 0x66, 0x6b, 0x64, 0x35, 0x73, 0x71, 0x67, 0x70, 0x79, 0x39, 0x38, 0x76, 0x62, 0x7a, 0x6b, 0x32, 0x6d, 0x77, 0x76, 0x65, 0x77, 0x73, 0x71, 0x37, 0x39, 0x71, 0x7a, 0x34, 0x74, 0x34, 0x69, 0x39, 0x64, 0x6d, 0x65, 0x72, 0x33, 0x61, 0x71, 0x67, 0x64, 0x33, 0x37, 0x62, 0x00, 0x12, 0x18, 0x58, 0x7f, 0xc7, 0x88, 0xe3, 0x6e, 0x64, 0x61, 0x63, 0x72, 0x39, 0x77, 0x75, 0x71, 0x74, 0x72, 0x75, 0x34, 0x77, 0x73, 0x67, 0x36, 0x65, 0x67, 0x6b, 0x64, 0x37, 0x33, 0x74, 0x73, 0x6b, 0x74, 0x6e, 0x6e, 0x6a, 0x61, 0x38, 0x68, 0x34, 0x69, 0x67, 0x66, 0x6d, 0x64, 0x33, 0x38, 0x74, 0x6e, 0x61, 0x74, 0x33, 0x68, 0x64}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ResolveStake
	}{
		{
			"no signatures",
			NewResolveStake(
				resolvestakeTarget,
				resolvestakeRules,
				4,
				5093317960763619,
			),
		},
		{
			"with signature",
			NewResolveStake(
				resolvestakeTarget,
				resolvestakeRules,
				4,
				5093317960763619,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSchema_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBhZmV0IHNienJqeCB3bncgayBiZSBmIHpkY2UgABI56gyNxHo=
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x61, 0x66, 0x65, 0x74, 0x20, 0x73, 0x62, 0x7a, 0x72, 0x6a, 0x78, 0x20, 0x77, 0x6e, 0x77, 0x20, 0x6b, 0x20, 0x62, 0x65, 0x20, 0x66, 0x20, 0x7a, 0x64, 0x63, 0x65, 0x20, 0x00, 0x12, 0x39, 0xea, 0x0c, 0x8d, 0xc4, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSchema
	}{
		{
			"no signatures",
			NewChangeSchema(
				"string: afet sbzrjx wnw k be f zdce ",
				5130226976539770,
			),
		},
		{
			"with signature",
			NewChangeSchema(
				"string: afet sbzrjx wnw k be f zdce ",
				5130226976539770,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
