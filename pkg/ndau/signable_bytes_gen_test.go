package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndahizn6hi8y4c85nfyxpuz5yn745e565g3zdnu7igems9s2")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndamuamw4gzw2vqh2agphjiqxks62yht4fuhwisz8uftmtvy")
	require.NoError(t, err)

	// bmRhbXVhbXc0Z3p3MnZxaDJhZ3BoamlxeGtzNjJ5aHQ0ZnVod2lzejh1ZnRtdHZ5AAWCIQf8/70AApoPXz8aEm5kYWhpem42aGk4eTRjODVuZnl4cHV6NXluNzQ1ZTU2NWczemRudTdpZ2VtczlzMg==
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x75, 0x61, 0x6d, 0x77, 0x34, 0x67, 0x7a, 0x77, 0x32, 0x76, 0x71, 0x68, 0x32, 0x61, 0x67, 0x70, 0x68, 0x6a, 0x69, 0x71, 0x78, 0x6b, 0x73, 0x36, 0x32, 0x79, 0x68, 0x74, 0x34, 0x66, 0x75, 0x68, 0x77, 0x69, 0x73, 0x7a, 0x38, 0x75, 0x66, 0x74, 0x6d, 0x74, 0x76, 0x79, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x68, 0x69, 0x7a, 0x6e, 0x36, 0x68, 0x69, 0x38, 0x79, 0x34, 0x63, 0x38, 0x35, 0x6e, 0x66, 0x79, 0x78, 0x70, 0x75, 0x7a, 0x35, 0x79, 0x6e, 0x37, 0x34, 0x35, 0x65, 0x35, 0x36, 0x35, 0x67, 0x33, 0x7a, 0x64, 0x6e, 0x75, 0x37, 0x69, 0x67, 0x65, 0x6d, 0x73, 0x39, 0x73, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndaqa38msu2ecn9wzgqcmin4pd26svxntyrmvn3sckps7fah")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xba, 0x37, 0x45, 0xf4, 0x74, 0x57, 0x1c, 0x07, 0xde, 0x8e, 0x1e, 0x3c, 0x94, 0x36, 0xfb, 0xa0, 0x30, 0xbc, 0xf6, 0x4b, 0xe6, 0x53, 0x2d, 0x2c, 0xfe, 0xd6, 0xde, 0xa6, 0x3a, 0x2e, 0x47, 0x03}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWM3ZHF0cndxdG10MmI4OHQycmQzZmJ5OXFzZGJyaHlqcnZmZ21qbjk1bXA3anQ0ZjNkc2d6dzJzaWRyc2kzeAAQTcdmlXTFbmRhcWEzOG1zdTJlY245d3pncWNtaW40cGQyNnN2eG50eXJtdm4zc2NrcHM3ZmFoM0lkWUJSNzJVWk9wWUxaNA==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x37, 0x64, 0x71, 0x74, 0x72, 0x77, 0x71, 0x74, 0x6d, 0x74, 0x32, 0x62, 0x38, 0x38, 0x74, 0x32, 0x72, 0x64, 0x33, 0x66, 0x62, 0x79, 0x39, 0x71, 0x73, 0x64, 0x62, 0x72, 0x68, 0x79, 0x6a, 0x72, 0x76, 0x66, 0x67, 0x6d, 0x6a, 0x6e, 0x39, 0x35, 0x6d, 0x70, 0x37, 0x6a, 0x74, 0x34, 0x66, 0x33, 0x64, 0x73, 0x67, 0x7a, 0x77, 0x32, 0x73, 0x69, 0x64, 0x72, 0x73, 0x69, 0x33, 0x78, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x71, 0x61, 0x33, 0x38, 0x6d, 0x73, 0x75, 0x32, 0x65, 0x63, 0x6e, 0x39, 0x77, 0x7a, 0x67, 0x71, 0x63, 0x6d, 0x69, 0x6e, 0x34, 0x70, 0x64, 0x32, 0x36, 0x73, 0x76, 0x78, 0x6e, 0x74, 0x79, 0x72, 0x6d, 0x76, 0x6e, 0x33, 0x73, 0x63, 0x6b, 0x70, 0x73, 0x37, 0x66, 0x61, 0x68, 0x33, 0x49, 0x64, 0x59, 0x42, 0x52, 0x37, 0x32, 0x55, 0x5a, 0x4f, 0x70, 0x59, 0x4c, 0x5a, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: 3IdYBR72UZOpYLZ4
				[]byte{0xdc, 0x87, 0x58, 0x05, 0x1e, 0xf6, 0x51, 0x93, 0xa9, 0x60, 0xb6, 0x78},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: 3IdYBR72UZOpYLZ4
				[]byte{0xdc, 0x87, 0x58, 0x05, 0x1e, 0xf6, 0x51, 0x93, 0xa9, 0x60, 0xb6, 0x78},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndajq26z5hp2p8i9gki9kiyjtmdxrhqdyy8emz77qbqag6h8")
	require.NoError(t, err)

	// bmRhanEyNno1aHAycDhpOWdraTlraXlqdG1keHJocWR5eThlbXo3N3FicWFnNmg4AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x71, 0x32, 0x36, 0x7a, 0x35, 0x68, 0x70, 0x32, 0x70, 0x38, 0x69, 0x39, 0x67, 0x6b, 0x69, 0x39, 0x6b, 0x69, 0x79, 0x6a, 0x74, 0x6d, 0x64, 0x78, 0x72, 0x68, 0x71, 0x64, 0x79, 0x79, 0x38, 0x65, 0x6d, 0x7a, 0x37, 0x37, 0x71, 0x62, 0x71, 0x61, 0x67, 0x36, 0x68, 0x38, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndaickm2igt9zeduvdznswt6uqx4v6x436abq3nec7bz32hf")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFpY2ttMmlndDl6ZWR1dmR6bnN3dDZ1cXg0djZ4NDM2YWJxM25lYzdiejMyaGY=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x69, 0x63, 0x6b, 0x6d, 0x32, 0x69, 0x67, 0x74, 0x39, 0x7a, 0x65, 0x64, 0x75, 0x76, 0x64, 0x7a, 0x6e, 0x73, 0x77, 0x74, 0x36, 0x75, 0x71, 0x78, 0x34, 0x76, 0x36, 0x78, 0x34, 0x33, 0x36, 0x61, 0x62, 0x71, 0x33, 0x6e, 0x65, 0x63, 0x37, 0x62, 0x7a, 0x33, 0x32, 0x68, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndahqfkbbzcsqsxfu6skz8tutuifnw2nnzk2926s3x7uw7ni")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndakjxh8e5aegfqhaghs6rmmc4znd88guc9rewcxp6h8tgck")
	require.NoError(t, err)

	// bmRha2p4aDhlNWFlZ2ZxaGFnaHM2cm1tYzR6bmQ4OGd1YzlyZXdjeHA2aDh0Z2NrAAjSrCLE0zRuZGFocWZrYmJ6Y3Nxc3hmdTZza3o4dHV0dWlmbncybm56azI5MjZzM3g3dXc3bmk=
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x6a, 0x78, 0x68, 0x38, 0x65, 0x35, 0x61, 0x65, 0x67, 0x66, 0x71, 0x68, 0x61, 0x67, 0x68, 0x73, 0x36, 0x72, 0x6d, 0x6d, 0x63, 0x34, 0x7a, 0x6e, 0x64, 0x38, 0x38, 0x67, 0x75, 0x63, 0x39, 0x72, 0x65, 0x77, 0x63, 0x78, 0x70, 0x36, 0x68, 0x38, 0x74, 0x67, 0x63, 0x6b, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x68, 0x71, 0x66, 0x6b, 0x62, 0x62, 0x7a, 0x63, 0x73, 0x71, 0x73, 0x78, 0x66, 0x75, 0x36, 0x73, 0x6b, 0x7a, 0x38, 0x74, 0x75, 0x74, 0x75, 0x69, 0x66, 0x6e, 0x77, 0x32, 0x6e, 0x6e, 0x7a, 0x6b, 0x32, 0x39, 0x32, 0x36, 0x73, 0x33, 0x78, 0x37, 0x75, 0x77, 0x37, 0x6e, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndajs9z7z5z4jk2prb4p8g79szdky5884k445258pk4pap7c")
	require.NoError(t, err)

	// bmRhanM5ejd6NXo0amsycHJiNHA4Zzc5c3pka3k1ODg0azQ0NTI1OHBrNHBhcDdjAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x73, 0x39, 0x7a, 0x37, 0x7a, 0x35, 0x7a, 0x34, 0x6a, 0x6b, 0x32, 0x70, 0x72, 0x62, 0x34, 0x70, 0x38, 0x67, 0x37, 0x39, 0x73, 0x7a, 0x64, 0x6b, 0x79, 0x35, 0x38, 0x38, 0x34, 0x6b, 0x34, 0x34, 0x35, 0x32, 0x35, 0x38, 0x70, 0x6b, 0x34, 0x70, 0x61, 0x70, 0x37, 0x63, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndahx7c9bv99d68gdmhvbzxbub6y5ranzez4ug6ryyuhfwzt")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhaHg3Yzlidjk5ZDY4Z2RtaHZienhidWI2eTVyYW56ZXo0dWc2cnl5dWhmd3p0
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x68, 0x78, 0x37, 0x63, 0x39, 0x62, 0x76, 0x39, 0x39, 0x64, 0x36, 0x38, 0x67, 0x64, 0x6d, 0x68, 0x76, 0x62, 0x7a, 0x78, 0x62, 0x75, 0x62, 0x36, 0x79, 0x35, 0x72, 0x61, 0x6e, 0x7a, 0x65, 0x7a, 0x34, 0x75, 0x67, 0x36, 0x72, 0x79, 0x79, 0x75, 0x68, 0x66, 0x77, 0x7a, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndarjpdh4b9bmqyxnfjigtpmkps8jm5izueuyexwhravsp9z")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFyanBkaDRiOWJtcXl4bmZqaWd0cG1rcHM4am01aXp1ZXV5ZXh3aHJhdnNwOXo=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x72, 0x6a, 0x70, 0x64, 0x68, 0x34, 0x62, 0x39, 0x62, 0x6d, 0x71, 0x79, 0x78, 0x6e, 0x66, 0x6a, 0x69, 0x67, 0x74, 0x70, 0x6d, 0x6b, 0x70, 0x73, 0x38, 0x6a, 0x6d, 0x35, 0x69, 0x7a, 0x75, 0x65, 0x75, 0x79, 0x65, 0x78, 0x77, 0x68, 0x72, 0x61, 0x76, 0x73, 0x70, 0x39, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndam8bhzqxsjgzunbn7hfxsprm5izicmm5id4sdmnqai7ypy")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndaqur7d5evyubqkw834fkyr6nwd97m7xny2bmp33qq49ujc")
	require.NoError(t, err)

	// bmRhcXVyN2Q1ZXZ5dWJxa3c4MzRma3lyNm53ZDk3bTd4bnkyYm1wMzNxcTQ5dWpjAAz/orpRehFuZGFtOGJoenF4c2pnenVuYm43aGZ4c3BybTVpemljbW01aWQ0c2RtbnFhaTd5cHk=
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x75, 0x72, 0x37, 0x64, 0x35, 0x65, 0x76, 0x79, 0x75, 0x62, 0x71, 0x6b, 0x77, 0x38, 0x33, 0x34, 0x66, 0x6b, 0x79, 0x72, 0x36, 0x6e, 0x77, 0x64, 0x39, 0x37, 0x6d, 0x37, 0x78, 0x6e, 0x79, 0x32, 0x62, 0x6d, 0x70, 0x33, 0x33, 0x71, 0x71, 0x34, 0x39, 0x75, 0x6a, 0x63, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x6d, 0x38, 0x62, 0x68, 0x7a, 0x71, 0x78, 0x73, 0x6a, 0x67, 0x7a, 0x75, 0x6e, 0x62, 0x6e, 0x37, 0x68, 0x66, 0x78, 0x73, 0x70, 0x72, 0x6d, 0x35, 0x69, 0x7a, 0x69, 0x63, 0x6d, 0x6d, 0x35, 0x69, 0x64, 0x34, 0x73, 0x64, 0x6d, 0x6e, 0x71, 0x61, 0x69, 0x37, 0x79, 0x70, 0x79}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndan8898kvz5sqrrhis5889vfqxqkfscrjzu6ttbm6gaqp6y")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x74, 0x82, 0x3c, 0x56, 0xa8, 0x1a, 0xf7, 0x00, 0x84, 0xf0, 0x9b, 0xc9, 0xa3, 0x79, 0x83, 0x07, 0x4f, 0x05, 0x7a, 0x55, 0x08, 0x34, 0x9e, 0x7c, 0xd8, 0x65, 0xe3, 0xa3, 0x12, 0x46, 0x72, 0xae}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xa0, 0xa4, 0xd5, 0x62, 0x49, 0xd4, 0xf1, 0x5c, 0xd0, 0xbc, 0xa1, 0xe7, 0x47, 0xd0, 0xdd, 0x83, 0x5f, 0xec, 0x33, 0x50, 0xbe, 0x5f, 0xcd, 0xb9, 0xcf, 0x27, 0x34, 0xc6, 0xbd, 0x88, 0xad, 0x69}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWI0aWVyY3l4YXBycWFlZThjcDZ2aTUzc25kdzhibTRrd2Vkamh2NjVidThoaTJ1aTMzazZwZHN1N2RyZHlzaQAZX/GDxHNZbmRhbjg4OThrdno1c3FycmhpczU4ODl2ZnF4cWtmc2Nyanp1NnR0Ym02Z2FxcDZ5bnB1YmE4amFkdGJiZWNza2p4bWNqaGtyY3pnc3p1czhxdDhzNXlieDk1YnZrYzlmOXZwMzM2dnZqdHg3dGN5eXZzaXpobmh4bnU1OFlkSmZwMHdqZGdGYnlqTzc=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x34, 0x69, 0x65, 0x72, 0x63, 0x79, 0x78, 0x61, 0x70, 0x72, 0x71, 0x61, 0x65, 0x65, 0x38, 0x63, 0x70, 0x36, 0x76, 0x69, 0x35, 0x33, 0x73, 0x6e, 0x64, 0x77, 0x38, 0x62, 0x6d, 0x34, 0x6b, 0x77, 0x65, 0x64, 0x6a, 0x68, 0x76, 0x36, 0x35, 0x62, 0x75, 0x38, 0x68, 0x69, 0x32, 0x75, 0x69, 0x33, 0x33, 0x6b, 0x36, 0x70, 0x64, 0x73, 0x75, 0x37, 0x64, 0x72, 0x64, 0x79, 0x73, 0x69, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x6e, 0x38, 0x38, 0x39, 0x38, 0x6b, 0x76, 0x7a, 0x35, 0x73, 0x71, 0x72, 0x72, 0x68, 0x69, 0x73, 0x35, 0x38, 0x38, 0x39, 0x76, 0x66, 0x71, 0x78, 0x71, 0x6b, 0x66, 0x73, 0x63, 0x72, 0x6a, 0x7a, 0x75, 0x36, 0x74, 0x74, 0x62, 0x6d, 0x36, 0x67, 0x61, 0x71, 0x70, 0x36, 0x79, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x73, 0x6b, 0x6a, 0x78, 0x6d, 0x63, 0x6a, 0x68, 0x6b, 0x72, 0x63, 0x7a, 0x67, 0x73, 0x7a, 0x75, 0x73, 0x38, 0x71, 0x74, 0x38, 0x73, 0x35, 0x79, 0x62, 0x78, 0x39, 0x35, 0x62, 0x76, 0x6b, 0x63, 0x39, 0x66, 0x39, 0x76, 0x70, 0x33, 0x33, 0x36, 0x76, 0x76, 0x6a, 0x74, 0x78, 0x37, 0x74, 0x63, 0x79, 0x79, 0x76, 0x73, 0x69, 0x7a, 0x68, 0x6e, 0x68, 0x78, 0x6e, 0x75, 0x35, 0x38, 0x59, 0x64, 0x4a, 0x66, 0x70, 0x30, 0x77, 0x6a, 0x64, 0x67, 0x46, 0x62, 0x79, 0x6a, 0x4f, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: YdJfp0wjdgFbyjO7
				[]byte{0x61, 0xd2, 0x5f, 0xa7, 0x4c, 0x23, 0x76, 0x01, 0x5b, 0xca, 0x33, 0xbb},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: YdJfp0wjdgFbyjO7
				[]byte{0x61, 0xd2, 0x5f, 0xa7, 0x4c, 0x23, 0x76, 0x01, 0x5b, 0xca, 0x33, 0xbb},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndapcn5pzirw6xcdzfeqh2ruwm4r9escvzjkgacs4c9z8nvv")
	require.NoError(t, err)
	stakeRules, err := address.Validate("ndae4xyd877cfhf7p7y3kvdpx8cjd52g4hkyw5vyi7aghe3j")
	require.NoError(t, err)
	stakeStakeTo, err := address.Validate("ndahmhggvsqj6xzxqumhnkagrda2ym9upkdsgg3zwirpius8")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFlNHh5ZDg3N2NmaGY3cDd5M2t2ZHB4OGNqZDUyZzRoa3l3NXZ5aTdhZ2hlM2oABJUapCZXuW5kYWhtaGdndnNxajZ4enhxdW1obmthZ3JkYTJ5bTl1cGtkc2dnM3p3aXJwaXVzOG5kYXBjbjVwemlydzZ4Y2R6ZmVxaDJydXdtNHI5ZXNjdnpqa2dhY3M0Yzl6OG52dg==
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x65, 0x34, 0x78, 0x79, 0x64, 0x38, 0x37, 0x37, 0x63, 0x66, 0x68, 0x66, 0x37, 0x70, 0x37, 0x79, 0x33, 0x6b, 0x76, 0x64, 0x70, 0x78, 0x38, 0x63, 0x6a, 0x64, 0x35, 0x32, 0x67, 0x34, 0x68, 0x6b, 0x79, 0x77, 0x35, 0x76, 0x79, 0x69, 0x37, 0x61, 0x67, 0x68, 0x65, 0x33, 0x6a, 0x00, 0x04, 0x95, 0x1a, 0xa4, 0x26, 0x57, 0xb9, 0x6e, 0x64, 0x61, 0x68, 0x6d, 0x68, 0x67, 0x67, 0x76, 0x73, 0x71, 0x6a, 0x36, 0x78, 0x7a, 0x78, 0x71, 0x75, 0x6d, 0x68, 0x6e, 0x6b, 0x61, 0x67, 0x72, 0x64, 0x61, 0x32, 0x79, 0x6d, 0x39, 0x75, 0x70, 0x6b, 0x64, 0x73, 0x67, 0x67, 0x33, 0x7a, 0x77, 0x69, 0x72, 0x70, 0x69, 0x75, 0x73, 0x38, 0x6e, 0x64, 0x61, 0x70, 0x63, 0x6e, 0x35, 0x70, 0x7a, 0x69, 0x72, 0x77, 0x36, 0x78, 0x63, 0x64, 0x7a, 0x66, 0x65, 0x71, 0x68, 0x32, 0x72, 0x75, 0x77, 0x6d, 0x34, 0x72, 0x39, 0x65, 0x73, 0x63, 0x76, 0x7a, 0x6a, 0x6b, 0x67, 0x61, 0x63, 0x73, 0x34, 0x63, 0x39, 0x7a, 0x38, 0x6e, 0x76, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndab2ugbg8jhubjdpjhit3f8qtgek5ak392rwe5pw5wjik3r")
	require.NoError(t, err)

	// ZGh1YzhlekJVaDFLeEtQNm5kYWIydWdiZzhqaHViamRwamhpdDNmOHF0Z2VrNWFrMzkycndlNXB3NXdqaWszcnN0cmluZzogaGN0Y3VhIGh4a3FmZGFmIAAaew+dodpY
	expect := []byte{0x64, 0x68, 0x75, 0x63, 0x38, 0x65, 0x7a, 0x42, 0x55, 0x68, 0x31, 0x4b, 0x78, 0x4b, 0x50, 0x36, 0x6e, 0x64, 0x61, 0x62, 0x32, 0x75, 0x67, 0x62, 0x67, 0x38, 0x6a, 0x68, 0x75, 0x62, 0x6a, 0x64, 0x70, 0x6a, 0x68, 0x69, 0x74, 0x33, 0x66, 0x38, 0x71, 0x74, 0x67, 0x65, 0x6b, 0x35, 0x61, 0x6b, 0x33, 0x39, 0x32, 0x72, 0x77, 0x65, 0x35, 0x70, 0x77, 0x35, 0x77, 0x6a, 0x69, 0x6b, 0x33, 0x72, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x68, 0x63, 0x74, 0x63, 0x75, 0x61, 0x20, 0x68, 0x78, 0x6b, 0x71, 0x66, 0x64, 0x61, 0x66, 0x20, 0x00, 0x1a, 0x7b, 0x0f, 0x9d, 0xa1, 0xda, 0x58}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: dhuc8ezBUh1KxKP6
				[]byte{0x76, 0x1b, 0x9c, 0xf1, 0xec, 0xc1, 0x52, 0x1d, 0x4a, 0xc4, 0xa3, 0xfa},
				"string: hctcua hxkqfdaf ",
				7453656393833048,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: dhuc8ezBUh1KxKP6
				[]byte{0x76, 0x1b, 0x9c, 0xf1, 0xec, 0xc1, 0x52, 0x1d, 0x4a, 0xc4, 0xa3, 0xfa},
				"string: hctcua hxkqfdaf ",
				7453656393833048,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABS3pVol5LEAC4lM+EDsnA==
	expect := []byte{0x00, 0x14, 0xb7, 0xa5, 0x5a, 0x25, 0xe4, 0xb1, 0x00, 0x0b, 0x89, 0x4c, 0xf8, 0x40, 0xec, 0x9c}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				5831420344132785,
				3247188419341468,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				5831420344132785,
				3247188419341468,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndai9nh75tw8kscqmienfx29jg6hhc9s2ydtk6runvzdd3e5")
	require.NoError(t, err)

	// bmRhaTluaDc1dHc4a3NjcW1pZW5meDI5amc2aGhjOXMyeWR0azZydW52emRkM2U1AAKwKTbVAfw=
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x39, 0x6e, 0x68, 0x37, 0x35, 0x74, 0x77, 0x38, 0x6b, 0x73, 0x63, 0x71, 0x6d, 0x69, 0x65, 0x6e, 0x66, 0x78, 0x32, 0x39, 0x6a, 0x67, 0x36, 0x68, 0x68, 0x63, 0x39, 0x73, 0x32, 0x79, 0x64, 0x74, 0x6b, 0x36, 0x72, 0x75, 0x6e, 0x76, 0x7a, 0x64, 0x64, 0x33, 0x65, 0x35, 0x00, 0x02, 0xb0, 0x29, 0x36, 0xd5, 0x01, 0xfc}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				756641013498364,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				756641013498364,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndaigj5x5xsxr86jvcria33gkeeihijkuyuequnt688scimg")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndaar4umyt7py3ju52xs452cw7a28jg8tqxar88z6miwtsz2")
	require.NoError(t, err)

	// bmRhYXI0dW15dDdweTNqdTUyeHM0NTJjdzdhMjhqZzh0cXhhcjg4ejZtaXd0c3oyMnkzbTdkdDE1aDE2bTQ4czY1ODkzMnVzABFD9/Sl7ncAGEuS9nQEOG5kYWlnajV4NXhzeHI4Nmp2Y3JpYTMzZ2tlZWloaWprdXl1ZXF1bnQ2ODhzY2ltZw==
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x72, 0x34, 0x75, 0x6d, 0x79, 0x74, 0x37, 0x70, 0x79, 0x33, 0x6a, 0x75, 0x35, 0x32, 0x78, 0x73, 0x34, 0x35, 0x32, 0x63, 0x77, 0x37, 0x61, 0x32, 0x38, 0x6a, 0x67, 0x38, 0x74, 0x71, 0x78, 0x61, 0x72, 0x38, 0x38, 0x7a, 0x36, 0x6d, 0x69, 0x77, 0x74, 0x73, 0x7a, 0x32, 0x32, 0x79, 0x33, 0x6d, 0x37, 0x64, 0x74, 0x31, 0x35, 0x68, 0x31, 0x36, 0x6d, 0x34, 0x38, 0x73, 0x36, 0x35, 0x38, 0x39, 0x33, 0x32, 0x75, 0x73, 0x00, 0x11, 0x43, 0xf7, 0xf4, 0xa5, 0xee, 0x77, 0x00, 0x18, 0x4b, 0x92, 0xf6, 0x74, 0x04, 0x38, 0x6e, 0x64, 0x61, 0x69, 0x67, 0x6a, 0x35, 0x78, 0x35, 0x78, 0x73, 0x78, 0x72, 0x38, 0x36, 0x6a, 0x76, 0x63, 0x72, 0x69, 0x61, 0x33, 0x33, 0x67, 0x6b, 0x65, 0x65, 0x69, 0x68, 0x69, 0x6a, 0x6b, 0x75, 0x79, 0x75, 0x65, 0x71, 0x75, 0x6e, 0x74, 0x36, 0x38, 0x38, 0x73, 0x63, 0x69, 0x6d, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				4859806844579447,
				71507808658932,
				6838494013162552,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				4859806844579447,
				71507808658932,
				6838494013162552,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA2WjT9x+XxsWHp6M2ovTk9wYWZBdEdnAALCkpEBj6Y=
	expect := []byte{0x00, 0x0d, 0x96, 0x8d, 0x3f, 0x71, 0xf9, 0x7c, 0x6c, 0x58, 0x7a, 0x7a, 0x33, 0x6a, 0x2f, 0x4e, 0x4f, 0x70, 0x61, 0x66, 0x41, 0x74, 0x47, 0x67, 0x00, 0x02, 0xc2, 0x92, 0x91, 0x01, 0x8f, 0xa6}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: lXzz3j/NOpafAtGg
				[]byte{0x95, 0x7c, 0xf3, 0xde, 0x3f, 0xcd, 0x3a, 0x96, 0x9f, 0x02, 0xd1, 0xa0},
				3824708096227708,
				776884707233702,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: lXzz3j/NOpafAtGg
				[]byte{0x95, 0x7c, 0xf3, 0xde, 0x3f, 0xcd, 0x3a, 0x96, 0x9f, 0x02, 0xd1, 0xa0},
				3824708096227708,
				776884707233702,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndahmbfz4cjpv3h785ry4hus3tgg4fezrq5peyzet5i2hxua")
	require.NoError(t, err)

	// bmRhaG1iZno0Y2pwdjNoNzg1cnk0aHVzM3RnZzRmZXpycTVwZXl6ZXQ1aTJoeHVhAAbjyvzK5FE=
	expect := []byte{0x6e, 0x64, 0x61, 0x68, 0x6d, 0x62, 0x66, 0x7a, 0x34, 0x63, 0x6a, 0x70, 0x76, 0x33, 0x68, 0x37, 0x38, 0x35, 0x72, 0x79, 0x34, 0x68, 0x75, 0x73, 0x33, 0x74, 0x67, 0x67, 0x34, 0x66, 0x65, 0x7a, 0x72, 0x71, 0x35, 0x70, 0x65, 0x79, 0x7a, 0x65, 0x74, 0x35, 0x69, 0x32, 0x68, 0x78, 0x75, 0x61, 0x00, 0x06, 0xe3, 0xca, 0xfc, 0xca, 0xe4, 0x51}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				1939310824318033,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				1939310824318033,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndaf9d8mgnz5ikxfqu37bcqasempxnkng5uddci755pwxrx4")
	require.NoError(t, err)
	unstakeRules, err := address.Validate("ndaddkb8k3npituh96n7u3v3yzj6a2nm2jhuc328qe8s6fwg")
	require.NoError(t, err)
	unstakeStakeTo, err := address.Validate("ndann2hjcuma3nnspxe9kkrp5ck4qnqicajtaxmzpseg4vet")
	require.NoError(t, err)

	// AAYjQ7GGtjxuZGFkZGtiOGszbnBpdHVoOTZuN3UzdjN5emo2YTJubTJqaHVjMzI4cWU4czZmd2cACdnxfZ6RbW5kYW5uMmhqY3VtYTNubnNweGU5a2tycDVjazRxbnFpY2FqdGF4bXpwc2VnNHZldG5kYWY5ZDhtZ256NWlreGZxdTM3YmNxYXNlbXB4bmtuZzV1ZGRjaTc1NXB3eHJ4NA==
	expect := []byte{0x00, 0x06, 0x23, 0x43, 0xb1, 0x86, 0xb6, 0x3c, 0x6e, 0x64, 0x61, 0x64, 0x64, 0x6b, 0x62, 0x38, 0x6b, 0x33, 0x6e, 0x70, 0x69, 0x74, 0x75, 0x68, 0x39, 0x36, 0x6e, 0x37, 0x75, 0x33, 0x76, 0x33, 0x79, 0x7a, 0x6a, 0x36, 0x61, 0x32, 0x6e, 0x6d, 0x32, 0x6a, 0x68, 0x75, 0x63, 0x33, 0x32, 0x38, 0x71, 0x65, 0x38, 0x73, 0x36, 0x66, 0x77, 0x67, 0x00, 0x09, 0xd9, 0xf1, 0x7d, 0x9e, 0x91, 0x6d, 0x6e, 0x64, 0x61, 0x6e, 0x6e, 0x32, 0x68, 0x6a, 0x63, 0x75, 0x6d, 0x61, 0x33, 0x6e, 0x6e, 0x73, 0x70, 0x78, 0x65, 0x39, 0x6b, 0x6b, 0x72, 0x70, 0x35, 0x63, 0x6b, 0x34, 0x71, 0x6e, 0x71, 0x69, 0x63, 0x61, 0x6a, 0x74, 0x61, 0x78, 0x6d, 0x7a, 0x70, 0x73, 0x65, 0x67, 0x34, 0x76, 0x65, 0x74, 0x6e, 0x64, 0x61, 0x66, 0x39, 0x64, 0x38, 0x6d, 0x67, 0x6e, 0x7a, 0x35, 0x69, 0x6b, 0x78, 0x66, 0x71, 0x75, 0x33, 0x37, 0x62, 0x63, 0x71, 0x61, 0x73, 0x65, 0x6d, 0x70, 0x78, 0x6e, 0x6b, 0x6e, 0x67, 0x35, 0x75, 0x64, 0x64, 0x63, 0x69, 0x37, 0x35, 0x35, 0x70, 0x77, 0x78, 0x72, 0x78, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				1727623508440636,
				2772906008285549,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				1727623508440636,
				2772906008285549,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAo7k5P5QVIAFAPe9jpccg==
	expect := []byte{0x00, 0x0a, 0x3b, 0x93, 0x93, 0xf9, 0x41, 0x52, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2880254795923794,
				5633755682856050,
			),
		},
		{
			"with signature",
			NewIssue(
				2880254795923794,
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndae42gtdr6za9x59ms8q8gsjii75smwd43ffyyedc9i5u2z")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndamkvq38ujs7r5iz76ifn3zbgtw4vjt5ag2yekss2ssez7i")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xcd, 0xbb, 0x43, 0x41, 0x01, 0x82, 0x1d, 0xed, 0xad, 0x2f, 0x57, 0x95, 0x6a, 0xec, 0x4e, 0x15, 0x3d, 0x85, 0xd2, 0x3c, 0x9d, 0xaa, 0x8b, 0x42, 0x5c, 0x6b, 0x78, 0x0f, 0x15, 0x28, 0xaf, 0x4a}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x35, 0xd2, 0xca, 0x33, 0xe2, 0x18, 0x00, 0x86, 0x93, 0x17, 0xfe, 0x9e, 0xc2, 0x57, 0xf3, 0x20, 0x05, 0xdc, 0x51, 0xb1, 0x25, 0xde, 0xd1, 0x19, 0x7a, 0xb3, 0x1f, 0xf5, 0xdc, 0x0a, 0xb9, 0x5a, 0x79, 0x89, 0x1b, 0x6b, 0x52, 0x5e, 0x62, 0x44, 0x66, 0xaa, 0xa6, 0xb8, 0xcc, 0xea, 0xa5, 0x03, 0x55, 0xb1, 0x22, 0x04, 0x68, 0xdd, 0xc4, 0x16, 0x17, 0xeb, 0xa2, 0xaf, 0xdd, 0x21, 0x67, 0xc9})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x6a, 0x65, 0x09, 0x23, 0x33, 0x64, 0xcd, 0x9e, 0xf9, 0x70, 0x4c, 0x5a, 0xca, 0x88, 0x6f, 0x0f, 0xec, 0x7c, 0xa0, 0x71, 0x4e, 0x2c, 0x89, 0xb9, 0x40, 0x75, 0xdf, 0xef, 0x55, 0x5d, 0xbd, 0xfb}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndajpgnfe8u8eaqtv6j2utm8gt5xfkf547659828a7vfe562")
	require.NoError(t, err)

	// bmRhbWt2cTM4dWpzN3I1aXo3NmlmbjN6Ymd0dzR2anQ1YWcyeWVrc3Myc3NlejdpbmRhanBnbmZlOHU4ZWFxdHY2ajJ1dG04Z3Q1eGZrZjU0NzY1OTgyOGE3dmZlNTYybnB1YmE4amFkdGJiZWRnNXlzNGJhZ2JiNTVwcGY3bTNrNHpuajJrdjVicXVodXE0eGM0Y210eHpzZDJ4ZmN6d3h6djZyYjdxcHVueDZtMjdkdDIxaDExbTI3czY1OTA2MnVzYTRqYWR0Y2Fnempud245Y2RhYWlwZTJ6OTRybmV4OXZlYWM3MndwdGV6cnBjZ200eW5yOW16YWt6ZnBodmNpNXBwamY2MnVlbjR4a3BxZ243a3VzZ3hwdGVpY2d0enFlYzJtOHppeHI1d3N5cnVydmYzaG5jdzdmbnB1YmE4amFkdGJiZWJ4Z2tjamRncHVuNWh6M3FiZ2Z4dXdpcDZoODI5ZmFxZmhjM2NwM2liNDc5NTR4bXk4OXpmZ2ZtYmY5NGFra2JVVFErOThlNUlIS0YxM08AEQF/vImALW5kYWU0Mmd0ZHI2emE5eDU5bXM4cThnc2ppaTc1c213ZDQzZmZ5eWVkYzlpNXUyeg==
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x6b, 0x76, 0x71, 0x33, 0x38, 0x75, 0x6a, 0x73, 0x37, 0x72, 0x35, 0x69, 0x7a, 0x37, 0x36, 0x69, 0x66, 0x6e, 0x33, 0x7a, 0x62, 0x67, 0x74, 0x77, 0x34, 0x76, 0x6a, 0x74, 0x35, 0x61, 0x67, 0x32, 0x79, 0x65, 0x6b, 0x73, 0x73, 0x32, 0x73, 0x73, 0x65, 0x7a, 0x37, 0x69, 0x6e, 0x64, 0x61, 0x6a, 0x70, 0x67, 0x6e, 0x66, 0x65, 0x38, 0x75, 0x38, 0x65, 0x61, 0x71, 0x74, 0x76, 0x36, 0x6a, 0x32, 0x75, 0x74, 0x6d, 0x38, 0x67, 0x74, 0x35, 0x78, 0x66, 0x6b, 0x66, 0x35, 0x34, 0x37, 0x36, 0x35, 0x39, 0x38, 0x32, 0x38, 0x61, 0x37, 0x76, 0x66, 0x65, 0x35, 0x36, 0x32, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x67, 0x35, 0x79, 0x73, 0x34, 0x62, 0x61, 0x67, 0x62, 0x62, 0x35, 0x35, 0x70, 0x70, 0x66, 0x37, 0x6d, 0x33, 0x6b, 0x34, 0x7a, 0x6e, 0x6a, 0x32, 0x6b, 0x76, 0x35, 0x62, 0x71, 0x75, 0x68, 0x75, 0x71, 0x34, 0x78, 0x63, 0x34, 0x63, 0x6d, 0x74, 0x78, 0x7a, 0x73, 0x64, 0x32, 0x78, 0x66, 0x63, 0x7a, 0x77, 0x78, 0x7a, 0x76, 0x36, 0x72, 0x62, 0x37, 0x71, 0x70, 0x75, 0x6e, 0x78, 0x36, 0x6d, 0x32, 0x37, 0x64, 0x74, 0x32, 0x31, 0x68, 0x31, 0x31, 0x6d, 0x32, 0x37, 0x73, 0x36, 0x35, 0x39, 0x30, 0x36, 0x32, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x67, 0x7a, 0x6a, 0x6e, 0x77, 0x6e, 0x39, 0x63, 0x64, 0x61, 0x61, 0x69, 0x70, 0x65, 0x32, 0x7a, 0x39, 0x34, 0x72, 0x6e, 0x65, 0x78, 0x39, 0x76, 0x65, 0x61, 0x63, 0x37, 0x32, 0x77, 0x70, 0x74, 0x65, 0x7a, 0x72, 0x70, 0x63, 0x67, 0x6d, 0x34, 0x79, 0x6e, 0x72, 0x39, 0x6d, 0x7a, 0x61, 0x6b, 0x7a, 0x66, 0x70, 0x68, 0x76, 0x63, 0x69, 0x35, 0x70, 0x70, 0x6a, 0x66, 0x36, 0x32, 0x75, 0x65, 0x6e, 0x34, 0x78, 0x6b, 0x70, 0x71, 0x67, 0x6e, 0x37, 0x6b, 0x75, 0x73, 0x67, 0x78, 0x70, 0x74, 0x65, 0x69, 0x63, 0x67, 0x74, 0x7a, 0x71, 0x65, 0x63, 0x32, 0x6d, 0x38, 0x7a, 0x69, 0x78, 0x72, 0x35, 0x77, 0x73, 0x79, 0x72, 0x75, 0x72, 0x76, 0x66, 0x33, 0x68, 0x6e, 0x63, 0x77, 0x37, 0x66, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x78, 0x67, 0x6b, 0x63, 0x6a, 0x64, 0x67, 0x70, 0x75, 0x6e, 0x35, 0x68, 0x7a, 0x33, 0x71, 0x62, 0x67, 0x66, 0x78, 0x75, 0x77, 0x69, 0x70, 0x36, 0x68, 0x38, 0x32, 0x39, 0x66, 0x61, 0x71, 0x66, 0x68, 0x63, 0x33, 0x63, 0x70, 0x33, 0x69, 0x62, 0x34, 0x37, 0x39, 0x35, 0x34, 0x78, 0x6d, 0x79, 0x38, 0x39, 0x7a, 0x66, 0x67, 0x66, 0x6d, 0x62, 0x66, 0x39, 0x34, 0x61, 0x6b, 0x6b, 0x62, 0x55, 0x54, 0x51, 0x2b, 0x39, 0x38, 0x65, 0x35, 0x49, 0x48, 0x4b, 0x46, 0x31, 0x33, 0x4f, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d, 0x6e, 0x64, 0x61, 0x65, 0x34, 0x32, 0x67, 0x74, 0x64, 0x72, 0x36, 0x7a, 0x61, 0x39, 0x78, 0x35, 0x39, 0x6d, 0x73, 0x38, 0x71, 0x38, 0x67, 0x73, 0x6a, 0x69, 0x69, 0x37, 0x35, 0x73, 0x6d, 0x77, 0x64, 0x34, 0x33, 0x66, 0x66, 0x79, 0x79, 0x65, 0x64, 0x63, 0x39, 0x69, 0x35, 0x75, 0x32, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				17961087659062,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: bUTQ+98e5IHKF13O
				[]byte{0x6d, 0x44, 0xd0, 0xfb, 0xdf, 0x1e, 0xe4, 0x81, 0xca, 0x17, 0x5d, 0xce},
				createchildaccountChildDelegationNode,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				17961087659062,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: bUTQ+98e5IHKF13O
				[]byte{0x6d, 0x44, 0xd0, 0xfb, 0xdf, 0x1e, 0xe4, 0x81, 0xca, 0x17, 0x5d, 0xce},
				createchildaccountChildDelegationNode,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA+kWRaYdWcAFaMVckx+dg==
	expect := []byte{0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				4402827188794727,
				6090287018180214,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				4402827188794727,
				6090287018180214,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBqb2Jjc24gbGd0ZSAAChVq5YNJazRPa2g1cmlUVTBZYXFYNWw=
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x6a, 0x6f, 0x62, 0x63, 0x73, 0x6e, 0x20, 0x6c, 0x67, 0x74, 0x65, 0x20, 0x00, 0x0a, 0x15, 0x6a, 0xe5, 0x83, 0x49, 0x6b, 0x34, 0x4f, 0x6b, 0x68, 0x35, 0x72, 0x69, 0x54, 0x55, 0x30, 0x59, 0x61, 0x71, 0x58, 0x35, 0x6c}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: jobcsn lgte ",
				// Value as b64: 4Okh5riTU0YaqX5l
				[]byte{0xe0, 0xe9, 0x21, 0xe6, 0xb8, 0x93, 0x53, 0x46, 0x1a, 0xa9, 0x7e, 0x65},
				2838298628409707,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: jobcsn lgte ",
				// Value as b64: 4Okh5riTU0YaqX5l
				[]byte{0xe0, 0xe9, 0x21, 0xe6, 0xb8, 0x93, 0x53, 0x46, 0x1a, 0xa9, 0x7e, 0x65},
				2838298628409707,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetStakeRules_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setstakerulesTarget, err := address.Validate("ndabpzmyaid8wsbken37sc5cvayeb7qwj9vecuruuinnrwrd")
	require.NoError(t, err)

	// ABRnpK9j50MvQmw1bWxzSWh3bVJWMEdIbmRhYnB6bXlhaWQ4d3Nia2VuMzdzYzVjdmF5ZWI3cXdqOXZlY3VydXVpbm5yd3Jk
	expect := []byte{0x00, 0x14, 0x67, 0xa4, 0xaf, 0x63, 0xe7, 0x43, 0x2f, 0x42, 0x6c, 0x35, 0x6d, 0x6c, 0x73, 0x49, 0x68, 0x77, 0x6d, 0x52, 0x56, 0x30, 0x47, 0x48, 0x6e, 0x64, 0x61, 0x62, 0x70, 0x7a, 0x6d, 0x79, 0x61, 0x69, 0x64, 0x38, 0x77, 0x73, 0x62, 0x6b, 0x65, 0x6e, 0x33, 0x37, 0x73, 0x63, 0x35, 0x63, 0x76, 0x61, 0x79, 0x65, 0x62, 0x37, 0x71, 0x77, 0x6a, 0x39, 0x76, 0x65, 0x63, 0x75, 0x72, 0x75, 0x75, 0x69, 0x6e, 0x6e, 0x72, 0x77, 0x72, 0x64}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetStakeRules
	}{
		{
			"no signatures",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: /Bl5mlsIhwmRV0GH
				[]byte{0xfc, 0x19, 0x79, 0x9a, 0x5b, 0x08, 0x87, 0x09, 0x91, 0x57, 0x41, 0x87},
				5743456549070659,
			),
		},
		{
			"with signature",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: /Bl5mlsIhwmRV0GH
				[]byte{0xfc, 0x19, 0x79, 0x9a, 0x5b, 0x08, 0x87, 0x09, 0x91, 0x57, 0x41, 0x87},
				5743456549070659,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
