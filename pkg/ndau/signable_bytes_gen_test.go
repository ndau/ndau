package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndaki9d6pcdvs4s8ddzrrh75xnhy6kfz9h8i7inphrdyicfi")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndamrvqsyz26jtf2anxg7bhxtmid3zj4efzgqzc2qis3j2qf")
	require.NoError(t, err)

	// bmRhbXJ2cXN5ejI2anRmMmFueGc3Ymh4dG1pZDN6ajRlZnpncXpjMnFpczNqMnFmAAWCIQf8/70AApoPXz8aEm5kYWtpOWQ2cGNkdnM0czhkZHpycmg3NXhuaHk2a2Z6OWg4aTdpbnBocmR5aWNmaQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x72, 0x76, 0x71, 0x73, 0x79, 0x7a, 0x32, 0x36, 0x6a, 0x74, 0x66, 0x32, 0x61, 0x6e, 0x78, 0x67, 0x37, 0x62, 0x68, 0x78, 0x74, 0x6d, 0x69, 0x64, 0x33, 0x7a, 0x6a, 0x34, 0x65, 0x66, 0x7a, 0x67, 0x71, 0x7a, 0x63, 0x32, 0x71, 0x69, 0x73, 0x33, 0x6a, 0x32, 0x71, 0x66, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x6b, 0x69, 0x39, 0x64, 0x36, 0x70, 0x63, 0x64, 0x76, 0x73, 0x34, 0x73, 0x38, 0x64, 0x64, 0x7a, 0x72, 0x72, 0x68, 0x37, 0x35, 0x78, 0x6e, 0x68, 0x79, 0x36, 0x6b, 0x66, 0x7a, 0x39, 0x68, 0x38, 0x69, 0x37, 0x69, 0x6e, 0x70, 0x68, 0x72, 0x64, 0x79, 0x69, 0x63, 0x66, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndamwn2hw4uhjg8s7ix9cbtjgusrn2cj7e8vz348ggrwemgr")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x5a, 0x13, 0xef, 0xf5, 0x88, 0x2a, 0x84, 0x31, 0x6e, 0x31, 0xb2, 0xc2, 0x6e, 0xc4, 0x0c, 0xe2, 0x54, 0x1f, 0x79, 0x95, 0x2c, 0x6a, 0xb2, 0x3d, 0xe0, 0x2b, 0x1e, 0x23, 0x5e, 0x3b, 0x22, 0xd1}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWJwYmg1OXh0YXhpaW5tcWdnM25lNXllYnZ0ZmloNTN1d3lneG50NzZheHQ2aTQ4aG50cGRueGM5a3YzdzZ0awAQTcdmlXTFbmRhbXduMmh3NHVoamc4czdpeDljYnRqZ3Vzcm4yY2o3ZTh2ejM0OGdncndlbWdyeTlOM0J4WHg3a0FMTFErOQ==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x70, 0x62, 0x68, 0x35, 0x39, 0x78, 0x74, 0x61, 0x78, 0x69, 0x69, 0x6e, 0x6d, 0x71, 0x67, 0x67, 0x33, 0x6e, 0x65, 0x35, 0x79, 0x65, 0x62, 0x76, 0x74, 0x66, 0x69, 0x68, 0x35, 0x33, 0x75, 0x77, 0x79, 0x67, 0x78, 0x6e, 0x74, 0x37, 0x36, 0x61, 0x78, 0x74, 0x36, 0x69, 0x34, 0x38, 0x68, 0x6e, 0x74, 0x70, 0x64, 0x6e, 0x78, 0x63, 0x39, 0x6b, 0x76, 0x33, 0x77, 0x36, 0x74, 0x6b, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x6d, 0x77, 0x6e, 0x32, 0x68, 0x77, 0x34, 0x75, 0x68, 0x6a, 0x67, 0x38, 0x73, 0x37, 0x69, 0x78, 0x39, 0x63, 0x62, 0x74, 0x6a, 0x67, 0x75, 0x73, 0x72, 0x6e, 0x32, 0x63, 0x6a, 0x37, 0x65, 0x38, 0x76, 0x7a, 0x33, 0x34, 0x38, 0x67, 0x67, 0x72, 0x77, 0x65, 0x6d, 0x67, 0x72, 0x79, 0x39, 0x4e, 0x33, 0x42, 0x78, 0x58, 0x78, 0x37, 0x6b, 0x41, 0x4c, 0x4c, 0x51, 0x2b, 0x39}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: y9N3BxXx7kALLQ+9
				[]byte{0xcb, 0xd3, 0x77, 0x07, 0x15, 0xf1, 0xee, 0x40, 0x0b, 0x2d, 0x0f, 0xbd},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: y9N3BxXx7kALLQ+9
				[]byte{0xcb, 0xd3, 0x77, 0x07, 0x15, 0xf1, 0xee, 0x40, 0x0b, 0x2d, 0x0f, 0xbd},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndaizxfvfasbehih7hd3r2fb6t5ae9fnvx68z38y6udw2hvh")
	require.NoError(t, err)

	// bmRhaXp4ZnZmYXNiZWhpaDdoZDNyMmZiNnQ1YWU5Zm52eDY4ejM4eTZ1ZHcyaHZoAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x69, 0x7a, 0x78, 0x66, 0x76, 0x66, 0x61, 0x73, 0x62, 0x65, 0x68, 0x69, 0x68, 0x37, 0x68, 0x64, 0x33, 0x72, 0x32, 0x66, 0x62, 0x36, 0x74, 0x35, 0x61, 0x65, 0x39, 0x66, 0x6e, 0x76, 0x78, 0x36, 0x38, 0x7a, 0x33, 0x38, 0x79, 0x36, 0x75, 0x64, 0x77, 0x32, 0x68, 0x76, 0x68, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndab44k5uefuq82uwxyap952zj2bn76ut55vyk3h4td42tav")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFiNDRrNXVlZnVxODJ1d3h5YXA5NTJ6ajJibjc2dXQ1NXZ5azNoNHRkNDJ0YXY=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x62, 0x34, 0x34, 0x6b, 0x35, 0x75, 0x65, 0x66, 0x75, 0x71, 0x38, 0x32, 0x75, 0x77, 0x78, 0x79, 0x61, 0x70, 0x39, 0x35, 0x32, 0x7a, 0x6a, 0x32, 0x62, 0x6e, 0x37, 0x36, 0x75, 0x74, 0x35, 0x35, 0x76, 0x79, 0x6b, 0x33, 0x68, 0x34, 0x74, 0x64, 0x34, 0x32, 0x74, 0x61, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndaq4ryk9qngej8npyeetteg8npfy348kt3iujznq5k2n2ci")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndab9mzbsiie8pqzex8qx9vftfjiiieqhadrzspnrpq932vy")
	require.NoError(t, err)

	// bmRhYjltemJzaWllOHBxemV4OHF4OXZmdGZqaWlpZXFoYWRyenNwbnJwcTkzMnZ5AAjSrCLE0zRuZGFxNHJ5azlxbmdlajhucHllZXR0ZWc4bnBmeTM0OGt0M2l1anpucTVrMm4yY2k=
	expect := []byte{0x6e, 0x64, 0x61, 0x62, 0x39, 0x6d, 0x7a, 0x62, 0x73, 0x69, 0x69, 0x65, 0x38, 0x70, 0x71, 0x7a, 0x65, 0x78, 0x38, 0x71, 0x78, 0x39, 0x76, 0x66, 0x74, 0x66, 0x6a, 0x69, 0x69, 0x69, 0x65, 0x71, 0x68, 0x61, 0x64, 0x72, 0x7a, 0x73, 0x70, 0x6e, 0x72, 0x70, 0x71, 0x39, 0x33, 0x32, 0x76, 0x79, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x71, 0x34, 0x72, 0x79, 0x6b, 0x39, 0x71, 0x6e, 0x67, 0x65, 0x6a, 0x38, 0x6e, 0x70, 0x79, 0x65, 0x65, 0x74, 0x74, 0x65, 0x67, 0x38, 0x6e, 0x70, 0x66, 0x79, 0x33, 0x34, 0x38, 0x6b, 0x74, 0x33, 0x69, 0x75, 0x6a, 0x7a, 0x6e, 0x71, 0x35, 0x6b, 0x32, 0x6e, 0x32, 0x63, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndaca2c8m3wmjz9pj9b64erpdxvrr7f7iuc6c7sfcpwky5ir")
	require.NoError(t, err)

	// bmRhY2EyYzhtM3dtano5cGo5YjY0ZXJwZHh2cnI3ZjdpdWM2YzdzZmNwd2t5NWlyAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x61, 0x32, 0x63, 0x38, 0x6d, 0x33, 0x77, 0x6d, 0x6a, 0x7a, 0x39, 0x70, 0x6a, 0x39, 0x62, 0x36, 0x34, 0x65, 0x72, 0x70, 0x64, 0x78, 0x76, 0x72, 0x72, 0x37, 0x66, 0x37, 0x69, 0x75, 0x63, 0x36, 0x63, 0x37, 0x73, 0x66, 0x63, 0x70, 0x77, 0x6b, 0x79, 0x35, 0x69, 0x72, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndamahsh59wbkzue4pac5iqikgfwn7i4y435ncebq4mavpfg")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhbWFoc2g1OXdia3p1ZTRwYWM1aXFpa2dmd243aTR5NDM1bmNlYnE0bWF2cGZn
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x6d, 0x61, 0x68, 0x73, 0x68, 0x35, 0x39, 0x77, 0x62, 0x6b, 0x7a, 0x75, 0x65, 0x34, 0x70, 0x61, 0x63, 0x35, 0x69, 0x71, 0x69, 0x6b, 0x67, 0x66, 0x77, 0x6e, 0x37, 0x69, 0x34, 0x79, 0x34, 0x33, 0x35, 0x6e, 0x63, 0x65, 0x62, 0x71, 0x34, 0x6d, 0x61, 0x76, 0x70, 0x66, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndaktppekmrq2uwjbc4negn8hcm386trzf524e327jsgu6wx")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFrdHBwZWttcnEydXdqYmM0bmVnbjhoY20zODZ0cnpmNTI0ZTMyN2pzZ3U2d3g=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x6b, 0x74, 0x70, 0x70, 0x65, 0x6b, 0x6d, 0x72, 0x71, 0x32, 0x75, 0x77, 0x6a, 0x62, 0x63, 0x34, 0x6e, 0x65, 0x67, 0x6e, 0x38, 0x68, 0x63, 0x6d, 0x33, 0x38, 0x36, 0x74, 0x72, 0x7a, 0x66, 0x35, 0x32, 0x34, 0x65, 0x33, 0x32, 0x37, 0x6a, 0x73, 0x67, 0x75, 0x36, 0x77, 0x78}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndaa5er57n7ma8d7yhmikdcs4rig88censnnwfcvtvgai26f")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndaa948scpwzanufazfdi2wnaybp3cq2ahxtc3yt47b2hynb")
	require.NoError(t, err)

	// bmRhYTk0OHNjcHd6YW51ZmF6ZmRpMnduYXlicDNjcTJhaHh0YzN5dDQ3YjJoeW5iAAz/orpRehFuZGFhNWVyNTduN21hOGQ3eWhtaWtkY3M0cmlnODhjZW5zbm53ZmN2dHZnYWkyNmY=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x39, 0x34, 0x38, 0x73, 0x63, 0x70, 0x77, 0x7a, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x7a, 0x66, 0x64, 0x69, 0x32, 0x77, 0x6e, 0x61, 0x79, 0x62, 0x70, 0x33, 0x63, 0x71, 0x32, 0x61, 0x68, 0x78, 0x74, 0x63, 0x33, 0x79, 0x74, 0x34, 0x37, 0x62, 0x32, 0x68, 0x79, 0x6e, 0x62, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x61, 0x35, 0x65, 0x72, 0x35, 0x37, 0x6e, 0x37, 0x6d, 0x61, 0x38, 0x64, 0x37, 0x79, 0x68, 0x6d, 0x69, 0x6b, 0x64, 0x63, 0x73, 0x34, 0x72, 0x69, 0x67, 0x38, 0x38, 0x63, 0x65, 0x6e, 0x73, 0x6e, 0x6e, 0x77, 0x66, 0x63, 0x76, 0x74, 0x76, 0x67, 0x61, 0x69, 0x32, 0x36, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndapp8q4vzqqt2nn3nghaiy3umfa6ur68pkbiqj6sq64cjgm")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xbf, 0xfb, 0x32, 0x16, 0x26, 0xb5, 0x71, 0x0b, 0xe9, 0x34, 0x35, 0xd8, 0x34, 0xba, 0x31, 0x60, 0xd8, 0x88, 0x2e, 0x41, 0x1c, 0xfb, 0xe6, 0x57, 0x93, 0x0e, 0x67, 0x90, 0x65, 0x61, 0x7e, 0xba}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x72, 0xde, 0xae, 0x2c, 0x8b, 0x3f, 0xa0, 0x9f, 0x4e, 0x1a, 0x1f, 0x31, 0x39, 0xb4, 0x80, 0x5e, 0x76, 0x23, 0x4f, 0x67, 0xdd, 0x57, 0xa1, 0xe4, 0xb4, 0x66, 0x40, 0x62, 0x28, 0x88, 0xc3, 0xc4}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWM5OXluc3llNDR6Y2M5amdzNDdzcGY0Z2ZzcHRjYnFpZXFyejN1enVuaGdyZWRmbmY5bXdxdWpzN3Fmem00cwAZX/GDxHNZbmRhcHA4cTR2enFxdDJubjNuZ2hhaXkzdW1mYTZ1cjY4cGtiaXFqNnNxNjRjamdtbnB1YmE4amFkdGJiZWIzcDdtdG50bjk0Ymg0cWRpcnZjcXB3c2JyaG5pNHJuOXF4cmlyZXl0dmVhMnRpdGRiNmlxamNpamV3eThwbVQySXYyVFhrNTdmWjNJRS8=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x39, 0x39, 0x79, 0x6e, 0x73, 0x79, 0x65, 0x34, 0x34, 0x7a, 0x63, 0x63, 0x39, 0x6a, 0x67, 0x73, 0x34, 0x37, 0x73, 0x70, 0x66, 0x34, 0x67, 0x66, 0x73, 0x70, 0x74, 0x63, 0x62, 0x71, 0x69, 0x65, 0x71, 0x72, 0x7a, 0x33, 0x75, 0x7a, 0x75, 0x6e, 0x68, 0x67, 0x72, 0x65, 0x64, 0x66, 0x6e, 0x66, 0x39, 0x6d, 0x77, 0x71, 0x75, 0x6a, 0x73, 0x37, 0x71, 0x66, 0x7a, 0x6d, 0x34, 0x73, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x70, 0x70, 0x38, 0x71, 0x34, 0x76, 0x7a, 0x71, 0x71, 0x74, 0x32, 0x6e, 0x6e, 0x33, 0x6e, 0x67, 0x68, 0x61, 0x69, 0x79, 0x33, 0x75, 0x6d, 0x66, 0x61, 0x36, 0x75, 0x72, 0x36, 0x38, 0x70, 0x6b, 0x62, 0x69, 0x71, 0x6a, 0x36, 0x73, 0x71, 0x36, 0x34, 0x63, 0x6a, 0x67, 0x6d, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x33, 0x70, 0x37, 0x6d, 0x74, 0x6e, 0x74, 0x6e, 0x39, 0x34, 0x62, 0x68, 0x34, 0x71, 0x64, 0x69, 0x72, 0x76, 0x63, 0x71, 0x70, 0x77, 0x73, 0x62, 0x72, 0x68, 0x6e, 0x69, 0x34, 0x72, 0x6e, 0x39, 0x71, 0x78, 0x72, 0x69, 0x72, 0x65, 0x79, 0x74, 0x76, 0x65, 0x61, 0x32, 0x74, 0x69, 0x74, 0x64, 0x62, 0x36, 0x69, 0x71, 0x6a, 0x63, 0x69, 0x6a, 0x65, 0x77, 0x79, 0x38, 0x70, 0x6d, 0x54, 0x32, 0x49, 0x76, 0x32, 0x54, 0x58, 0x6b, 0x35, 0x37, 0x66, 0x5a, 0x33, 0x49, 0x45, 0x2f}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: T2Iv2TXk57fZ3IE/
				[]byte{0x4f, 0x62, 0x2f, 0xd9, 0x35, 0xe4, 0xe7, 0xb7, 0xd9, 0xdc, 0x81, 0x3f},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: T2Iv2TXk57fZ3IE/
				[]byte{0x4f, 0x62, 0x2f, 0xd9, 0x35, 0xe4, 0xe7, 0xb7, 0xd9, 0xdc, 0x81, 0x3f},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndaiyhsh4pw2zmzicrcs54fp4cwyxdqrz74de95szed4n3si")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndamvr74874ttnjw9ur26qfxqam66rtc7wvyjbq2763f7sqc")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFtdnI3NDg3NHR0bmp3OXVyMjZxZnhxYW02NnJ0Yzd3dnlqYnEyNzYzZjdzcWNuZGFpeWhzaDRwdzJ6bXppY3JjczU0ZnA0Y3d5eGRxcno3NGRlOTVzemVkNG4zc2k=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x6d, 0x76, 0x72, 0x37, 0x34, 0x38, 0x37, 0x34, 0x74, 0x74, 0x6e, 0x6a, 0x77, 0x39, 0x75, 0x72, 0x32, 0x36, 0x71, 0x66, 0x78, 0x71, 0x61, 0x6d, 0x36, 0x36, 0x72, 0x74, 0x63, 0x37, 0x77, 0x76, 0x79, 0x6a, 0x62, 0x71, 0x32, 0x37, 0x36, 0x33, 0x66, 0x37, 0x73, 0x71, 0x63, 0x6e, 0x64, 0x61, 0x69, 0x79, 0x68, 0x73, 0x68, 0x34, 0x70, 0x77, 0x32, 0x7a, 0x6d, 0x7a, 0x69, 0x63, 0x72, 0x63, 0x73, 0x35, 0x34, 0x66, 0x70, 0x34, 0x63, 0x77, 0x79, 0x78, 0x64, 0x71, 0x72, 0x7a, 0x37, 0x34, 0x64, 0x65, 0x39, 0x35, 0x73, 0x7a, 0x65, 0x64, 0x34, 0x6e, 0x33, 0x73, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndakraqtff7r9vuj5frjk6sa9ccn85d5pe8w36rqiizxu5uf")
	require.NoError(t, err)

	// dU1lWU1tdnVQYk13Ym9UN25kYWtyYXF0ZmY3cjl2dWo1ZnJqazZzYTljY244NWQ1cGU4dzM2cnFpaXp4dTV1ZnN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x75, 0x4d, 0x65, 0x59, 0x4d, 0x6d, 0x76, 0x75, 0x50, 0x62, 0x4d, 0x77, 0x62, 0x6f, 0x54, 0x37, 0x6e, 0x64, 0x61, 0x6b, 0x72, 0x61, 0x71, 0x74, 0x66, 0x66, 0x37, 0x72, 0x39, 0x76, 0x75, 0x6a, 0x35, 0x66, 0x72, 0x6a, 0x6b, 0x36, 0x73, 0x61, 0x39, 0x63, 0x63, 0x6e, 0x38, 0x35, 0x64, 0x35, 0x70, 0x65, 0x38, 0x77, 0x33, 0x36, 0x72, 0x71, 0x69, 0x69, 0x7a, 0x78, 0x75, 0x35, 0x75, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: uMeYMmvuPbMwboT7
				[]byte{0xb8, 0xc7, 0x98, 0x32, 0x6b, 0xee, 0x3d, 0xb3, 0x30, 0x6e, 0x84, 0xfb},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: uMeYMmvuPbMwboT7
				[]byte{0xb8, 0xc7, 0x98, 0x32, 0x6b, 0xee, 0x3d, 0xb3, 0x30, 0x6e, 0x84, 0xfb},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndachwrjs2xverhe5767xtfsr7cg8exdu6t77idbwbkauzjz")
	require.NoError(t, err)

	// bmRhY2h3cmpzMnh2ZXJoZTU3Njd4dGZzcjdjZzhleGR1NnQ3N2lkYndia2F1emp6AA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x68, 0x77, 0x72, 0x6a, 0x73, 0x32, 0x78, 0x76, 0x65, 0x72, 0x68, 0x65, 0x35, 0x37, 0x36, 0x37, 0x78, 0x74, 0x66, 0x73, 0x72, 0x37, 0x63, 0x67, 0x38, 0x65, 0x78, 0x64, 0x75, 0x36, 0x74, 0x37, 0x37, 0x69, 0x64, 0x62, 0x77, 0x62, 0x6b, 0x61, 0x75, 0x7a, 0x6a, 0x7a, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndapahs662546yyh7zmr86ai6wcunxmij9jqu5r44mm9svg3")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndadkkug9fzvk9yp7cwybqy4hwv5ci3nssfsqmmhtjvt6fx8")
	require.NoError(t, err)

	// bmRhZGtrdWc5Znp2azl5cDdjd3licXk0aHd2NWNpM25zc2ZzcW1taHRqdnQ2Zng4MXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYXBhaHM2NjI1NDZ5eWg3em1yODZhaTZ3Y3VueG1pajlqcXU1cjQ0bW05c3ZnMw==
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x6b, 0x6b, 0x75, 0x67, 0x39, 0x66, 0x7a, 0x76, 0x6b, 0x39, 0x79, 0x70, 0x37, 0x63, 0x77, 0x79, 0x62, 0x71, 0x79, 0x34, 0x68, 0x77, 0x76, 0x35, 0x63, 0x69, 0x33, 0x6e, 0x73, 0x73, 0x66, 0x73, 0x71, 0x6d, 0x6d, 0x68, 0x74, 0x6a, 0x76, 0x74, 0x36, 0x66, 0x78, 0x38, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x70, 0x61, 0x68, 0x73, 0x36, 0x36, 0x32, 0x35, 0x34, 0x36, 0x79, 0x79, 0x68, 0x37, 0x7a, 0x6d, 0x72, 0x38, 0x36, 0x61, 0x69, 0x36, 0x77, 0x63, 0x75, 0x6e, 0x78, 0x6d, 0x69, 0x6a, 0x39, 0x6a, 0x71, 0x75, 0x35, 0x72, 0x34, 0x34, 0x6d, 0x6d, 0x39, 0x73, 0x76, 0x67, 0x33}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmotONnB1TkczbTRBbUNQaHNlAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x4e, 0x36, 0x70, 0x75, 0x4e, 0x47, 0x33, 0x6d, 0x34, 0x41, 0x6d, 0x43, 0x50, 0x68, 0x73, 0x65, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: N6puNG3m4AmCPhse
				[]byte{0x37, 0xaa, 0x6e, 0x34, 0x6d, 0xe6, 0xe0, 0x09, 0x82, 0x3e, 0x1b, 0x1e},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: N6puNG3m4AmCPhse
				[]byte{0x37, 0xaa, 0x6e, 0x34, 0x6d, 0xe6, 0xe0, 0x09, 0x82, 0x3e, 0x1b, 0x1e},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndaj4ybv8rzg9ih9q6sc3uf7eczud73767zfk8q5ebfcit57")
	require.NoError(t, err)

	// bmRhajR5YnY4cnpnOWloOXE2c2MzdWY3ZWN6dWQ3Mzc2N3pmazhxNWViZmNpdDU3AAJeEXA5N5c=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x34, 0x79, 0x62, 0x76, 0x38, 0x72, 0x7a, 0x67, 0x39, 0x69, 0x68, 0x39, 0x71, 0x36, 0x73, 0x63, 0x33, 0x75, 0x66, 0x37, 0x65, 0x63, 0x7a, 0x75, 0x64, 0x37, 0x33, 0x37, 0x36, 0x37, 0x7a, 0x66, 0x6b, 0x38, 0x71, 0x35, 0x65, 0x62, 0x66, 0x63, 0x69, 0x74, 0x35, 0x37, 0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndadjustyg2qj7mxqe3krd7xc65d9mrgus4gjd5gi535x56c")
	require.NoError(t, err)

	// ABP6yCVBcNBuZGFkanVzdHlnMnFqN214cWUza3JkN3hjNjVkOW1yZ3VzNGdqZDVnaTUzNXg1NmM=
	expect := []byte{0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0, 0x6e, 0x64, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x79, 0x67, 0x32, 0x71, 0x6a, 0x37, 0x6d, 0x78, 0x71, 0x65, 0x33, 0x6b, 0x72, 0x64, 0x37, 0x78, 0x63, 0x36, 0x35, 0x64, 0x39, 0x6d, 0x72, 0x67, 0x75, 0x73, 0x34, 0x67, 0x6a, 0x64, 0x35, 0x67, 0x69, 0x35, 0x33, 0x35, 0x78, 0x35, 0x36, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA2S+t7X5soACfdnZnjooQ==
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				3820780875409098,
				2805298263287969,
			),
		},
		{
			"with signature",
			NewIssue(
				3820780875409098,
				2805298263287969,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndaifumv46rdt68tte6uv4hpn59bucs9g2fvzvbyuk4u33kr")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndanfw583j49u3dacjv3zei8z5ftcx4cv8q7fgerpcxcwbyg")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x1a, 0xbc, 0xdb, 0x48, 0xfb, 0x60, 0x0b, 0x79, 0x32, 0x0b, 0x40, 0x72, 0xf5, 0x92, 0xef, 0xfb, 0x6b, 0x20, 0xd7, 0x09, 0x9c, 0xce, 0x4d, 0x2c, 0xa3, 0xf9, 0xdc, 0x24, 0xa1, 0x1b, 0xc1, 0xb2}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x2a, 0xda, 0x7a, 0xa6, 0x41, 0x6c, 0x9f, 0x9f, 0xd8, 0x31, 0x45, 0xdd, 0xe0, 0x6b, 0x9e, 0x17, 0x77, 0xda, 0x9a, 0xf2, 0x13, 0x44, 0x30, 0xae, 0x22, 0x3b, 0xc5, 0xeb, 0xce, 0x9b, 0x17, 0x68, 0x08, 0x2b, 0x48, 0x83, 0xe5, 0x44, 0xf5, 0x4b, 0xd4, 0xd1, 0x39, 0x6c, 0x11, 0x73, 0x94, 0xe9, 0x7d, 0xa2, 0xba, 0xf0, 0x05, 0x3a, 0x1d, 0xe9, 0x5d, 0xc3, 0xc8, 0x9f, 0xee, 0x5d, 0xcd, 0x26})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x2b, 0xa6, 0x26, 0xf3, 0x57, 0x1a, 0x1b, 0xd4, 0x06, 0xc8, 0xc6, 0x20, 0x52, 0x47, 0x60, 0x58, 0xf4, 0xfa, 0xf8, 0x98, 0x99, 0xdc, 0x46, 0xd7, 0x41, 0x4d, 0x61, 0x38, 0x87, 0x18, 0x1e, 0xc0}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndajd27nnmm6362k5j64dhah2ehxnp5vh46i9ca9www4tuar")
	require.NoError(t, err)

	// bmRhbmZ3NTgzajQ5dTNkYWNqdjN6ZWk4ejVmdGN4NGN2OHE3ZmdlcnBjeGN3YnlnbmRhamQyN25ubW02MzYyazVqNjRkaGFoMmVoeG5wNXZoNDZpOWNhOXd3dzR0dWFybnB1YmE4amFkdGJiZWFwbTN5NGk5cHNheThqdWJwYWhmN251Nzk3eXlpZ3piZ3FuNnZqbndyNjcyamZiZHJhNWVrYzZyOTVocDJmNzF5NG02ZHQ1aDIxbTQ2czM0MzczNHVzYTRqYWR0Y2FmbXBoeGp1YnB1cjM5eWJ0aXpxOGE0NjhjNzU3eGd6dWNwY2RibXRjaHJjOHp2dzVjN3dhc2s0aXNydXdqN2ttNHZpdnU1YXRxcWtxdTlwY3ptMmFrcXM3N2ZxNmh1ZTk3M3E2NGpzZTJoYTNrOXZpbnB1YmE4amFkdGJiZWF4NG5qenZrNnBienhhZzNkZGNhd3VobmJucmo4ejJ2Y243MnR5emlmZ3ljcWVoZGFybmJ5dDZjdmZqZnRnZnNUbFl0bWNxUkdXVmVIeEsAB4MDVqpvQW5kYWlmdW12NDZyZHQ2OHR0ZTZ1djRocG41OWJ1Y3M5ZzJmdnp2Ynl1azR1MzNrcg==
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x66, 0x77, 0x35, 0x38, 0x33, 0x6a, 0x34, 0x39, 0x75, 0x33, 0x64, 0x61, 0x63, 0x6a, 0x76, 0x33, 0x7a, 0x65, 0x69, 0x38, 0x7a, 0x35, 0x66, 0x74, 0x63, 0x78, 0x34, 0x63, 0x76, 0x38, 0x71, 0x37, 0x66, 0x67, 0x65, 0x72, 0x70, 0x63, 0x78, 0x63, 0x77, 0x62, 0x79, 0x67, 0x6e, 0x64, 0x61, 0x6a, 0x64, 0x32, 0x37, 0x6e, 0x6e, 0x6d, 0x6d, 0x36, 0x33, 0x36, 0x32, 0x6b, 0x35, 0x6a, 0x36, 0x34, 0x64, 0x68, 0x61, 0x68, 0x32, 0x65, 0x68, 0x78, 0x6e, 0x70, 0x35, 0x76, 0x68, 0x34, 0x36, 0x69, 0x39, 0x63, 0x61, 0x39, 0x77, 0x77, 0x77, 0x34, 0x74, 0x75, 0x61, 0x72, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x70, 0x6d, 0x33, 0x79, 0x34, 0x69, 0x39, 0x70, 0x73, 0x61, 0x79, 0x38, 0x6a, 0x75, 0x62, 0x70, 0x61, 0x68, 0x66, 0x37, 0x6e, 0x75, 0x37, 0x39, 0x37, 0x79, 0x79, 0x69, 0x67, 0x7a, 0x62, 0x67, 0x71, 0x6e, 0x36, 0x76, 0x6a, 0x6e, 0x77, 0x72, 0x36, 0x37, 0x32, 0x6a, 0x66, 0x62, 0x64, 0x72, 0x61, 0x35, 0x65, 0x6b, 0x63, 0x36, 0x72, 0x39, 0x35, 0x68, 0x70, 0x32, 0x66, 0x37, 0x31, 0x79, 0x34, 0x6d, 0x36, 0x64, 0x74, 0x35, 0x68, 0x32, 0x31, 0x6d, 0x34, 0x36, 0x73, 0x33, 0x34, 0x33, 0x37, 0x33, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x66, 0x6d, 0x70, 0x68, 0x78, 0x6a, 0x75, 0x62, 0x70, 0x75, 0x72, 0x33, 0x39, 0x79, 0x62, 0x74, 0x69, 0x7a, 0x71, 0x38, 0x61, 0x34, 0x36, 0x38, 0x63, 0x37, 0x35, 0x37, 0x78, 0x67, 0x7a, 0x75, 0x63, 0x70, 0x63, 0x64, 0x62, 0x6d, 0x74, 0x63, 0x68, 0x72, 0x63, 0x38, 0x7a, 0x76, 0x77, 0x35, 0x63, 0x37, 0x77, 0x61, 0x73, 0x6b, 0x34, 0x69, 0x73, 0x72, 0x75, 0x77, 0x6a, 0x37, 0x6b, 0x6d, 0x34, 0x76, 0x69, 0x76, 0x75, 0x35, 0x61, 0x74, 0x71, 0x71, 0x6b, 0x71, 0x75, 0x39, 0x70, 0x63, 0x7a, 0x6d, 0x32, 0x61, 0x6b, 0x71, 0x73, 0x37, 0x37, 0x66, 0x71, 0x36, 0x68, 0x75, 0x65, 0x39, 0x37, 0x33, 0x71, 0x36, 0x34, 0x6a, 0x73, 0x65, 0x32, 0x68, 0x61, 0x33, 0x6b, 0x39, 0x76, 0x69, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x78, 0x34, 0x6e, 0x6a, 0x7a, 0x76, 0x6b, 0x36, 0x70, 0x62, 0x7a, 0x78, 0x61, 0x67, 0x33, 0x64, 0x64, 0x63, 0x61, 0x77, 0x75, 0x68, 0x6e, 0x62, 0x6e, 0x72, 0x6a, 0x38, 0x7a, 0x32, 0x76, 0x63, 0x6e, 0x37, 0x32, 0x74, 0x79, 0x7a, 0x69, 0x66, 0x67, 0x79, 0x63, 0x71, 0x65, 0x68, 0x64, 0x61, 0x72, 0x6e, 0x62, 0x79, 0x74, 0x36, 0x63, 0x76, 0x66, 0x6a, 0x66, 0x74, 0x67, 0x66, 0x73, 0x54, 0x6c, 0x59, 0x74, 0x6d, 0x63, 0x71, 0x52, 0x47, 0x57, 0x56, 0x65, 0x48, 0x78, 0x4b, 0x00, 0x07, 0x83, 0x03, 0x56, 0xaa, 0x6f, 0x41, 0x6e, 0x64, 0x61, 0x69, 0x66, 0x75, 0x6d, 0x76, 0x34, 0x36, 0x72, 0x64, 0x74, 0x36, 0x38, 0x74, 0x74, 0x65, 0x36, 0x75, 0x76, 0x34, 0x68, 0x70, 0x6e, 0x35, 0x39, 0x62, 0x75, 0x63, 0x73, 0x39, 0x67, 0x32, 0x66, 0x76, 0x7a, 0x76, 0x62, 0x79, 0x75, 0x6b, 0x34, 0x75, 0x33, 0x33, 0x6b, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: sTlYtmcqRGWVeHxK
				[]byte{0xb1, 0x39, 0x58, 0xb6, 0x67, 0x2a, 0x44, 0x65, 0x95, 0x78, 0x7c, 0x4a},
				createchildaccountChildDelegationNode,
				2114375199125313,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: sTlYtmcqRGWVeHxK
				[]byte{0xb1, 0x39, 0x58, 0xb6, 0x67, 0x2a, 0x44, 0x65, 0x95, 0x78, 0x7c, 0x4a},
				createchildaccountChildDelegationNode,
				2114375199125313,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABToHt5FZKQACPi9Ppmz3A==
	expect := []byte{0x00, 0x14, 0xe8, 0x1e, 0xde, 0x45, 0x64, 0xa4, 0x00, 0x08, 0xf8, 0xbd, 0x3e, 0x99, 0xb3, 0xdc}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBhcGUgcWxlcXloeXogeXdqanBqenAgcmYgZ21vIGFmZXQgc2J6cmp4IAAO73omlHmPb2lKWURVa3kyODBzeU40dg==
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x61, 0x70, 0x65, 0x20, 0x71, 0x6c, 0x65, 0x71, 0x79, 0x68, 0x79, 0x7a, 0x20, 0x79, 0x77, 0x6a, 0x6a, 0x70, 0x6a, 0x7a, 0x70, 0x20, 0x72, 0x66, 0x20, 0x67, 0x6d, 0x6f, 0x20, 0x61, 0x66, 0x65, 0x74, 0x20, 0x73, 0x62, 0x7a, 0x72, 0x6a, 0x78, 0x20, 0x00, 0x0e, 0xef, 0x7a, 0x26, 0x94, 0x79, 0x8f, 0x6f, 0x69, 0x4a, 0x59, 0x44, 0x55, 0x6b, 0x79, 0x32, 0x38, 0x30, 0x73, 0x79, 0x4e, 0x34, 0x76}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: oiJYDUky280syN4v
				[]byte{0xa2, 0x22, 0x58, 0x0d, 0x49, 0x32, 0xdb, 0xcd, 0x2c, 0xc8, 0xde, 0x2f},
				4203957586262415,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: oiJYDUky280syN4v
				[]byte{0xa2, 0x22, 0x58, 0x0d, 0x49, 0x32, 0xdb, 0xcd, 0x2c, 0xc8, 0xde, 0x2f},
				4203957586262415,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
