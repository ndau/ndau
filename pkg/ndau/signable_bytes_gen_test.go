package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndad9djvunc3c2yg896dpdy94akxwvxaa9fqx6ddxgvxwjcb")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndajbt8ssqfwgrhmpwer7w7n7n8d7n27ecr8fuue5swkwvgm")
	require.NoError(t, err)

	// bmRhamJ0OHNzcWZ3Z3JobXB3ZXI3dzduN244ZDduMjdlY3I4ZnV1ZTVzd2t3dmdtAAWCIQf8/70AApoPXz8aEm5kYWQ5ZGp2dW5jM2MyeWc4OTZkcGR5OTRha3h3dnhhYTlmcXg2ZGR4Z3Z4d2pjYg==
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x62, 0x74, 0x38, 0x73, 0x73, 0x71, 0x66, 0x77, 0x67, 0x72, 0x68, 0x6d, 0x70, 0x77, 0x65, 0x72, 0x37, 0x77, 0x37, 0x6e, 0x37, 0x6e, 0x38, 0x64, 0x37, 0x6e, 0x32, 0x37, 0x65, 0x63, 0x72, 0x38, 0x66, 0x75, 0x75, 0x65, 0x35, 0x73, 0x77, 0x6b, 0x77, 0x76, 0x67, 0x6d, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x64, 0x39, 0x64, 0x6a, 0x76, 0x75, 0x6e, 0x63, 0x33, 0x63, 0x32, 0x79, 0x67, 0x38, 0x39, 0x36, 0x64, 0x70, 0x64, 0x79, 0x39, 0x34, 0x61, 0x6b, 0x78, 0x77, 0x76, 0x78, 0x61, 0x61, 0x39, 0x66, 0x71, 0x78, 0x36, 0x64, 0x64, 0x78, 0x67, 0x76, 0x78, 0x77, 0x6a, 0x63, 0x62}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndamxzx8xhmvysanq2ux5azdb875x2yyitntuhayhbzdkhct")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xc4, 0x42, 0xb3, 0xa4, 0x44, 0x7c, 0x96, 0x65, 0x49, 0xcc, 0xc7, 0x05, 0xd0, 0xd2, 0x60, 0x00, 0xb4, 0x78, 0xc0, 0x60, 0xda, 0x16, 0x67, 0xc4, 0x80, 0x6d, 0x6e, 0x06, 0x26, 0x07, 0x84, 0x61}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWRjZWZuN2VpdDhqbjNrajN2ZHNtd2d1bmFhbWk4Z2FuZHBibjM4ZXNieXk2YnRnYThjZ2NyZnU1M3hhcThkdQAQTcdmlXTFbmRhbXh6eDh4aG12eXNhbnEydXg1YXpkYjg3NXgyeXlpdG50dWhheWhiemRraGN0Y004TmxEMkFIS0ZhQ0xrNA==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x63, 0x65, 0x66, 0x6e, 0x37, 0x65, 0x69, 0x74, 0x38, 0x6a, 0x6e, 0x33, 0x6b, 0x6a, 0x33, 0x76, 0x64, 0x73, 0x6d, 0x77, 0x67, 0x75, 0x6e, 0x61, 0x61, 0x6d, 0x69, 0x38, 0x67, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x6e, 0x33, 0x38, 0x65, 0x73, 0x62, 0x79, 0x79, 0x36, 0x62, 0x74, 0x67, 0x61, 0x38, 0x63, 0x67, 0x63, 0x72, 0x66, 0x75, 0x35, 0x33, 0x78, 0x61, 0x71, 0x38, 0x64, 0x75, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x6d, 0x78, 0x7a, 0x78, 0x38, 0x78, 0x68, 0x6d, 0x76, 0x79, 0x73, 0x61, 0x6e, 0x71, 0x32, 0x75, 0x78, 0x35, 0x61, 0x7a, 0x64, 0x62, 0x38, 0x37, 0x35, 0x78, 0x32, 0x79, 0x79, 0x69, 0x74, 0x6e, 0x74, 0x75, 0x68, 0x61, 0x79, 0x68, 0x62, 0x7a, 0x64, 0x6b, 0x68, 0x63, 0x74, 0x63, 0x4d, 0x38, 0x4e, 0x6c, 0x44, 0x32, 0x41, 0x48, 0x4b, 0x46, 0x61, 0x43, 0x4c, 0x6b, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: cM8NlD2AHKFaCLk4
				[]byte{0x70, 0xcf, 0x0d, 0x94, 0x3d, 0x80, 0x1c, 0xa1, 0x5a, 0x08, 0xb9, 0x38},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: cM8NlD2AHKFaCLk4
				[]byte{0x70, 0xcf, 0x0d, 0x94, 0x3d, 0x80, 0x1c, 0xa1, 0x5a, 0x08, 0xb9, 0x38},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndaemx6bvuvyayrf8nzqgay26v7vx8a4ifr6s9vefusttzm7")
	require.NoError(t, err)

	// bmRhZW14NmJ2dXZ5YXlyZjhuenFnYXkyNnY3dng4YTRpZnI2czl2ZWZ1c3R0em03AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x6d, 0x78, 0x36, 0x62, 0x76, 0x75, 0x76, 0x79, 0x61, 0x79, 0x72, 0x66, 0x38, 0x6e, 0x7a, 0x71, 0x67, 0x61, 0x79, 0x32, 0x36, 0x76, 0x37, 0x76, 0x78, 0x38, 0x61, 0x34, 0x69, 0x66, 0x72, 0x36, 0x73, 0x39, 0x76, 0x65, 0x66, 0x75, 0x73, 0x74, 0x74, 0x7a, 0x6d, 0x37, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndanav55xasmnzyq39jdkisfd5hwxusut2dxamk9yxfarwes")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFuYXY1NXhhc21uenlxMzlqZGtpc2ZkNWh3eHVzdXQyZHhhbWs5eXhmYXJ3ZXM=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x61, 0x76, 0x35, 0x35, 0x78, 0x61, 0x73, 0x6d, 0x6e, 0x7a, 0x79, 0x71, 0x33, 0x39, 0x6a, 0x64, 0x6b, 0x69, 0x73, 0x66, 0x64, 0x35, 0x68, 0x77, 0x78, 0x75, 0x73, 0x75, 0x74, 0x32, 0x64, 0x78, 0x61, 0x6d, 0x6b, 0x39, 0x79, 0x78, 0x66, 0x61, 0x72, 0x77, 0x65, 0x73}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndar77g6n2x4p5gjk28gv9778vac5adi8f37tw8ty6uewv7t")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndadiv9taenxgma4x6x3m6aryjagkxuum2kxcsqcmeep23qe")
	require.NoError(t, err)

	// bmRhZGl2OXRhZW54Z21hNHg2eDNtNmFyeWphZ2t4dXVtMmt4Y3NxY21lZXAyM3FlAAjSrCLE0zRuZGFyNzdnNm4yeDRwNWdqazI4Z3Y5Nzc4dmFjNWFkaThmMzd0dzh0eTZ1ZXd2N3Q=
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x69, 0x76, 0x39, 0x74, 0x61, 0x65, 0x6e, 0x78, 0x67, 0x6d, 0x61, 0x34, 0x78, 0x36, 0x78, 0x33, 0x6d, 0x36, 0x61, 0x72, 0x79, 0x6a, 0x61, 0x67, 0x6b, 0x78, 0x75, 0x75, 0x6d, 0x32, 0x6b, 0x78, 0x63, 0x73, 0x71, 0x63, 0x6d, 0x65, 0x65, 0x70, 0x32, 0x33, 0x71, 0x65, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x72, 0x37, 0x37, 0x67, 0x36, 0x6e, 0x32, 0x78, 0x34, 0x70, 0x35, 0x67, 0x6a, 0x6b, 0x32, 0x38, 0x67, 0x76, 0x39, 0x37, 0x37, 0x38, 0x76, 0x61, 0x63, 0x35, 0x61, 0x64, 0x69, 0x38, 0x66, 0x33, 0x37, 0x74, 0x77, 0x38, 0x74, 0x79, 0x36, 0x75, 0x65, 0x77, 0x76, 0x37, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndaj8rz4ij9hf9zmz5p2vbsduxkeu4jwfi59akxtainu6bpa")
	require.NoError(t, err)

	// bmRhajhyejRpajloZjl6bXo1cDJ2YnNkdXhrZXU0andmaTU5YWt4dGFpbnU2YnBhAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x38, 0x72, 0x7a, 0x34, 0x69, 0x6a, 0x39, 0x68, 0x66, 0x39, 0x7a, 0x6d, 0x7a, 0x35, 0x70, 0x32, 0x76, 0x62, 0x73, 0x64, 0x75, 0x78, 0x6b, 0x65, 0x75, 0x34, 0x6a, 0x77, 0x66, 0x69, 0x35, 0x39, 0x61, 0x6b, 0x78, 0x74, 0x61, 0x69, 0x6e, 0x75, 0x36, 0x62, 0x70, 0x61, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndaehaewpj5npi4z7bua528a8hvx4dn544hudqx3ffgwhhrf")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhZWhhZXdwajVucGk0ejdidWE1MjhhOGh2eDRkbjU0NGh1ZHF4M2ZmZ3doaHJm
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x65, 0x68, 0x61, 0x65, 0x77, 0x70, 0x6a, 0x35, 0x6e, 0x70, 0x69, 0x34, 0x7a, 0x37, 0x62, 0x75, 0x61, 0x35, 0x32, 0x38, 0x61, 0x38, 0x68, 0x76, 0x78, 0x34, 0x64, 0x6e, 0x35, 0x34, 0x34, 0x68, 0x75, 0x64, 0x71, 0x78, 0x33, 0x66, 0x66, 0x67, 0x77, 0x68, 0x68, 0x72, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndak7f9d5pa69mxjcjmfwfza8q33bmefxqvzhyjzi7xgfd2s")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFrN2Y5ZDVwYTY5bXhqY2ptZndmemE4cTMzYm1lZnhxdnpoeWp6aTd4Z2ZkMnM=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x6b, 0x37, 0x66, 0x39, 0x64, 0x35, 0x70, 0x61, 0x36, 0x39, 0x6d, 0x78, 0x6a, 0x63, 0x6a, 0x6d, 0x66, 0x77, 0x66, 0x7a, 0x61, 0x38, 0x71, 0x33, 0x33, 0x62, 0x6d, 0x65, 0x66, 0x78, 0x71, 0x76, 0x7a, 0x68, 0x79, 0x6a, 0x7a, 0x69, 0x37, 0x78, 0x67, 0x66, 0x64, 0x32, 0x73}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndaemvamvjcuih46yxnan7syvxu8a7b8wisemr2wmhavtrju")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndagsqak4fwh8gtnnhw4f2c9cccc8npwq2arhak7wq47pq8p")
	require.NoError(t, err)

	// bmRhZ3NxYWs0ZndoOGd0bm5odzRmMmM5Y2NjYzhucHdxMmFyaGFrN3dxNDdwcThwAAz/orpRehFuZGFlbXZhbXZqY3VpaDQ2eXhuYW43c3l2eHU4YTdiOHdpc2VtcjJ3bWhhdnRyanU=
	expect := []byte{0x6e, 0x64, 0x61, 0x67, 0x73, 0x71, 0x61, 0x6b, 0x34, 0x66, 0x77, 0x68, 0x38, 0x67, 0x74, 0x6e, 0x6e, 0x68, 0x77, 0x34, 0x66, 0x32, 0x63, 0x39, 0x63, 0x63, 0x63, 0x63, 0x38, 0x6e, 0x70, 0x77, 0x71, 0x32, 0x61, 0x72, 0x68, 0x61, 0x6b, 0x37, 0x77, 0x71, 0x34, 0x37, 0x70, 0x71, 0x38, 0x70, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x65, 0x6d, 0x76, 0x61, 0x6d, 0x76, 0x6a, 0x63, 0x75, 0x69, 0x68, 0x34, 0x36, 0x79, 0x78, 0x6e, 0x61, 0x6e, 0x37, 0x73, 0x79, 0x76, 0x78, 0x75, 0x38, 0x61, 0x37, 0x62, 0x38, 0x77, 0x69, 0x73, 0x65, 0x6d, 0x72, 0x32, 0x77, 0x6d, 0x68, 0x61, 0x76, 0x74, 0x72, 0x6a, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndafngq542uzbv8d6ggbk2yhwiwtksaixv33vecrzezkf86t")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xdc, 0x9d, 0x4c, 0x85, 0x7e, 0x95, 0xd7, 0x09, 0xa2, 0x75, 0x09, 0x01, 0x03, 0x58, 0x82, 0xcc, 0xf2, 0x07, 0x85, 0x0a, 0xc0, 0xf1, 0x70, 0x9f, 0x89, 0xfe, 0x9a, 0x7a, 0x68, 0xfd, 0x45, 0x04}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xd7, 0xfd, 0x57, 0x84, 0x78, 0xd8, 0xe9, 0x78, 0xd7, 0xc5, 0x27, 0x3c, 0x97, 0x82, 0x23, 0x07, 0xed, 0x25, 0x4b, 0xe8, 0xef, 0xfb, 0xc5, 0xe8, 0x7b, 0x57, 0xfd, 0xf7, 0x17, 0xac, 0x8c, 0x41}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWRxajR2ZWZyNGs3cWNwY3F3ZXNjYTQyc21ncmViNmZibWFyYzZlOXRoOWp3OHZpOXhjc2pndDlhY3RrcDRmMwAZX/GDxHNZbmRhZm5ncTU0MnV6YnY4ZDZnZ2JrMnlod2l3dGtzYWl4djMzdmVjcnplemtmODZ0bnB1YmE4amFkdGJiZWRtOTR4NmVyZG5xdThnejJ3dnYzZjZjZW5kODRqa203ZHo5enRyaXJwbTk1NzJ6eHVnZWMzOXo2OG5mZGg4djI5cDQ5M0cycGdpNlJ3V1c=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x71, 0x6a, 0x34, 0x76, 0x65, 0x66, 0x72, 0x34, 0x6b, 0x37, 0x71, 0x63, 0x70, 0x63, 0x71, 0x77, 0x65, 0x73, 0x63, 0x61, 0x34, 0x32, 0x73, 0x6d, 0x67, 0x72, 0x65, 0x62, 0x36, 0x66, 0x62, 0x6d, 0x61, 0x72, 0x63, 0x36, 0x65, 0x39, 0x74, 0x68, 0x39, 0x6a, 0x77, 0x38, 0x76, 0x69, 0x39, 0x78, 0x63, 0x73, 0x6a, 0x67, 0x74, 0x39, 0x61, 0x63, 0x74, 0x6b, 0x70, 0x34, 0x66, 0x33, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x66, 0x6e, 0x67, 0x71, 0x35, 0x34, 0x32, 0x75, 0x7a, 0x62, 0x76, 0x38, 0x64, 0x36, 0x67, 0x67, 0x62, 0x6b, 0x32, 0x79, 0x68, 0x77, 0x69, 0x77, 0x74, 0x6b, 0x73, 0x61, 0x69, 0x78, 0x76, 0x33, 0x33, 0x76, 0x65, 0x63, 0x72, 0x7a, 0x65, 0x7a, 0x6b, 0x66, 0x38, 0x36, 0x74, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x6d, 0x39, 0x34, 0x78, 0x36, 0x65, 0x72, 0x64, 0x6e, 0x71, 0x75, 0x38, 0x67, 0x7a, 0x32, 0x77, 0x76, 0x76, 0x33, 0x66, 0x36, 0x63, 0x65, 0x6e, 0x64, 0x38, 0x34, 0x6a, 0x6b, 0x6d, 0x37, 0x64, 0x7a, 0x39, 0x7a, 0x74, 0x72, 0x69, 0x72, 0x70, 0x6d, 0x39, 0x35, 0x37, 0x32, 0x7a, 0x78, 0x75, 0x67, 0x65, 0x63, 0x33, 0x39, 0x7a, 0x36, 0x38, 0x6e, 0x66, 0x64, 0x68, 0x38, 0x76, 0x32, 0x39, 0x70, 0x34, 0x39, 0x33, 0x47, 0x32, 0x70, 0x67, 0x69, 0x36, 0x52, 0x77, 0x57, 0x57}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: 29p493G2pgi6RwWW
				[]byte{0xdb, 0xda, 0x78, 0xf7, 0x71, 0xb6, 0xa6, 0x08, 0xba, 0x47, 0x05, 0x96},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: 29p493G2pgi6RwWW
				[]byte{0xdb, 0xda, 0x78, 0xf7, 0x71, 0xb6, 0xa6, 0x08, 0xba, 0x47, 0x05, 0x96},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndaajqppqe4kecbty5k6rm8yr4gaj755i558pb8uispd68gh")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndam3ueqw2p775g2rweyhbvqbagrt8wgkh87prvkvqvczixx")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFtM3VlcXcycDc3NWcycndleWhidnFiYWdydDh3Z2toODdwcnZrdnF2Y3ppeHhuZGFhanFwcHFlNGtlY2J0eTVrNnJtOHlyNGdhajc1NWk1NThwYjh1aXNwZDY4Z2g=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x6d, 0x33, 0x75, 0x65, 0x71, 0x77, 0x32, 0x70, 0x37, 0x37, 0x35, 0x67, 0x32, 0x72, 0x77, 0x65, 0x79, 0x68, 0x62, 0x76, 0x71, 0x62, 0x61, 0x67, 0x72, 0x74, 0x38, 0x77, 0x67, 0x6b, 0x68, 0x38, 0x37, 0x70, 0x72, 0x76, 0x6b, 0x76, 0x71, 0x76, 0x63, 0x7a, 0x69, 0x78, 0x78, 0x6e, 0x64, 0x61, 0x61, 0x6a, 0x71, 0x70, 0x70, 0x71, 0x65, 0x34, 0x6b, 0x65, 0x63, 0x62, 0x74, 0x79, 0x35, 0x6b, 0x36, 0x72, 0x6d, 0x38, 0x79, 0x72, 0x34, 0x67, 0x61, 0x6a, 0x37, 0x35, 0x35, 0x69, 0x35, 0x35, 0x38, 0x70, 0x62, 0x38, 0x75, 0x69, 0x73, 0x70, 0x64, 0x36, 0x38, 0x67, 0x68}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndad286hpnpc5zxd27rkvtw68euef7f7t3m6t6picntcpzha")
	require.NoError(t, err)

	// Qzk5eGl0dXoyMVJ4UEg5N25kYWQyODZocG5wYzV6eGQyN3JrdnR3NjhldWVmN2Y3dDNtNnQ2cGljbnRjcHpoYXN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x43, 0x39, 0x39, 0x78, 0x69, 0x74, 0x75, 0x7a, 0x32, 0x31, 0x52, 0x78, 0x50, 0x48, 0x39, 0x37, 0x6e, 0x64, 0x61, 0x64, 0x32, 0x38, 0x36, 0x68, 0x70, 0x6e, 0x70, 0x63, 0x35, 0x7a, 0x78, 0x64, 0x32, 0x37, 0x72, 0x6b, 0x76, 0x74, 0x77, 0x36, 0x38, 0x65, 0x75, 0x65, 0x66, 0x37, 0x66, 0x37, 0x74, 0x33, 0x6d, 0x36, 0x74, 0x36, 0x70, 0x69, 0x63, 0x6e, 0x74, 0x63, 0x70, 0x7a, 0x68, 0x61, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: C99xituz21RxPH97
				[]byte{0x0b, 0xdf, 0x71, 0x8a, 0xdb, 0xb3, 0xdb, 0x54, 0x71, 0x3c, 0x7f, 0x7b},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: C99xituz21RxPH97
				[]byte{0x0b, 0xdf, 0x71, 0x8a, 0xdb, 0xb3, 0xdb, 0x54, 0x71, 0x3c, 0x7f, 0x7b},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndanb4bnzvbvz7kxxit5c4p3vzdf5p64g6r3y3zqqverds8r")
	require.NoError(t, err)

	// bmRhbmI0Ym56dmJ2ejdreHhpdDVjNHAzdnpkZjVwNjRnNnIzeTN6cXF2ZXJkczhyAA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x62, 0x34, 0x62, 0x6e, 0x7a, 0x76, 0x62, 0x76, 0x7a, 0x37, 0x6b, 0x78, 0x78, 0x69, 0x74, 0x35, 0x63, 0x34, 0x70, 0x33, 0x76, 0x7a, 0x64, 0x66, 0x35, 0x70, 0x36, 0x34, 0x67, 0x36, 0x72, 0x33, 0x79, 0x33, 0x7a, 0x71, 0x71, 0x76, 0x65, 0x72, 0x64, 0x73, 0x38, 0x72, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndaiwz5vuf3nayqgw582ymv22mnqc87fks6up2fp2m4krwa4")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndac6huhp4ffcnjv4zqcjdt8a53j3idb8cawnb7mnisfhv99")
	require.NoError(t, err)

	// bmRhYzZodWhwNGZmY25qdjR6cWNqZHQ4YTUzajNpZGI4Y2F3bmI3bW5pc2Zodjk5MXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWl3ejV2dWYzbmF5cWd3NTgyeW12MjJtbnFjODdma3M2dXAyZnAybTRrcndhNA==
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x36, 0x68, 0x75, 0x68, 0x70, 0x34, 0x66, 0x66, 0x63, 0x6e, 0x6a, 0x76, 0x34, 0x7a, 0x71, 0x63, 0x6a, 0x64, 0x74, 0x38, 0x61, 0x35, 0x33, 0x6a, 0x33, 0x69, 0x64, 0x62, 0x38, 0x63, 0x61, 0x77, 0x6e, 0x62, 0x37, 0x6d, 0x6e, 0x69, 0x73, 0x66, 0x68, 0x76, 0x39, 0x39, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x69, 0x77, 0x7a, 0x35, 0x76, 0x75, 0x66, 0x33, 0x6e, 0x61, 0x79, 0x71, 0x67, 0x77, 0x35, 0x38, 0x32, 0x79, 0x6d, 0x76, 0x32, 0x32, 0x6d, 0x6e, 0x71, 0x63, 0x38, 0x37, 0x66, 0x6b, 0x73, 0x36, 0x75, 0x70, 0x32, 0x66, 0x70, 0x32, 0x6d, 0x34, 0x6b, 0x72, 0x77, 0x61, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmotHa2pIeUZqd0FUdmNZYlhiAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x47, 0x6b, 0x6a, 0x48, 0x79, 0x46, 0x6a, 0x77, 0x41, 0x54, 0x76, 0x63, 0x59, 0x62, 0x58, 0x62, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: GkjHyFjwATvcYbXb
				[]byte{0x1a, 0x48, 0xc7, 0xc8, 0x58, 0xf0, 0x01, 0x3b, 0xdc, 0x61, 0xb5, 0xdb},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: GkjHyFjwATvcYbXb
				[]byte{0x1a, 0x48, 0xc7, 0xc8, 0x58, 0xf0, 0x01, 0x3b, 0xdc, 0x61, 0xb5, 0xdb},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSidechainTx_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	sidechaintxSource, err := address.Validate("ndaea8s3uird6kqzn2y5x3c2pf988zre6txvm46hmidy9z2a")
	require.NoError(t, err)
	sidechaintxSidechainSignatures, err := signature.RawSignature(signature.Ed25519, []byte{0xdf, 0x66, 0x5e, 0xc0, 0xc3, 0x53, 0x60, 0xff, 0x24, 0x6d, 0xe0, 0x06, 0xa2, 0xc4, 0x98, 0x82, 0xb6, 0xb9, 0x93, 0x57, 0x62, 0x43, 0x42, 0xd9, 0x1f, 0x3d, 0xfd, 0x45, 0x14, 0x56, 0x26, 0x92, 0x71, 0x6b, 0xae, 0x5f, 0x74, 0xe1, 0x5e, 0x51, 0x62, 0x0c, 0x1e, 0x61, 0x9d, 0x61, 0xde, 0x5b, 0x87, 0x9b, 0x06, 0x2d, 0xb8, 0x18, 0xd4, 0x0f, 0xef, 0x31, 0x33, 0x44, 0x0c, 0xc5, 0x53, 0xf7})
	require.NoError(t, err)

	// AAJeEXA5N5cAAAAAAAAApDhjMlI1cEVlaFdGdjd4MElhNGphZHRjYTU3dmY3c2dka3BzcjhqZHA2YWRrZnRlMnNrNW12ZTR6bmpid2Z5aTloejh3a2ZjeWU0amhjNDdxbTc0cWN6dXRuaWdiNjJuN25ocmZ6YjY1YTJ5NXNnZ3diOXp2Y240ZWJ2Y3hoNzhoYnhpNTZjZ2duZGFlYThzM3VpcmQ2a3F6bjJ5NXgzYzJwZjk4OHpyZTZ0eHZtNDZobWlkeTl6MmE=
	expect := []byte{0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x38, 0x63, 0x32, 0x52, 0x35, 0x70, 0x45, 0x65, 0x68, 0x57, 0x46, 0x76, 0x37, 0x78, 0x30, 0x49, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x35, 0x37, 0x76, 0x66, 0x37, 0x73, 0x67, 0x64, 0x6b, 0x70, 0x73, 0x72, 0x38, 0x6a, 0x64, 0x70, 0x36, 0x61, 0x64, 0x6b, 0x66, 0x74, 0x65, 0x32, 0x73, 0x6b, 0x35, 0x6d, 0x76, 0x65, 0x34, 0x7a, 0x6e, 0x6a, 0x62, 0x77, 0x66, 0x79, 0x69, 0x39, 0x68, 0x7a, 0x38, 0x77, 0x6b, 0x66, 0x63, 0x79, 0x65, 0x34, 0x6a, 0x68, 0x63, 0x34, 0x37, 0x71, 0x6d, 0x37, 0x34, 0x71, 0x63, 0x7a, 0x75, 0x74, 0x6e, 0x69, 0x67, 0x62, 0x36, 0x32, 0x6e, 0x37, 0x6e, 0x68, 0x72, 0x66, 0x7a, 0x62, 0x36, 0x35, 0x61, 0x32, 0x79, 0x35, 0x73, 0x67, 0x67, 0x77, 0x62, 0x39, 0x7a, 0x76, 0x63, 0x6e, 0x34, 0x65, 0x62, 0x76, 0x63, 0x78, 0x68, 0x37, 0x38, 0x68, 0x62, 0x78, 0x69, 0x35, 0x36, 0x63, 0x67, 0x67, 0x6e, 0x64, 0x61, 0x65, 0x61, 0x38, 0x73, 0x33, 0x75, 0x69, 0x72, 0x64, 0x36, 0x6b, 0x71, 0x7a, 0x6e, 0x32, 0x79, 0x35, 0x78, 0x33, 0x63, 0x32, 0x70, 0x66, 0x39, 0x38, 0x38, 0x7a, 0x72, 0x65, 0x36, 0x74, 0x78, 0x76, 0x6d, 0x34, 0x36, 0x68, 0x6d, 0x69, 0x64, 0x79, 0x39, 0x7a, 0x32, 0x61}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SidechainTx
	}{
		{
			"no signatures",
			NewSidechainTx(
				sidechaintxSource,
				164,
				// SidechainSignableBytes as b64: 8c2R5pEehWFv7x0I
				[]byte{0xf1, 0xcd, 0x91, 0xe6, 0x91, 0x1e, 0x85, 0x61, 0x6f, 0xef, 0x1d, 0x08},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
			),
		},
		{
			"with signature",
			NewSidechainTx(
				sidechaintxSource,
				164,
				// SidechainSignableBytes as b64: 8c2R5pEehWFv7x0I
				[]byte{0xf1, 0xcd, 0x91, 0xe6, 0x91, 0x1e, 0x85, 0x61, 0x6f, 0xef, 0x1d, 0x08},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndaj3zb8ep363avsrhvpzgve52gc5re63n6txx2vv6s5yuy3")
	require.NoError(t, err)

	// bmRhajN6YjhlcDM2M2F2c3JodnB6Z3ZlNTJnYzVyZTYzbjZ0eHgydnY2czV5dXkzABP6yCVBcNA=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x33, 0x7a, 0x62, 0x38, 0x65, 0x70, 0x33, 0x36, 0x33, 0x61, 0x76, 0x73, 0x72, 0x68, 0x76, 0x70, 0x7a, 0x67, 0x76, 0x65, 0x35, 0x32, 0x67, 0x63, 0x35, 0x72, 0x65, 0x36, 0x33, 0x6e, 0x36, 0x74, 0x78, 0x78, 0x32, 0x76, 0x76, 0x36, 0x73, 0x35, 0x79, 0x75, 0x79, 0x33, 0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndadvaud9mhekn8jxc7sbgrjup554iicq7znk9swe5nu7khe")
	require.NoError(t, err)

	// AA2S+t7X5spuZGFkdmF1ZDltaGVrbjhqeGM3c2Jncmp1cDU1NGlpY3E3em5rOXN3ZTVudTdraGU=
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x6e, 0x64, 0x61, 0x64, 0x76, 0x61, 0x75, 0x64, 0x39, 0x6d, 0x68, 0x65, 0x6b, 0x6e, 0x38, 0x6a, 0x78, 0x63, 0x37, 0x73, 0x62, 0x67, 0x72, 0x6a, 0x75, 0x70, 0x35, 0x35, 0x34, 0x69, 0x69, 0x63, 0x71, 0x37, 0x7a, 0x6e, 0x6b, 0x39, 0x73, 0x77, 0x65, 0x35, 0x6e, 0x75, 0x37, 0x6b, 0x68, 0x65}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAn3Z2Z46KEAH/erJE/OdA==
	expect := []byte{0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1, 0x00, 0x1f, 0xf7, 0xab, 0x24, 0x4f, 0xce, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2805298263287969,
				8998038698708596,
			),
		},
		{
			"with signature",
			NewIssue(
				2805298263287969,
				8998038698708596,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimchildaccountTarget, err := address.Validate("ndacz32aaimsgqmaxbzvkben22fcuyip6qcs6x7ktfr87xhu")
	require.NoError(t, err)
	claimchildaccountChild, err := address.Validate("ndackqmf7kpfxbpbdvser8hwmb8wq8kqdm7ybgh5776jsr5f")
	require.NoError(t, err)
	claimchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x03, 0xba, 0x98, 0x18, 0xb3, 0x13, 0xb8, 0x82, 0xd3, 0x51, 0xc2, 0x18, 0x91, 0xb1, 0x14, 0x38, 0xc1, 0x6e, 0x5f, 0x5e, 0xd0, 0x0f, 0xd7, 0x89, 0x54, 0xfb, 0x80, 0x69, 0xca, 0x84, 0x2e, 0xc6}, nil)
	require.NoError(t, err)
	claimchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x8f, 0xce, 0x4c, 0x67, 0x90, 0x5d, 0x3d, 0xd6, 0xe8, 0xc6, 0x67, 0xd7, 0x19, 0xf0, 0x40, 0x50, 0x76, 0x2b, 0x74, 0xad, 0x7b, 0x87, 0x45, 0x90, 0x01, 0xcd, 0x79, 0x61, 0x50, 0xdf, 0x43, 0x5c, 0x82, 0x3a, 0x8a, 0xb7, 0xda, 0x29, 0x6f, 0x80, 0xf1, 0x7c, 0x5e, 0xc3, 0x93, 0x5b, 0x6b, 0xa1, 0x2d, 0xc8, 0x23, 0x78, 0x5f, 0xdc, 0x75, 0xa2, 0x47, 0xbf, 0xdf, 0x01, 0x41, 0x38, 0x92, 0x76})
	require.NoError(t, err)
	claimchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x37, 0x51, 0x96, 0x59, 0x4f, 0xa3, 0x24, 0x1f, 0x78, 0x44, 0x7f, 0x7b, 0x4e, 0xd3, 0xb7, 0x26, 0xc4, 0xfe, 0xe6, 0x8b, 0x1d, 0x06, 0xc0, 0x37, 0xe3, 0x56, 0xc4, 0x8f, 0xf6, 0x19, 0x49, 0x82}, nil)
	require.NoError(t, err)

	// bmRhY2txbWY3a3BmeGJwYmR2c2VyOGh3bWI4d3E4a3FkbTd5YmdoNTc3NmpzcjVmbnB1YmE4amFkdGJiZWFiNXhnYTJ5bmo1dGF5dmtoYmJ0ZXB0Y3M2bmM1dTltNWlhOXg2amt2NzJhNHFrc3N6bm5nZnEybWh1anpnZ2E0amFkdGNhdDloZTIzNnNtdzg3cDRnZ245bXR2NmNha2I1Y3k3ZnBycWR3bWVhYjN4Nnljd2c5aXBxaWVxd2t5OXBjdTU2YThmOGY3czZ2bXB4NGNtcWllcDZmOXpkeHdqZDU5ejJiaWU2amU3eTl6OHA5eDR0cG5wdWJhOGphZHRiYmVhNXhkZnUzajh0dWloNTJpdDl6eXZ5dnk2dm5qOXpndG5xc3BzYno2cG1uamQ5eWRmZTJlMnQ2a2J3YzJta2lQaVZFR3JQMGR2QnREVy9MAAeDA1aqb0FuZGFjejMyYWFpbXNncW1heGJ6dmtiZW4yMmZjdXlpcDZxY3M2eDdrdGZyODd4aHU=
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x6b, 0x71, 0x6d, 0x66, 0x37, 0x6b, 0x70, 0x66, 0x78, 0x62, 0x70, 0x62, 0x64, 0x76, 0x73, 0x65, 0x72, 0x38, 0x68, 0x77, 0x6d, 0x62, 0x38, 0x77, 0x71, 0x38, 0x6b, 0x71, 0x64, 0x6d, 0x37, 0x79, 0x62, 0x67, 0x68, 0x35, 0x37, 0x37, 0x36, 0x6a, 0x73, 0x72, 0x35, 0x66, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x62, 0x35, 0x78, 0x67, 0x61, 0x32, 0x79, 0x6e, 0x6a, 0x35, 0x74, 0x61, 0x79, 0x76, 0x6b, 0x68, 0x62, 0x62, 0x74, 0x65, 0x70, 0x74, 0x63, 0x73, 0x36, 0x6e, 0x63, 0x35, 0x75, 0x39, 0x6d, 0x35, 0x69, 0x61, 0x39, 0x78, 0x36, 0x6a, 0x6b, 0x76, 0x37, 0x32, 0x61, 0x34, 0x71, 0x6b, 0x73, 0x73, 0x7a, 0x6e, 0x6e, 0x67, 0x66, 0x71, 0x32, 0x6d, 0x68, 0x75, 0x6a, 0x7a, 0x67, 0x67, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x74, 0x39, 0x68, 0x65, 0x32, 0x33, 0x36, 0x73, 0x6d, 0x77, 0x38, 0x37, 0x70, 0x34, 0x67, 0x67, 0x6e, 0x39, 0x6d, 0x74, 0x76, 0x36, 0x63, 0x61, 0x6b, 0x62, 0x35, 0x63, 0x79, 0x37, 0x66, 0x70, 0x72, 0x71, 0x64, 0x77, 0x6d, 0x65, 0x61, 0x62, 0x33, 0x78, 0x36, 0x79, 0x63, 0x77, 0x67, 0x39, 0x69, 0x70, 0x71, 0x69, 0x65, 0x71, 0x77, 0x6b, 0x79, 0x39, 0x70, 0x63, 0x75, 0x35, 0x36, 0x61, 0x38, 0x66, 0x38, 0x66, 0x37, 0x73, 0x36, 0x76, 0x6d, 0x70, 0x78, 0x34, 0x63, 0x6d, 0x71, 0x69, 0x65, 0x70, 0x36, 0x66, 0x39, 0x7a, 0x64, 0x78, 0x77, 0x6a, 0x64, 0x35, 0x39, 0x7a, 0x32, 0x62, 0x69, 0x65, 0x36, 0x6a, 0x65, 0x37, 0x79, 0x39, 0x7a, 0x38, 0x70, 0x39, 0x78, 0x34, 0x74, 0x70, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x35, 0x78, 0x64, 0x66, 0x75, 0x33, 0x6a, 0x38, 0x74, 0x75, 0x69, 0x68, 0x35, 0x32, 0x69, 0x74, 0x39, 0x7a, 0x79, 0x76, 0x79, 0x76, 0x79, 0x36, 0x76, 0x6e, 0x6a, 0x39, 0x7a, 0x67, 0x74, 0x6e, 0x71, 0x73, 0x70, 0x73, 0x62, 0x7a, 0x36, 0x70, 0x6d, 0x6e, 0x6a, 0x64, 0x39, 0x79, 0x64, 0x66, 0x65, 0x32, 0x65, 0x32, 0x74, 0x36, 0x6b, 0x62, 0x77, 0x63, 0x32, 0x6d, 0x6b, 0x69, 0x50, 0x69, 0x56, 0x45, 0x47, 0x72, 0x50, 0x30, 0x64, 0x76, 0x42, 0x74, 0x44, 0x57, 0x2f, 0x4c, 0x00, 0x07, 0x83, 0x03, 0x56, 0xaa, 0x6f, 0x41, 0x6e, 0x64, 0x61, 0x63, 0x7a, 0x33, 0x32, 0x61, 0x61, 0x69, 0x6d, 0x73, 0x67, 0x71, 0x6d, 0x61, 0x78, 0x62, 0x7a, 0x76, 0x6b, 0x62, 0x65, 0x6e, 0x32, 0x32, 0x66, 0x63, 0x75, 0x79, 0x69, 0x70, 0x36, 0x71, 0x63, 0x73, 0x36, 0x78, 0x37, 0x6b, 0x74, 0x66, 0x72, 0x38, 0x37, 0x78, 0x68, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimChildAccount
	}{
		{
			"no signatures",
			NewClaimChildAccount(
				claimchildaccountTarget,
				claimchildaccountChild,
				*claimchildaccountChildOwnership,
				*claimchildaccountChildSignature,
				[]signature.PublicKey{*claimchildaccountChildValidationKeys},
				// ChildValidationScript as b64: PiVEGrP0dvBtDW/L
				[]byte{0x3e, 0x25, 0x44, 0x1a, 0xb3, 0xf4, 0x76, 0xf0, 0x6d, 0x0d, 0x6f, 0xcb},
				2114375199125313,
			),
		},
		{
			"with signature",
			NewClaimChildAccount(
				claimchildaccountTarget,
				claimchildaccountChild,
				*claimchildaccountChildOwnership,
				*claimchildaccountChildSignature,
				[]signature.PublicKey{*claimchildaccountChildValidationKeys},
				// ChildValidationScript as b64: PiVEGrP0dvBtDW/L
				[]byte{0x3e, 0x25, 0x44, 0x1a, 0xb3, 0xf4, 0x76, 0xf0, 0x6d, 0x0d, 0x6f, 0xcb},
				2114375199125313,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
