package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndakc9uu7294gzdj7bbqux32gmr828c7h7zrbd5tqdmup66z")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndagdeef9tt6jb2qn4ekajid5xe4vfmx55i5ffb3vgyae2zq")
	require.NoError(t, err)

	// bmRhZ2RlZWY5dHQ2amIycW40ZWthamlkNXhlNHZmbXg1NWk1ZmZiM3ZneWFlMnpxAAWCIQf8/70AApoPXz8aEm5kYWtjOXV1NzI5NGd6ZGo3YmJxdXgzMmdtcjgyOGM3aDd6cmJkNXRxZG11cDY2eg==
	expect := []byte{0x6e, 0x64, 0x61, 0x67, 0x64, 0x65, 0x65, 0x66, 0x39, 0x74, 0x74, 0x36, 0x6a, 0x62, 0x32, 0x71, 0x6e, 0x34, 0x65, 0x6b, 0x61, 0x6a, 0x69, 0x64, 0x35, 0x78, 0x65, 0x34, 0x76, 0x66, 0x6d, 0x78, 0x35, 0x35, 0x69, 0x35, 0x66, 0x66, 0x62, 0x33, 0x76, 0x67, 0x79, 0x61, 0x65, 0x32, 0x7a, 0x71, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x6b, 0x63, 0x39, 0x75, 0x75, 0x37, 0x32, 0x39, 0x34, 0x67, 0x7a, 0x64, 0x6a, 0x37, 0x62, 0x62, 0x71, 0x75, 0x78, 0x33, 0x32, 0x67, 0x6d, 0x72, 0x38, 0x32, 0x38, 0x63, 0x37, 0x68, 0x37, 0x7a, 0x72, 0x62, 0x64, 0x35, 0x74, 0x71, 0x64, 0x6d, 0x75, 0x70, 0x36, 0x36, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndahp5qb67q6mumh7b6d3xj5sv44bhiiswtpz25n558qv4ct")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xb9, 0xc3, 0xbe, 0x48, 0x91, 0x27, 0x1a, 0x8b, 0xde, 0x9c, 0xc3, 0x72, 0x3c, 0xca, 0xe6, 0xac, 0x20, 0xe7, 0x51, 0xab, 0x61, 0xb7, 0xf6, 0xd5, 0x33, 0x8a, 0x04, 0x0c, 0xbb, 0x28, 0x5f, 0xe9}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWM2NmhydWl1ZXZ0eGM4OHZ2YnplcmdrNjR5Y2IzNHR4cHM1cjd5eGdxZmFpZGY1ZmJyOHYzeGFrdjg5Y2s4OAAQTcdmlXTFbmRhaHA1cWI2N3E2bXVtaDdiNmQzeGo1c3Y0NGJoaWlzd3RwejI1bjU1OHF2NGN0SDFFWWR5L28rMk1FZzB4YQ==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x36, 0x36, 0x68, 0x72, 0x75, 0x69, 0x75, 0x65, 0x76, 0x74, 0x78, 0x63, 0x38, 0x38, 0x76, 0x76, 0x62, 0x7a, 0x65, 0x72, 0x67, 0x6b, 0x36, 0x34, 0x79, 0x63, 0x62, 0x33, 0x34, 0x74, 0x78, 0x70, 0x73, 0x35, 0x72, 0x37, 0x79, 0x78, 0x67, 0x71, 0x66, 0x61, 0x69, 0x64, 0x66, 0x35, 0x66, 0x62, 0x72, 0x38, 0x76, 0x33, 0x78, 0x61, 0x6b, 0x76, 0x38, 0x39, 0x63, 0x6b, 0x38, 0x38, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x68, 0x70, 0x35, 0x71, 0x62, 0x36, 0x37, 0x71, 0x36, 0x6d, 0x75, 0x6d, 0x68, 0x37, 0x62, 0x36, 0x64, 0x33, 0x78, 0x6a, 0x35, 0x73, 0x76, 0x34, 0x34, 0x62, 0x68, 0x69, 0x69, 0x73, 0x77, 0x74, 0x70, 0x7a, 0x32, 0x35, 0x6e, 0x35, 0x35, 0x38, 0x71, 0x76, 0x34, 0x63, 0x74, 0x48, 0x31, 0x45, 0x59, 0x64, 0x79, 0x2f, 0x6f, 0x2b, 0x32, 0x4d, 0x45, 0x67, 0x30, 0x78, 0x61}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: H1EYdy/o+2MEg0xa
				[]byte{0x1f, 0x51, 0x18, 0x77, 0x2f, 0xe8, 0xfb, 0x63, 0x04, 0x83, 0x4c, 0x5a},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: H1EYdy/o+2MEg0xa
				[]byte{0x1f, 0x51, 0x18, 0x77, 0x2f, 0xe8, 0xfb, 0x63, 0x04, 0x83, 0x4c, 0x5a},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndaeyr2b5bwncajbmt5r8qj6uq2t2n7ax7c3u8qmj5bepaja")
	require.NoError(t, err)

	// bmRhZXlyMmI1YnduY2FqYm10NXI4cWo2dXEydDJuN2F4N2MzdThxbWo1YmVwYWphAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x79, 0x72, 0x32, 0x62, 0x35, 0x62, 0x77, 0x6e, 0x63, 0x61, 0x6a, 0x62, 0x6d, 0x74, 0x35, 0x72, 0x38, 0x71, 0x6a, 0x36, 0x75, 0x71, 0x32, 0x74, 0x32, 0x6e, 0x37, 0x61, 0x78, 0x37, 0x63, 0x33, 0x75, 0x38, 0x71, 0x6d, 0x6a, 0x35, 0x62, 0x65, 0x70, 0x61, 0x6a, 0x61, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndaqkqk39ysjza8psjcifu5m8c5mfv7x3t9474awwjxi4qb2")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFxa3FrMzl5c2p6YThwc2pjaWZ1NW04YzVtZnY3eDN0OTQ3NGF3d2p4aTRxYjI=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x71, 0x6b, 0x71, 0x6b, 0x33, 0x39, 0x79, 0x73, 0x6a, 0x7a, 0x61, 0x38, 0x70, 0x73, 0x6a, 0x63, 0x69, 0x66, 0x75, 0x35, 0x6d, 0x38, 0x63, 0x35, 0x6d, 0x66, 0x76, 0x37, 0x78, 0x33, 0x74, 0x39, 0x34, 0x37, 0x34, 0x61, 0x77, 0x77, 0x6a, 0x78, 0x69, 0x34, 0x71, 0x62, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndadywkmnqwdtsvyvudic6i49ch2pghe49u9d826perbe9b7")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndap53buva98eyb4q9ygqm73hupqu4fumqnd6nxshby5zd7y")
	require.NoError(t, err)

	// bmRhcDUzYnV2YTk4ZXliNHE5eWdxbTczaHVwcXU0ZnVtcW5kNm54c2hieTV6ZDd5AAjSrCLE0zRuZGFkeXdrbW5xd2R0c3Z5dnVkaWM2aTQ5Y2gycGdoZTQ5dTlkODI2cGVyYmU5Yjc=
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x35, 0x33, 0x62, 0x75, 0x76, 0x61, 0x39, 0x38, 0x65, 0x79, 0x62, 0x34, 0x71, 0x39, 0x79, 0x67, 0x71, 0x6d, 0x37, 0x33, 0x68, 0x75, 0x70, 0x71, 0x75, 0x34, 0x66, 0x75, 0x6d, 0x71, 0x6e, 0x64, 0x36, 0x6e, 0x78, 0x73, 0x68, 0x62, 0x79, 0x35, 0x7a, 0x64, 0x37, 0x79, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x64, 0x79, 0x77, 0x6b, 0x6d, 0x6e, 0x71, 0x77, 0x64, 0x74, 0x73, 0x76, 0x79, 0x76, 0x75, 0x64, 0x69, 0x63, 0x36, 0x69, 0x34, 0x39, 0x63, 0x68, 0x32, 0x70, 0x67, 0x68, 0x65, 0x34, 0x39, 0x75, 0x39, 0x64, 0x38, 0x32, 0x36, 0x70, 0x65, 0x72, 0x62, 0x65, 0x39, 0x62, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndadbyfxk39ihv5iizrj23e6ijmsbncu7nkk6grfydcwhjvy")
	require.NoError(t, err)

	// bmRhZGJ5ZnhrMzlpaHY1aWl6cmoyM2U2aWptc2JuY3U3bmtrNmdyZnlkY3doanZ5AAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x62, 0x79, 0x66, 0x78, 0x6b, 0x33, 0x39, 0x69, 0x68, 0x76, 0x35, 0x69, 0x69, 0x7a, 0x72, 0x6a, 0x32, 0x33, 0x65, 0x36, 0x69, 0x6a, 0x6d, 0x73, 0x62, 0x6e, 0x63, 0x75, 0x37, 0x6e, 0x6b, 0x6b, 0x36, 0x67, 0x72, 0x66, 0x79, 0x64, 0x63, 0x77, 0x68, 0x6a, 0x76, 0x79, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndakbg2xxmyrqfcvehdxmmh7kmh6xfsdspisxta3th3t9vrb")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRha2JnMnh4bXlycWZjdmVoZHhtbWg3a21oNnhmc2RzcGlzeHRhM3RoM3Q5dnJi
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x6b, 0x62, 0x67, 0x32, 0x78, 0x78, 0x6d, 0x79, 0x72, 0x71, 0x66, 0x63, 0x76, 0x65, 0x68, 0x64, 0x78, 0x6d, 0x6d, 0x68, 0x37, 0x6b, 0x6d, 0x68, 0x36, 0x78, 0x66, 0x73, 0x64, 0x73, 0x70, 0x69, 0x73, 0x78, 0x74, 0x61, 0x33, 0x74, 0x68, 0x33, 0x74, 0x39, 0x76, 0x72, 0x62}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndaqet9vdyr7c9hnxc3wut97p999bkh4rgd8sekwz6un6qff")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFxZXQ5dmR5cjdjOWhueGMzd3V0OTdwOTk5YmtoNHJnZDhzZWt3ejZ1bjZxZmY=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x71, 0x65, 0x74, 0x39, 0x76, 0x64, 0x79, 0x72, 0x37, 0x63, 0x39, 0x68, 0x6e, 0x78, 0x63, 0x33, 0x77, 0x75, 0x74, 0x39, 0x37, 0x70, 0x39, 0x39, 0x39, 0x62, 0x6b, 0x68, 0x34, 0x72, 0x67, 0x64, 0x38, 0x73, 0x65, 0x6b, 0x77, 0x7a, 0x36, 0x75, 0x6e, 0x36, 0x71, 0x66, 0x66}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndakuhzs6z449dd6cbu4epzeazwdbvjmxwyt9iym8jytggh7")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndamvcgfu5u63ckvz5cnk9ubmaib8tiy8sq77927jbrbjf9b")
	require.NoError(t, err)

	// bmRhbXZjZ2Z1NXU2M2Nrdno1Y25rOXVibWFpYjh0aXk4c3E3NzkyN2picmJqZjliAAz/orpRehFuZGFrdWh6czZ6NDQ5ZGQ2Y2J1NGVwemVhendkYnZqbXh3eXQ5aXltOGp5dGdnaDc=
	expect := []byte{0x6e, 0x64, 0x61, 0x6d, 0x76, 0x63, 0x67, 0x66, 0x75, 0x35, 0x75, 0x36, 0x33, 0x63, 0x6b, 0x76, 0x7a, 0x35, 0x63, 0x6e, 0x6b, 0x39, 0x75, 0x62, 0x6d, 0x61, 0x69, 0x62, 0x38, 0x74, 0x69, 0x79, 0x38, 0x73, 0x71, 0x37, 0x37, 0x39, 0x32, 0x37, 0x6a, 0x62, 0x72, 0x62, 0x6a, 0x66, 0x39, 0x62, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x6b, 0x75, 0x68, 0x7a, 0x73, 0x36, 0x7a, 0x34, 0x34, 0x39, 0x64, 0x64, 0x36, 0x63, 0x62, 0x75, 0x34, 0x65, 0x70, 0x7a, 0x65, 0x61, 0x7a, 0x77, 0x64, 0x62, 0x76, 0x6a, 0x6d, 0x78, 0x77, 0x79, 0x74, 0x39, 0x69, 0x79, 0x6d, 0x38, 0x6a, 0x79, 0x74, 0x67, 0x67, 0x68, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndae6a4n8fu489g28678zi4cn38gwze8mhqup4875ytjz5te")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x7d, 0x33, 0x9d, 0x82, 0x55, 0xe3, 0xb4, 0x73, 0xcf, 0x64, 0x71, 0x7e, 0x45, 0x98, 0x0f, 0xab, 0x20, 0xf6, 0x7f, 0x08, 0x11, 0x2b, 0x12, 0x8c, 0x8b, 0xdd, 0x4d, 0x5c, 0xdb, 0x27, 0x58, 0x1e}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xb0, 0xf9, 0xf2, 0xb7, 0x53, 0xdd, 0x9e, 0x1f, 0x8b, 0xc6, 0x36, 0x99, 0x81, 0xcd, 0x9e, 0x35, 0x97, 0x91, 0xf3, 0x23, 0x86, 0xf8, 0x81, 0x40, 0x40, 0x4e, 0x78, 0x72, 0x86, 0x0c, 0xc0, 0x39}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWI4dmhobmNrenQ1aTY4cm50Mno2dG4yYjh4dWI3djliYWl1eWV3bnRycXc0emc1ZTduYjducHR5NjVxZWNxawAZX/GDxHNZbmRhZTZhNG44ZnU0ODlnMjg2Nzh6aTRjbjM4Z3d6ZThtaHF1cDQ4NzV5dGp6NXRlbnB1YmE4amFkdGJiZWMycnY2eHprcnEzNmg2bTIyNWp2YXFwdjI0M3JlcnZlcWRydGFrYWliaGhzNndnYnZhZHU5bnpidmRxaXB6dmtFY05lRmpQVHhNblUrUzk=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x38, 0x76, 0x68, 0x68, 0x6e, 0x63, 0x6b, 0x7a, 0x74, 0x35, 0x69, 0x36, 0x38, 0x72, 0x6e, 0x74, 0x32, 0x7a, 0x36, 0x74, 0x6e, 0x32, 0x62, 0x38, 0x78, 0x75, 0x62, 0x37, 0x76, 0x39, 0x62, 0x61, 0x69, 0x75, 0x79, 0x65, 0x77, 0x6e, 0x74, 0x72, 0x71, 0x77, 0x34, 0x7a, 0x67, 0x35, 0x65, 0x37, 0x6e, 0x62, 0x37, 0x6e, 0x70, 0x74, 0x79, 0x36, 0x35, 0x71, 0x65, 0x63, 0x71, 0x6b, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x65, 0x36, 0x61, 0x34, 0x6e, 0x38, 0x66, 0x75, 0x34, 0x38, 0x39, 0x67, 0x32, 0x38, 0x36, 0x37, 0x38, 0x7a, 0x69, 0x34, 0x63, 0x6e, 0x33, 0x38, 0x67, 0x77, 0x7a, 0x65, 0x38, 0x6d, 0x68, 0x71, 0x75, 0x70, 0x34, 0x38, 0x37, 0x35, 0x79, 0x74, 0x6a, 0x7a, 0x35, 0x74, 0x65, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x32, 0x72, 0x76, 0x36, 0x78, 0x7a, 0x6b, 0x72, 0x71, 0x33, 0x36, 0x68, 0x36, 0x6d, 0x32, 0x32, 0x35, 0x6a, 0x76, 0x61, 0x71, 0x70, 0x76, 0x32, 0x34, 0x33, 0x72, 0x65, 0x72, 0x76, 0x65, 0x71, 0x64, 0x72, 0x74, 0x61, 0x6b, 0x61, 0x69, 0x62, 0x68, 0x68, 0x73, 0x36, 0x77, 0x67, 0x62, 0x76, 0x61, 0x64, 0x75, 0x39, 0x6e, 0x7a, 0x62, 0x76, 0x64, 0x71, 0x69, 0x70, 0x7a, 0x76, 0x6b, 0x45, 0x63, 0x4e, 0x65, 0x46, 0x6a, 0x50, 0x54, 0x78, 0x4d, 0x6e, 0x55, 0x2b, 0x53, 0x39}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: kEcNeFjPTxMnU+S9
				[]byte{0x90, 0x47, 0x0d, 0x78, 0x58, 0xcf, 0x4f, 0x13, 0x27, 0x53, 0xe4, 0xbd},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: kEcNeFjPTxMnU+S9
				[]byte{0x90, 0x47, 0x0d, 0x78, 0x58, 0xcf, 0x4f, 0x13, 0x27, 0x53, 0xe4, 0xbd},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndaamuz4xha4w3pntryy8qitigjhyz7e6is2up46vgmu3hgh")
	require.NoError(t, err)
	stakeRules, err := address.Validate("ndaawfkxgfwpxwvq899gp9yr2visibs5vrf9wnzebsmk9jc2")
	require.NoError(t, err)
	stakeStakeTo, err := address.Validate("ndaqtqkkzdc4peii36g64mjpi26h5c2rr6magbrfut7z8i4e")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFhd2ZreGdmd3B4d3ZxODk5Z3A5eXIydmlzaWJzNXZyZjl3bnplYnNtazlqYzIABJUapCZXuW5kYXF0cWtremRjNHBlaWkzNmc2NG1qcGkyNmg1YzJycjZtYWdicmZ1dDd6OGk0ZW5kYWFtdXo0eGhhNHczcG50cnl5OHFpdGlnamh5ejdlNmlzMnVwNDZ2Z211M2hnaA==
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x61, 0x77, 0x66, 0x6b, 0x78, 0x67, 0x66, 0x77, 0x70, 0x78, 0x77, 0x76, 0x71, 0x38, 0x39, 0x39, 0x67, 0x70, 0x39, 0x79, 0x72, 0x32, 0x76, 0x69, 0x73, 0x69, 0x62, 0x73, 0x35, 0x76, 0x72, 0x66, 0x39, 0x77, 0x6e, 0x7a, 0x65, 0x62, 0x73, 0x6d, 0x6b, 0x39, 0x6a, 0x63, 0x32, 0x00, 0x04, 0x95, 0x1a, 0xa4, 0x26, 0x57, 0xb9, 0x6e, 0x64, 0x61, 0x71, 0x74, 0x71, 0x6b, 0x6b, 0x7a, 0x64, 0x63, 0x34, 0x70, 0x65, 0x69, 0x69, 0x33, 0x36, 0x67, 0x36, 0x34, 0x6d, 0x6a, 0x70, 0x69, 0x32, 0x36, 0x68, 0x35, 0x63, 0x32, 0x72, 0x72, 0x36, 0x6d, 0x61, 0x67, 0x62, 0x72, 0x66, 0x75, 0x74, 0x37, 0x7a, 0x38, 0x69, 0x34, 0x65, 0x6e, 0x64, 0x61, 0x61, 0x6d, 0x75, 0x7a, 0x34, 0x78, 0x68, 0x61, 0x34, 0x77, 0x33, 0x70, 0x6e, 0x74, 0x72, 0x79, 0x79, 0x38, 0x71, 0x69, 0x74, 0x69, 0x67, 0x6a, 0x68, 0x79, 0x7a, 0x37, 0x65, 0x36, 0x69, 0x73, 0x32, 0x75, 0x70, 0x34, 0x36, 0x76, 0x67, 0x6d, 0x75, 0x33, 0x68, 0x67, 0x68}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndan8pcwd225whqfgzv2kkv29qy874skezhy6f539ufgumpq")
	require.NoError(t, err)
	registernodeOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x31, 0x8d, 0xd7, 0x07, 0x27, 0xb4, 0x16, 0x04, 0x82, 0xfc, 0xaf, 0xc3, 0xa6, 0xf0, 0xbe, 0x79, 0x2b, 0xe9, 0xf1, 0x02, 0xc5, 0x46, 0xd3, 0x6f, 0x30, 0xb7, 0x8d, 0x4b, 0x0b, 0x87, 0xea, 0xcf}, nil)
	require.NoError(t, err)

	// TWQvdm93Z1F0VXA4TWhOcG5kYW44cGN3ZDIyNXdocWZnenYya2t2MjlxeTg3NHNrZXpoeTZmNTM5dWZndW1wcW5wdWJhOGphZHRiYmVhMjI1eDJoZTg0Ym5iZWM5dXo2aGp6c3ozNnV6NHJ0YW1jd3B3NXJnYzUyNHUybXM5eG44aTg5YXp0MndoNnUAGnaLfE4MiQ==
	expect := []byte{0x4d, 0x64, 0x2f, 0x76, 0x6f, 0x77, 0x67, 0x51, 0x74, 0x55, 0x70, 0x38, 0x4d, 0x68, 0x4e, 0x70, 0x6e, 0x64, 0x61, 0x6e, 0x38, 0x70, 0x63, 0x77, 0x64, 0x32, 0x32, 0x35, 0x77, 0x68, 0x71, 0x66, 0x67, 0x7a, 0x76, 0x32, 0x6b, 0x6b, 0x76, 0x32, 0x39, 0x71, 0x79, 0x38, 0x37, 0x34, 0x73, 0x6b, 0x65, 0x7a, 0x68, 0x79, 0x36, 0x66, 0x35, 0x33, 0x39, 0x75, 0x66, 0x67, 0x75, 0x6d, 0x70, 0x71, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x32, 0x32, 0x35, 0x78, 0x32, 0x68, 0x65, 0x38, 0x34, 0x62, 0x6e, 0x62, 0x65, 0x63, 0x39, 0x75, 0x7a, 0x36, 0x68, 0x6a, 0x7a, 0x73, 0x7a, 0x33, 0x36, 0x75, 0x7a, 0x34, 0x72, 0x74, 0x61, 0x6d, 0x63, 0x77, 0x70, 0x77, 0x35, 0x72, 0x67, 0x63, 0x35, 0x32, 0x34, 0x75, 0x32, 0x6d, 0x73, 0x39, 0x78, 0x6e, 0x38, 0x69, 0x38, 0x39, 0x61, 0x7a, 0x74, 0x32, 0x77, 0x68, 0x36, 0x75, 0x00, 0x1a, 0x76, 0x8b, 0x7c, 0x4e, 0x0c, 0x89}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: Md/vowgQtUp8MhNp
				[]byte{0x31, 0xdf, 0xef, 0xa3, 0x08, 0x10, 0xb5, 0x4a, 0x7c, 0x32, 0x13, 0x69},
				*registernodeOwnership,
				7448690852498569,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: Md/vowgQtUp8MhNp
				[]byte{0x31, 0xdf, 0xef, 0xa3, 0x08, 0x10, 0xb5, 0x4a, 0x7c, 0x32, 0x13, 0x69},
				*registernodeOwnership,
				7448690852498569,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AARcldRJHkcADD8lJWMkPQ==
	expect := []byte{0x00, 0x04, 0x5c, 0x95, 0xd4, 0x49, 0x1e, 0x47, 0x00, 0x0c, 0x3f, 0x25, 0x25, 0x63, 0x24, 0x3d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				1227698488286791,
				3447128494122045,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				1227698488286791,
				3447128494122045,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndap6kpcrk6559kzemqkqjgxmzz376jap8i4x82wn5c7fsg8")
	require.NoError(t, err)

	// bmRhcDZrcGNyazY1NTlremVtcWtxamd4bXp6Mzc2amFwOGk0eDgyd241Yzdmc2c4ABmL4qnXjlI=
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x36, 0x6b, 0x70, 0x63, 0x72, 0x6b, 0x36, 0x35, 0x35, 0x39, 0x6b, 0x7a, 0x65, 0x6d, 0x71, 0x6b, 0x71, 0x6a, 0x67, 0x78, 0x6d, 0x7a, 0x7a, 0x33, 0x37, 0x36, 0x6a, 0x61, 0x70, 0x38, 0x69, 0x34, 0x78, 0x38, 0x32, 0x77, 0x6e, 0x35, 0x63, 0x37, 0x66, 0x73, 0x67, 0x38, 0x00, 0x19, 0x8b, 0xe2, 0xa9, 0xd7, 0x8e, 0x52}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				7190680046112338,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				7190680046112338,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndabhfnrfubjs8kvjctj9t7ad57nxnby4uwpecba5vcmqjfs")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndakg57aswtkdhrikikq4c3etmtrax9cp9m4b96xftt38ezh")
	require.NoError(t, err)

	// bmRha2c1N2Fzd3RrZGhyaWtpa3E0YzNldG10cmF4OWNwOW00Yjk2eGZ0dDM4ZXpoNHk2bTJkdDdoMThtNThzMTQ5OTU2dXMAAgcPFpwR8QAL0mi2jmyHbmRhYmhmbnJmdWJqczhrdmpjdGo5dDdhZDU3bnhuYnk0dXdwZWNiYTV2Y21xamZz
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x67, 0x35, 0x37, 0x61, 0x73, 0x77, 0x74, 0x6b, 0x64, 0x68, 0x72, 0x69, 0x6b, 0x69, 0x6b, 0x71, 0x34, 0x63, 0x33, 0x65, 0x74, 0x6d, 0x74, 0x72, 0x61, 0x78, 0x39, 0x63, 0x70, 0x39, 0x6d, 0x34, 0x62, 0x39, 0x36, 0x78, 0x66, 0x74, 0x74, 0x33, 0x38, 0x65, 0x7a, 0x68, 0x34, 0x79, 0x36, 0x6d, 0x32, 0x64, 0x74, 0x37, 0x68, 0x31, 0x38, 0x6d, 0x35, 0x38, 0x73, 0x31, 0x34, 0x39, 0x39, 0x35, 0x36, 0x75, 0x73, 0x00, 0x02, 0x07, 0x0f, 0x16, 0x9c, 0x11, 0xf1, 0x00, 0x0b, 0xd2, 0x68, 0xb6, 0x8e, 0x6c, 0x87, 0x6e, 0x64, 0x61, 0x62, 0x68, 0x66, 0x6e, 0x72, 0x66, 0x75, 0x62, 0x6a, 0x73, 0x38, 0x6b, 0x76, 0x6a, 0x63, 0x74, 0x6a, 0x39, 0x74, 0x37, 0x61, 0x64, 0x35, 0x37, 0x6e, 0x78, 0x6e, 0x62, 0x79, 0x34, 0x75, 0x77, 0x70, 0x65, 0x63, 0x62, 0x61, 0x35, 0x76, 0x63, 0x6d, 0x71, 0x6a, 0x66, 0x73}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				570711338652145,
				141895138149956,
				3327571925036167,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				570711338652145,
				141895138149956,
				3327571925036167,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAYeknWYCWh4QmYyNUFIZGEzOWtkQ0JkAATEfyzfXLY=
	expect := []byte{0x00, 0x06, 0x1e, 0x92, 0x75, 0x98, 0x09, 0x68, 0x78, 0x42, 0x66, 0x32, 0x35, 0x41, 0x48, 0x64, 0x61, 0x33, 0x39, 0x6b, 0x64, 0x43, 0x42, 0x64, 0x00, 0x04, 0xc4, 0x7f, 0x2c, 0xdf, 0x5c, 0xb6}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: xBf25AHda39kdCBd
				[]byte{0xc4, 0x17, 0xf6, 0xe4, 0x01, 0xdd, 0x6b, 0x7f, 0x64, 0x74, 0x20, 0x5d},
				1722464247220584,
				1341950399569078,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: xBf25AHda39kdCBd
				[]byte{0xc4, 0x17, 0xf6, 0xe4, 0x01, 0xdd, 0x6b, 0x7f, 0x64, 0x74, 0x20, 0x5d},
				1722464247220584,
				1341950399569078,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndagifqj65mpbhvzeanh8aqwsdw2em2emvs6n9yge87siz85")
	require.NoError(t, err)

	// bmRhZ2lmcWo2NW1wYmh2emVhbmg4YXF3c2R3MmVtMmVtdnM2bjl5Z2U4N3Npejg1AAbNK1fSk3U=
	expect := []byte{0x6e, 0x64, 0x61, 0x67, 0x69, 0x66, 0x71, 0x6a, 0x36, 0x35, 0x6d, 0x70, 0x62, 0x68, 0x76, 0x7a, 0x65, 0x61, 0x6e, 0x68, 0x38, 0x61, 0x71, 0x77, 0x73, 0x64, 0x77, 0x32, 0x65, 0x6d, 0x32, 0x65, 0x6d, 0x76, 0x73, 0x36, 0x6e, 0x39, 0x79, 0x67, 0x65, 0x38, 0x37, 0x73, 0x69, 0x7a, 0x38, 0x35, 0x00, 0x06, 0xcd, 0x2b, 0x57, 0xd2, 0x93, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				1914435900969845,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				1914435900969845,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndan6zysv4q5xmnf2h2exadppt3ptt6wzbf2e8wsdgy273d9")
	require.NoError(t, err)
	unstakeRules, err := address.Validate("ndabe3hsnyc92n5aie887h82cb8mtg7pcfynrk9jfd7krdey")
	require.NoError(t, err)
	unstakeStakeTo, err := address.Validate("ndap5q4pf7qscmvi99h4p7vdpkecdednwskw4ueb58qurvvb")
	require.NoError(t, err)

	// ABRQL8XW1WpuZGFiZTNoc255YzkybjVhaWU4ODdoODJjYjhtdGc3cGNmeW5yazlqZmQ3a3JkZXkAEUz4a4PRtW5kYXA1cTRwZjdxc2Ntdmk5OWg0cDd2ZHBrZWNkZWRud3NrdzR1ZWI1OHF1cnZ2Ym5kYW42enlzdjRxNXhtbmYyaDJleGFkcHB0M3B0dDZ3emJmMmU4d3NkZ3kyNzNkOQ==
	expect := []byte{0x00, 0x14, 0x50, 0x2f, 0xc5, 0xd6, 0xd5, 0x6a, 0x6e, 0x64, 0x61, 0x62, 0x65, 0x33, 0x68, 0x73, 0x6e, 0x79, 0x63, 0x39, 0x32, 0x6e, 0x35, 0x61, 0x69, 0x65, 0x38, 0x38, 0x37, 0x68, 0x38, 0x32, 0x63, 0x62, 0x38, 0x6d, 0x74, 0x67, 0x37, 0x70, 0x63, 0x66, 0x79, 0x6e, 0x72, 0x6b, 0x39, 0x6a, 0x66, 0x64, 0x37, 0x6b, 0x72, 0x64, 0x65, 0x79, 0x00, 0x11, 0x4c, 0xf8, 0x6b, 0x83, 0xd1, 0xb5, 0x6e, 0x64, 0x61, 0x70, 0x35, 0x71, 0x34, 0x70, 0x66, 0x37, 0x71, 0x73, 0x63, 0x6d, 0x76, 0x69, 0x39, 0x39, 0x68, 0x34, 0x70, 0x37, 0x76, 0x64, 0x70, 0x6b, 0x65, 0x63, 0x64, 0x65, 0x64, 0x6e, 0x77, 0x73, 0x6b, 0x77, 0x34, 0x75, 0x65, 0x62, 0x35, 0x38, 0x71, 0x75, 0x72, 0x76, 0x76, 0x62, 0x6e, 0x64, 0x61, 0x6e, 0x36, 0x7a, 0x79, 0x73, 0x76, 0x34, 0x71, 0x35, 0x78, 0x6d, 0x6e, 0x66, 0x32, 0x68, 0x32, 0x65, 0x78, 0x61, 0x64, 0x70, 0x70, 0x74, 0x33, 0x70, 0x74, 0x74, 0x36, 0x77, 0x7a, 0x62, 0x66, 0x32, 0x65, 0x38, 0x77, 0x73, 0x64, 0x67, 0x79, 0x32, 0x37, 0x33, 0x64, 0x39}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				5717665647089002,
				4869704443482549,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				5717665647089002,
				4869704443482549,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AANMNnZ0zuoADhf3sGjcpA==
	expect := []byte{0x00, 0x03, 0x4c, 0x36, 0x76, 0x74, 0xce, 0xea, 0x00, 0x0e, 0x17, 0xf7, 0xb0, 0x68, 0xdc, 0xa4}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				928221729443562,
				3967002257972388,
			),
		},
		{
			"with signature",
			NewIssue(
				928221729443562,
				3967002257972388,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndacpduhwzr3quu5h9grrkn73pfsq36s7mw58sev53m67qfr")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndactpt7dh7wih75wubv9pn6dteapsgfgwx9dy74tfth9f6k")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x31, 0x35, 0xca, 0x18, 0x52, 0x19, 0xbb, 0xe0, 0x16, 0x03, 0x1f, 0xca, 0xfd, 0xef, 0x04, 0xfd, 0xc1, 0x0d, 0x52, 0xdc, 0xa4, 0xf9, 0x1f, 0x1a, 0x8f, 0x97, 0x91, 0x46, 0xb9, 0xbe, 0xe0, 0xe9}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x12, 0x4d, 0x9d, 0x0b, 0x44, 0xcc, 0x8e, 0xf4, 0xbe, 0xdf, 0xd5, 0xf5, 0xea, 0x86, 0xe6, 0x21, 0xc5, 0x6e, 0x9a, 0x83, 0x52, 0x9a, 0xea, 0xde, 0xa3, 0xc0, 0x35, 0xa1, 0x01, 0x26, 0x7d, 0x3d, 0x8c, 0xfe, 0xb4, 0x3b, 0xee, 0xcb, 0xc8, 0xf7, 0x32, 0xe5, 0x52, 0xdd, 0x89, 0x17, 0x82, 0xd8, 0x16, 0xd9, 0x8e, 0x1a, 0xe2, 0x6a, 0x38, 0x7b, 0xfd, 0x9c, 0xab, 0x5b, 0x0e, 0xca, 0xcf, 0xab})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xe2, 0x1a, 0x1c, 0xc4, 0xc3, 0x0a, 0xed, 0x96, 0x01, 0x02, 0x90, 0x4c, 0xef, 0xbe, 0x20, 0x1c, 0xc9, 0x85, 0xcc, 0x33, 0x61, 0x5e, 0x19, 0x97, 0x98, 0x50, 0x89, 0x09, 0xa8, 0xf9, 0x1a, 0x33}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndad2a6f9hrf6txfpgq4azhc9wabcakbjzhqk7357xc2sm6u")
	require.NoError(t, err)

	// bmRhY3RwdDdkaDd3aWg3NXd1YnY5cG42ZHRlYXBzZ2Znd3g5ZHk3NHRmdGg5ZjZrbmRhZDJhNmY5aHJmNnR4ZnBncTRhemhjOXdhYmNha2JqemhxazczNTd4YzJzbTZ1bnB1YmE4amFkdGJiZWEydm11czJraW41ejJheWFucjZ4OXJyYXY4NmNka3U1dXVydWgyNHQ4bTNjdHgzejVzcXY1eGNwc2lrYXR1cTJ5NG0xMGR0MTZoMjVtNThzMjg4MzQ0dXNhNGphZHRjYWNqZzM0YzRlM3VocmpyeTk0ejQ4eGJ6Z2VoY3k3Z3dka2twcXh6eGQyYTQ0Y2FqZ3J3ODIzOXh3aHJ6bnp1aHpnbXV4ZnpuamM4YnBzZnkzdDJwcWU0dDJycjgzM2s0NWI1Zm45azY2dmJqZGl4bmpucHViYThqYWR0YmJlZHRid2hnZTJuZnE1ZnNiYWtpZTM1NzhlYXFudmJxbmdwc3g2Z256dmJpaXVjcGk5ZXBkZ2lyeGZ5cDN5amdxUEVXQ2FmWTRwUmljaWpmOAAfb3ihXVJXbmRhY3BkdWh3enIzcXV1NWg5Z3Jya243M3Bmc3EzNnM3bXc1OHNldjUzbTY3cWZy
	expect := []byte{0x6e, 0x64, 0x61, 0x63, 0x74, 0x70, 0x74, 0x37, 0x64, 0x68, 0x37, 0x77, 0x69, 0x68, 0x37, 0x35, 0x77, 0x75, 0x62, 0x76, 0x39, 0x70, 0x6e, 0x36, 0x64, 0x74, 0x65, 0x61, 0x70, 0x73, 0x67, 0x66, 0x67, 0x77, 0x78, 0x39, 0x64, 0x79, 0x37, 0x34, 0x74, 0x66, 0x74, 0x68, 0x39, 0x66, 0x36, 0x6b, 0x6e, 0x64, 0x61, 0x64, 0x32, 0x61, 0x36, 0x66, 0x39, 0x68, 0x72, 0x66, 0x36, 0x74, 0x78, 0x66, 0x70, 0x67, 0x71, 0x34, 0x61, 0x7a, 0x68, 0x63, 0x39, 0x77, 0x61, 0x62, 0x63, 0x61, 0x6b, 0x62, 0x6a, 0x7a, 0x68, 0x71, 0x6b, 0x37, 0x33, 0x35, 0x37, 0x78, 0x63, 0x32, 0x73, 0x6d, 0x36, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x32, 0x76, 0x6d, 0x75, 0x73, 0x32, 0x6b, 0x69, 0x6e, 0x35, 0x7a, 0x32, 0x61, 0x79, 0x61, 0x6e, 0x72, 0x36, 0x78, 0x39, 0x72, 0x72, 0x61, 0x76, 0x38, 0x36, 0x63, 0x64, 0x6b, 0x75, 0x35, 0x75, 0x75, 0x72, 0x75, 0x68, 0x32, 0x34, 0x74, 0x38, 0x6d, 0x33, 0x63, 0x74, 0x78, 0x33, 0x7a, 0x35, 0x73, 0x71, 0x76, 0x35, 0x78, 0x63, 0x70, 0x73, 0x69, 0x6b, 0x61, 0x74, 0x75, 0x71, 0x32, 0x79, 0x34, 0x6d, 0x31, 0x30, 0x64, 0x74, 0x31, 0x36, 0x68, 0x32, 0x35, 0x6d, 0x35, 0x38, 0x73, 0x32, 0x38, 0x38, 0x33, 0x34, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x63, 0x6a, 0x67, 0x33, 0x34, 0x63, 0x34, 0x65, 0x33, 0x75, 0x68, 0x72, 0x6a, 0x72, 0x79, 0x39, 0x34, 0x7a, 0x34, 0x38, 0x78, 0x62, 0x7a, 0x67, 0x65, 0x68, 0x63, 0x79, 0x37, 0x67, 0x77, 0x64, 0x6b, 0x6b, 0x70, 0x71, 0x78, 0x7a, 0x78, 0x64, 0x32, 0x61, 0x34, 0x34, 0x63, 0x61, 0x6a, 0x67, 0x72, 0x77, 0x38, 0x32, 0x33, 0x39, 0x78, 0x77, 0x68, 0x72, 0x7a, 0x6e, 0x7a, 0x75, 0x68, 0x7a, 0x67, 0x6d, 0x75, 0x78, 0x66, 0x7a, 0x6e, 0x6a, 0x63, 0x38, 0x62, 0x70, 0x73, 0x66, 0x79, 0x33, 0x74, 0x32, 0x70, 0x71, 0x65, 0x34, 0x74, 0x32, 0x72, 0x72, 0x38, 0x33, 0x33, 0x6b, 0x34, 0x35, 0x62, 0x35, 0x66, 0x6e, 0x39, 0x6b, 0x36, 0x36, 0x76, 0x62, 0x6a, 0x64, 0x69, 0x78, 0x6e, 0x6a, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x74, 0x62, 0x77, 0x68, 0x67, 0x65, 0x32, 0x6e, 0x66, 0x71, 0x35, 0x66, 0x73, 0x62, 0x61, 0x6b, 0x69, 0x65, 0x33, 0x35, 0x37, 0x38, 0x65, 0x61, 0x71, 0x6e, 0x76, 0x62, 0x71, 0x6e, 0x67, 0x70, 0x73, 0x78, 0x36, 0x67, 0x6e, 0x7a, 0x76, 0x62, 0x69, 0x69, 0x75, 0x63, 0x70, 0x69, 0x39, 0x65, 0x70, 0x64, 0x67, 0x69, 0x72, 0x78, 0x66, 0x79, 0x70, 0x33, 0x79, 0x6a, 0x67, 0x71, 0x50, 0x45, 0x57, 0x43, 0x61, 0x66, 0x59, 0x34, 0x70, 0x52, 0x69, 0x63, 0x69, 0x6a, 0x66, 0x38, 0x00, 0x1f, 0x6f, 0x78, 0xa1, 0x5d, 0x52, 0x57, 0x6e, 0x64, 0x61, 0x63, 0x70, 0x64, 0x75, 0x68, 0x77, 0x7a, 0x72, 0x33, 0x71, 0x75, 0x75, 0x35, 0x68, 0x39, 0x67, 0x72, 0x72, 0x6b, 0x6e, 0x37, 0x33, 0x70, 0x66, 0x73, 0x71, 0x33, 0x36, 0x73, 0x37, 0x6d, 0x77, 0x35, 0x38, 0x73, 0x65, 0x76, 0x35, 0x33, 0x6d, 0x36, 0x37, 0x71, 0x66, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				74363158288344,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: PEWCafY4pRicijf8
				[]byte{0x3c, 0x45, 0x82, 0x69, 0xf6, 0x38, 0xa5, 0x18, 0x9c, 0x8a, 0x37, 0xfc},
				createchildaccountChildDelegationNode,
				8848288172036695,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				74363158288344,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: PEWCafY4pRicijf8
				[]byte{0x3c, 0x45, 0x82, 0x69, 0xf6, 0x38, 0xa5, 0x18, 0x9c, 0x8a, 0x37, 0xfc},
				createchildaccountChildDelegationNode,
				8848288172036695,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAQZ23lCCqEAGnsPnaHaWA==
	expect := []byte{0x00, 0x04, 0x19, 0xdb, 0x79, 0x42, 0x0a, 0xa1, 0x00, 0x1a, 0x7b, 0x0f, 0x9d, 0xa1, 0xda, 0x58}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				1154330329746081,
				7453656393833048,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				1154330329746081,
				7453656393833048,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBqZmJjeCBlZmYgc3d4cCBkbmpvYmMgbnZsIHRlbWFwZXogbGVxIGh5enJ5d2ogcGogcGYgAABHk2ycZ0ttb2pqZkFqYnJURUo0dFZ1
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x6a, 0x66, 0x62, 0x63, 0x78, 0x20, 0x65, 0x66, 0x66, 0x20, 0x73, 0x77, 0x78, 0x70, 0x20, 0x64, 0x6e, 0x6a, 0x6f, 0x62, 0x63, 0x20, 0x6e, 0x76, 0x6c, 0x20, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x65, 0x7a, 0x20, 0x6c, 0x65, 0x71, 0x20, 0x68, 0x79, 0x7a, 0x72, 0x79, 0x77, 0x6a, 0x20, 0x70, 0x6a, 0x20, 0x70, 0x66, 0x20, 0x00, 0x00, 0x47, 0x93, 0x6c, 0x9c, 0x67, 0x4b, 0x6d, 0x6f, 0x6a, 0x6a, 0x66, 0x41, 0x6a, 0x62, 0x72, 0x54, 0x45, 0x4a, 0x34, 0x74, 0x56, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: jfbcx eff swxp dnjobc nvl temapez leq hyzrywj pj pf ",
				// Value as b64: mojjfAjbrTEJ4tVu
				[]byte{0x9a, 0x88, 0xe3, 0x7c, 0x08, 0xdb, 0xad, 0x31, 0x09, 0xe2, 0xd5, 0x6e},
				78698507953995,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: jfbcx eff swxp dnjobc nvl temapez leq hyzrywj pj pf ",
				// Value as b64: mojjfAjbrTEJ4tVu
				[]byte{0x9a, 0x88, 0xe3, 0x7c, 0x08, 0xdb, 0xad, 0x31, 0x09, 0xe2, 0xd5, 0x6e},
				78698507953995,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetStakeRules_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setstakerulesTarget, err := address.Validate("ndaa9dqdxapninpffm5p3qsk92k3tqkdgtd8map86m3az8jm")
	require.NoError(t, err)

	// ABJWA4PReWBLeHZSN3M2TFFCTmY1VFh1bmRhYTlkcWR4YXBuaW5wZmZtNXAzcXNrOTJrM3Rxa2RndGQ4bWFwODZtM2F6OGpt
	expect := []byte{0x00, 0x12, 0x56, 0x03, 0x83, 0xd1, 0x79, 0x60, 0x4b, 0x78, 0x76, 0x52, 0x37, 0x73, 0x36, 0x4c, 0x51, 0x42, 0x4e, 0x66, 0x35, 0x54, 0x58, 0x75, 0x6e, 0x64, 0x61, 0x61, 0x39, 0x64, 0x71, 0x64, 0x78, 0x61, 0x70, 0x6e, 0x69, 0x6e, 0x70, 0x66, 0x66, 0x6d, 0x35, 0x70, 0x33, 0x71, 0x73, 0x6b, 0x39, 0x32, 0x6b, 0x33, 0x74, 0x71, 0x6b, 0x64, 0x67, 0x74, 0x64, 0x38, 0x6d, 0x61, 0x70, 0x38, 0x36, 0x6d, 0x33, 0x61, 0x7a, 0x38, 0x6a, 0x6d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetStakeRules
	}{
		{
			"no signatures",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: KxvR7s6LQBNf5TXu
				[]byte{0x2b, 0x1b, 0xd1, 0xee, 0xce, 0x8b, 0x40, 0x13, 0x5f, 0xe5, 0x35, 0xee},
				5161122677225824,
			),
		},
		{
			"with signature",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: KxvR7s6LQBNf5TXu
				[]byte{0x2b, 0x1b, 0xd1, 0xee, 0xce, 0x8b, 0x40, 0x13, 0x5f, 0xe5, 0x35, 0xee},
				5161122677225824,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordEndowmentNAV_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABSksuo9T1IAFY++r2NfxA==
	expect := []byte{0x00, 0x14, 0xa4, 0xb2, 0xea, 0x3d, 0x4f, 0x52, 0x00, 0x15, 0x8f, 0xbe, 0xaf, 0x63, 0x5f, 0xc4}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordEndowmentNAV
	}{
		{
			"no signatures",
			NewRecordEndowmentNAV(
				5810587875233618,
				6069023660007364,
			),
		},
		{
			"with signature",
			NewRecordEndowmentNAV(
				5810587875233618,
				6069023660007364,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestResolveStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	resolvestakeTarget, err := address.Validate("ndaijphdwsh5mk846qrxnpzkjetum87g78tnqytzukvf2qre")
	require.NoError(t, err)
	resolvestakeRules, err := address.Validate("ndajeyixd6cqpv98h45587xwqad4ie7qxjuymhvs6sxu3ud5")
	require.NoError(t, err)

	// AAAAAAAAAGpuZGFqZXlpeGQ2Y3Fwdjk4aDQ1NTg3eHdxYWQ0aWU3cXhqdXltaHZzNnN4dTN1ZDUAEhhYf8eI425kYWlqcGhkd3NoNW1rODQ2cXJ4bnB6a2pldHVtODdnNzh0bnF5dHp1a3ZmMnFyZQ==
	expect := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x6e, 0x64, 0x61, 0x6a, 0x65, 0x79, 0x69, 0x78, 0x64, 0x36, 0x63, 0x71, 0x70, 0x76, 0x39, 0x38, 0x68, 0x34, 0x35, 0x35, 0x38, 0x37, 0x78, 0x77, 0x71, 0x61, 0x64, 0x34, 0x69, 0x65, 0x37, 0x71, 0x78, 0x6a, 0x75, 0x79, 0x6d, 0x68, 0x76, 0x73, 0x36, 0x73, 0x78, 0x75, 0x33, 0x75, 0x64, 0x35, 0x00, 0x12, 0x18, 0x58, 0x7f, 0xc7, 0x88, 0xe3, 0x6e, 0x64, 0x61, 0x69, 0x6a, 0x70, 0x68, 0x64, 0x77, 0x73, 0x68, 0x35, 0x6d, 0x6b, 0x38, 0x34, 0x36, 0x71, 0x72, 0x78, 0x6e, 0x70, 0x7a, 0x6b, 0x6a, 0x65, 0x74, 0x75, 0x6d, 0x38, 0x37, 0x67, 0x37, 0x38, 0x74, 0x6e, 0x71, 0x79, 0x74, 0x7a, 0x75, 0x6b, 0x76, 0x66, 0x32, 0x71, 0x72, 0x65}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ResolveStake
	}{
		{
			"no signatures",
			NewResolveStake(
				resolvestakeTarget,
				resolvestakeRules,
				106,
				5093317960763619,
			),
		},
		{
			"with signature",
			NewResolveStake(
				resolvestakeTarget,
				resolvestakeRules,
				106,
				5093317960763619,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSchema_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBhZmV0IHNienJqeCB3bncgayBiZSBmIHpkY2UgABI56gyNxHo=
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x61, 0x66, 0x65, 0x74, 0x20, 0x73, 0x62, 0x7a, 0x72, 0x6a, 0x78, 0x20, 0x77, 0x6e, 0x77, 0x20, 0x6b, 0x20, 0x62, 0x65, 0x20, 0x66, 0x20, 0x7a, 0x64, 0x63, 0x65, 0x20, 0x00, 0x12, 0x39, 0xea, 0x0c, 0x8d, 0xc4, 0x7a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSchema
	}{
		{
			"no signatures",
			NewChangeSchema(
				"string: afet sbzrjx wnw k be f zdce ",
				5130226976539770,
			),
		},
		{
			"with signature",
			NewChangeSchema(
				"string: afet sbzrjx wnw k be f zdce ",
				5130226976539770,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
