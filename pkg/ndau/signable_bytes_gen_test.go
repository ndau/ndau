package ndau

import (
	"testing"

	"github.com/ndau/ndaumath/pkg/address"
	"github.com/ndau/ndaumath/pkg/signature"
	math "github.com/ndau/ndaumath/pkg/types"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndanpvvamfgmkrpqccsqt5g38spk4qgb5kiuyd5mmyi2thgw")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndake7anz46wh67nkhkrbk6ccjdx2yyrpscjtt28v8i3ejii")
	require.NoError(t, err)

	// bmRha2U3YW56NDZ3aDY3bmtoa3JiazZjY2pkeDJ5eXJwc2NqdHQyOHY4aTNlamlpAAWCIQf8/70AApoPXz8aEm5kYW5wdnZhbWZnbWtycHFjY3NxdDVnMzhzcGs0cWdiNWtpdXlkNW1teWkydGhndw==
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x65, 0x37, 0x61, 0x6e, 0x7a, 0x34, 0x36, 0x77, 0x68, 0x36, 0x37, 0x6e, 0x6b, 0x68, 0x6b, 0x72, 0x62, 0x6b, 0x36, 0x63, 0x63, 0x6a, 0x64, 0x78, 0x32, 0x79, 0x79, 0x72, 0x70, 0x73, 0x63, 0x6a, 0x74, 0x74, 0x32, 0x38, 0x76, 0x38, 0x69, 0x33, 0x65, 0x6a, 0x69, 0x69, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x6e, 0x70, 0x76, 0x76, 0x61, 0x6d, 0x66, 0x67, 0x6d, 0x6b, 0x72, 0x70, 0x71, 0x63, 0x63, 0x73, 0x71, 0x74, 0x35, 0x67, 0x33, 0x38, 0x73, 0x70, 0x6b, 0x34, 0x71, 0x67, 0x62, 0x35, 0x6b, 0x69, 0x75, 0x79, 0x64, 0x35, 0x6d, 0x6d, 0x79, 0x69, 0x32, 0x74, 0x68, 0x67, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndara9x57dpyyrn2hiryiumk9dbix3s32r76w8twe2gqj7tu")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xa5, 0x99, 0xe3, 0xb3, 0x1e, 0x4e, 0x78, 0xdc, 0x27, 0x68, 0xf9, 0x15, 0x34, 0xbe, 0xdf, 0xf5, 0x47, 0x38, 0x7d, 0x3d, 0xc7, 0x9f, 0x88, 0x92, 0x3f, 0xa8, 0x2c, 0x2c, 0xe1, 0xf2, 0xdd, 0x5f}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWN1M3YyN3ZkM2hodHpiaHBkNnRrcGY4NTk0d3FxZDdoemQzOWNldWg4d2MybWhiOG1xeDljdHhkOWh4aDM0dwAQTcdmlXTFbmRhcmE5eDU3ZHB5eXJuMmhpcnlpdW1rOWRiaXgzczMycjc2dzh0d2UyZ3FqN3R1enlxcDNWUlI1ajJEV1NEKw==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x75, 0x33, 0x76, 0x32, 0x37, 0x76, 0x64, 0x33, 0x68, 0x68, 0x74, 0x7a, 0x62, 0x68, 0x70, 0x64, 0x36, 0x74, 0x6b, 0x70, 0x66, 0x38, 0x35, 0x39, 0x34, 0x77, 0x71, 0x71, 0x64, 0x37, 0x68, 0x7a, 0x64, 0x33, 0x39, 0x63, 0x65, 0x75, 0x68, 0x38, 0x77, 0x63, 0x32, 0x6d, 0x68, 0x62, 0x38, 0x6d, 0x71, 0x78, 0x39, 0x63, 0x74, 0x78, 0x64, 0x39, 0x68, 0x78, 0x68, 0x33, 0x34, 0x77, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x72, 0x61, 0x39, 0x78, 0x35, 0x37, 0x64, 0x70, 0x79, 0x79, 0x72, 0x6e, 0x32, 0x68, 0x69, 0x72, 0x79, 0x69, 0x75, 0x6d, 0x6b, 0x39, 0x64, 0x62, 0x69, 0x78, 0x33, 0x73, 0x33, 0x32, 0x72, 0x37, 0x36, 0x77, 0x38, 0x74, 0x77, 0x65, 0x32, 0x67, 0x71, 0x6a, 0x37, 0x74, 0x75, 0x7a, 0x79, 0x71, 0x70, 0x33, 0x56, 0x52, 0x52, 0x35, 0x6a, 0x32, 0x44, 0x57, 0x53, 0x44, 0x2b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: zyqp3VRR5j2DWSD+
				[]byte{0xcf, 0x2a, 0xa9, 0xdd, 0x54, 0x51, 0xe6, 0x3d, 0x83, 0x59, 0x20, 0xfe},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: zyqp3VRR5j2DWSD+
				[]byte{0xcf, 0x2a, 0xa9, 0xdd, 0x54, 0x51, 0xe6, 0x3d, 0x83, 0x59, 0x20, 0xfe},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndaatdr8q7saz7ex2zgeucsda2sun96db3ucaw3xbinafvw7")
	require.NoError(t, err)

	// bmRhYXRkcjhxN3NhejdleDJ6Z2V1Y3NkYTJzdW45NmRiM3VjYXczeGJpbmFmdnc3AAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x74, 0x64, 0x72, 0x38, 0x71, 0x37, 0x73, 0x61, 0x7a, 0x37, 0x65, 0x78, 0x32, 0x7a, 0x67, 0x65, 0x75, 0x63, 0x73, 0x64, 0x61, 0x32, 0x73, 0x75, 0x6e, 0x39, 0x36, 0x64, 0x62, 0x33, 0x75, 0x63, 0x61, 0x77, 0x33, 0x78, 0x62, 0x69, 0x6e, 0x61, 0x66, 0x76, 0x77, 0x37, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeRecoursePeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changerecourseperiodTarget, err := address.Validate("ndaijrh965d93e35zrsn8h3a5hygqdf52wwcuw5kd4ujn2w7")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFpanJoOTY1ZDkzZTM1enJzbjhoM2E1aHlncWRmNTJ3d2N1dzVrZDR1am4ydzc=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x69, 0x6a, 0x72, 0x68, 0x39, 0x36, 0x35, 0x64, 0x39, 0x33, 0x65, 0x33, 0x35, 0x7a, 0x72, 0x73, 0x6e, 0x38, 0x68, 0x33, 0x61, 0x35, 0x68, 0x79, 0x67, 0x71, 0x64, 0x66, 0x35, 0x32, 0x77, 0x77, 0x63, 0x75, 0x77, 0x35, 0x6b, 0x64, 0x34, 0x75, 0x6a, 0x6e, 0x32, 0x77, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeRecoursePeriod
	}{
		{
			"no signatures",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeRecoursePeriod(
				changerecourseperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndabmdu9uueng2jewgps8b7wc4wkucmkzb2xyxz4teuyju5h")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndafedfvcwpj2bq49htaj73euimhjcuh6jxwu3qggkriqimj")
	require.NoError(t, err)

	// bmRhZmVkZnZjd3BqMmJxNDlodGFqNzNldWltaGpjdWg2anh3dTNxZ2drcmlxaW1qAAjSrCLE0zRuZGFibWR1OXV1ZW5nMmpld2dwczhiN3djNHdrdWNta3piMnh5eHo0dGV1eWp1NWg=
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x65, 0x64, 0x66, 0x76, 0x63, 0x77, 0x70, 0x6a, 0x32, 0x62, 0x71, 0x34, 0x39, 0x68, 0x74, 0x61, 0x6a, 0x37, 0x33, 0x65, 0x75, 0x69, 0x6d, 0x68, 0x6a, 0x63, 0x75, 0x68, 0x36, 0x6a, 0x78, 0x77, 0x75, 0x33, 0x71, 0x67, 0x67, 0x6b, 0x72, 0x69, 0x71, 0x69, 0x6d, 0x6a, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x62, 0x6d, 0x64, 0x75, 0x39, 0x75, 0x75, 0x65, 0x6e, 0x67, 0x32, 0x6a, 0x65, 0x77, 0x67, 0x70, 0x73, 0x38, 0x62, 0x37, 0x77, 0x63, 0x34, 0x77, 0x6b, 0x75, 0x63, 0x6d, 0x6b, 0x7a, 0x62, 0x32, 0x78, 0x79, 0x78, 0x7a, 0x34, 0x74, 0x65, 0x75, 0x79, 0x6a, 0x75, 0x35, 0x68}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndaahvb5vtif5rrj6agv753u8i6qwsnzyx3i2mpjuzrssrrj")
	require.NoError(t, err)

	// bmRhYWh2YjV2dGlmNXJyajZhZ3Y3NTN1OGk2cXdzbnp5eDNpMm1wanV6cnNzcnJqAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x68, 0x76, 0x62, 0x35, 0x76, 0x74, 0x69, 0x66, 0x35, 0x72, 0x72, 0x6a, 0x36, 0x61, 0x67, 0x76, 0x37, 0x35, 0x33, 0x75, 0x38, 0x69, 0x36, 0x71, 0x77, 0x73, 0x6e, 0x7a, 0x79, 0x78, 0x33, 0x69, 0x32, 0x6d, 0x70, 0x6a, 0x75, 0x7a, 0x72, 0x73, 0x73, 0x72, 0x72, 0x6a, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndaevrkgqzxeffvkh7warhbmp9wfxw56iat9668vi7ui4z64")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhZXZya2dxenhlZmZ2a2g3d2FyaGJtcDl3Znh3NTZpYXQ5NjY4dmk3dWk0ejY0
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x65, 0x76, 0x72, 0x6b, 0x67, 0x71, 0x7a, 0x78, 0x65, 0x66, 0x66, 0x76, 0x6b, 0x68, 0x37, 0x77, 0x61, 0x72, 0x68, 0x62, 0x6d, 0x70, 0x39, 0x77, 0x66, 0x78, 0x77, 0x35, 0x36, 0x69, 0x61, 0x74, 0x39, 0x36, 0x36, 0x38, 0x76, 0x69, 0x37, 0x75, 0x69, 0x34, 0x7a, 0x36, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndanhqvchgkxj966a9c8mrugvypfsjpe3tiejnv4c6zh6g83")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFuaHF2Y2hna3hqOTY2YTljOG1ydWd2eXBmc2pwZTN0aWVqbnY0YzZ6aDZnODM=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x6e, 0x68, 0x71, 0x76, 0x63, 0x68, 0x67, 0x6b, 0x78, 0x6a, 0x39, 0x36, 0x36, 0x61, 0x39, 0x63, 0x38, 0x6d, 0x72, 0x75, 0x67, 0x76, 0x79, 0x70, 0x66, 0x73, 0x6a, 0x70, 0x65, 0x33, 0x74, 0x69, 0x65, 0x6a, 0x6e, 0x76, 0x34, 0x63, 0x36, 0x7a, 0x68, 0x36, 0x67, 0x38, 0x33}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndam2wmnkj75zjkrbsac8mgfz6yeedt7teqsna67ma6r6tzp")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndanr7jcsmype4kyak5x2uefxxgvnsnqjk95crbadx26qkum")
	require.NoError(t, err)

	// bmRhbnI3amNzbXlwZTRreWFrNXgydWVmeHhndm5zbnFqazk1Y3JiYWR4MjZxa3VtAAz/orpRehFuZGFtMndtbmtqNzV6amtyYnNhYzhtZ2Z6NnllZWR0N3RlcXNuYTY3bWE2cjZ0enA=
	expect := []byte{0x6e, 0x64, 0x61, 0x6e, 0x72, 0x37, 0x6a, 0x63, 0x73, 0x6d, 0x79, 0x70, 0x65, 0x34, 0x6b, 0x79, 0x61, 0x6b, 0x35, 0x78, 0x32, 0x75, 0x65, 0x66, 0x78, 0x78, 0x67, 0x76, 0x6e, 0x73, 0x6e, 0x71, 0x6a, 0x6b, 0x39, 0x35, 0x63, 0x72, 0x62, 0x61, 0x64, 0x78, 0x32, 0x36, 0x71, 0x6b, 0x75, 0x6d, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x6d, 0x32, 0x77, 0x6d, 0x6e, 0x6b, 0x6a, 0x37, 0x35, 0x7a, 0x6a, 0x6b, 0x72, 0x62, 0x73, 0x61, 0x63, 0x38, 0x6d, 0x67, 0x66, 0x7a, 0x36, 0x79, 0x65, 0x65, 0x64, 0x74, 0x37, 0x74, 0x65, 0x71, 0x73, 0x6e, 0x61, 0x36, 0x37, 0x6d, 0x61, 0x36, 0x72, 0x36, 0x74, 0x7a, 0x70}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndampebi39gdc8xks4bsn6u8msh5vsdkhkd7we7cv86wjkev")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xe6, 0x4a, 0x1f, 0x6b, 0x9e, 0x2d, 0xb6, 0x60, 0xb5, 0x2c, 0xba, 0x43, 0x0a, 0x97, 0xdc, 0xde, 0xae, 0xb7, 0xe9, 0xcd, 0x3d, 0x32, 0xcf, 0x92, 0xd6, 0x62, 0x9c, 0x49, 0xe6, 0xf6, 0x3a, 0x45}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xbb, 0x7d, 0x44, 0xc2, 0x0a, 0x92, 0x1f, 0xfc, 0x93, 0xb0, 0xd0, 0xc0, 0x25, 0x3f, 0x7e, 0x2f, 0x0a, 0x45, 0x17, 0xcc, 0xbe, 0x25, 0x8b, 0x9d, 0x34, 0x70, 0xbe, 0x70, 0x5d, 0xb4, 0x9e, 0x77}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWR2ZXdoNW12Mnk1bjJmeGZ1N2VnY3d6NXZyazdwOWozdzh2ZnY2dTQzdGoydXJnODI3ZWt0M3U5eXNxMmtmOQAZX/GDxHNZbmRhbXBlYmkzOWdkYzh4a3M0YnNuNnU4bXNoNXZzZGtoa2Q3d2U3Y3Y4Nndqa2V2bnB1YmE4amFkdGJiZWM3ejR0Z2Nia2piOTlldnlkaW5hamo5cjJ6c3d0aXozdTljbWM2N2d0Mm02NmM3eXVyaHI3NDdoNGFtbTQ3YVhjZzdpa2FlTVJxUUdCdkM=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x76, 0x65, 0x77, 0x68, 0x35, 0x6d, 0x76, 0x32, 0x79, 0x35, 0x6e, 0x32, 0x66, 0x78, 0x66, 0x75, 0x37, 0x65, 0x67, 0x63, 0x77, 0x7a, 0x35, 0x76, 0x72, 0x6b, 0x37, 0x70, 0x39, 0x6a, 0x33, 0x77, 0x38, 0x76, 0x66, 0x76, 0x36, 0x75, 0x34, 0x33, 0x74, 0x6a, 0x32, 0x75, 0x72, 0x67, 0x38, 0x32, 0x37, 0x65, 0x6b, 0x74, 0x33, 0x75, 0x39, 0x79, 0x73, 0x71, 0x32, 0x6b, 0x66, 0x39, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x6d, 0x70, 0x65, 0x62, 0x69, 0x33, 0x39, 0x67, 0x64, 0x63, 0x38, 0x78, 0x6b, 0x73, 0x34, 0x62, 0x73, 0x6e, 0x36, 0x75, 0x38, 0x6d, 0x73, 0x68, 0x35, 0x76, 0x73, 0x64, 0x6b, 0x68, 0x6b, 0x64, 0x37, 0x77, 0x65, 0x37, 0x63, 0x76, 0x38, 0x36, 0x77, 0x6a, 0x6b, 0x65, 0x76, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x37, 0x7a, 0x34, 0x74, 0x67, 0x63, 0x62, 0x6b, 0x6a, 0x62, 0x39, 0x39, 0x65, 0x76, 0x79, 0x64, 0x69, 0x6e, 0x61, 0x6a, 0x6a, 0x39, 0x72, 0x32, 0x7a, 0x73, 0x77, 0x74, 0x69, 0x7a, 0x33, 0x75, 0x39, 0x63, 0x6d, 0x63, 0x36, 0x37, 0x67, 0x74, 0x32, 0x6d, 0x36, 0x36, 0x63, 0x37, 0x79, 0x75, 0x72, 0x68, 0x72, 0x37, 0x34, 0x37, 0x68, 0x34, 0x61, 0x6d, 0x6d, 0x34, 0x37, 0x61, 0x58, 0x63, 0x67, 0x37, 0x69, 0x6b, 0x61, 0x65, 0x4d, 0x52, 0x71, 0x51, 0x47, 0x42, 0x76, 0x43}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: Xcg7ikaeMRqQGBvC
				[]byte{0x5d, 0xc8, 0x3b, 0x8a, 0x46, 0x9e, 0x31, 0x1a, 0x90, 0x18, 0x1b, 0xc2},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: Xcg7ikaeMRqQGBvC
				[]byte{0x5d, 0xc8, 0x3b, 0x8a, 0x46, 0x9e, 0x31, 0x1a, 0x90, 0x18, 0x1b, 0xc2},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndajdprgzwk6646za4w48wne2b39nuv7jzkih3crk659xvbi")
	require.NoError(t, err)
	stakeRules, err := address.Validate("ndah48bpbgfy96cuhn66x33x6t7dbh5vz4bqd2crsg5pck32")
	require.NoError(t, err)
	stakeStakeTo, err := address.Validate("ndaqneeyyi6fib873h2jxpexdn5n7k9n28z9p6s3fppg5qnj")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFoNDhicGJnZnk5NmN1aG42NngzM3g2dDdkYmg1dno0YnFkMmNyc2c1cGNrMzIABJUapCZXuW5kYXFuZWV5eWk2ZmliODczaDJqeHBleGRuNW43azluMjh6OXA2czNmcHBnNXFuam5kYWpkcHJnendrNjY0NnphNHc0OHduZTJiMzludXY3anpraWgzY3JrNjU5eHZiaQ==
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x68, 0x34, 0x38, 0x62, 0x70, 0x62, 0x67, 0x66, 0x79, 0x39, 0x36, 0x63, 0x75, 0x68, 0x6e, 0x36, 0x36, 0x78, 0x33, 0x33, 0x78, 0x36, 0x74, 0x37, 0x64, 0x62, 0x68, 0x35, 0x76, 0x7a, 0x34, 0x62, 0x71, 0x64, 0x32, 0x63, 0x72, 0x73, 0x67, 0x35, 0x70, 0x63, 0x6b, 0x33, 0x32, 0x00, 0x04, 0x95, 0x1a, 0xa4, 0x26, 0x57, 0xb9, 0x6e, 0x64, 0x61, 0x71, 0x6e, 0x65, 0x65, 0x79, 0x79, 0x69, 0x36, 0x66, 0x69, 0x62, 0x38, 0x37, 0x33, 0x68, 0x32, 0x6a, 0x78, 0x70, 0x65, 0x78, 0x64, 0x6e, 0x35, 0x6e, 0x37, 0x6b, 0x39, 0x6e, 0x32, 0x38, 0x7a, 0x39, 0x70, 0x36, 0x73, 0x33, 0x66, 0x70, 0x70, 0x67, 0x35, 0x71, 0x6e, 0x6a, 0x6e, 0x64, 0x61, 0x6a, 0x64, 0x70, 0x72, 0x67, 0x7a, 0x77, 0x6b, 0x36, 0x36, 0x34, 0x36, 0x7a, 0x61, 0x34, 0x77, 0x34, 0x38, 0x77, 0x6e, 0x65, 0x32, 0x62, 0x33, 0x39, 0x6e, 0x75, 0x76, 0x37, 0x6a, 0x7a, 0x6b, 0x69, 0x68, 0x33, 0x63, 0x72, 0x6b, 0x36, 0x35, 0x39, 0x78, 0x76, 0x62, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeRules,
				stakeStakeTo,
				6229113420623440,
				1289841562507193,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndaagx6vuq9vkhdrcz98ysggv5ksc73j4du95gy4qvcpf2mn")
	require.NoError(t, err)
	registernodeOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xab, 0x2c, 0xe4, 0x85, 0x9e, 0x33, 0xe1, 0x00, 0x72, 0x3c, 0x39, 0xf6, 0x21, 0x8d, 0x19, 0x0f, 0xb2, 0xad, 0x6b, 0x3c, 0xe3, 0x2a, 0x7a, 0x05, 0xc9, 0x36, 0xb7, 0x45, 0xec, 0x21, 0x22, 0x6e}, nil)
	require.NoError(t, err)

	// VkZUZEd4RWtXV2ZOVnZzRm5kYWFneDZ2dXE5dmtoZHJjejk4eXNnZ3Y1a3NjNzNqNGR1OTVneTRxdmNwZjJtbm5wdWJhOGphZHRiYmVjeHUzM2VmdjIzOGNhZHVoczY5bmlucGRlaDVmbW1taHZ0dXc4c2YzZTVtcXRybmVldGc2Z2docmRqa2NhdzQAGnaLfE4MiQ==
	expect := []byte{0x56, 0x46, 0x54, 0x64, 0x47, 0x78, 0x45, 0x6b, 0x57, 0x57, 0x66, 0x4e, 0x56, 0x76, 0x73, 0x46, 0x6e, 0x64, 0x61, 0x61, 0x67, 0x78, 0x36, 0x76, 0x75, 0x71, 0x39, 0x76, 0x6b, 0x68, 0x64, 0x72, 0x63, 0x7a, 0x39, 0x38, 0x79, 0x73, 0x67, 0x67, 0x76, 0x35, 0x6b, 0x73, 0x63, 0x37, 0x33, 0x6a, 0x34, 0x64, 0x75, 0x39, 0x35, 0x67, 0x79, 0x34, 0x71, 0x76, 0x63, 0x70, 0x66, 0x32, 0x6d, 0x6e, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x78, 0x75, 0x33, 0x33, 0x65, 0x66, 0x76, 0x32, 0x33, 0x38, 0x63, 0x61, 0x64, 0x75, 0x68, 0x73, 0x36, 0x39, 0x6e, 0x69, 0x6e, 0x70, 0x64, 0x65, 0x68, 0x35, 0x66, 0x6d, 0x6d, 0x6d, 0x68, 0x76, 0x74, 0x75, 0x77, 0x38, 0x73, 0x66, 0x33, 0x65, 0x35, 0x6d, 0x71, 0x74, 0x72, 0x6e, 0x65, 0x65, 0x74, 0x67, 0x36, 0x67, 0x67, 0x68, 0x72, 0x64, 0x6a, 0x6b, 0x63, 0x61, 0x77, 0x34, 0x00, 0x1a, 0x76, 0x8b, 0x7c, 0x4e, 0x0c, 0x89}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: VFTdGxEkWWfNVvsF
				[]byte{0x54, 0x54, 0xdd, 0x1b, 0x11, 0x24, 0x59, 0x67, 0xcd, 0x56, 0xfb, 0x05},
				*registernodeOwnership,
				7448690852498569,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: VFTdGxEkWWfNVvsF
				[]byte{0x54, 0x54, 0xdd, 0x1b, 0x11, 0x24, 0x59, 0x67, 0xcd, 0x56, 0xfb, 0x05},
				*registernodeOwnership,
				7448690852498569,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AARcldRJHkcADD8lJWMkPQ==
	expect := []byte{0x00, 0x04, 0x5c, 0x95, 0xd4, 0x49, 0x1e, 0x47, 0x00, 0x0c, 0x3f, 0x25, 0x25, 0x63, 0x24, 0x3d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				1227698488286791,
				3447128494122045,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				1227698488286791,
				3447128494122045,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndaexsurpigpk9bkaii44wik629b2bfrt6dxz2zkyarjr4s8")
	require.NoError(t, err)

	// bmRhZXhzdXJwaWdwazlia2FpaTQ0d2lrNjI5YjJiZnJ0NmR4ejJ6a3lhcmpyNHM4ABmL4qnXjlI=
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x78, 0x73, 0x75, 0x72, 0x70, 0x69, 0x67, 0x70, 0x6b, 0x39, 0x62, 0x6b, 0x61, 0x69, 0x69, 0x34, 0x34, 0x77, 0x69, 0x6b, 0x36, 0x32, 0x39, 0x62, 0x32, 0x62, 0x66, 0x72, 0x74, 0x36, 0x64, 0x78, 0x7a, 0x32, 0x7a, 0x6b, 0x79, 0x61, 0x72, 0x6a, 0x72, 0x34, 0x73, 0x38, 0x00, 0x19, 0x8b, 0xe2, 0xa9, 0xd7, 0x8e, 0x52}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				7190680046112338,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				7190680046112338,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndae6vkkubdx9r7gc32c6pxubff6i3jru3fbzprfwpamj5j4")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndadn76n26skvccqd4f8fs96nw35nhfa2cir9dvrua2ssksf")
	require.NoError(t, err)

	// bmRhZG43Nm4yNnNrdmNjcWQ0Zjhmczk2bnczNW5oZmEyY2lyOWR2cnVhMnNza3NmNHk2bTJkdDdoMThtNThzMTQ5OTU2dXMAAgcPFpwR8QAL0mi2jmyHbmRhZTZ2a2t1YmR4OXI3Z2MzMmM2cHh1YmZmNmkzanJ1M2ZienByZndwYW1qNWo0
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x6e, 0x37, 0x36, 0x6e, 0x32, 0x36, 0x73, 0x6b, 0x76, 0x63, 0x63, 0x71, 0x64, 0x34, 0x66, 0x38, 0x66, 0x73, 0x39, 0x36, 0x6e, 0x77, 0x33, 0x35, 0x6e, 0x68, 0x66, 0x61, 0x32, 0x63, 0x69, 0x72, 0x39, 0x64, 0x76, 0x72, 0x75, 0x61, 0x32, 0x73, 0x73, 0x6b, 0x73, 0x66, 0x34, 0x79, 0x36, 0x6d, 0x32, 0x64, 0x74, 0x37, 0x68, 0x31, 0x38, 0x6d, 0x35, 0x38, 0x73, 0x31, 0x34, 0x39, 0x39, 0x35, 0x36, 0x75, 0x73, 0x00, 0x02, 0x07, 0x0f, 0x16, 0x9c, 0x11, 0xf1, 0x00, 0x0b, 0xd2, 0x68, 0xb6, 0x8e, 0x6c, 0x87, 0x6e, 0x64, 0x61, 0x65, 0x36, 0x76, 0x6b, 0x6b, 0x75, 0x62, 0x64, 0x78, 0x39, 0x72, 0x37, 0x67, 0x63, 0x33, 0x32, 0x63, 0x36, 0x70, 0x78, 0x75, 0x62, 0x66, 0x66, 0x36, 0x69, 0x33, 0x6a, 0x72, 0x75, 0x33, 0x66, 0x62, 0x7a, 0x70, 0x72, 0x66, 0x77, 0x70, 0x61, 0x6d, 0x6a, 0x35, 0x6a, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				570711338652145,
				141895138149956,
				3327571925036167,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				570711338652145,
				141895138149956,
				3327571925036167,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	commandvalidatorchangeNode, err := address.Validate("ndaqsnzk4rau7eea68qxk9sxxfvduxq3xnwaenwfyi5g42uy")
	require.NoError(t, err)

	// bmRhcXNuems0cmF1N2VlYTY4cXhrOXN4eGZ2ZHV4cTN4bndhZW53ZnlpNWc0MnV5AAYeknWYCWgABMR/LN9ctg==
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x73, 0x6e, 0x7a, 0x6b, 0x34, 0x72, 0x61, 0x75, 0x37, 0x65, 0x65, 0x61, 0x36, 0x38, 0x71, 0x78, 0x6b, 0x39, 0x73, 0x78, 0x78, 0x66, 0x76, 0x64, 0x75, 0x78, 0x71, 0x33, 0x78, 0x6e, 0x77, 0x61, 0x65, 0x6e, 0x77, 0x66, 0x79, 0x69, 0x35, 0x67, 0x34, 0x32, 0x75, 0x79, 0x00, 0x06, 0x1e, 0x92, 0x75, 0x98, 0x09, 0x68, 0x00, 0x04, 0xc4, 0x7f, 0x2c, 0xdf, 0x5c, 0xb6}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				commandvalidatorchangeNode,
				1722464247220584,
				1341950399569078,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				commandvalidatorchangeNode,
				1722464247220584,
				1341950399569078,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndaa6cuqdmww6zjb3trvf5w6ncaa2x3guj4er5kuwecqcvbf")
	require.NoError(t, err)

	// bmRhYTZjdXFkbXd3NnpqYjN0cnZmNXc2bmNhYTJ4M2d1ajRlcjVrdXdlY3FjdmJmAAbNK1fSk3U=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x36, 0x63, 0x75, 0x71, 0x64, 0x6d, 0x77, 0x77, 0x36, 0x7a, 0x6a, 0x62, 0x33, 0x74, 0x72, 0x76, 0x66, 0x35, 0x77, 0x36, 0x6e, 0x63, 0x61, 0x61, 0x32, 0x78, 0x33, 0x67, 0x75, 0x6a, 0x34, 0x65, 0x72, 0x35, 0x6b, 0x75, 0x77, 0x65, 0x63, 0x71, 0x63, 0x76, 0x62, 0x66, 0x00, 0x06, 0xcd, 0x2b, 0x57, 0xd2, 0x93, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				1914435900969845,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				1914435900969845,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndamwvqcqyppbrcun27pzvgtem98hwx8gpyfbgnuw4me6y79")
	require.NoError(t, err)
	unstakeRules, err := address.Validate("ndaq5u8k9w3i9as23xp6tdrkd6cnhbkrq6nirr59psa4utyf")
	require.NoError(t, err)
	unstakeStakeTo, err := address.Validate("ndam4e52r4rtc5tk9f7v4pz84kuj4t78v8y4gc8jtnvggugz")
	require.NoError(t, err)

	// ABRQL8XW1WpuZGFxNXU4azl3M2k5YXMyM3hwNnRkcmtkNmNuaGJrcnE2bmlycjU5cHNhNHV0eWYAEUz4a4PRtW5kYW00ZTUycjRydGM1dGs5Zjd2NHB6ODRrdWo0dDc4djh5NGdjOGp0bnZnZ3Vnem5kYW13dnFjcXlwcGJyY3VuMjdwenZndGVtOThod3g4Z3B5ZmJnbnV3NG1lNnk3OQ==
	expect := []byte{0x00, 0x14, 0x50, 0x2f, 0xc5, 0xd6, 0xd5, 0x6a, 0x6e, 0x64, 0x61, 0x71, 0x35, 0x75, 0x38, 0x6b, 0x39, 0x77, 0x33, 0x69, 0x39, 0x61, 0x73, 0x32, 0x33, 0x78, 0x70, 0x36, 0x74, 0x64, 0x72, 0x6b, 0x64, 0x36, 0x63, 0x6e, 0x68, 0x62, 0x6b, 0x72, 0x71, 0x36, 0x6e, 0x69, 0x72, 0x72, 0x35, 0x39, 0x70, 0x73, 0x61, 0x34, 0x75, 0x74, 0x79, 0x66, 0x00, 0x11, 0x4c, 0xf8, 0x6b, 0x83, 0xd1, 0xb5, 0x6e, 0x64, 0x61, 0x6d, 0x34, 0x65, 0x35, 0x32, 0x72, 0x34, 0x72, 0x74, 0x63, 0x35, 0x74, 0x6b, 0x39, 0x66, 0x37, 0x76, 0x34, 0x70, 0x7a, 0x38, 0x34, 0x6b, 0x75, 0x6a, 0x34, 0x74, 0x37, 0x38, 0x76, 0x38, 0x79, 0x34, 0x67, 0x63, 0x38, 0x6a, 0x74, 0x6e, 0x76, 0x67, 0x67, 0x75, 0x67, 0x7a, 0x6e, 0x64, 0x61, 0x6d, 0x77, 0x76, 0x71, 0x63, 0x71, 0x79, 0x70, 0x70, 0x62, 0x72, 0x63, 0x75, 0x6e, 0x32, 0x37, 0x70, 0x7a, 0x76, 0x67, 0x74, 0x65, 0x6d, 0x39, 0x38, 0x68, 0x77, 0x78, 0x38, 0x67, 0x70, 0x79, 0x66, 0x62, 0x67, 0x6e, 0x75, 0x77, 0x34, 0x6d, 0x65, 0x36, 0x79, 0x37, 0x39}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				5717665647089002,
				4869704443482549,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				unstakeRules,
				unstakeStakeTo,
				5717665647089002,
				4869704443482549,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AANMNnZ0zuoADhf3sGjcpA==
	expect := []byte{0x00, 0x03, 0x4c, 0x36, 0x76, 0x74, 0xce, 0xea, 0x00, 0x0e, 0x17, 0xf7, 0xb0, 0x68, 0xdc, 0xa4}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				928221729443562,
				3967002257972388,
			),
		},
		{
			"with signature",
			NewIssue(
				928221729443562,
				3967002257972388,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndag2mwpzj6aa5kdcaqf5c6nrxrq2up2db45x8zkfbfzei6e")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndafxq3kp6si6ra68zuk3hb7vn89e5yuqg7nyn9vx6srvu5g")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x7d, 0x38, 0x3d, 0xb7, 0xf9, 0xe3, 0x96, 0xd7, 0x65, 0xe1, 0x4f, 0x25, 0x46, 0x00, 0x7e, 0xdf, 0x18, 0xbe, 0x17, 0x3a, 0x33, 0xb3, 0x61, 0x79, 0xad, 0xf7, 0x72, 0x6a, 0xaf, 0x76, 0xbb, 0x87}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x4f, 0x17, 0xab, 0xe8, 0x49, 0x55, 0x27, 0x21, 0x1f, 0x9d, 0x7a, 0xb9, 0xbc, 0x01, 0x1e, 0x4d, 0x8f, 0x2f, 0xa9, 0x67, 0x3f, 0x9d, 0x3d, 0x60, 0x8e, 0xd9, 0x96, 0xe8, 0x10, 0xf0, 0xff, 0xc0, 0x91, 0x15, 0x33, 0xcd, 0x07, 0x9d, 0xc6, 0xf0, 0x35, 0x5b, 0xc7, 0xa5, 0x18, 0x9a, 0xb6, 0x47, 0x42, 0x7b, 0x06, 0x26, 0xea, 0xaa, 0xf8, 0x36, 0x0d, 0xcf, 0xfc, 0x13, 0x29, 0xcf, 0x3b, 0x9a})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x17, 0x48, 0xb6, 0x11, 0x0e, 0xbc, 0xe6, 0xdc, 0x79, 0xf0, 0xe6, 0xe0, 0x57, 0x41, 0xb8, 0x0f, 0x42, 0x5a, 0x8d, 0xa5, 0x5f, 0xf5, 0xaa, 0xdb, 0xc6, 0x2f, 0x50, 0x83, 0xae, 0xdc, 0xb4, 0xf1}, nil)
	require.NoError(t, err)
	createchildaccountChildDelegationNode, err := address.Validate("ndad5eej7wpzizju97ytezy73mhr9dymrs8b32zer3i5qhhp")
	require.NoError(t, err)

	// bmRhZnhxM2twNnNpNnJhNjh6dWszaGI3dm44OWU1eXVxZzdueW45dng2c3J2dTVnbmRhZDVlZWo3d3B6aXpqdTk3eXRlenk3M21ocjlkeW1yczhiMzJ6ZXIzaTVxaGhwbnB1YmE4amFkdGJiZWI4dnNycHo5aHQzcHg1ZjZmaHVrdHNhcjVydHRyc3poaTM1ZzJtM3h6NXplNHhycTQ3MnJqM21xd3phZWE2bTJ5NG0xMGR0MTZoMjVtNThzMjg4MzQ0dXNhNGphZHRjYWo2bTR6NGNqa3d2dWNoNjdyazY1MmFpOGp5aHU5a21oaDhxdjQyZXE1Z21xc2Voczk5YWpjZmp2M3dkMzV0enNneHA2cmppMnZrNWVxc3Y1YTJ2cXhrejJnMmc2OTlhdmZoaHZ6Z3dzZXR4am1tZHVucHViYThqYWR0YmJlYW13dHBzdGI0OHFwemQzOGR2cWF4NGJ6YWh3ZXl3cHd4cjlta3k1MjJ6eGJhN3E1dTRyZGQ3M3k0dndlYXkzcUpHL2FPM3M2VEZzTVhFaAAfb3ihXVJXbmRhZzJtd3B6ajZhYTVrZGNhcWY1YzZucnhycTJ1cDJkYjQ1eDh6a2ZiZnplaTZl
	expect := []byte{0x6e, 0x64, 0x61, 0x66, 0x78, 0x71, 0x33, 0x6b, 0x70, 0x36, 0x73, 0x69, 0x36, 0x72, 0x61, 0x36, 0x38, 0x7a, 0x75, 0x6b, 0x33, 0x68, 0x62, 0x37, 0x76, 0x6e, 0x38, 0x39, 0x65, 0x35, 0x79, 0x75, 0x71, 0x67, 0x37, 0x6e, 0x79, 0x6e, 0x39, 0x76, 0x78, 0x36, 0x73, 0x72, 0x76, 0x75, 0x35, 0x67, 0x6e, 0x64, 0x61, 0x64, 0x35, 0x65, 0x65, 0x6a, 0x37, 0x77, 0x70, 0x7a, 0x69, 0x7a, 0x6a, 0x75, 0x39, 0x37, 0x79, 0x74, 0x65, 0x7a, 0x79, 0x37, 0x33, 0x6d, 0x68, 0x72, 0x39, 0x64, 0x79, 0x6d, 0x72, 0x73, 0x38, 0x62, 0x33, 0x32, 0x7a, 0x65, 0x72, 0x33, 0x69, 0x35, 0x71, 0x68, 0x68, 0x70, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x38, 0x76, 0x73, 0x72, 0x70, 0x7a, 0x39, 0x68, 0x74, 0x33, 0x70, 0x78, 0x35, 0x66, 0x36, 0x66, 0x68, 0x75, 0x6b, 0x74, 0x73, 0x61, 0x72, 0x35, 0x72, 0x74, 0x74, 0x72, 0x73, 0x7a, 0x68, 0x69, 0x33, 0x35, 0x67, 0x32, 0x6d, 0x33, 0x78, 0x7a, 0x35, 0x7a, 0x65, 0x34, 0x78, 0x72, 0x71, 0x34, 0x37, 0x32, 0x72, 0x6a, 0x33, 0x6d, 0x71, 0x77, 0x7a, 0x61, 0x65, 0x61, 0x36, 0x6d, 0x32, 0x79, 0x34, 0x6d, 0x31, 0x30, 0x64, 0x74, 0x31, 0x36, 0x68, 0x32, 0x35, 0x6d, 0x35, 0x38, 0x73, 0x32, 0x38, 0x38, 0x33, 0x34, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x6a, 0x36, 0x6d, 0x34, 0x7a, 0x34, 0x63, 0x6a, 0x6b, 0x77, 0x76, 0x75, 0x63, 0x68, 0x36, 0x37, 0x72, 0x6b, 0x36, 0x35, 0x32, 0x61, 0x69, 0x38, 0x6a, 0x79, 0x68, 0x75, 0x39, 0x6b, 0x6d, 0x68, 0x68, 0x38, 0x71, 0x76, 0x34, 0x32, 0x65, 0x71, 0x35, 0x67, 0x6d, 0x71, 0x73, 0x65, 0x68, 0x73, 0x39, 0x39, 0x61, 0x6a, 0x63, 0x66, 0x6a, 0x76, 0x33, 0x77, 0x64, 0x33, 0x35, 0x74, 0x7a, 0x73, 0x67, 0x78, 0x70, 0x36, 0x72, 0x6a, 0x69, 0x32, 0x76, 0x6b, 0x35, 0x65, 0x71, 0x73, 0x76, 0x35, 0x61, 0x32, 0x76, 0x71, 0x78, 0x6b, 0x7a, 0x32, 0x67, 0x32, 0x67, 0x36, 0x39, 0x39, 0x61, 0x76, 0x66, 0x68, 0x68, 0x76, 0x7a, 0x67, 0x77, 0x73, 0x65, 0x74, 0x78, 0x6a, 0x6d, 0x6d, 0x64, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x61, 0x6d, 0x77, 0x74, 0x70, 0x73, 0x74, 0x62, 0x34, 0x38, 0x71, 0x70, 0x7a, 0x64, 0x33, 0x38, 0x64, 0x76, 0x71, 0x61, 0x78, 0x34, 0x62, 0x7a, 0x61, 0x68, 0x77, 0x65, 0x79, 0x77, 0x70, 0x77, 0x78, 0x72, 0x39, 0x6d, 0x6b, 0x79, 0x35, 0x32, 0x32, 0x7a, 0x78, 0x62, 0x61, 0x37, 0x71, 0x35, 0x75, 0x34, 0x72, 0x64, 0x64, 0x37, 0x33, 0x79, 0x34, 0x76, 0x77, 0x65, 0x61, 0x79, 0x33, 0x71, 0x4a, 0x47, 0x2f, 0x61, 0x4f, 0x33, 0x73, 0x36, 0x54, 0x46, 0x73, 0x4d, 0x58, 0x45, 0x68, 0x00, 0x1f, 0x6f, 0x78, 0xa1, 0x5d, 0x52, 0x57, 0x6e, 0x64, 0x61, 0x67, 0x32, 0x6d, 0x77, 0x70, 0x7a, 0x6a, 0x36, 0x61, 0x61, 0x35, 0x6b, 0x64, 0x63, 0x61, 0x71, 0x66, 0x35, 0x63, 0x36, 0x6e, 0x72, 0x78, 0x72, 0x71, 0x32, 0x75, 0x70, 0x32, 0x64, 0x62, 0x34, 0x35, 0x78, 0x38, 0x7a, 0x6b, 0x66, 0x62, 0x66, 0x7a, 0x65, 0x69, 0x36, 0x65}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				74363158288344,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: qJG/aO3s6TFsMXEh
				[]byte{0xa8, 0x91, 0xbf, 0x68, 0xed, 0xec, 0xe9, 0x31, 0x6c, 0x31, 0x71, 0x21},
				createchildaccountChildDelegationNode,
				8848288172036695,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				74363158288344,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: qJG/aO3s6TFsMXEh
				[]byte{0xa8, 0x91, 0xbf, 0x68, 0xed, 0xec, 0xe9, 0x31, 0x6c, 0x31, 0x71, 0x21},
				createchildaccountChildDelegationNode,
				8848288172036695,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAQZ23lCCqEAGnsPnaHaWA==
	expect := []byte{0x00, 0x04, 0x19, 0xdb, 0x79, 0x42, 0x0a, 0xa1, 0x00, 0x1a, 0x7b, 0x0f, 0x9d, 0xa1, 0xda, 0x58}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				1154330329746081,
				7453656393833048,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				1154330329746081,
				7453656393833048,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBqZmJjeCBlZmYgc3d4cCBkbmpvYmMgbnZsIHRlbWFwZXogbGVxIGh5enJ5d2ogcGogcGYgAABHk2ycZ0tRVmplb2tacTNaVjI3dmN0
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x6a, 0x66, 0x62, 0x63, 0x78, 0x20, 0x65, 0x66, 0x66, 0x20, 0x73, 0x77, 0x78, 0x70, 0x20, 0x64, 0x6e, 0x6a, 0x6f, 0x62, 0x63, 0x20, 0x6e, 0x76, 0x6c, 0x20, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x65, 0x7a, 0x20, 0x6c, 0x65, 0x71, 0x20, 0x68, 0x79, 0x7a, 0x72, 0x79, 0x77, 0x6a, 0x20, 0x70, 0x6a, 0x20, 0x70, 0x66, 0x20, 0x00, 0x00, 0x47, 0x93, 0x6c, 0x9c, 0x67, 0x4b, 0x51, 0x56, 0x6a, 0x65, 0x6f, 0x6b, 0x5a, 0x71, 0x33, 0x5a, 0x56, 0x32, 0x37, 0x76, 0x63, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: jfbcx eff swxp dnjobc nvl temapez leq hyzrywj pj pf ",
				// Value as b64: QVjeokZq3ZV27vct
				[]byte{0x41, 0x58, 0xde, 0xa2, 0x46, 0x6a, 0xdd, 0x95, 0x76, 0xee, 0xf7, 0x2d},
				78698507953995,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: jfbcx eff swxp dnjobc nvl temapez leq hyzrywj pj pf ",
				// Value as b64: QVjeokZq3ZV27vct
				[]byte{0x41, 0x58, 0xde, 0xa2, 0x46, 0x6a, 0xdd, 0x95, 0x76, 0xee, 0xf7, 0x2d},
				78698507953995,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetStakeRules_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setstakerulesTarget, err := address.Validate("ndanji8ftuvwt7bkypf6mp6hpqjqe5k8fn6sc4b8md3zjvq4")
	require.NoError(t, err)

	// ABJWA4PReWB4T24xckxJbmRndkNMenlNbmRhbmppOGZ0dXZ3dDdia3lwZjZtcDZocHFqcWU1azhmbjZzYzRiOG1kM3pqdnE0
	expect := []byte{0x00, 0x12, 0x56, 0x03, 0x83, 0xd1, 0x79, 0x60, 0x78, 0x4f, 0x6e, 0x31, 0x72, 0x4c, 0x49, 0x6e, 0x64, 0x67, 0x76, 0x43, 0x4c, 0x7a, 0x79, 0x4d, 0x6e, 0x64, 0x61, 0x6e, 0x6a, 0x69, 0x38, 0x66, 0x74, 0x75, 0x76, 0x77, 0x74, 0x37, 0x62, 0x6b, 0x79, 0x70, 0x66, 0x36, 0x6d, 0x70, 0x36, 0x68, 0x70, 0x71, 0x6a, 0x71, 0x65, 0x35, 0x6b, 0x38, 0x66, 0x6e, 0x36, 0x73, 0x63, 0x34, 0x62, 0x38, 0x6d, 0x64, 0x33, 0x7a, 0x6a, 0x76, 0x71, 0x34}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetStakeRules
	}{
		{
			"no signatures",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: xOn1rLIndgvCLzyM
				[]byte{0xc4, 0xe9, 0xf5, 0xac, 0xb2, 0x27, 0x76, 0x0b, 0xc2, 0x2f, 0x3c, 0x8c},
				5161122677225824,
			),
		},
		{
			"with signature",
			NewSetStakeRules(
				setstakerulesTarget,
				// StakeRules as b64: xOn1rLIndgvCLzyM
				[]byte{0xc4, 0xe9, 0xf5, 0xac, 0xb2, 0x27, 0x76, 0x0b, 0xc2, 0x2f, 0x3c, 0x8c},
				5161122677225824,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordEndowmentNAV_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABSksuo9T1IAFY++r2NfxA==
	expect := []byte{0x00, 0x14, 0xa4, 0xb2, 0xea, 0x3d, 0x4f, 0x52, 0x00, 0x15, 0x8f, 0xbe, 0xaf, 0x63, 0x5f, 0xc4}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordEndowmentNAV
	}{
		{
			"no signatures",
			NewRecordEndowmentNAV(
				5810587875233618,
				6069023660007364,
			),
		},
		{
			"with signature",
			NewRecordEndowmentNAV(
				5810587875233618,
				6069023660007364,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestResolveStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	resolvestakeTarget, err := address.Validate("ndagjxabravqkskn6xvgczyy2w4ri7uatvbxhvhg6xjy4kwq")
	require.NoError(t, err)
	resolvestakeRules, err := address.Validate("ndap2yi2jiq8kwnh7iqkt3694avir2aghdvmuaiwvg7unzv2")
	require.NoError(t, err)

	// AAAAAAAAAJluZGFwMnlpMmppcThrd25oN2lxa3QzNjk0YXZpcjJhZ2hkdm11YWl3dmc3dW56djIAEhhYf8eI425kYWdqeGFicmF2cWtza242eHZnY3p5eTJ3NHJpN3VhdHZieGh2aGc2eGp5NGt3cQ==
	expect := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x6e, 0x64, 0x61, 0x70, 0x32, 0x79, 0x69, 0x32, 0x6a, 0x69, 0x71, 0x38, 0x6b, 0x77, 0x6e, 0x68, 0x37, 0x69, 0x71, 0x6b, 0x74, 0x33, 0x36, 0x39, 0x34, 0x61, 0x76, 0x69, 0x72, 0x32, 0x61, 0x67, 0x68, 0x64, 0x76, 0x6d, 0x75, 0x61, 0x69, 0x77, 0x76, 0x67, 0x37, 0x75, 0x6e, 0x7a, 0x76, 0x32, 0x00, 0x12, 0x18, 0x58, 0x7f, 0xc7, 0x88, 0xe3, 0x6e, 0x64, 0x61, 0x67, 0x6a, 0x78, 0x61, 0x62, 0x72, 0x61, 0x76, 0x71, 0x6b, 0x73, 0x6b, 0x6e, 0x36, 0x78, 0x76, 0x67, 0x63, 0x7a, 0x79, 0x79, 0x32, 0x77, 0x34, 0x72, 0x69, 0x37, 0x75, 0x61, 0x74, 0x76, 0x62, 0x78, 0x68, 0x76, 0x68, 0x67, 0x36, 0x78, 0x6a, 0x79, 0x34, 0x6b, 0x77, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ResolveStake
	}{
		{
			"no signatures",
			NewResolveStake(
				resolvestakeTarget,
				resolvestakeRules,
				153,
				5093317960763619,
			),
		},
		{
			"with signature",
			NewResolveStake(
				resolvestakeTarget,
				resolvestakeRules,
				153,
				5093317960763619,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestBurn_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	burnTarget, err := address.Validate("ndaqhtt49dyaa8n42u3t2d8znmpzu9g3svwjdi7ywzq3qfk2")
	require.NoError(t, err)

	// ABAzgr4UGWEABB3zNTm0Dm5kYXFodHQ0OWR5YWE4bjQydTN0MmQ4em5tcHp1OWczc3Z3amRpN3l3enEzcWZrMg==
	expect := []byte{0x00, 0x10, 0x33, 0x82, 0xbe, 0x14, 0x19, 0x61, 0x00, 0x04, 0x1d, 0xf3, 0x35, 0x39, 0xb4, 0x0e, 0x6e, 0x64, 0x61, 0x71, 0x68, 0x74, 0x74, 0x34, 0x39, 0x64, 0x79, 0x61, 0x61, 0x38, 0x6e, 0x34, 0x32, 0x75, 0x33, 0x74, 0x32, 0x64, 0x38, 0x7a, 0x6e, 0x6d, 0x70, 0x7a, 0x75, 0x39, 0x67, 0x33, 0x73, 0x76, 0x77, 0x6a, 0x64, 0x69, 0x37, 0x79, 0x77, 0x7a, 0x71, 0x33, 0x71, 0x66, 0x6b, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Burn
	}{
		{
			"no signatures",
			NewBurn(
				burnTarget,
				4560236255123809,
				1158830314075150,
			),
		},
		{
			"with signature",
			NewBurn(
				burnTarget,
				4560236255123809,
				1158830314075150,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSchema_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBldGhzYnpyaiAAFctHGUHoFA==
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x65, 0x74, 0x68, 0x73, 0x62, 0x7a, 0x72, 0x6a, 0x20, 0x00, 0x15, 0xcb, 0x47, 0x19, 0x41, 0xe8, 0x14}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSchema
	}{
		{
			"no signatures",
			NewChangeSchema(
				"string: ethsbzrj ",
				6134480737789972,
			),
		},
		{
			"with signature",
			NewChangeSchema(
				"string: ethsbzrj ",
				6134480737789972,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}

