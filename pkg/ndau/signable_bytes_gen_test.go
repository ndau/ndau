package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndartx878tsu5etakpqjdbawrrp6aiki6eizhfdds6up79fd")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndar9h9jvmvimyqnvh9e8bba632rk7ydsidqtsv9swy5vqjp")
	require.NoError(t, err)

	// bmRhcjloOWp2bXZpbXlxbnZoOWU4YmJhNjMycms3eWRzaWRxdHN2OXN3eTV2cWpwAAWCIQf8/70AApoPXz8aEm5kYXJ0eDg3OHRzdTVldGFrcHFqZGJhd3JycDZhaWtpNmVpemhmZGRzNnVwNzlmZA==
	expect := []byte{0x6e, 0x64, 0x61, 0x72, 0x39, 0x68, 0x39, 0x6a, 0x76, 0x6d, 0x76, 0x69, 0x6d, 0x79, 0x71, 0x6e, 0x76, 0x68, 0x39, 0x65, 0x38, 0x62, 0x62, 0x61, 0x36, 0x33, 0x32, 0x72, 0x6b, 0x37, 0x79, 0x64, 0x73, 0x69, 0x64, 0x71, 0x74, 0x73, 0x76, 0x39, 0x73, 0x77, 0x79, 0x35, 0x76, 0x71, 0x6a, 0x70, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x72, 0x74, 0x78, 0x38, 0x37, 0x38, 0x74, 0x73, 0x75, 0x35, 0x65, 0x74, 0x61, 0x6b, 0x70, 0x71, 0x6a, 0x64, 0x62, 0x61, 0x77, 0x72, 0x72, 0x70, 0x36, 0x61, 0x69, 0x6b, 0x69, 0x36, 0x65, 0x69, 0x7a, 0x68, 0x66, 0x64, 0x64, 0x73, 0x36, 0x75, 0x70, 0x37, 0x39, 0x66, 0x64}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndaebqkxud466krztpihkzfpetfigzngrrh4rsti9q4tbgbt")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xa0, 0xdc, 0xf2, 0x23, 0xe4, 0x5f, 0xad, 0x89, 0x1b, 0xa3, 0x45, 0xfa, 0x97, 0x06, 0xd8, 0xe0, 0x9f, 0xf1, 0x31, 0x54, 0x07, 0x30, 0xd2, 0xb1, 0x81, 0xcd, 0x16, 0xaa, 0x56, 0x89, 0x1c, 0x11}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWNzcDM2dGQ2dHI0NWNpNXdwYzl4ZjJnNWRzajk2anRrc2R2Ynd4dHNoZ3Rwa3V5dGVxYmQ2djc3amQ5cDN6agAQTcdmlXTFbmRhZWJxa3h1ZDQ2NmtyenRwaWhremZwZXRmaWd6bmdycmg0cnN0aTlxNHRiZ2J0SHNPNS9DaExHN3JMajdZUA==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x73, 0x70, 0x33, 0x36, 0x74, 0x64, 0x36, 0x74, 0x72, 0x34, 0x35, 0x63, 0x69, 0x35, 0x77, 0x70, 0x63, 0x39, 0x78, 0x66, 0x32, 0x67, 0x35, 0x64, 0x73, 0x6a, 0x39, 0x36, 0x6a, 0x74, 0x6b, 0x73, 0x64, 0x76, 0x62, 0x77, 0x78, 0x74, 0x73, 0x68, 0x67, 0x74, 0x70, 0x6b, 0x75, 0x79, 0x74, 0x65, 0x71, 0x62, 0x64, 0x36, 0x76, 0x37, 0x37, 0x6a, 0x64, 0x39, 0x70, 0x33, 0x7a, 0x6a, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x65, 0x62, 0x71, 0x6b, 0x78, 0x75, 0x64, 0x34, 0x36, 0x36, 0x6b, 0x72, 0x7a, 0x74, 0x70, 0x69, 0x68, 0x6b, 0x7a, 0x66, 0x70, 0x65, 0x74, 0x66, 0x69, 0x67, 0x7a, 0x6e, 0x67, 0x72, 0x72, 0x68, 0x34, 0x72, 0x73, 0x74, 0x69, 0x39, 0x71, 0x34, 0x74, 0x62, 0x67, 0x62, 0x74, 0x48, 0x73, 0x4f, 0x35, 0x2f, 0x43, 0x68, 0x4c, 0x47, 0x37, 0x72, 0x4c, 0x6a, 0x37, 0x59, 0x50}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: HsO5/ChLG7rLj7YP
				[]byte{0x1e, 0xc3, 0xb9, 0xfc, 0x28, 0x4b, 0x1b, 0xba, 0xcb, 0x8f, 0xb6, 0x0f},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: HsO5/ChLG7rLj7YP
				[]byte{0x1e, 0xc3, 0xb9, 0xfc, 0x28, 0x4b, 0x1b, 0xba, 0xcb, 0x8f, 0xb6, 0x0f},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndarkjv2sma4zvww265n7c8knp2wpbaich6uuqmmwsrjpy33")
	require.NoError(t, err)

	// bmRhcmtqdjJzbWE0enZ3dzI2NW43YzhrbnAyd3BiYWljaDZ1dXFtbXdzcmpweTMzAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x72, 0x6b, 0x6a, 0x76, 0x32, 0x73, 0x6d, 0x61, 0x34, 0x7a, 0x76, 0x77, 0x77, 0x32, 0x36, 0x35, 0x6e, 0x37, 0x63, 0x38, 0x6b, 0x6e, 0x70, 0x32, 0x77, 0x70, 0x62, 0x61, 0x69, 0x63, 0x68, 0x36, 0x75, 0x75, 0x71, 0x6d, 0x6d, 0x77, 0x73, 0x72, 0x6a, 0x70, 0x79, 0x33, 0x33, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndaaruxsqk9exnnm8w9dagfwznq4zcpiz8rt9hku5qqxuyu3")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFhcnV4c3FrOWV4bm5tOHc5ZGFnZnd6bnE0emNwaXo4cnQ5aGt1NXFxeHV5dTM=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x61, 0x72, 0x75, 0x78, 0x73, 0x71, 0x6b, 0x39, 0x65, 0x78, 0x6e, 0x6e, 0x6d, 0x38, 0x77, 0x39, 0x64, 0x61, 0x67, 0x66, 0x77, 0x7a, 0x6e, 0x71, 0x34, 0x7a, 0x63, 0x70, 0x69, 0x7a, 0x38, 0x72, 0x74, 0x39, 0x68, 0x6b, 0x75, 0x35, 0x71, 0x71, 0x78, 0x75, 0x79, 0x75, 0x33}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndahj79muhv6npguk56xkg3a5ckpnfv5vsxgkahv6udwc39u")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndada7azxeuzbsdf2gcyedumws7vf99ejufj43bf5ds3xc5j")
	require.NoError(t, err)

	// bmRhZGE3YXp4ZXV6YnNkZjJnY3llZHVtd3M3dmY5OWVqdWZqNDNiZjVkczN4YzVqAAjSrCLE0zRuZGFoajc5bXVodjZucGd1azU2eGtnM2E1Y2twbmZ2NXZzeGdrYWh2NnVkd2MzOXU=
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x61, 0x37, 0x61, 0x7a, 0x78, 0x65, 0x75, 0x7a, 0x62, 0x73, 0x64, 0x66, 0x32, 0x67, 0x63, 0x79, 0x65, 0x64, 0x75, 0x6d, 0x77, 0x73, 0x37, 0x76, 0x66, 0x39, 0x39, 0x65, 0x6a, 0x75, 0x66, 0x6a, 0x34, 0x33, 0x62, 0x66, 0x35, 0x64, 0x73, 0x33, 0x78, 0x63, 0x35, 0x6a, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x68, 0x6a, 0x37, 0x39, 0x6d, 0x75, 0x68, 0x76, 0x36, 0x6e, 0x70, 0x67, 0x75, 0x6b, 0x35, 0x36, 0x78, 0x6b, 0x67, 0x33, 0x61, 0x35, 0x63, 0x6b, 0x70, 0x6e, 0x66, 0x76, 0x35, 0x76, 0x73, 0x78, 0x67, 0x6b, 0x61, 0x68, 0x76, 0x36, 0x75, 0x64, 0x77, 0x63, 0x33, 0x39, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndaawbk7iz3jki6ydq4fncir8kimefaxuprckr3jyi2yuvmt")
	require.NoError(t, err)

	// bmRhYXdiazdpejNqa2k2eWRxNGZuY2lyOGtpbWVmYXh1cHJja3IzanlpMnl1dm10AAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x77, 0x62, 0x6b, 0x37, 0x69, 0x7a, 0x33, 0x6a, 0x6b, 0x69, 0x36, 0x79, 0x64, 0x71, 0x34, 0x66, 0x6e, 0x63, 0x69, 0x72, 0x38, 0x6b, 0x69, 0x6d, 0x65, 0x66, 0x61, 0x78, 0x75, 0x70, 0x72, 0x63, 0x6b, 0x72, 0x33, 0x6a, 0x79, 0x69, 0x32, 0x79, 0x75, 0x76, 0x6d, 0x74, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndae28kvcg2wqccg2qibwigc3heeid3k7p5f2gc4rr6ivjgm")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhZTI4a3ZjZzJ3cWNjZzJxaWJ3aWdjM2hlZWlkM2s3cDVmMmdjNHJyNml2amdt
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x65, 0x32, 0x38, 0x6b, 0x76, 0x63, 0x67, 0x32, 0x77, 0x71, 0x63, 0x63, 0x67, 0x32, 0x71, 0x69, 0x62, 0x77, 0x69, 0x67, 0x63, 0x33, 0x68, 0x65, 0x65, 0x69, 0x64, 0x33, 0x6b, 0x37, 0x70, 0x35, 0x66, 0x32, 0x67, 0x63, 0x34, 0x72, 0x72, 0x36, 0x69, 0x76, 0x6a, 0x67, 0x6d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndaksdyngqqyju8pitjwpw7sbhqhbdigthk56u79dykrttkc")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFrc2R5bmdxcXlqdThwaXRqd3B3N3NiaHFoYmRpZ3RoazU2dTc5ZHlrcnR0a2M=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x6b, 0x73, 0x64, 0x79, 0x6e, 0x67, 0x71, 0x71, 0x79, 0x6a, 0x75, 0x38, 0x70, 0x69, 0x74, 0x6a, 0x77, 0x70, 0x77, 0x37, 0x73, 0x62, 0x68, 0x71, 0x68, 0x62, 0x64, 0x69, 0x67, 0x74, 0x68, 0x6b, 0x35, 0x36, 0x75, 0x37, 0x39, 0x64, 0x79, 0x6b, 0x72, 0x74, 0x74, 0x6b, 0x63}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndarc4hkvkg9m88t6q9u9ts757u6br62gtxkt3i3s6cfw9s6")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndabhfpdrdtnjg5jtmuda3h6fngvif53ga32tiz37da9pzba")
	require.NoError(t, err)

	// bmRhYmhmcGRyZHRuamc1anRtdWRhM2g2Zm5ndmlmNTNnYTMydGl6MzdkYTlwemJhAAz/orpRehFuZGFyYzRoa3ZrZzltODh0NnE5dTl0czc1N3U2YnI2Mmd0eGt0M2kzczZjZnc5czY=
	expect := []byte{0x6e, 0x64, 0x61, 0x62, 0x68, 0x66, 0x70, 0x64, 0x72, 0x64, 0x74, 0x6e, 0x6a, 0x67, 0x35, 0x6a, 0x74, 0x6d, 0x75, 0x64, 0x61, 0x33, 0x68, 0x36, 0x66, 0x6e, 0x67, 0x76, 0x69, 0x66, 0x35, 0x33, 0x67, 0x61, 0x33, 0x32, 0x74, 0x69, 0x7a, 0x33, 0x37, 0x64, 0x61, 0x39, 0x70, 0x7a, 0x62, 0x61, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x72, 0x63, 0x34, 0x68, 0x6b, 0x76, 0x6b, 0x67, 0x39, 0x6d, 0x38, 0x38, 0x74, 0x36, 0x71, 0x39, 0x75, 0x39, 0x74, 0x73, 0x37, 0x35, 0x37, 0x75, 0x36, 0x62, 0x72, 0x36, 0x32, 0x67, 0x74, 0x78, 0x6b, 0x74, 0x33, 0x69, 0x33, 0x73, 0x36, 0x63, 0x66, 0x77, 0x39, 0x73, 0x36}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimaccountTarget, err := address.Validate("ndapzrjmuednmrukxfj628rd584p2vpdf43rph83s8zsavrg")
	require.NoError(t, err)
	claimaccountOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xe8, 0x84, 0x60, 0xfa, 0xb1, 0xf9, 0x3e, 0x8b, 0xf1, 0xc7, 0xb5, 0xab, 0xa1, 0xd8, 0xd2, 0x98, 0xbf, 0xc3, 0x79, 0x27, 0x94, 0x31, 0xd2, 0xec, 0xb2, 0xc3, 0x79, 0x78, 0xb9, 0xce, 0x67, 0xb9}, nil)
	require.NoError(t, err)
	claimaccountValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xde, 0x1f, 0xf1, 0xac, 0x7c, 0x8e, 0x92, 0x97, 0x91, 0x47, 0x16, 0xb8, 0x17, 0x80, 0xd5, 0x05, 0x3a, 0xee, 0x87, 0x7c, 0x82, 0xc7, 0xa5, 0xee, 0x73, 0x29, 0xcf, 0xf0, 0xe4, 0x49, 0x24, 0x73}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWR3aWkyaDR5aDZ2N2M5dDI4NDR6aXEyNGtubTlzNTNlOGtkZHd6bnltYnp1OGYzMzN2NXZwcXl5a3RqaW5lZAAZX/GDxHNZbmRhcHpyam11ZWRubXJ1a3hmajYyOHJkNTg0cDJ2cGRmNDNycGg4M3M4enNhdnJnbnB1YmE4amFkdGJiZWRyYjk2cG5ydWhqZmY2dGk2bW1zZjZhNHdjdng1d2hydWJucmpycXFudzY5NmhlamV1aGg1Y214d2MzZTJqdGpGR0d5cHcreHcvTVJKc3g=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x77, 0x69, 0x69, 0x32, 0x68, 0x34, 0x79, 0x68, 0x36, 0x76, 0x37, 0x63, 0x39, 0x74, 0x32, 0x38, 0x34, 0x34, 0x7a, 0x69, 0x71, 0x32, 0x34, 0x6b, 0x6e, 0x6d, 0x39, 0x73, 0x35, 0x33, 0x65, 0x38, 0x6b, 0x64, 0x64, 0x77, 0x7a, 0x6e, 0x79, 0x6d, 0x62, 0x7a, 0x75, 0x38, 0x66, 0x33, 0x33, 0x33, 0x76, 0x35, 0x76, 0x70, 0x71, 0x79, 0x79, 0x6b, 0x74, 0x6a, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x70, 0x7a, 0x72, 0x6a, 0x6d, 0x75, 0x65, 0x64, 0x6e, 0x6d, 0x72, 0x75, 0x6b, 0x78, 0x66, 0x6a, 0x36, 0x32, 0x38, 0x72, 0x64, 0x35, 0x38, 0x34, 0x70, 0x32, 0x76, 0x70, 0x64, 0x66, 0x34, 0x33, 0x72, 0x70, 0x68, 0x38, 0x33, 0x73, 0x38, 0x7a, 0x73, 0x61, 0x76, 0x72, 0x67, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x72, 0x62, 0x39, 0x36, 0x70, 0x6e, 0x72, 0x75, 0x68, 0x6a, 0x66, 0x66, 0x36, 0x74, 0x69, 0x36, 0x6d, 0x6d, 0x73, 0x66, 0x36, 0x61, 0x34, 0x77, 0x63, 0x76, 0x78, 0x35, 0x77, 0x68, 0x72, 0x75, 0x62, 0x6e, 0x72, 0x6a, 0x72, 0x71, 0x71, 0x6e, 0x77, 0x36, 0x39, 0x36, 0x68, 0x65, 0x6a, 0x65, 0x75, 0x68, 0x68, 0x35, 0x63, 0x6d, 0x78, 0x77, 0x63, 0x33, 0x65, 0x32, 0x6a, 0x74, 0x6a, 0x46, 0x47, 0x47, 0x79, 0x70, 0x77, 0x2b, 0x78, 0x77, 0x2f, 0x4d, 0x52, 0x4a, 0x73, 0x78}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimAccount
	}{
		{
			"no signatures",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: jFGGypw+xw/MRJsx
				[]byte{0x8c, 0x51, 0x86, 0xca, 0x9c, 0x3e, 0xc7, 0x0f, 0xcc, 0x44, 0x9b, 0x31},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewClaimAccount(
				claimaccountTarget,
				*claimaccountOwnership,
				[]signature.PublicKey{*claimaccountValidationKeys},
				// ValidationScript as b64: jFGGypw+xw/MRJsx
				[]byte{0x8c, 0x51, 0x86, 0xca, 0x9c, 0x3e, 0xc7, 0x0f, 0xcc, 0x44, 0x9b, 0x31},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndajudaa8wxu4j47h6nwwz7psypsrnfph7vnjzwiukkr7wjj")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndapct2x2kxcch2bsvv2z78fehwn6cqw4y26gddafjmdqtw4")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFwY3QyeDJreGNjaDJic3Z2Mno3OGZlaHduNmNxdzR5MjZnZGRhZmptZHF0dzRuZGFqdWRhYTh3eHU0ajQ3aDZud3d6N3BzeXBzcm5mcGg3dm5qendpdWtrcjd3amo=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x70, 0x63, 0x74, 0x32, 0x78, 0x32, 0x6b, 0x78, 0x63, 0x63, 0x68, 0x32, 0x62, 0x73, 0x76, 0x76, 0x32, 0x7a, 0x37, 0x38, 0x66, 0x65, 0x68, 0x77, 0x6e, 0x36, 0x63, 0x71, 0x77, 0x34, 0x79, 0x32, 0x36, 0x67, 0x64, 0x64, 0x61, 0x66, 0x6a, 0x6d, 0x64, 0x71, 0x74, 0x77, 0x34, 0x6e, 0x64, 0x61, 0x6a, 0x75, 0x64, 0x61, 0x61, 0x38, 0x77, 0x78, 0x75, 0x34, 0x6a, 0x34, 0x37, 0x68, 0x36, 0x6e, 0x77, 0x77, 0x7a, 0x37, 0x70, 0x73, 0x79, 0x70, 0x73, 0x72, 0x6e, 0x66, 0x70, 0x68, 0x37, 0x76, 0x6e, 0x6a, 0x7a, 0x77, 0x69, 0x75, 0x6b, 0x6b, 0x72, 0x37, 0x77, 0x6a, 0x6a}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndajqshvzpgma7jy3a2dbc46r7kg83hrzhs6id2kpkry9xbs")
	require.NoError(t, err)

	// OHNieURoU3g1T3k1N2Nicm5kYWpxc2h2enBnbWE3ankzYTJkYmM0NnI3a2c4M2hyemhzNmlkMmtwa3J5OXhic3N0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x38, 0x73, 0x62, 0x79, 0x44, 0x68, 0x53, 0x78, 0x35, 0x4f, 0x79, 0x35, 0x37, 0x63, 0x62, 0x72, 0x6e, 0x64, 0x61, 0x6a, 0x71, 0x73, 0x68, 0x76, 0x7a, 0x70, 0x67, 0x6d, 0x61, 0x37, 0x6a, 0x79, 0x33, 0x61, 0x32, 0x64, 0x62, 0x63, 0x34, 0x36, 0x72, 0x37, 0x6b, 0x67, 0x38, 0x33, 0x68, 0x72, 0x7a, 0x68, 0x73, 0x36, 0x69, 0x64, 0x32, 0x6b, 0x70, 0x6b, 0x72, 0x79, 0x39, 0x78, 0x62, 0x73, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 8sbyDhSx5Oy57cbr
				[]byte{0xf2, 0xc6, 0xf2, 0x0e, 0x14, 0xb1, 0xe4, 0xec, 0xb9, 0xed, 0xc6, 0xeb},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: 8sbyDhSx5Oy57cbr
				[]byte{0xf2, 0xc6, 0xf2, 0x0e, 0x14, 0xb1, 0xe4, 0xec, 0xb9, 0xed, 0xc6, 0xeb},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndapaehw7bvwbu735sqmmqqeqbvsmzxdn9u84jszbtr7bt48")
	require.NoError(t, err)

	// bmRhcGFlaHc3YnZ3YnU3MzVzcW1tcXFlcWJ2c216eGRuOXU4NGpzemJ0cjdidDQ4AA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x70, 0x61, 0x65, 0x68, 0x77, 0x37, 0x62, 0x76, 0x77, 0x62, 0x75, 0x37, 0x33, 0x35, 0x73, 0x71, 0x6d, 0x6d, 0x71, 0x71, 0x65, 0x71, 0x62, 0x76, 0x73, 0x6d, 0x7a, 0x78, 0x64, 0x6e, 0x39, 0x75, 0x38, 0x34, 0x6a, 0x73, 0x7a, 0x62, 0x74, 0x72, 0x37, 0x62, 0x74, 0x34, 0x38, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndaixt79n54tiyvpxgd4uxa6gfd5y33tq579zna8vv9dszv2")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndadyn6wazkx8wrrefdu2dv68uzvsizrqhmmz7xeizdgkaur")
	require.NoError(t, err)

	// bmRhZHluNndhemt4OHdycmVmZHUyZHY2OHV6dnNpenJxaG1tejd4ZWl6ZGdrYXVyMXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWl4dDc5bjU0dGl5dnB4Z2Q0dXhhNmdmZDV5MzN0cTU3OXpuYTh2djlkc3p2Mg==
	expect := []byte{0x6e, 0x64, 0x61, 0x64, 0x79, 0x6e, 0x36, 0x77, 0x61, 0x7a, 0x6b, 0x78, 0x38, 0x77, 0x72, 0x72, 0x65, 0x66, 0x64, 0x75, 0x32, 0x64, 0x76, 0x36, 0x38, 0x75, 0x7a, 0x76, 0x73, 0x69, 0x7a, 0x72, 0x71, 0x68, 0x6d, 0x6d, 0x7a, 0x37, 0x78, 0x65, 0x69, 0x7a, 0x64, 0x67, 0x6b, 0x61, 0x75, 0x72, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x69, 0x78, 0x74, 0x37, 0x39, 0x6e, 0x35, 0x34, 0x74, 0x69, 0x79, 0x76, 0x70, 0x78, 0x67, 0x64, 0x34, 0x75, 0x78, 0x61, 0x36, 0x67, 0x66, 0x64, 0x35, 0x79, 0x33, 0x33, 0x74, 0x71, 0x35, 0x37, 0x39, 0x7a, 0x6e, 0x61, 0x38, 0x76, 0x76, 0x39, 0x64, 0x73, 0x7a, 0x76, 0x32}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmos2UG5MLzNJekg0TzZ5U2puAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x36, 0x50, 0x6e, 0x4c, 0x2f, 0x33, 0x49, 0x7a, 0x48, 0x34, 0x4f, 0x36, 0x79, 0x53, 0x6a, 0x6e, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: 6PnL/3IzH4O6ySjn
				[]byte{0xe8, 0xf9, 0xcb, 0xff, 0x72, 0x33, 0x1f, 0x83, 0xba, 0xc9, 0x28, 0xe7},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: 6PnL/3IzH4O6ySjn
				[]byte{0xe8, 0xf9, 0xcb, 0xff, 0x72, 0x33, 0x1f, 0x83, 0xba, 0xc9, 0x28, 0xe7},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSidechainTx_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	sidechaintxSource, err := address.Validate("ndaqjx99kfmdbc4bmj6t75zababmvgz2xhmsxgxf7tmfrxxr")
	require.NoError(t, err)
	sidechaintxSidechainSignatures, err := signature.RawSignature(signature.Ed25519, []byte{0x2f, 0x71, 0x6f, 0xec, 0xa4, 0xc2, 0x64, 0xb5, 0x2f, 0x41, 0xbd, 0x2e, 0x12, 0xce, 0x11, 0x7a, 0x99, 0x4d, 0xee, 0xf0, 0xbc, 0xb3, 0x1b, 0xfe, 0x21, 0xc2, 0x0e, 0x39, 0xd9, 0x7c, 0xb0, 0xb6, 0x24, 0xa8, 0x78, 0xe8, 0xfc, 0x48, 0xe9, 0xb1, 0x7a, 0xc1, 0xa7, 0xeb, 0x69, 0x73, 0x1b, 0x1b, 0x91, 0x16, 0x28, 0xb6, 0x8b, 0xc0, 0x80, 0x9e, 0xee, 0x8c, 0x78, 0xf9, 0x8c, 0xf2, 0x53, 0x1d})
	require.NoError(t, err)

	// AAJeEXA5N5cAAAAAAAAAU3NBaEQ5dS9CVjZ2dDNEalBhNGphZHRjYWY3Mnk5NWZlMmp1bWttNGJ6d3piZnZzdHJrbnc1NXpzenUzdHo5dGIyaWhkdnltNnljNWNqa2QyN2Q4ZXQ0cHRybWE0cjQ1anFucHR6ZWl5ZmM1aXpzZWF2NXppMjhoM3R2M2ZnaHJhNGFjcjZiZWluZGFxang5OWtmbWRiYzRibWo2dDc1emFiYWJtdmd6MnhobXN4Z3hmN3RtZnJ4eHI=
	expect := []byte{0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x73, 0x41, 0x68, 0x44, 0x39, 0x75, 0x2f, 0x42, 0x56, 0x36, 0x76, 0x74, 0x33, 0x44, 0x6a, 0x50, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x66, 0x37, 0x32, 0x79, 0x39, 0x35, 0x66, 0x65, 0x32, 0x6a, 0x75, 0x6d, 0x6b, 0x6d, 0x34, 0x62, 0x7a, 0x77, 0x7a, 0x62, 0x66, 0x76, 0x73, 0x74, 0x72, 0x6b, 0x6e, 0x77, 0x35, 0x35, 0x7a, 0x73, 0x7a, 0x75, 0x33, 0x74, 0x7a, 0x39, 0x74, 0x62, 0x32, 0x69, 0x68, 0x64, 0x76, 0x79, 0x6d, 0x36, 0x79, 0x63, 0x35, 0x63, 0x6a, 0x6b, 0x64, 0x32, 0x37, 0x64, 0x38, 0x65, 0x74, 0x34, 0x70, 0x74, 0x72, 0x6d, 0x61, 0x34, 0x72, 0x34, 0x35, 0x6a, 0x71, 0x6e, 0x70, 0x74, 0x7a, 0x65, 0x69, 0x79, 0x66, 0x63, 0x35, 0x69, 0x7a, 0x73, 0x65, 0x61, 0x76, 0x35, 0x7a, 0x69, 0x32, 0x38, 0x68, 0x33, 0x74, 0x76, 0x33, 0x66, 0x67, 0x68, 0x72, 0x61, 0x34, 0x61, 0x63, 0x72, 0x36, 0x62, 0x65, 0x69, 0x6e, 0x64, 0x61, 0x71, 0x6a, 0x78, 0x39, 0x39, 0x6b, 0x66, 0x6d, 0x64, 0x62, 0x63, 0x34, 0x62, 0x6d, 0x6a, 0x36, 0x74, 0x37, 0x35, 0x7a, 0x61, 0x62, 0x61, 0x62, 0x6d, 0x76, 0x67, 0x7a, 0x32, 0x78, 0x68, 0x6d, 0x73, 0x78, 0x67, 0x78, 0x66, 0x37, 0x74, 0x6d, 0x66, 0x72, 0x78, 0x78, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SidechainTx
	}{
		{
			"no signatures",
			NewSidechainTx(
				sidechaintxSource,
				83,
				// SidechainSignableBytes as b64: sAhD9u/BV6vt3DjP
				[]byte{0xb0, 0x08, 0x43, 0xf6, 0xef, 0xc1, 0x57, 0xab, 0xed, 0xdc, 0x38, 0xcf},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
			),
		},
		{
			"with signature",
			NewSidechainTx(
				sidechaintxSource,
				83,
				// SidechainSignableBytes as b64: sAhD9u/BV6vt3DjP
				[]byte{0xb0, 0x08, 0x43, 0xf6, 0xef, 0xc1, 0x57, 0xab, 0xed, 0xdc, 0x38, 0xcf},
				[]signature.Signature{*sidechaintxSidechainSignatures},
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndaj5dfmgdhqjpuev4ps9uz9rasnv553y39559v76g3b26vn")
	require.NoError(t, err)

	// bmRhajVkZm1nZGhxanB1ZXY0cHM5dXo5cmFzbnY1NTN5Mzk1NTl2NzZnM2IyNnZuABP6yCVBcNA=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x35, 0x64, 0x66, 0x6d, 0x67, 0x64, 0x68, 0x71, 0x6a, 0x70, 0x75, 0x65, 0x76, 0x34, 0x70, 0x73, 0x39, 0x75, 0x7a, 0x39, 0x72, 0x61, 0x73, 0x6e, 0x76, 0x35, 0x35, 0x33, 0x79, 0x33, 0x39, 0x35, 0x35, 0x39, 0x76, 0x37, 0x36, 0x67, 0x33, 0x62, 0x32, 0x36, 0x76, 0x6e, 0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndaqfxnbgbfxpeikip9b2f9mhycjdxh8ra5d359ka65ij2mw")
	require.NoError(t, err)

	// AA2S+t7X5spuZGFxZnhuYmdiZnhwZWlraXA5YjJmOW1oeWNqZHhoOHJhNWQzNTlrYTY1aWoybXc=
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x6e, 0x64, 0x61, 0x71, 0x66, 0x78, 0x6e, 0x62, 0x67, 0x62, 0x66, 0x78, 0x70, 0x65, 0x69, 0x6b, 0x69, 0x70, 0x39, 0x62, 0x32, 0x66, 0x39, 0x6d, 0x68, 0x79, 0x63, 0x6a, 0x64, 0x78, 0x68, 0x38, 0x72, 0x61, 0x35, 0x64, 0x33, 0x35, 0x39, 0x6b, 0x61, 0x36, 0x35, 0x69, 0x6a, 0x32, 0x6d, 0x77}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				3820780875409098,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AAn3Z2Z46KEAH/erJE/OdA==
	expect := []byte{0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1, 0x00, 0x1f, 0xf7, 0xab, 0x24, 0x4f, 0xce, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				2805298263287969,
				8998038698708596,
			),
		},
		{
			"with signature",
			NewIssue(
				2805298263287969,
				8998038698708596,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
