package ndau

import (
	"testing"

	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	"github.com/stretchr/testify/require"
)

func TestTransfer_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferSource, err := address.Validate("ndac5h327852z6kncpruyphniwec37fdru5fsw5wezpxsuve")
	require.NoError(t, err)
	transferDestination, err := address.Validate("ndaaia4v98jgv3he83t7tifi6azd7ethdpjj764uj2gjxww5")
	require.NoError(t, err)

	// bmRhYWlhNHY5OGpndjNoZTgzdDd0aWZpNmF6ZDdldGhkcGpqNzY0dWoyZ2p4d3c1AAWCIQf8/70AApoPXz8aEm5kYWM1aDMyNzg1Mno2a25jcHJ1eXBobml3ZWMzN2ZkcnU1ZnN3NXdlenB4c3V2ZQ==
	expect := []byte{0x6e, 0x64, 0x61, 0x61, 0x69, 0x61, 0x34, 0x76, 0x39, 0x38, 0x6a, 0x67, 0x76, 0x33, 0x68, 0x65, 0x38, 0x33, 0x74, 0x37, 0x74, 0x69, 0x66, 0x69, 0x36, 0x61, 0x7a, 0x64, 0x37, 0x65, 0x74, 0x68, 0x64, 0x70, 0x6a, 0x6a, 0x37, 0x36, 0x34, 0x75, 0x6a, 0x32, 0x67, 0x6a, 0x78, 0x77, 0x77, 0x35, 0x00, 0x05, 0x82, 0x21, 0x07, 0xfc, 0xff, 0xbd, 0x00, 0x02, 0x9a, 0x0f, 0x5f, 0x3f, 0x1a, 0x12, 0x6e, 0x64, 0x61, 0x63, 0x35, 0x68, 0x33, 0x32, 0x37, 0x38, 0x35, 0x32, 0x7a, 0x36, 0x6b, 0x6e, 0x63, 0x70, 0x72, 0x75, 0x79, 0x70, 0x68, 0x6e, 0x69, 0x77, 0x65, 0x63, 0x33, 0x37, 0x66, 0x64, 0x72, 0x75, 0x35, 0x66, 0x73, 0x77, 0x35, 0x77, 0x65, 0x7a, 0x70, 0x78, 0x73, 0x75, 0x76, 0x65}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Transfer
	}{
		{
			"no signatures",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
			),
		},
		{
			"with signature",
			NewTransfer(
				transferSource,
				transferDestination,
				1550453263105981,
				732340766579218,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changevalidationTarget, err := address.Validate("ndab3nay789zru6wub8dfhqzh2rtvy3gjvp42brb6qvhjbeb")
	require.NoError(t, err)
	changevalidationNewKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0xe8, 0x3f, 0x23, 0x95, 0xa5, 0xe7, 0x2f, 0xa4, 0xd6, 0x65, 0xf8, 0x9d, 0x17, 0xc1, 0x9b, 0x0c, 0xdc, 0xdd, 0x31, 0x90, 0xf1, 0x8d, 0x14, 0xe0, 0x57, 0x7f, 0x78, 0xae, 0xe8, 0x38, 0x29, 0x5e}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWR3ZDhpNnh3enZ1OWpneW56Nmo0Zjhidm5ncDN6anR1ZDIyNGZoYWs3OXp0bXppaGF3eDdma21hZ3A4dmttagAQTcdmlXTFbmRhYjNuYXk3ODl6cnU2d3ViOGRmaHF6aDJydHZ5M2dqdnA0MmJyYjZxdmhqYmViM1FZeTZzeGpMNXJMSHQ4dQ==
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x64, 0x77, 0x64, 0x38, 0x69, 0x36, 0x78, 0x77, 0x7a, 0x76, 0x75, 0x39, 0x6a, 0x67, 0x79, 0x6e, 0x7a, 0x36, 0x6a, 0x34, 0x66, 0x38, 0x62, 0x76, 0x6e, 0x67, 0x70, 0x33, 0x7a, 0x6a, 0x74, 0x75, 0x64, 0x32, 0x32, 0x34, 0x66, 0x68, 0x61, 0x6b, 0x37, 0x39, 0x7a, 0x74, 0x6d, 0x7a, 0x69, 0x68, 0x61, 0x77, 0x78, 0x37, 0x66, 0x6b, 0x6d, 0x61, 0x67, 0x70, 0x38, 0x76, 0x6b, 0x6d, 0x6a, 0x00, 0x10, 0x4d, 0xc7, 0x66, 0x95, 0x74, 0xc5, 0x6e, 0x64, 0x61, 0x62, 0x33, 0x6e, 0x61, 0x79, 0x37, 0x38, 0x39, 0x7a, 0x72, 0x75, 0x36, 0x77, 0x75, 0x62, 0x38, 0x64, 0x66, 0x68, 0x71, 0x7a, 0x68, 0x32, 0x72, 0x74, 0x76, 0x79, 0x33, 0x67, 0x6a, 0x76, 0x70, 0x34, 0x32, 0x62, 0x72, 0x62, 0x36, 0x71, 0x76, 0x68, 0x6a, 0x62, 0x65, 0x62, 0x33, 0x51, 0x59, 0x79, 0x36, 0x73, 0x78, 0x6a, 0x4c, 0x35, 0x72, 0x4c, 0x48, 0x74, 0x38, 0x75}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeValidation
	}{
		{
			"no signatures",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: 3QYy6sxjL5rLHt8u
				[]byte{0xdd, 0x06, 0x32, 0xea, 0xcc, 0x63, 0x2f, 0x9a, 0xcb, 0x1e, 0xdf, 0x2e},
				4589118442271941,
			),
		},
		{
			"with signature",
			NewChangeValidation(
				changevalidationTarget,
				[]signature.PublicKey{*changevalidationNewKeys},
				// ValidationScript as b64: 3QYy6sxjL5rLHt8u
				[]byte{0xdd, 0x06, 0x32, 0xea, 0xcc, 0x63, 0x2f, 0x9a, 0xcb, 0x1e, 0xdf, 0x2e},
				4589118442271941,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestReleaseFromEndowment_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	releasefromendowmentDestination, err := address.Validate("ndars6igk8h46u8em75e4qibjisggik86ux45sineqxna5wr")
	require.NoError(t, err)

	// bmRhcnM2aWdrOGg0NnU4ZW03NWU0cWliamlzZ2dpazg2dXg0NXNpbmVxeG5hNXdyAAcEu3tNfcMAGoWBScbkgw==
	expect := []byte{0x6e, 0x64, 0x61, 0x72, 0x73, 0x36, 0x69, 0x67, 0x6b, 0x38, 0x68, 0x34, 0x36, 0x75, 0x38, 0x65, 0x6d, 0x37, 0x35, 0x65, 0x34, 0x71, 0x69, 0x62, 0x6a, 0x69, 0x73, 0x67, 0x67, 0x69, 0x6b, 0x38, 0x36, 0x75, 0x78, 0x34, 0x35, 0x73, 0x69, 0x6e, 0x65, 0x71, 0x78, 0x6e, 0x61, 0x35, 0x77, 0x72, 0x00, 0x07, 0x04, 0xbb, 0x7b, 0x4d, 0x7d, 0xc3, 0x00, 0x1a, 0x85, 0x81, 0x49, 0xc6, 0xe4, 0x83}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ReleaseFromEndowment
	}{
		{
			"no signatures",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
			),
		},
		{
			"with signature",
			NewReleaseFromEndowment(
				releasefromendowmentDestination,
				1975528111046083,
				7465139729523843,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestChangeSettlementPeriod_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	changesettlementperiodTarget, err := address.Validate("ndacibb5ffewduz68f72h6jmhtkeysbug8n8666t4u2btcq9")
	require.NoError(t, err)

	// MTFtMjVkdDE0aDM1bTQ5czE2NzMyMHVzAAbLOXkWAGFuZGFjaWJiNWZmZXdkdXo2OGY3Mmg2am1odGtleXNidWc4bjg2NjZ0NHUyYnRjcTk=
	expect := []byte{0x31, 0x31, 0x6d, 0x32, 0x35, 0x64, 0x74, 0x31, 0x34, 0x68, 0x33, 0x35, 0x6d, 0x34, 0x39, 0x73, 0x31, 0x36, 0x37, 0x33, 0x32, 0x30, 0x75, 0x73, 0x00, 0x06, 0xcb, 0x39, 0x79, 0x16, 0x00, 0x61, 0x6e, 0x64, 0x61, 0x63, 0x69, 0x62, 0x62, 0x35, 0x66, 0x66, 0x65, 0x77, 0x64, 0x75, 0x7a, 0x36, 0x38, 0x66, 0x37, 0x32, 0x68, 0x36, 0x6a, 0x6d, 0x68, 0x74, 0x6b, 0x65, 0x79, 0x73, 0x62, 0x75, 0x67, 0x38, 0x6e, 0x38, 0x36, 0x36, 0x36, 0x74, 0x34, 0x75, 0x32, 0x62, 0x74, 0x63, 0x71, 0x39}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ChangeSettlementPeriod
	}{
		{
			"no signatures",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
			),
		},
		{
			"with signature",
			NewChangeSettlementPeriod(
				changesettlementperiodTarget,
				30724549167320,
				1912297565323361,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestDelegate_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	delegateTarget, err := address.Validate("ndae4t9m5csiaitc4dwjkt8atkr3jygv7skkn5zgx9vb7g3x")
	require.NoError(t, err)
	delegateNode, err := address.Validate("ndajpd3airab8xbt67fv9db6zuhvsqrp2ghc5xmbcw79i53m")
	require.NoError(t, err)

	// bmRhanBkM2FpcmFiOHhidDY3ZnY5ZGI2enVodnNxcnAyZ2hjNXhtYmN3NzlpNTNtAAjSrCLE0zRuZGFlNHQ5bTVjc2lhaXRjNGR3amt0OGF0a3Izanlndjdza2tuNXpneDl2YjdnM3g=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x70, 0x64, 0x33, 0x61, 0x69, 0x72, 0x61, 0x62, 0x38, 0x78, 0x62, 0x74, 0x36, 0x37, 0x66, 0x76, 0x39, 0x64, 0x62, 0x36, 0x7a, 0x75, 0x68, 0x76, 0x73, 0x71, 0x72, 0x70, 0x32, 0x67, 0x68, 0x63, 0x35, 0x78, 0x6d, 0x62, 0x63, 0x77, 0x37, 0x39, 0x69, 0x35, 0x33, 0x6d, 0x00, 0x08, 0xd2, 0xac, 0x22, 0xc4, 0xd3, 0x34, 0x6e, 0x64, 0x61, 0x65, 0x34, 0x74, 0x39, 0x6d, 0x35, 0x63, 0x73, 0x69, 0x61, 0x69, 0x74, 0x63, 0x34, 0x64, 0x77, 0x6a, 0x6b, 0x74, 0x38, 0x61, 0x74, 0x6b, 0x72, 0x33, 0x6a, 0x79, 0x67, 0x76, 0x37, 0x73, 0x6b, 0x6b, 0x6e, 0x35, 0x7a, 0x67, 0x78, 0x39, 0x76, 0x62, 0x37, 0x67, 0x33, 0x78}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Delegate
	}{
		{
			"no signatures",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
			),
		},
		{
			"with signature",
			NewDelegate(
				delegateTarget,
				delegateNode,
				2483436573217588,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreditEAI_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	crediteaiNode, err := address.Validate("ndae7aevjg9s4pmvw6zdzmgp52pqgebxqdddf8jpyjwb3dff")
	require.NoError(t, err)

	// bmRhZTdhZXZqZzlzNHBtdnc2emR6bWdwNTJwcWdlYnhxZGRkZjhqcHlqd2IzZGZmAAl/SDkpCAM=
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x37, 0x61, 0x65, 0x76, 0x6a, 0x67, 0x39, 0x73, 0x34, 0x70, 0x6d, 0x76, 0x77, 0x36, 0x7a, 0x64, 0x7a, 0x6d, 0x67, 0x70, 0x35, 0x32, 0x70, 0x71, 0x67, 0x65, 0x62, 0x78, 0x71, 0x64, 0x64, 0x64, 0x66, 0x38, 0x6a, 0x70, 0x79, 0x6a, 0x77, 0x62, 0x33, 0x64, 0x66, 0x66, 0x00, 0x09, 0x7f, 0x48, 0x39, 0x29, 0x08, 0x03}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreditEAI
	}{
		{
			"no signatures",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
			),
		},
		{
			"with signature",
			NewCreditEAI(
				crediteaiNode,
				2673222963759107,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	lockTarget, err := address.Validate("ndadz7z3n9qyrmcg2rfqcad4hbqgjtbehhrv6wkrvj8hrndk")
	require.NoError(t, err)

	// M3kyMGR0Nmg0OG0yNzk0NDl1cwASfMbzh18TbmRhZHo3ejNuOXF5cm1jZzJyZnFjYWQ0aGJxZ2p0YmVoaHJ2NndrcnZqOGhybmRr
	expect := []byte{0x33, 0x79, 0x32, 0x30, 0x64, 0x74, 0x36, 0x68, 0x34, 0x38, 0x6d, 0x32, 0x37, 0x39, 0x34, 0x34, 0x39, 0x75, 0x73, 0x00, 0x12, 0x7c, 0xc6, 0xf3, 0x87, 0x5f, 0x13, 0x6e, 0x64, 0x61, 0x64, 0x7a, 0x37, 0x7a, 0x33, 0x6e, 0x39, 0x71, 0x79, 0x72, 0x6d, 0x63, 0x67, 0x32, 0x72, 0x66, 0x71, 0x63, 0x61, 0x64, 0x34, 0x68, 0x62, 0x71, 0x67, 0x6a, 0x74, 0x62, 0x65, 0x68, 0x68, 0x72, 0x76, 0x36, 0x77, 0x6b, 0x72, 0x76, 0x6a, 0x38, 0x68, 0x72, 0x6e, 0x64, 0x6b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Lock
	}{
		{
			"no signatures",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
			),
		},
		{
			"with signature",
			NewLock(
				lockTarget,
				96360480279449,
				5203743511895827,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNotify_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	notifyTarget, err := address.Validate("ndamjxu5mdjrg9igf6y7zqrir3k9rq4ja22jsbapwxpr4kfp")
	require.NoError(t, err)

	// AAVar5XpSWhuZGFtanh1NW1kanJnOWlnZjZ5N3pxcmlyM2s5cnE0amEyMmpzYmFwd3hwcjRrZnA=
	expect := []byte{0x00, 0x05, 0x5a, 0xaf, 0x95, 0xe9, 0x49, 0x68, 0x6e, 0x64, 0x61, 0x6d, 0x6a, 0x78, 0x75, 0x35, 0x6d, 0x64, 0x6a, 0x72, 0x67, 0x39, 0x69, 0x67, 0x66, 0x36, 0x79, 0x37, 0x7a, 0x71, 0x72, 0x69, 0x72, 0x33, 0x6b, 0x39, 0x72, 0x71, 0x34, 0x6a, 0x61, 0x32, 0x32, 0x6a, 0x73, 0x62, 0x61, 0x70, 0x77, 0x78, 0x70, 0x72, 0x34, 0x6b, 0x66, 0x70}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Notify
	}{
		{
			"no signatures",
			NewNotify(
				notifyTarget,
				1507085064423784,
			),
		},
		{
			"with signature",
			NewNotify(
				notifyTarget,
				1507085064423784,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetRewardsDestination_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setrewardsdestinationTarget, err := address.Validate("ndajv8gu6igv7s2j3vbmdbqp9nryfrmb79r9czssers72q9p")
	require.NoError(t, err)
	setrewardsdestinationDestination, err := address.Validate("ndajqewijrw5e96mdf2rd2hpn2mfkircb9euyt3xjep3vaey")
	require.NoError(t, err)

	// bmRhanFld2lqcnc1ZTk2bWRmMnJkMmhwbjJtZmtpcmNiOWV1eXQzeGplcDN2YWV5AAz/orpRehFuZGFqdjhndTZpZ3Y3czJqM3ZibWRicXA5bnJ5ZnJtYjc5cjljenNzZXJzNzJxOXA=
	expect := []byte{0x6e, 0x64, 0x61, 0x6a, 0x71, 0x65, 0x77, 0x69, 0x6a, 0x72, 0x77, 0x35, 0x65, 0x39, 0x36, 0x6d, 0x64, 0x66, 0x32, 0x72, 0x64, 0x32, 0x68, 0x70, 0x6e, 0x32, 0x6d, 0x66, 0x6b, 0x69, 0x72, 0x63, 0x62, 0x39, 0x65, 0x75, 0x79, 0x74, 0x33, 0x78, 0x6a, 0x65, 0x70, 0x33, 0x76, 0x61, 0x65, 0x79, 0x00, 0x0c, 0xff, 0xa2, 0xba, 0x51, 0x7a, 0x11, 0x6e, 0x64, 0x61, 0x6a, 0x76, 0x38, 0x67, 0x75, 0x36, 0x69, 0x67, 0x76, 0x37, 0x73, 0x32, 0x6a, 0x33, 0x76, 0x62, 0x6d, 0x64, 0x62, 0x71, 0x70, 0x39, 0x6e, 0x72, 0x79, 0x66, 0x72, 0x6d, 0x62, 0x37, 0x39, 0x72, 0x39, 0x63, 0x7a, 0x73, 0x73, 0x65, 0x72, 0x73, 0x37, 0x32, 0x71, 0x39, 0x70}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetRewardsDestination
	}{
		{
			"no signatures",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
			),
		},
		{
			"with signature",
			NewSetRewardsDestination(
				setrewardsdestinationTarget,
				setrewardsdestinationDestination,
				3658774096214545,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetValidation_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	setvalidationTarget, err := address.Validate("ndah3w2xxbnjb45mnhxa49acrrw7926kkq9yyhe2iviyjjjm")
	require.NoError(t, err)
	setvalidationOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0xa1, 0x73, 0x74, 0x14, 0x79, 0x30, 0xe8, 0x85, 0x9e, 0xcf, 0xca, 0xef, 0x01, 0xd7, 0x03, 0x62, 0x1a, 0x5f, 0xea, 0xab, 0xb1, 0xed, 0xb4, 0xea, 0xa2, 0xac, 0x9d, 0x44, 0x47, 0xe9, 0x96, 0xb4}, nil)
	require.NoError(t, err)
	setvalidationValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x82, 0xad, 0x38, 0xb1, 0x1c, 0x09, 0xf2, 0xfa, 0xa4, 0x49, 0xaa, 0xe2, 0x9a, 0x67, 0x68, 0x67, 0x64, 0xf9, 0x6c, 0x44, 0x82, 0xe2, 0x84, 0x8c, 0x94, 0xbf, 0xee, 0x67, 0x9b, 0x18, 0x71, 0x81}, nil)
	require.NoError(t, err)

	// bnB1YmE4amFkdGJiZWNzemc3YXdyZTJxdGJuODM5ZnE4YXF6YXB0Ynd6OWt4cTI4NXBoa3dreWo0dGNoN2dtbWlzaXd4M3FoZDJxdAAZX/GDxHNZbmRhaDN3Mnh4Ym5qYjQ1bW5oeGE0OWFjcnJ3NzkyNmtrcTl5eWhlMml2aXlqamptbnB1YmE4amFkdGJiZWNiazRxZnRkc2U5Zjh4ZWpneHFmZ3ZocGJ2eWo4bW5pdWJxZmJlbnV1OTg2MzY1ZGIyMmR5Y2NudnNqdzkycytEY2YzeTFDa21STWRxbXQ=
	expect := []byte{0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x73, 0x7a, 0x67, 0x37, 0x61, 0x77, 0x72, 0x65, 0x32, 0x71, 0x74, 0x62, 0x6e, 0x38, 0x33, 0x39, 0x66, 0x71, 0x38, 0x61, 0x71, 0x7a, 0x61, 0x70, 0x74, 0x62, 0x77, 0x7a, 0x39, 0x6b, 0x78, 0x71, 0x32, 0x38, 0x35, 0x70, 0x68, 0x6b, 0x77, 0x6b, 0x79, 0x6a, 0x34, 0x74, 0x63, 0x68, 0x37, 0x67, 0x6d, 0x6d, 0x69, 0x73, 0x69, 0x77, 0x78, 0x33, 0x71, 0x68, 0x64, 0x32, 0x71, 0x74, 0x00, 0x19, 0x5f, 0xf1, 0x83, 0xc4, 0x73, 0x59, 0x6e, 0x64, 0x61, 0x68, 0x33, 0x77, 0x32, 0x78, 0x78, 0x62, 0x6e, 0x6a, 0x62, 0x34, 0x35, 0x6d, 0x6e, 0x68, 0x78, 0x61, 0x34, 0x39, 0x61, 0x63, 0x72, 0x72, 0x77, 0x37, 0x39, 0x32, 0x36, 0x6b, 0x6b, 0x71, 0x39, 0x79, 0x79, 0x68, 0x65, 0x32, 0x69, 0x76, 0x69, 0x79, 0x6a, 0x6a, 0x6a, 0x6d, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x63, 0x62, 0x6b, 0x34, 0x71, 0x66, 0x74, 0x64, 0x73, 0x65, 0x39, 0x66, 0x38, 0x78, 0x65, 0x6a, 0x67, 0x78, 0x71, 0x66, 0x67, 0x76, 0x68, 0x70, 0x62, 0x76, 0x79, 0x6a, 0x38, 0x6d, 0x6e, 0x69, 0x75, 0x62, 0x71, 0x66, 0x62, 0x65, 0x6e, 0x75, 0x75, 0x39, 0x38, 0x36, 0x33, 0x36, 0x35, 0x64, 0x62, 0x32, 0x32, 0x64, 0x79, 0x63, 0x63, 0x6e, 0x76, 0x73, 0x6a, 0x77, 0x39, 0x32, 0x73, 0x2b, 0x44, 0x63, 0x66, 0x33, 0x79, 0x31, 0x43, 0x6b, 0x6d, 0x52, 0x4d, 0x64, 0x71, 0x6d, 0x74}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetValidation
	}{
		{
			"no signatures",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: +Dcf3y1CkmRMdqmt
				[]byte{0xf8, 0x37, 0x1f, 0xdf, 0x2d, 0x42, 0x92, 0x64, 0x4c, 0x76, 0xa9, 0xad},
				7142365320213337,
			),
		},
		{
			"with signature",
			NewSetValidation(
				setvalidationTarget,
				*setvalidationOwnership,
				[]signature.PublicKey{*setvalidationValidationKeys},
				// ValidationScript as b64: +Dcf3y1CkmRMdqmt
				[]byte{0xf8, 0x37, 0x1f, 0xdf, 0x2d, 0x42, 0x92, 0x64, 0x4c, 0x76, 0xa9, 0xad},
				7142365320213337,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestStake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	stakeTarget, err := address.Validate("ndabxb9utk4f99yixs32ved5c67pb2pjk5d9bswbm2nbwa5q")
	require.NoError(t, err)
	stakeStakedAccount, err := address.Validate("ndaifix6szu3f5aqcwyc85fkbjny8rw55dy2x48z8yy4j6zm")
	require.NoError(t, err)

	// ABYhWHyzrlBuZGFpZml4NnN6dTNmNWFxY3d5Yzg1Zmtiam55OHJ3NTVkeTJ4NDh6OHl5NGo2em1uZGFieGI5dXRrNGY5OXlpeHMzMnZlZDVjNjdwYjJwams1ZDlic3dibTJuYndhNXE=
	expect := []byte{0x00, 0x16, 0x21, 0x58, 0x7c, 0xb3, 0xae, 0x50, 0x6e, 0x64, 0x61, 0x69, 0x66, 0x69, 0x78, 0x36, 0x73, 0x7a, 0x75, 0x33, 0x66, 0x35, 0x61, 0x71, 0x63, 0x77, 0x79, 0x63, 0x38, 0x35, 0x66, 0x6b, 0x62, 0x6a, 0x6e, 0x79, 0x38, 0x72, 0x77, 0x35, 0x35, 0x64, 0x79, 0x32, 0x78, 0x34, 0x38, 0x7a, 0x38, 0x79, 0x79, 0x34, 0x6a, 0x36, 0x7a, 0x6d, 0x6e, 0x64, 0x61, 0x62, 0x78, 0x62, 0x39, 0x75, 0x74, 0x6b, 0x34, 0x66, 0x39, 0x39, 0x79, 0x69, 0x78, 0x73, 0x33, 0x32, 0x76, 0x65, 0x64, 0x35, 0x63, 0x36, 0x37, 0x70, 0x62, 0x32, 0x70, 0x6a, 0x6b, 0x35, 0x64, 0x39, 0x62, 0x73, 0x77, 0x62, 0x6d, 0x32, 0x6e, 0x62, 0x77, 0x61, 0x35, 0x71}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Stake
	}{
		{
			"no signatures",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
			),
		},
		{
			"with signature",
			NewStake(
				stakeTarget,
				stakeStakedAccount,
				6229113420623440,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRegisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	registernodeNode, err := address.Validate("ndamsvzt47b35xte5q3qsak367q3hz4dgur8zqs5gxzitz7d")
	require.NoError(t, err)

	// R0RpcXRTQUxpSWVMT3hPRG5kYW1zdnp0NDdiMzV4dGU1cTNxc2FrMzY3cTNoejRkZ3VyOHpxczVneHppdHo3ZHN0cmluZzogdGhjdCB1YXggeGtxZiBhZnBsc2ogYmN4b2VmZnIgABQD3vY6XHI=
	expect := []byte{0x47, 0x44, 0x69, 0x71, 0x74, 0x53, 0x41, 0x4c, 0x69, 0x49, 0x65, 0x4c, 0x4f, 0x78, 0x4f, 0x44, 0x6e, 0x64, 0x61, 0x6d, 0x73, 0x76, 0x7a, 0x74, 0x34, 0x37, 0x62, 0x33, 0x35, 0x78, 0x74, 0x65, 0x35, 0x71, 0x33, 0x71, 0x73, 0x61, 0x6b, 0x33, 0x36, 0x37, 0x71, 0x33, 0x68, 0x7a, 0x34, 0x64, 0x67, 0x75, 0x72, 0x38, 0x7a, 0x71, 0x73, 0x35, 0x67, 0x78, 0x7a, 0x69, 0x74, 0x7a, 0x37, 0x64, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x74, 0x68, 0x63, 0x74, 0x20, 0x75, 0x61, 0x78, 0x20, 0x78, 0x6b, 0x71, 0x66, 0x20, 0x61, 0x66, 0x70, 0x6c, 0x73, 0x6a, 0x20, 0x62, 0x63, 0x78, 0x6f, 0x65, 0x66, 0x66, 0x72, 0x20, 0x00, 0x14, 0x03, 0xde, 0xf6, 0x3a, 0x5c, 0x72}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RegisterNode
	}{
		{
			"no signatures",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: GDiqtSALiIeLOxOD
				[]byte{0x18, 0x38, 0xaa, 0xb5, 0x20, 0x0b, 0x88, 0x87, 0x8b, 0x3b, 0x13, 0x83},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
			),
		},
		{
			"with signature",
			NewRegisterNode(
				registernodeNode,
				// DistributionScript as b64: GDiqtSALiIeLOxOD
				[]byte{0x18, 0x38, 0xaa, 0xb5, 0x20, 0x0b, 0x88, 0x87, 0x8b, 0x3b, 0x13, 0x83},
				"string: thct uax xkqf afplsj bcxoeffr ",
				5633755682856050,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestNominateNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABs65BlHbVYAEQF/vImALQ==
	expect := []byte{0x00, 0x1b, 0x3a, 0xe4, 0x19, 0x47, 0x6d, 0x56, 0x00, 0x11, 0x01, 0x7f, 0xbc, 0x89, 0x80, 0x2d}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *NominateNodeReward
	}{
		{
			"no signatures",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
			),
		},
		{
			"with signature",
			NewNominateNodeReward(
				7664575722253654,
				4786722739683373,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestClaimNodeReward_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	claimnoderewardNode, err := address.Validate("ndaq7uyftpi6d5zv6duu57csqs3tdmpzv6giab2wqu9saira")
	require.NoError(t, err)

	// bmRhcTd1eWZ0cGk2ZDV6djZkdXU1N2NzcXMzdGRtcHp2NmdpYWIyd3F1OXNhaXJhAA+kWRaYdWc=
	expect := []byte{0x6e, 0x64, 0x61, 0x71, 0x37, 0x75, 0x79, 0x66, 0x74, 0x70, 0x69, 0x36, 0x64, 0x35, 0x7a, 0x76, 0x36, 0x64, 0x75, 0x75, 0x35, 0x37, 0x63, 0x73, 0x71, 0x73, 0x33, 0x74, 0x64, 0x6d, 0x70, 0x7a, 0x76, 0x36, 0x67, 0x69, 0x61, 0x62, 0x32, 0x77, 0x71, 0x75, 0x39, 0x73, 0x61, 0x69, 0x72, 0x61, 0x00, 0x0f, 0xa4, 0x59, 0x16, 0x98, 0x75, 0x67}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *ClaimNodeReward
	}{
		{
			"no signatures",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
			),
		},
		{
			"with signature",
			NewClaimNodeReward(
				claimnoderewardNode,
				4402827188794727,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestTransferAndLock_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	transferandlockSource, err := address.Validate("ndaiehqqt7umsab5tkmr2n4n7nh2mjn5r33nvmwp7c7azgb3")
	require.NoError(t, err)
	transferandlockDestination, err := address.Validate("ndae32xzdmrggzc89inqnr5q48ygh2728k5iyy5pgrz7tyni")
	require.NoError(t, err)

	// bmRhZTMyeHpkbXJnZ3pjODlpbnFucjVxNDh5Z2gyNzI4azVpeXk1cGdyejd0eW5pMXk5bTE1ZHQxMGg5bTUxczU2OTcyMXVzABWjFXJMfnYAGnH1Ile/EG5kYWllaHFxdDd1bXNhYjV0a21yMm40bjduaDJtam41cjMzbnZtd3A3YzdhemdiMw==
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x33, 0x32, 0x78, 0x7a, 0x64, 0x6d, 0x72, 0x67, 0x67, 0x7a, 0x63, 0x38, 0x39, 0x69, 0x6e, 0x71, 0x6e, 0x72, 0x35, 0x71, 0x34, 0x38, 0x79, 0x67, 0x68, 0x32, 0x37, 0x32, 0x38, 0x6b, 0x35, 0x69, 0x79, 0x79, 0x35, 0x70, 0x67, 0x72, 0x7a, 0x37, 0x74, 0x79, 0x6e, 0x69, 0x31, 0x79, 0x39, 0x6d, 0x31, 0x35, 0x64, 0x74, 0x31, 0x30, 0x68, 0x39, 0x6d, 0x35, 0x31, 0x73, 0x35, 0x36, 0x39, 0x37, 0x32, 0x31, 0x75, 0x73, 0x00, 0x15, 0xa3, 0x15, 0x72, 0x4c, 0x7e, 0x76, 0x00, 0x1a, 0x71, 0xf5, 0x22, 0x57, 0xbf, 0x10, 0x6e, 0x64, 0x61, 0x69, 0x65, 0x68, 0x71, 0x71, 0x74, 0x37, 0x75, 0x6d, 0x73, 0x61, 0x62, 0x35, 0x74, 0x6b, 0x6d, 0x72, 0x32, 0x6e, 0x34, 0x6e, 0x37, 0x6e, 0x68, 0x32, 0x6d, 0x6a, 0x6e, 0x35, 0x72, 0x33, 0x33, 0x6e, 0x76, 0x6d, 0x77, 0x70, 0x37, 0x63, 0x37, 0x61, 0x7a, 0x67, 0x62, 0x33}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *TransferAndLock
	}{
		{
			"no signatures",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
			),
		},
		{
			"with signature",
			NewTransferAndLock(
				transferandlockSource,
				transferandlockDestination,
				6090287018180214,
				56196591569721,
				7443647051579152,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCommandValidatorChange_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABlkl28mmotpSUZmWGhlYVVrNW8rZ2lwAAucqL6OnWk=
	expect := []byte{0x00, 0x19, 0x64, 0x97, 0x6f, 0x26, 0x9a, 0x8b, 0x69, 0x49, 0x46, 0x66, 0x58, 0x68, 0x65, 0x61, 0x55, 0x6b, 0x35, 0x6f, 0x2b, 0x67, 0x69, 0x70, 0x00, 0x0b, 0x9c, 0xa8, 0xbe, 0x8e, 0x9d, 0x69}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CommandValidatorChange
	}{
		{
			"no signatures",
			NewCommandValidatorChange(
				// PublicKey as b64: iIFfXheaUk5o+gip
				[]byte{0x88, 0x81, 0x5f, 0x5e, 0x17, 0x9a, 0x52, 0x4e, 0x68, 0xfa, 0x08, 0xa9},
				7147475985406603,
				3268473309273449,
			),
		},
		{
			"with signature",
			NewCommandValidatorChange(
				// PublicKey as b64: iIFfXheaUk5o+gip
				[]byte{0x88, 0x81, 0x5f, 0x5e, 0x17, 0x9a, 0x52, 0x4e, 0x68, 0xfa, 0x08, 0xa9},
				7147475985406603,
				3268473309273449,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnregisterNode_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unregisternodeNode, err := address.Validate("ndakev68zycpqb5gj5xvxxbmeam2u87rjfg8vrvijwygt73e")
	require.NoError(t, err)

	// bmRha2V2Njh6eWNwcWI1Z2o1eHZ4eGJtZWFtMnU4N3JqZmc4dnJ2aWp3eWd0NzNlAAJeEXA5N5c=
	expect := []byte{0x6e, 0x64, 0x61, 0x6b, 0x65, 0x76, 0x36, 0x38, 0x7a, 0x79, 0x63, 0x70, 0x71, 0x62, 0x35, 0x67, 0x6a, 0x35, 0x78, 0x76, 0x78, 0x78, 0x62, 0x6d, 0x65, 0x61, 0x6d, 0x32, 0x75, 0x38, 0x37, 0x72, 0x6a, 0x66, 0x67, 0x38, 0x76, 0x72, 0x76, 0x69, 0x6a, 0x77, 0x79, 0x67, 0x74, 0x37, 0x33, 0x65, 0x00, 0x02, 0x5e, 0x11, 0x70, 0x39, 0x37, 0x97}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *UnregisterNode
	}{
		{
			"no signatures",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
			),
		},
		{
			"with signature",
			NewUnregisterNode(
				unregisternodeNode,
				666378943674263,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestUnstake_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	unstakeTarget, err := address.Validate("ndancuj9aigvsgif442xvepnf6neure6xgthiwfa7wu4tb2p")
	require.NoError(t, err)

	// ABP6yCVBcNBuZGFuY3VqOWFpZ3ZzZ2lmNDQyeHZlcG5mNm5ldXJlNnhndGhpd2ZhN3d1NHRiMnA=
	expect := []byte{0x00, 0x13, 0xfa, 0xc8, 0x25, 0x41, 0x70, 0xd0, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x75, 0x6a, 0x39, 0x61, 0x69, 0x67, 0x76, 0x73, 0x67, 0x69, 0x66, 0x34, 0x34, 0x32, 0x78, 0x76, 0x65, 0x70, 0x6e, 0x66, 0x36, 0x6e, 0x65, 0x75, 0x72, 0x65, 0x36, 0x78, 0x67, 0x74, 0x68, 0x69, 0x77, 0x66, 0x61, 0x37, 0x77, 0x75, 0x34, 0x74, 0x62, 0x32, 0x70}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Unstake
	}{
		{
			"no signatures",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
			),
		},
		{
			"with signature",
			NewUnstake(
				unstakeTarget,
				5623762082951376,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestIssue_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// AA2S+t7X5soACfdnZnjooQ==
	expect := []byte{0x00, 0x0d, 0x92, 0xfa, 0xde, 0xd7, 0xe6, 0xca, 0x00, 0x09, 0xf7, 0x67, 0x66, 0x78, 0xe8, 0xa1}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *Issue
	}{
		{
			"no signatures",
			NewIssue(
				3820780875409098,
				2805298263287969,
			),
		},
		{
			"with signature",
			NewIssue(
				3820780875409098,
				2805298263287969,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestCreateChildAccount_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)
	createchildaccountTarget, err := address.Validate("ndanxfz86jm554i2pkbdrdjsdnfht76c5kp9q4qwkrdzeac7")
	require.NoError(t, err)
	createchildaccountChild, err := address.Validate("ndae8mhg7er2j4kjcaruxj2tdfhtxauqficgifpt55qqr58u")
	require.NoError(t, err)
	createchildaccountChildOwnership, err := signature.RawPublicKey(signature.Ed25519, []byte{0x4a, 0xa2, 0xc1, 0xae, 0x97, 0xd5, 0xbb, 0xb7, 0xaf, 0xef, 0x63, 0x03, 0xb6, 0x93, 0xf8, 0xf9, 0xcd, 0x77, 0x9c, 0xba, 0x5d, 0xf4, 0x3e, 0x1d, 0xd3, 0x22, 0x33, 0x00, 0x34, 0x72, 0x12, 0xf4}, nil)
	require.NoError(t, err)
	createchildaccountChildSignature, err := signature.RawSignature(signature.Ed25519, []byte{0x28, 0x30, 0x7f, 0x19, 0xa0, 0x25, 0x34, 0xc5, 0x55, 0x4d, 0x79, 0x92, 0xef, 0x94, 0xd4, 0xfe, 0xab, 0x61, 0x9a, 0x65, 0x74, 0x73, 0xca, 0x54, 0x6e, 0x26, 0xbd, 0xe7, 0xae, 0xaf, 0x85, 0x48, 0xad, 0x01, 0x4f, 0x6a, 0xe0, 0x95, 0xd0, 0xa7, 0xbb, 0x7e, 0x0b, 0xfc, 0x71, 0x08, 0x5f, 0x36, 0x43, 0x96, 0x23, 0x93, 0x18, 0xe6, 0xea, 0x5b, 0xd1, 0x65, 0x87, 0x16, 0x2c, 0xda, 0x68, 0xc2})
	require.NoError(t, err)
	createchildaccountChildValidationKeys, err := signature.RawPublicKey(signature.Ed25519, []byte{0x4a, 0xc3, 0x39, 0x69, 0xaf, 0xce, 0xe8, 0x5e, 0x18, 0xb0, 0x94, 0xef, 0x6b, 0xd5, 0x85, 0x06, 0x12, 0x89, 0xd1, 0x98, 0x06, 0xdd, 0xdb, 0x0b, 0x47, 0x37, 0x4c, 0xe1, 0x74, 0x60, 0xcb, 0x33}, nil)
	require.NoError(t, err)

	// bmRhZThtaGc3ZXIyajRramNhcnV4ajJ0ZGZodHhhdXFmaWNnaWZwdDU1cXFyNTh1bnB1YmE4amFkdGJiZWJma2ZzcHF1OWs1enA3cjc3dHNocHd2OWQ2NjQ3NjZ6anE5aXJzNzRudGRnYWJ3cWlqcmltdTh2dTY1cjJ1dDF5NG02ZHQ1aDIxbTQ2czM0MzczNHVzYTRqYWR0Y2FmYTJoOGdwYWV3NG5reGtwcmdqcTlmZ3c5NHh5ZGd2ZnF0MzZ3eGRxZTQ4OHJteHJzeGVrNGFrcnBtc2ptd2ZoenA5YXo5ZHRiYnJ2bnM2eWVxanR0M3prbXJpeW1iMnlmdnBndHN1eWJoanVoN2dobnB1YmE4amFkdGJiZWJmbmdxbWp4OWhxc3pzMnlja3E4NDh4c3dkYmZjcXR2YWRwNXkybWk2NXczMm13bmRmdmhnczN0cHh5NGppOVlkZTcvSXVScUxZMU44aXIAB4MDVqpvQW5kYW54Zno4NmptNTU0aTJwa2JkcmRqc2RuZmh0NzZjNWtwOXE0cXdrcmR6ZWFjNw==
	expect := []byte{0x6e, 0x64, 0x61, 0x65, 0x38, 0x6d, 0x68, 0x67, 0x37, 0x65, 0x72, 0x32, 0x6a, 0x34, 0x6b, 0x6a, 0x63, 0x61, 0x72, 0x75, 0x78, 0x6a, 0x32, 0x74, 0x64, 0x66, 0x68, 0x74, 0x78, 0x61, 0x75, 0x71, 0x66, 0x69, 0x63, 0x67, 0x69, 0x66, 0x70, 0x74, 0x35, 0x35, 0x71, 0x71, 0x72, 0x35, 0x38, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x66, 0x6b, 0x66, 0x73, 0x70, 0x71, 0x75, 0x39, 0x6b, 0x35, 0x7a, 0x70, 0x37, 0x72, 0x37, 0x37, 0x74, 0x73, 0x68, 0x70, 0x77, 0x76, 0x39, 0x64, 0x36, 0x36, 0x34, 0x37, 0x36, 0x36, 0x7a, 0x6a, 0x71, 0x39, 0x69, 0x72, 0x73, 0x37, 0x34, 0x6e, 0x74, 0x64, 0x67, 0x61, 0x62, 0x77, 0x71, 0x69, 0x6a, 0x72, 0x69, 0x6d, 0x75, 0x38, 0x76, 0x75, 0x36, 0x35, 0x72, 0x32, 0x75, 0x74, 0x31, 0x79, 0x34, 0x6d, 0x36, 0x64, 0x74, 0x35, 0x68, 0x32, 0x31, 0x6d, 0x34, 0x36, 0x73, 0x33, 0x34, 0x33, 0x37, 0x33, 0x34, 0x75, 0x73, 0x61, 0x34, 0x6a, 0x61, 0x64, 0x74, 0x63, 0x61, 0x66, 0x61, 0x32, 0x68, 0x38, 0x67, 0x70, 0x61, 0x65, 0x77, 0x34, 0x6e, 0x6b, 0x78, 0x6b, 0x70, 0x72, 0x67, 0x6a, 0x71, 0x39, 0x66, 0x67, 0x77, 0x39, 0x34, 0x78, 0x79, 0x64, 0x67, 0x76, 0x66, 0x71, 0x74, 0x33, 0x36, 0x77, 0x78, 0x64, 0x71, 0x65, 0x34, 0x38, 0x38, 0x72, 0x6d, 0x78, 0x72, 0x73, 0x78, 0x65, 0x6b, 0x34, 0x61, 0x6b, 0x72, 0x70, 0x6d, 0x73, 0x6a, 0x6d, 0x77, 0x66, 0x68, 0x7a, 0x70, 0x39, 0x61, 0x7a, 0x39, 0x64, 0x74, 0x62, 0x62, 0x72, 0x76, 0x6e, 0x73, 0x36, 0x79, 0x65, 0x71, 0x6a, 0x74, 0x74, 0x33, 0x7a, 0x6b, 0x6d, 0x72, 0x69, 0x79, 0x6d, 0x62, 0x32, 0x79, 0x66, 0x76, 0x70, 0x67, 0x74, 0x73, 0x75, 0x79, 0x62, 0x68, 0x6a, 0x75, 0x68, 0x37, 0x67, 0x68, 0x6e, 0x70, 0x75, 0x62, 0x61, 0x38, 0x6a, 0x61, 0x64, 0x74, 0x62, 0x62, 0x65, 0x62, 0x66, 0x6e, 0x67, 0x71, 0x6d, 0x6a, 0x78, 0x39, 0x68, 0x71, 0x73, 0x7a, 0x73, 0x32, 0x79, 0x63, 0x6b, 0x71, 0x38, 0x34, 0x38, 0x78, 0x73, 0x77, 0x64, 0x62, 0x66, 0x63, 0x71, 0x74, 0x76, 0x61, 0x64, 0x70, 0x35, 0x79, 0x32, 0x6d, 0x69, 0x36, 0x35, 0x77, 0x33, 0x32, 0x6d, 0x77, 0x6e, 0x64, 0x66, 0x76, 0x68, 0x67, 0x73, 0x33, 0x74, 0x70, 0x78, 0x79, 0x34, 0x6a, 0x69, 0x39, 0x59, 0x64, 0x65, 0x37, 0x2f, 0x49, 0x75, 0x52, 0x71, 0x4c, 0x59, 0x31, 0x4e, 0x38, 0x69, 0x72, 0x00, 0x07, 0x83, 0x03, 0x56, 0xaa, 0x6f, 0x41, 0x6e, 0x64, 0x61, 0x6e, 0x78, 0x66, 0x7a, 0x38, 0x36, 0x6a, 0x6d, 0x35, 0x35, 0x34, 0x69, 0x32, 0x70, 0x6b, 0x62, 0x64, 0x72, 0x64, 0x6a, 0x73, 0x64, 0x6e, 0x66, 0x68, 0x74, 0x37, 0x36, 0x63, 0x35, 0x6b, 0x70, 0x39, 0x71, 0x34, 0x71, 0x77, 0x6b, 0x72, 0x64, 0x7a, 0x65, 0x61, 0x63, 0x37}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *CreateChildAccount
	}{
		{
			"no signatures",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: Yde7/IuRqLY1N8ir
				[]byte{0x61, 0xd7, 0xbb, 0xfc, 0x8b, 0x91, 0xa8, 0xb6, 0x35, 0x37, 0xc8, 0xab},
				2114375199125313,
			),
		},
		{
			"with signature",
			NewCreateChildAccount(
				createchildaccountTarget,
				createchildaccountChild,
				*createchildaccountChildOwnership,
				*createchildaccountChildSignature,
				42441706343734,
				[]signature.PublicKey{*createchildaccountChildValidationKeys},
				// ChildValidationScript as b64: Yde7/IuRqLY1N8ir
				[]byte{0x61, 0xd7, 0xbb, 0xfc, 0x8b, 0x91, 0xa8, 0xb6, 0x35, 0x37, 0xc8, 0xab},
				2114375199125313,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestRecordPrice_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// ABToHt5FZKQACPi9Ppmz3A==
	expect := []byte{0x00, 0x14, 0xe8, 0x1e, 0xde, 0x45, 0x64, 0xa4, 0x00, 0x08, 0xf8, 0xbd, 0x3e, 0x99, 0xb3, 0xdc}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *RecordPrice
	}{
		{
			"no signatures",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
			),
		},
		{
			"with signature",
			NewRecordPrice(
				5884718809965732,
				2525291496453084,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
func TestSetSysvar_SignableBytes(t *testing.T) {
	_, private, err := signature.Generate(signature.Ed25519, nil)
	require.NoError(t, err)

	// c3RyaW5nOiBhcGUgcWxlcXloeXogeXdqanBqenAgcmYgZ21vIGFmZXQgc2J6cmp4IAAO73omlHmPUDZHUDJmUm1WWld4S3ZlSw==
	expect := []byte{0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x61, 0x70, 0x65, 0x20, 0x71, 0x6c, 0x65, 0x71, 0x79, 0x68, 0x79, 0x7a, 0x20, 0x79, 0x77, 0x6a, 0x6a, 0x70, 0x6a, 0x7a, 0x70, 0x20, 0x72, 0x66, 0x20, 0x67, 0x6d, 0x6f, 0x20, 0x61, 0x66, 0x65, 0x74, 0x20, 0x73, 0x62, 0x7a, 0x72, 0x6a, 0x78, 0x20, 0x00, 0x0e, 0xef, 0x7a, 0x26, 0x94, 0x79, 0x8f, 0x50, 0x36, 0x47, 0x50, 0x32, 0x66, 0x52, 0x6d, 0x56, 0x5a, 0x57, 0x78, 0x4b, 0x76, 0x65, 0x4b}
	require.NotEmpty(t, expect, "test not properly set up")

	// note the "want" field for both of these tests is identical
	tests := []struct {
		name string
		tx   *SetSysvar
	}{
		{
			"no signatures",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: P6GP2fRmVZWxKveK
				[]byte{0x3f, 0xa1, 0x8f, 0xd9, 0xf4, 0x66, 0x55, 0x95, 0xb1, 0x2a, 0xf7, 0x8a},
				4203957586262415,
			),
		},
		{
			"with signature",
			NewSetSysvar(
				"string: ape qleqyhyz ywjjpjzp rf gmo afet sbzrjx ",
				// Value as b64: P6GP2fRmVZWxKveK
				[]byte{0x3f, 0xa1, 0x8f, 0xd9, 0xf4, 0x66, 0x55, 0x95, 0xb1, 0x2a, 0xf7, 0x8a},
				4203957586262415,
				private,
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, expect, tt.tx.SignableBytes())
		})
	}
}
